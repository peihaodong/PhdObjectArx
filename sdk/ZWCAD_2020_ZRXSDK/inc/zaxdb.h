

#pragma warning( disable: 4049 )

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif

#ifndef ___zxdb_h__
#define ___zxdb_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

#ifndef __IZcadObject_FWD_DEFINED__
#define __IZcadObject_FWD_DEFINED__
typedef interface IZcadObject IZcadObject;
#endif

#ifndef __IZcadDictionary_FWD_DEFINED__
#define __IZcadDictionary_FWD_DEFINED__
typedef interface IZcadDictionary IZcadDictionary;
#endif

#ifndef __IZcadEntity_FWD_DEFINED__
#define __IZcadEntity_FWD_DEFINED__
typedef interface IZcadEntity IZcadEntity;
#endif

#ifndef __IZcadBlock_FWD_DEFINED__
#define __IZcadBlock_FWD_DEFINED__
typedef interface IZcadBlock IZcadBlock;
#endif

#ifndef __IZcadDatabase_FWD_DEFINED__
#define __IZcadDatabase_FWD_DEFINED__
typedef interface IZcadDatabase IZcadDatabase;
#endif

#ifndef __IZcadSectionTypeSettings_FWD_DEFINED__
#define __IZcadSectionTypeSettings_FWD_DEFINED__
typedef interface IZcadSectionTypeSettings IZcadSectionTypeSettings;
#endif

#ifndef __IZcadSectionTypeSettings2_FWD_DEFINED__
#define __IZcadSectionTypeSettings2_FWD_DEFINED__
typedef interface IZcadSectionTypeSettings2 IZcadSectionTypeSettings2;
#endif

#ifndef __IZcadHyperlink_FWD_DEFINED__
#define __IZcadHyperlink_FWD_DEFINED__
typedef interface IZcadHyperlink IZcadHyperlink;
#endif

#ifndef __ZcadHyperlink_FWD_DEFINED__
#define __ZcadHyperlink_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadHyperlink ZcadHyperlink;
#else
typedef struct ZcadHyperlink ZcadHyperlink;
#endif

#endif

#ifndef __IZcadDynamicBlockReferenceProperty_FWD_DEFINED__
#define __IZcadDynamicBlockReferenceProperty_FWD_DEFINED__
typedef interface IZcadDynamicBlockReferenceProperty IZcadDynamicBlockReferenceProperty;
#endif

#ifndef __ZcadDynamicBlockReferenceProperty_FWD_DEFINED__
#define __ZcadDynamicBlockReferenceProperty_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadDynamicBlockReferenceProperty ZcadDynamicBlockReferenceProperty;
#else
typedef struct ZcadDynamicBlockReferenceProperty ZcadDynamicBlockReferenceProperty;
#endif

#endif

#ifndef __IZcadZcCmColor_FWD_DEFINED__
#define __IZcadZcCmColor_FWD_DEFINED__
typedef interface IZcadZcCmColor IZcadZcCmColor;
#endif

#ifndef __ZcadZcCmColor_FWD_DEFINED__
#define __ZcadZcCmColor_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadZcCmColor ZcadZcCmColor;
#else
typedef struct ZcadZcCmColor ZcadZcCmColor;
#endif

#endif

#ifndef __IZcadObjectEvents_FWD_DEFINED__
#define __IZcadObjectEvents_FWD_DEFINED__
typedef interface IZcadObjectEvents IZcadObjectEvents;
#endif

#ifndef __ZcadObject_FWD_DEFINED__
#define __ZcadObject_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadObject ZcadObject;
#else
typedef struct ZcadObject ZcadObject;
#endif

#endif

#ifndef __IZcadXRecord_FWD_DEFINED__
#define __IZcadXRecord_FWD_DEFINED__
typedef interface IZcadXRecord IZcadXRecord;
#endif

#ifndef __ZcadXRecord_FWD_DEFINED__
#define __ZcadXRecord_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadXRecord ZcadXRecord;
#else
typedef struct ZcadXRecord ZcadXRecord;
#endif

#endif

#ifndef __IZcadSortentsTable_FWD_DEFINED__
#define __IZcadSortentsTable_FWD_DEFINED__
typedef interface IZcadSortentsTable IZcadSortentsTable;
#endif

#ifndef __ZcadSortentsTable_FWD_DEFINED__
#define __ZcadSortentsTable_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadSortentsTable ZcadSortentsTable;
#else
typedef struct ZcadSortentsTable ZcadSortentsTable;
#endif

#endif

#ifndef __IZcadDimStyle_FWD_DEFINED__
#define __IZcadDimStyle_FWD_DEFINED__
typedef interface IZcadDimStyle IZcadDimStyle;
#endif

#ifndef __ZcadDimStyle_FWD_DEFINED__
#define __ZcadDimStyle_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadDimStyle ZcadDimStyle;
#else
typedef struct ZcadDimStyle ZcadDimStyle;
#endif

#endif

#ifndef __IZcadLayer_FWD_DEFINED__
#define __IZcadLayer_FWD_DEFINED__
typedef interface IZcadLayer IZcadLayer;
#endif

#ifndef __ZcadLayer_FWD_DEFINED__
#define __ZcadLayer_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadLayer ZcadLayer;
#else
typedef struct ZcadLayer ZcadLayer;
#endif

#endif

#ifndef __IZcadLineType_FWD_DEFINED__
#define __IZcadLineType_FWD_DEFINED__
typedef interface IZcadLineType IZcadLineType;
#endif

#ifndef __ZcadLineType_FWD_DEFINED__
#define __ZcadLineType_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadLineType ZcadLineType;
#else
typedef struct ZcadLineType ZcadLineType;
#endif

#endif

#ifndef __IZcadMaterial_FWD_DEFINED__
#define __IZcadMaterial_FWD_DEFINED__
typedef interface IZcadMaterial IZcadMaterial;
#endif

#ifndef __ZcadMaterial_FWD_DEFINED__
#define __ZcadMaterial_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadMaterial ZcadMaterial;
#else
typedef struct ZcadMaterial ZcadMaterial;
#endif

#endif

#ifndef __IZcadRegisteredApplication_FWD_DEFINED__
#define __IZcadRegisteredApplication_FWD_DEFINED__
typedef interface IZcadRegisteredApplication IZcadRegisteredApplication;
#endif

#ifndef __ZcadRegisteredApplication_FWD_DEFINED__
#define __ZcadRegisteredApplication_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadRegisteredApplication ZcadRegisteredApplication;
#else
typedef struct ZcadRegisteredApplication ZcadRegisteredApplication;
#endif

#endif

#ifndef __IZcadTextStyle_FWD_DEFINED__
#define __IZcadTextStyle_FWD_DEFINED__
typedef interface IZcadTextStyle IZcadTextStyle;
#endif

#ifndef __ZcadTextStyle_FWD_DEFINED__
#define __ZcadTextStyle_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadTextStyle ZcadTextStyle;
#else
typedef struct ZcadTextStyle ZcadTextStyle;
#endif

#endif

#ifndef __IZcadUCS_FWD_DEFINED__
#define __IZcadUCS_FWD_DEFINED__
typedef interface IZcadUCS IZcadUCS;
#endif

#ifndef __ZcadUCS_FWD_DEFINED__
#define __ZcadUCS_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadUCS ZcadUCS;
#else
typedef struct ZcadUCS ZcadUCS;
#endif

#endif

#ifndef __IZcadView_FWD_DEFINED__
#define __IZcadView_FWD_DEFINED__
typedef interface IZcadView IZcadView;
#endif

#ifndef __ZcadView_FWD_DEFINED__
#define __ZcadView_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadView ZcadView;
#else
typedef struct ZcadView ZcadView;
#endif

#endif

#ifndef __IZcadViewport_FWD_DEFINED__
#define __IZcadViewport_FWD_DEFINED__
typedef interface IZcadViewport IZcadViewport;
#endif

#ifndef __ZcadViewport_FWD_DEFINED__
#define __ZcadViewport_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadViewport ZcadViewport;
#else
typedef struct ZcadViewport ZcadViewport;
#endif

#endif

#ifndef __IZcadGroup_FWD_DEFINED__
#define __IZcadGroup_FWD_DEFINED__
typedef interface IZcadGroup IZcadGroup;
#endif

#ifndef __ZcadGroup_FWD_DEFINED__
#define __ZcadGroup_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadGroup ZcadGroup;
#else
typedef struct ZcadGroup ZcadGroup;
#endif

#endif

#ifndef __IZcadPlotConfiguration_FWD_DEFINED__
#define __IZcadPlotConfiguration_FWD_DEFINED__
typedef interface IZcadPlotConfiguration IZcadPlotConfiguration;
#endif

#ifndef __ZcadPlotConfiguration_FWD_DEFINED__
#define __ZcadPlotConfiguration_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadPlotConfiguration ZcadPlotConfiguration;
#else
typedef struct ZcadPlotConfiguration ZcadPlotConfiguration;
#endif

#endif

#ifndef __IZcadLayout_FWD_DEFINED__
#define __IZcadLayout_FWD_DEFINED__
typedef interface IZcadLayout IZcadLayout;
#endif

#ifndef __ZcadLayout_FWD_DEFINED__
#define __ZcadLayout_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadLayout ZcadLayout;
#else
typedef struct ZcadLayout ZcadLayout;
#endif

#endif

#ifndef __IZcadIdPair_FWD_DEFINED__
#define __IZcadIdPair_FWD_DEFINED__
typedef interface IZcadIdPair IZcadIdPair;
#endif

#ifndef __ZcadIdPair_FWD_DEFINED__
#define __ZcadIdPair_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadIdPair ZcadIdPair;
#else
typedef struct ZcadIdPair ZcadIdPair;
#endif

#endif

#ifndef __IZcadTableStyle_FWD_DEFINED__
#define __IZcadTableStyle_FWD_DEFINED__
typedef interface IZcadTableStyle IZcadTableStyle;
#endif

#ifndef __ZcadTableStyle_FWD_DEFINED__
#define __ZcadTableStyle_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadTableStyle ZcadTableStyle;
#else
typedef struct ZcadTableStyle ZcadTableStyle;
#endif

#endif

#ifndef __IZcadSectionSettings_FWD_DEFINED__
#define __IZcadSectionSettings_FWD_DEFINED__
typedef interface IZcadSectionSettings IZcadSectionSettings;
#endif

#ifndef __ZcadSectionSettings_FWD_DEFINED__
#define __ZcadSectionSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadSectionSettings ZcadSectionSettings;
#else
typedef struct ZcadSectionSettings ZcadSectionSettings;
#endif

#endif

#ifndef __ZcadSectionTypeSettings_FWD_DEFINED__
#define __ZcadSectionTypeSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadSectionTypeSettings ZcadSectionTypeSettings;
#else
typedef struct ZcadSectionTypeSettings ZcadSectionTypeSettings;
#endif

#endif

#ifndef __IZcadMLeaderStyle_FWD_DEFINED__
#define __IZcadMLeaderStyle_FWD_DEFINED__
typedef interface IZcadMLeaderStyle IZcadMLeaderStyle;
#endif

#ifndef __ZcadMLeaderStyle_FWD_DEFINED__
#define __ZcadMLeaderStyle_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadMLeaderStyle ZcadMLeaderStyle;
#else
typedef struct ZcadMLeaderStyle ZcadMLeaderStyle;
#endif

#endif

#ifndef __IZcadHyperlinks_FWD_DEFINED__
#define __IZcadHyperlinks_FWD_DEFINED__
typedef interface IZcadHyperlinks IZcadHyperlinks;
#endif

#ifndef __ZcadHyperlinks_FWD_DEFINED__
#define __ZcadHyperlinks_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadHyperlinks ZcadHyperlinks;
#else
typedef struct ZcadHyperlinks ZcadHyperlinks;
#endif

#endif

#ifndef __ZcadDictionary_FWD_DEFINED__
#define __ZcadDictionary_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadDictionary ZcadDictionary;
#else
typedef struct ZcadDictionary ZcadDictionary;
#endif

#endif

#ifndef __IZcadLayers_FWD_DEFINED__
#define __IZcadLayers_FWD_DEFINED__
typedef interface IZcadLayers IZcadLayers;
#endif

#ifndef __ZcadLayers_FWD_DEFINED__
#define __ZcadLayers_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadLayers ZcadLayers;
#else
typedef struct ZcadLayers ZcadLayers;
#endif

#endif

#ifndef __IZcadDimStyles_FWD_DEFINED__
#define __IZcadDimStyles_FWD_DEFINED__
typedef interface IZcadDimStyles IZcadDimStyles;
#endif

#ifndef __ZcadDimStyles_FWD_DEFINED__
#define __ZcadDimStyles_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadDimStyles ZcadDimStyles;
#else
typedef struct ZcadDimStyles ZcadDimStyles;
#endif

#endif

#ifndef __IZcadDictionaries_FWD_DEFINED__
#define __IZcadDictionaries_FWD_DEFINED__
typedef interface IZcadDictionaries IZcadDictionaries;
#endif

#ifndef __ZcadDictionaries_FWD_DEFINED__
#define __ZcadDictionaries_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadDictionaries ZcadDictionaries;
#else
typedef struct ZcadDictionaries ZcadDictionaries;
#endif

#endif

#ifndef __IZcadLineTypes_FWD_DEFINED__
#define __IZcadLineTypes_FWD_DEFINED__
typedef interface IZcadLineTypes IZcadLineTypes;
#endif

#ifndef __ZcadLineTypes_FWD_DEFINED__
#define __ZcadLineTypes_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadLineTypes ZcadLineTypes;
#else
typedef struct ZcadLineTypes ZcadLineTypes;
#endif

#endif

#ifndef __IZcadMaterials_FWD_DEFINED__
#define __IZcadMaterials_FWD_DEFINED__
typedef interface IZcadMaterials IZcadMaterials;
#endif

#ifndef __ZcadMaterials_FWD_DEFINED__
#define __ZcadMaterials_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadMaterials ZcadMaterials;
#else
typedef struct ZcadMaterials ZcadMaterials;
#endif

#endif

#ifndef __IZcadTextStyles_FWD_DEFINED__
#define __IZcadTextStyles_FWD_DEFINED__
typedef interface IZcadTextStyles IZcadTextStyles;
#endif

#ifndef __ZcadTextStyles_FWD_DEFINED__
#define __ZcadTextStyles_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadTextStyles ZcadTextStyles;
#else
typedef struct ZcadTextStyles ZcadTextStyles;
#endif

#endif

#ifndef __IZcadUCSs_FWD_DEFINED__
#define __IZcadUCSs_FWD_DEFINED__
typedef interface IZcadUCSs IZcadUCSs;
#endif

#ifndef __ZcadUCSs_FWD_DEFINED__
#define __ZcadUCSs_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadUCSs ZcadUCSs;
#else
typedef struct ZcadUCSs ZcadUCSs;
#endif

#endif

#ifndef __IZcadRegisteredApplications_FWD_DEFINED__
#define __IZcadRegisteredApplications_FWD_DEFINED__
typedef interface IZcadRegisteredApplications IZcadRegisteredApplications;
#endif

#ifndef __ZcadRegisteredApplications_FWD_DEFINED__
#define __ZcadRegisteredApplications_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadRegisteredApplications ZcadRegisteredApplications;
#else
typedef struct ZcadRegisteredApplications ZcadRegisteredApplications;
#endif

#endif

#ifndef __IZcadViews_FWD_DEFINED__
#define __IZcadViews_FWD_DEFINED__
typedef interface IZcadViews IZcadViews;
#endif

#ifndef __ZcadViews_FWD_DEFINED__
#define __ZcadViews_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadViews ZcadViews;
#else
typedef struct ZcadViews ZcadViews;
#endif

#endif

#ifndef __IZcadViewports_FWD_DEFINED__
#define __IZcadViewports_FWD_DEFINED__
typedef interface IZcadViewports IZcadViewports;
#endif

#ifndef __ZcadViewports_FWD_DEFINED__
#define __ZcadViewports_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadViewports ZcadViewports;
#else
typedef struct ZcadViewports ZcadViewports;
#endif

#endif

#ifndef __IZcadGroups_FWD_DEFINED__
#define __IZcadGroups_FWD_DEFINED__
typedef interface IZcadGroups IZcadGroups;
#endif

#ifndef __ZcadGroups_FWD_DEFINED__
#define __ZcadGroups_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadGroups ZcadGroups;
#else
typedef struct ZcadGroups ZcadGroups;
#endif

#endif

#ifndef __IZcadBlocks_FWD_DEFINED__
#define __IZcadBlocks_FWD_DEFINED__
typedef interface IZcadBlocks IZcadBlocks;
#endif

#ifndef __ZcadBlocks_FWD_DEFINED__
#define __ZcadBlocks_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadBlocks ZcadBlocks;
#else
typedef struct ZcadBlocks ZcadBlocks;
#endif

#endif

#ifndef __IZcadLayouts_FWD_DEFINED__
#define __IZcadLayouts_FWD_DEFINED__
typedef interface IZcadLayouts IZcadLayouts;
#endif

#ifndef __ZcadLayouts_FWD_DEFINED__
#define __ZcadLayouts_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadLayouts ZcadLayouts;
#else
typedef struct ZcadLayouts ZcadLayouts;
#endif

#endif

#ifndef __IZcadPlotConfigurations_FWD_DEFINED__
#define __IZcadPlotConfigurations_FWD_DEFINED__
typedef interface IZcadPlotConfigurations IZcadPlotConfigurations;
#endif

#ifndef __ZcadPlotConfigurations_FWD_DEFINED__
#define __ZcadPlotConfigurations_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadPlotConfigurations ZcadPlotConfigurations;
#else
typedef struct ZcadPlotConfigurations ZcadPlotConfigurations;
#endif

#endif

#ifndef __ZcadEntity_FWD_DEFINED__
#define __ZcadEntity_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadEntity ZcadEntity;
#else
typedef struct ZcadEntity ZcadEntity;
#endif

#endif

#ifndef __IZcadShadowDisplay_FWD_DEFINED__
#define __IZcadShadowDisplay_FWD_DEFINED__
typedef interface IZcadShadowDisplay IZcadShadowDisplay;
#endif

#ifndef __IZcadRasterImage_FWD_DEFINED__
#define __IZcadRasterImage_FWD_DEFINED__
typedef interface IZcadRasterImage IZcadRasterImage;
#endif

#ifndef __ZcadRasterImage_FWD_DEFINED__
#define __ZcadRasterImage_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadRasterImage ZcadRasterImage;
#else
typedef struct ZcadRasterImage ZcadRasterImage;
#endif

#endif

#ifndef __IZcad3DFace_FWD_DEFINED__
#define __IZcad3DFace_FWD_DEFINED__
typedef interface IZcad3DFace IZcad3DFace;
#endif

#ifndef __Zcad3DFace_FWD_DEFINED__
#define __Zcad3DFace_FWD_DEFINED__

#ifdef __cplusplus
typedef class Zcad3DFace Zcad3DFace;
#else
typedef struct Zcad3DFace Zcad3DFace;
#endif

#endif

#ifndef __IZcad3DPolyline_FWD_DEFINED__
#define __IZcad3DPolyline_FWD_DEFINED__
typedef interface IZcad3DPolyline IZcad3DPolyline;
#endif

#ifndef __Zcad3DPolyline_FWD_DEFINED__
#define __Zcad3DPolyline_FWD_DEFINED__

#ifdef __cplusplus
typedef class Zcad3DPolyline Zcad3DPolyline;
#else
typedef struct Zcad3DPolyline Zcad3DPolyline;
#endif

#endif

#ifndef __IZcadRegion_FWD_DEFINED__
#define __IZcadRegion_FWD_DEFINED__
typedef interface IZcadRegion IZcadRegion;
#endif

#ifndef __ZcadRegion_FWD_DEFINED__
#define __ZcadRegion_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadRegion ZcadRegion;
#else
typedef struct ZcadRegion ZcadRegion;
#endif

#endif

#ifndef __IZcad3DSolid_FWD_DEFINED__
#define __IZcad3DSolid_FWD_DEFINED__
typedef interface IZcad3DSolid IZcad3DSolid;
#endif

#ifndef __Zcad3DSolid_FWD_DEFINED__
#define __Zcad3DSolid_FWD_DEFINED__

#ifdef __cplusplus
typedef class Zcad3DSolid Zcad3DSolid;
#else
typedef struct Zcad3DSolid Zcad3DSolid;
#endif

#endif

#ifndef __IZcadArc_FWD_DEFINED__
#define __IZcadArc_FWD_DEFINED__
typedef interface IZcadArc IZcadArc;
#endif

#ifndef __ZcadArc_FWD_DEFINED__
#define __ZcadArc_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadArc ZcadArc;
#else
typedef struct ZcadArc ZcadArc;
#endif

#endif

#ifndef __IZcadAttribute_FWD_DEFINED__
#define __IZcadAttribute_FWD_DEFINED__
typedef interface IZcadAttribute IZcadAttribute;
#endif

#ifndef __ZcadAttribute_FWD_DEFINED__
#define __ZcadAttribute_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadAttribute ZcadAttribute;
#else
typedef struct ZcadAttribute ZcadAttribute;
#endif

#endif

#ifndef __IZcadAttributeReference_FWD_DEFINED__
#define __IZcadAttributeReference_FWD_DEFINED__
typedef interface IZcadAttributeReference IZcadAttributeReference;
#endif

#ifndef __ZcadAttributeReference_FWD_DEFINED__
#define __ZcadAttributeReference_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadAttributeReference ZcadAttributeReference;
#else
typedef struct ZcadAttributeReference ZcadAttributeReference;
#endif

#endif

#ifndef __IZcadBlockReference_FWD_DEFINED__
#define __IZcadBlockReference_FWD_DEFINED__
typedef interface IZcadBlockReference IZcadBlockReference;
#endif

#ifndef __ZcadBlockReference_FWD_DEFINED__
#define __ZcadBlockReference_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadBlockReference ZcadBlockReference;
#else
typedef struct ZcadBlockReference ZcadBlockReference;
#endif

#endif

#ifndef __IZcadCircle_FWD_DEFINED__
#define __IZcadCircle_FWD_DEFINED__
typedef interface IZcadCircle IZcadCircle;
#endif

#ifndef __ZcadCircle_FWD_DEFINED__
#define __ZcadCircle_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadCircle ZcadCircle;
#else
typedef struct ZcadCircle ZcadCircle;
#endif

#endif

#ifndef __IZcadEllipse_FWD_DEFINED__
#define __IZcadEllipse_FWD_DEFINED__
typedef interface IZcadEllipse IZcadEllipse;
#endif

#ifndef __ZcadEllipse_FWD_DEFINED__
#define __ZcadEllipse_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadEllipse ZcadEllipse;
#else
typedef struct ZcadEllipse ZcadEllipse;
#endif

#endif

#ifndef __IZcadHatch_FWD_DEFINED__
#define __IZcadHatch_FWD_DEFINED__
typedef interface IZcadHatch IZcadHatch;
#endif

#ifndef __ZcadHatch_FWD_DEFINED__
#define __ZcadHatch_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadHatch ZcadHatch;
#else
typedef struct ZcadHatch ZcadHatch;
#endif

#endif

#ifndef __IZcadLeader_FWD_DEFINED__
#define __IZcadLeader_FWD_DEFINED__
typedef interface IZcadLeader IZcadLeader;
#endif

#ifndef __ZcadLeader_FWD_DEFINED__
#define __ZcadLeader_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadLeader ZcadLeader;
#else
typedef struct ZcadLeader ZcadLeader;
#endif

#endif

#ifndef __IZcadSubEntity_FWD_DEFINED__
#define __IZcadSubEntity_FWD_DEFINED__
typedef interface IZcadSubEntity IZcadSubEntity;
#endif

#ifndef __IZcadMLeader_FWD_DEFINED__
#define __IZcadMLeader_FWD_DEFINED__
typedef interface IZcadMLeader IZcadMLeader;
#endif

#ifndef __ZcadMLeader_FWD_DEFINED__
#define __ZcadMLeader_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadMLeader ZcadMLeader;
#else
typedef struct ZcadMLeader ZcadMLeader;
#endif

#endif

#ifndef __IZcadLWPolyline_FWD_DEFINED__
#define __IZcadLWPolyline_FWD_DEFINED__
typedef interface IZcadLWPolyline IZcadLWPolyline;
#endif

#ifndef __ZcadLWPolyline_FWD_DEFINED__
#define __ZcadLWPolyline_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadLWPolyline ZcadLWPolyline;
#else
typedef struct ZcadLWPolyline ZcadLWPolyline;
#endif

#endif

#ifndef __IZcadLine_FWD_DEFINED__
#define __IZcadLine_FWD_DEFINED__
typedef interface IZcadLine IZcadLine;
#endif

#ifndef __ZcadLine_FWD_DEFINED__
#define __ZcadLine_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadLine ZcadLine;
#else
typedef struct ZcadLine ZcadLine;
#endif

#endif

#ifndef __IZcadMText_FWD_DEFINED__
#define __IZcadMText_FWD_DEFINED__
typedef interface IZcadMText IZcadMText;
#endif

#ifndef __ZcadMText_FWD_DEFINED__
#define __ZcadMText_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadMText ZcadMText;
#else
typedef struct ZcadMText ZcadMText;
#endif

#endif

#ifndef __IZcadPoint_FWD_DEFINED__
#define __IZcadPoint_FWD_DEFINED__
typedef interface IZcadPoint IZcadPoint;
#endif

#ifndef __ZcadPoint_FWD_DEFINED__
#define __ZcadPoint_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadPoint ZcadPoint;
#else
typedef struct ZcadPoint ZcadPoint;
#endif

#endif

#ifndef __IZcadPolyline_FWD_DEFINED__
#define __IZcadPolyline_FWD_DEFINED__
typedef interface IZcadPolyline IZcadPolyline;
#endif

#ifndef __ZcadPolyline_FWD_DEFINED__
#define __ZcadPolyline_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadPolyline ZcadPolyline;
#else
typedef struct ZcadPolyline ZcadPolyline;
#endif

#endif

#ifndef __IZcadPolygonMesh_FWD_DEFINED__
#define __IZcadPolygonMesh_FWD_DEFINED__
typedef interface IZcadPolygonMesh IZcadPolygonMesh;
#endif

#ifndef __ZcadPolygonMesh_FWD_DEFINED__
#define __ZcadPolygonMesh_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadPolygonMesh ZcadPolygonMesh;
#else
typedef struct ZcadPolygonMesh ZcadPolygonMesh;
#endif

#endif

#ifndef __IZcadRay_FWD_DEFINED__
#define __IZcadRay_FWD_DEFINED__
typedef interface IZcadRay IZcadRay;
#endif

#ifndef __ZcadRay_FWD_DEFINED__
#define __ZcadRay_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadRay ZcadRay;
#else
typedef struct ZcadRay ZcadRay;
#endif

#endif

#ifndef __IZcadShape_FWD_DEFINED__
#define __IZcadShape_FWD_DEFINED__
typedef interface IZcadShape IZcadShape;
#endif

#ifndef __ZcadShape_FWD_DEFINED__
#define __ZcadShape_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadShape ZcadShape;
#else
typedef struct ZcadShape ZcadShape;
#endif

#endif

#ifndef __IZcadSolid_FWD_DEFINED__
#define __IZcadSolid_FWD_DEFINED__
typedef interface IZcadSolid IZcadSolid;
#endif

#ifndef __ZcadSolid_FWD_DEFINED__
#define __ZcadSolid_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadSolid ZcadSolid;
#else
typedef struct ZcadSolid ZcadSolid;
#endif

#endif

#ifndef __IZcadSpline_FWD_DEFINED__
#define __IZcadSpline_FWD_DEFINED__
typedef interface IZcadSpline IZcadSpline;
#endif

#ifndef __ZcadSpline_FWD_DEFINED__
#define __ZcadSpline_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadSpline ZcadSpline;
#else
typedef struct ZcadSpline ZcadSpline;
#endif

#endif

#ifndef __IZcadText_FWD_DEFINED__
#define __IZcadText_FWD_DEFINED__
typedef interface IZcadText IZcadText;
#endif

#ifndef __ZcadText_FWD_DEFINED__
#define __ZcadText_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadText ZcadText;
#else
typedef struct ZcadText ZcadText;
#endif

#endif

#ifndef __IZcadTolerance_FWD_DEFINED__
#define __IZcadTolerance_FWD_DEFINED__
typedef interface IZcadTolerance IZcadTolerance;
#endif

#ifndef __ZcadTolerance_FWD_DEFINED__
#define __ZcadTolerance_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadTolerance ZcadTolerance;
#else
typedef struct ZcadTolerance ZcadTolerance;
#endif

#endif

#ifndef __IZcadTrace_FWD_DEFINED__
#define __IZcadTrace_FWD_DEFINED__
typedef interface IZcadTrace IZcadTrace;
#endif

#ifndef __ZcadTrace_FWD_DEFINED__
#define __ZcadTrace_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadTrace ZcadTrace;
#else
typedef struct ZcadTrace ZcadTrace;
#endif

#endif

#ifndef __IZcadXline_FWD_DEFINED__
#define __IZcadXline_FWD_DEFINED__
typedef interface IZcadXline IZcadXline;
#endif

#ifndef __ZcadXline_FWD_DEFINED__
#define __ZcadXline_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadXline ZcadXline;
#else
typedef struct ZcadXline ZcadXline;
#endif

#endif

#ifndef __IZcadPViewport_FWD_DEFINED__
#define __IZcadPViewport_FWD_DEFINED__
typedef interface IZcadPViewport IZcadPViewport;
#endif

#ifndef __ZcadPViewport_FWD_DEFINED__
#define __ZcadPViewport_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadPViewport ZcadPViewport;
#else
typedef struct ZcadPViewport ZcadPViewport;
#endif

#endif

#ifndef __IZcadMInsertBlock_FWD_DEFINED__
#define __IZcadMInsertBlock_FWD_DEFINED__
typedef interface IZcadMInsertBlock IZcadMInsertBlock;
#endif

#ifndef __ZcadMInsertBlock_FWD_DEFINED__
#define __ZcadMInsertBlock_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadMInsertBlock ZcadMInsertBlock;
#else
typedef struct ZcadMInsertBlock ZcadMInsertBlock;
#endif

#endif

#ifndef __IZcadPolyfaceMesh_FWD_DEFINED__
#define __IZcadPolyfaceMesh_FWD_DEFINED__
typedef interface IZcadPolyfaceMesh IZcadPolyfaceMesh;
#endif

#ifndef __ZcadPolyfaceMesh_FWD_DEFINED__
#define __ZcadPolyfaceMesh_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadPolyfaceMesh ZcadPolyfaceMesh;
#else
typedef struct ZcadPolyfaceMesh ZcadPolyfaceMesh;
#endif

#endif

#ifndef __IZcadMLine_FWD_DEFINED__
#define __IZcadMLine_FWD_DEFINED__
typedef interface IZcadMLine IZcadMLine;
#endif

#ifndef __ZcadMLine_FWD_DEFINED__
#define __ZcadMLine_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadMLine ZcadMLine;
#else
typedef struct ZcadMLine ZcadMLine;
#endif

#endif

#ifndef __IZcadExternalReference_FWD_DEFINED__
#define __IZcadExternalReference_FWD_DEFINED__
typedef interface IZcadExternalReference IZcadExternalReference;
#endif

#ifndef __ZcadExternalReference_FWD_DEFINED__
#define __ZcadExternalReference_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadExternalReference ZcadExternalReference;
#else
typedef struct ZcadExternalReference ZcadExternalReference;
#endif

#endif

#ifndef __IZcadTable_FWD_DEFINED__
#define __IZcadTable_FWD_DEFINED__
typedef interface IZcadTable IZcadTable;
#endif

#ifndef __ZcadTable_FWD_DEFINED__
#define __ZcadTable_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadTable ZcadTable;
#else
typedef struct ZcadTable ZcadTable;
#endif

#endif

#ifndef __IZcadOle_FWD_DEFINED__
#define __IZcadOle_FWD_DEFINED__
typedef interface IZcadOle IZcadOle;
#endif

#ifndef __ZcadOle_FWD_DEFINED__
#define __ZcadOle_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadOle ZcadOle;
#else
typedef struct ZcadOle ZcadOle;
#endif

#endif

#ifndef __IZcadHelix_FWD_DEFINED__
#define __IZcadHelix_FWD_DEFINED__
typedef interface IZcadHelix IZcadHelix;
#endif

#ifndef __ZcadHelix_FWD_DEFINED__
#define __ZcadHelix_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadHelix ZcadHelix;
#else
typedef struct ZcadHelix ZcadHelix;
#endif

#endif

#ifndef __IZcadSurface_FWD_DEFINED__
#define __IZcadSurface_FWD_DEFINED__
typedef interface IZcadSurface IZcadSurface;
#endif

#ifndef __ZcadSurface_FWD_DEFINED__
#define __ZcadSurface_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadSurface ZcadSurface;
#else
typedef struct ZcadSurface ZcadSurface;
#endif

#endif

#ifndef __IZcadPlaneSurface_FWD_DEFINED__
#define __IZcadPlaneSurface_FWD_DEFINED__
typedef interface IZcadPlaneSurface IZcadPlaneSurface;
#endif

#ifndef __ZcadPlaneSurface_FWD_DEFINED__
#define __ZcadPlaneSurface_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadPlaneSurface ZcadPlaneSurface;
#else
typedef struct ZcadPlaneSurface ZcadPlaneSurface;
#endif

#endif

#ifndef __IZcadExtrudedSurface_FWD_DEFINED__
#define __IZcadExtrudedSurface_FWD_DEFINED__
typedef interface IZcadExtrudedSurface IZcadExtrudedSurface;
#endif

#ifndef __ZcadExtrudedSurface_FWD_DEFINED__
#define __ZcadExtrudedSurface_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadExtrudedSurface ZcadExtrudedSurface;
#else
typedef struct ZcadExtrudedSurface ZcadExtrudedSurface;
#endif

#endif

#ifndef __IZcadRevolvedSurface_FWD_DEFINED__
#define __IZcadRevolvedSurface_FWD_DEFINED__
typedef interface IZcadRevolvedSurface IZcadRevolvedSurface;
#endif

#ifndef __ZcadRevolvedSurface_FWD_DEFINED__
#define __ZcadRevolvedSurface_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadRevolvedSurface ZcadRevolvedSurface;
#else
typedef struct ZcadRevolvedSurface ZcadRevolvedSurface;
#endif

#endif

#ifndef __IZcadSweptSurface_FWD_DEFINED__
#define __IZcadSweptSurface_FWD_DEFINED__
typedef interface IZcadSweptSurface IZcadSweptSurface;
#endif

#ifndef __ZcadSweptSurface_FWD_DEFINED__
#define __ZcadSweptSurface_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadSweptSurface ZcadSweptSurface;
#else
typedef struct ZcadSweptSurface ZcadSweptSurface;
#endif

#endif

#ifndef __IZcadLoftedSurface_FWD_DEFINED__
#define __IZcadLoftedSurface_FWD_DEFINED__
typedef interface IZcadLoftedSurface IZcadLoftedSurface;
#endif

#ifndef __ZcadLoftedSurface_FWD_DEFINED__
#define __ZcadLoftedSurface_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadLoftedSurface ZcadLoftedSurface;
#else
typedef struct ZcadLoftedSurface ZcadLoftedSurface;
#endif

#endif

#ifndef __IZcadSection_FWD_DEFINED__
#define __IZcadSection_FWD_DEFINED__
typedef interface IZcadSection IZcadSection;
#endif

#ifndef __ZcadSection_FWD_DEFINED__
#define __ZcadSection_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadSection ZcadSection;
#else
typedef struct ZcadSection ZcadSection;
#endif

#endif

#ifndef __IZcadSectionManager_FWD_DEFINED__
#define __IZcadSectionManager_FWD_DEFINED__
typedef interface IZcadSectionManager IZcadSectionManager;
#endif

#ifndef __ZcadSectionManager_FWD_DEFINED__
#define __ZcadSectionManager_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadSectionManager ZcadSectionManager;
#else
typedef struct ZcadSectionManager ZcadSectionManager;
#endif

#endif

#ifndef __IZcadUnderlay_FWD_DEFINED__
#define __IZcadUnderlay_FWD_DEFINED__
typedef interface IZcadUnderlay IZcadUnderlay;
#endif



#ifndef __ZcadDwfUnderlay_FWD_DEFINED__
#define __ZcadDwfUnderlay_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadDwfUnderlay ZcadDwfUnderlay;
#else
typedef struct ZcadDwfUnderlay ZcadDwfUnderlay;
#endif

#endif

#ifndef __ZcadDgnUnderlay_FWD_DEFINED__
#define __ZcadDgnUnderlay_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadDgnUnderlay ZcadDgnUnderlay;
#else
typedef struct ZcadDgnUnderlay ZcadDgnUnderlay;
#endif

#endif

#ifndef __ZcadPdfUnderlay_FWD_DEFINED__
#define __ZcadPdfUnderlay_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadPdfUnderlay ZcadPdfUnderlay;
#else
typedef struct ZcadPdfUnderlay ZcadPdfUnderlay;
#endif

#endif


#ifndef __ZcadSubEntity_FWD_DEFINED__
#define __ZcadSubEntity_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadSubEntity ZcadSubEntity;
#else
typedef struct ZcadSubEntity ZcadSubEntity;
#endif

#endif

#ifndef __IZcadSubEntSolidFace_FWD_DEFINED__
#define __IZcadSubEntSolidFace_FWD_DEFINED__
typedef interface IZcadSubEntSolidFace IZcadSubEntSolidFace;
#endif

#ifndef __ZcadSubEntSolidFace_FWD_DEFINED__
#define __ZcadSubEntSolidFace_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadSubEntSolidFace ZcadSubEntSolidFace;
#else
typedef struct ZcadSubEntSolidFace ZcadSubEntSolidFace;
#endif

#endif

#ifndef __IZcadSubEntSolidEdge_FWD_DEFINED__
#define __IZcadSubEntSolidEdge_FWD_DEFINED__
typedef interface IZcadSubEntSolidEdge IZcadSubEntSolidEdge;
#endif

#ifndef __ZcadSubEntSolidEdge_FWD_DEFINED__
#define __ZcadSubEntSolidEdge_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadSubEntSolidEdge ZcadSubEntSolidEdge;
#else
typedef struct ZcadSubEntSolidEdge ZcadSubEntSolidEdge;
#endif

#endif

#ifndef __IZcadSubEntSolidVertex_FWD_DEFINED__
#define __IZcadSubEntSolidVertex_FWD_DEFINED__
typedef interface IZcadSubEntSolidVertex IZcadSubEntSolidVertex;
#endif

#ifndef __ZcadSubEntSolidVertex_FWD_DEFINED__
#define __ZcadSubEntSolidVertex_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadSubEntSolidVertex ZcadSubEntSolidVertex;
#else
typedef struct ZcadSubEntSolidVertex ZcadSubEntSolidVertex;
#endif

#endif

#ifndef __IZcadSubEntSolidNode_FWD_DEFINED__
#define __IZcadSubEntSolidNode_FWD_DEFINED__
typedef interface IZcadSubEntSolidNode IZcadSubEntSolidNode;
#endif

#ifndef __ZcadSubEntSolidNode_FWD_DEFINED__
#define __ZcadSubEntSolidNode_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadSubEntSolidNode ZcadSubEntSolidNode;
#else
typedef struct ZcadSubEntSolidNode ZcadSubEntSolidNode;
#endif

#endif


#ifndef __IZcadSubDMesh_FWD_DEFINED__
#define __IZcadSubDMesh_FWD_DEFINED__
typedef interface IZcadSubDMesh IZcadSubDMesh;
#endif 


#ifndef __ZcadSubDMesh_FWD_DEFINED__
#define __ZcadSubDMesh_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadSubDMesh ZcadSubDMesh;
#else
typedef struct ZcadSubDMesh ZcadSubDMesh;
#endif

#endif

#ifndef __IZcadDimension_FWD_DEFINED__
#define __IZcadDimension_FWD_DEFINED__
typedef interface IZcadDimension IZcadDimension;
#endif

#ifndef __ZcadDimension_FWD_DEFINED__
#define __ZcadDimension_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadDimension ZcadDimension;
#else
typedef struct ZcadDimension ZcadDimension;
#endif

#endif

#ifndef __IZcadDimAligned_FWD_DEFINED__
#define __IZcadDimAligned_FWD_DEFINED__
typedef interface IZcadDimAligned IZcadDimAligned;
#endif

#ifndef __ZcadDimAligned_FWD_DEFINED__
#define __ZcadDimAligned_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadDimAligned ZcadDimAligned;
#else
typedef struct ZcadDimAligned ZcadDimAligned;
#endif

#endif

#ifndef __IZcadDimAngular_FWD_DEFINED__
#define __IZcadDimAngular_FWD_DEFINED__
typedef interface IZcadDimAngular IZcadDimAngular;
#endif

#ifndef __ZcadDimAngular_FWD_DEFINED__
#define __ZcadDimAngular_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadDimAngular ZcadDimAngular;
#else
typedef struct ZcadDimAngular ZcadDimAngular;
#endif

#endif

#ifndef __IZcadDimDiametric_FWD_DEFINED__
#define __IZcadDimDiametric_FWD_DEFINED__
typedef interface IZcadDimDiametric IZcadDimDiametric;
#endif

#ifndef __ZcadDimDiametric_FWD_DEFINED__
#define __ZcadDimDiametric_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadDimDiametric ZcadDimDiametric;
#else
typedef struct ZcadDimDiametric ZcadDimDiametric;
#endif

#endif

#ifndef __IZcadDimOrdinate_FWD_DEFINED__
#define __IZcadDimOrdinate_FWD_DEFINED__
typedef interface IZcadDimOrdinate IZcadDimOrdinate;
#endif

#ifndef __ZcadDimOrdinate_FWD_DEFINED__
#define __ZcadDimOrdinate_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadDimOrdinate ZcadDimOrdinate;
#else
typedef struct ZcadDimOrdinate ZcadDimOrdinate;
#endif

#endif

#ifndef __IZcadDimRadial_FWD_DEFINED__
#define __IZcadDimRadial_FWD_DEFINED__
typedef interface IZcadDimRadial IZcadDimRadial;
#endif

#ifndef __ZcadDimRadial_FWD_DEFINED__
#define __ZcadDimRadial_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadDimRadial ZcadDimRadial;
#else
typedef struct ZcadDimRadial ZcadDimRadial;
#endif

#endif

#ifndef __IZcadDimRotated_FWD_DEFINED__
#define __IZcadDimRotated_FWD_DEFINED__
typedef interface IZcadDimRotated IZcadDimRotated;
#endif

#ifndef __ZcadDimRotated_FWD_DEFINED__
#define __ZcadDimRotated_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadDimRotated ZcadDimRotated;
#else
typedef struct ZcadDimRotated ZcadDimRotated;
#endif

#endif

#ifndef __IZcadDim3PointAngular_FWD_DEFINED__
#define __IZcadDim3PointAngular_FWD_DEFINED__
typedef interface IZcadDim3PointAngular IZcadDim3PointAngular;
#endif

#ifndef __ZcadDim3PointAngular_FWD_DEFINED__
#define __ZcadDim3PointAngular_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadDim3PointAngular ZcadDim3PointAngular;
#else
typedef struct ZcadDim3PointAngular ZcadDim3PointAngular;
#endif

#endif

#ifndef __IZcadDimArcLength_FWD_DEFINED__
#define __IZcadDimArcLength_FWD_DEFINED__
typedef interface IZcadDimArcLength IZcadDimArcLength;
#endif

#ifndef __ZcadDimArcLength_FWD_DEFINED__
#define __ZcadDimArcLength_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadDimArcLength ZcadDimArcLength;
#else
typedef struct ZcadDimArcLength ZcadDimArcLength;
#endif

#endif

#ifndef __IZcadDimRadialLarge_FWD_DEFINED__
#define __IZcadDimRadialLarge_FWD_DEFINED__
typedef interface IZcadDimRadialLarge IZcadDimRadialLarge;
#endif

#ifndef __ZcadDimRadialLarge_FWD_DEFINED__
#define __ZcadDimRadialLarge_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadDimRadialLarge ZcadDimRadialLarge;
#else
typedef struct ZcadDimRadialLarge ZcadDimRadialLarge;
#endif

#endif

#ifndef __ZcadBlock_FWD_DEFINED__
#define __ZcadBlock_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadBlock ZcadBlock;
#else
typedef struct ZcadBlock ZcadBlock;
#endif

#endif

#ifndef __IZcadModelSpace_FWD_DEFINED__
#define __IZcadModelSpace_FWD_DEFINED__
typedef interface IZcadModelSpace IZcadModelSpace;
#endif

#ifndef __ZcadModelSpace_FWD_DEFINED__
#define __ZcadModelSpace_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadModelSpace ZcadModelSpace;
#else
typedef struct ZcadModelSpace ZcadModelSpace;
#endif

#endif

#ifndef __IZcadPaperSpace_FWD_DEFINED__
#define __IZcadPaperSpace_FWD_DEFINED__
typedef interface IZcadPaperSpace IZcadPaperSpace;
#endif

#ifndef __ZcadPaperSpace_FWD_DEFINED__
#define __ZcadPaperSpace_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadPaperSpace ZcadPaperSpace;
#else
typedef struct ZcadPaperSpace ZcadPaperSpace;
#endif

#endif

#ifndef __IZcadFileDependency_FWD_DEFINED__
#define __IZcadFileDependency_FWD_DEFINED__
typedef interface IZcadFileDependency IZcadFileDependency;
#endif

#ifndef __ZcadFileDependency_FWD_DEFINED__
#define __ZcadFileDependency_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadFileDependency ZcadFileDependency;
#else
typedef struct ZcadFileDependency ZcadFileDependency;
#endif

#endif

#ifndef __IZcadFileDependencies_FWD_DEFINED__
#define __IZcadFileDependencies_FWD_DEFINED__
typedef interface IZcadFileDependencies IZcadFileDependencies;
#endif

#ifndef __ZcadFileDependencies_FWD_DEFINED__
#define __ZcadFileDependencies_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadFileDependencies ZcadFileDependencies;
#else
typedef struct ZcadFileDependencies ZcadFileDependencies;
#endif

#endif

#ifndef __IZcadSummaryInfo_FWD_DEFINED__
#define __IZcadSummaryInfo_FWD_DEFINED__
typedef interface IZcadSummaryInfo IZcadSummaryInfo;
#endif

#ifndef __ZcadSummaryInfo_FWD_DEFINED__
#define __ZcadSummaryInfo_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadSummaryInfo ZcadSummaryInfo;
#else
typedef struct ZcadSummaryInfo ZcadSummaryInfo;
#endif

#endif

#ifndef __IZcadDatabasePreferences_FWD_DEFINED__
#define __IZcadDatabasePreferences_FWD_DEFINED__
typedef interface IZcadDatabasePreferences IZcadDatabasePreferences;
#endif

#ifndef __ZcadDatabasePreferences_FWD_DEFINED__
#define __ZcadDatabasePreferences_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadDatabasePreferences ZcadDatabasePreferences;
#else
typedef struct ZcadDatabasePreferences ZcadDatabasePreferences;
#endif

#endif

#ifndef __ZcadDatabase_FWD_DEFINED__
#define __ZcadDatabase_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadDatabase ZcadDatabase;
#else
typedef struct ZcadDatabase ZcadDatabase;
#endif

#endif

#ifndef __IZcadSecurityParams_FWD_DEFINED__
#define __IZcadSecurityParams_FWD_DEFINED__
typedef interface IZcadSecurityParams IZcadSecurityParams;
#endif

#ifndef __ZcadSecurityParams_FWD_DEFINED__
#define __ZcadSecurityParams_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadSecurityParams ZcadSecurityParams;
#else
typedef struct ZcadSecurityParams ZcadSecurityParams;
#endif

#endif

#ifndef __IZcadLayerStateManager_FWD_DEFINED__
#define __IZcadLayerStateManager_FWD_DEFINED__
typedef interface IZcadLayerStateManager IZcadLayerStateManager;
#endif

#ifndef __ZcadLayerStateManager_FWD_DEFINED__
#define __ZcadLayerStateManager_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZcadLayerStateManager ZcadLayerStateManager;
#else
typedef struct ZcadLayerStateManager ZcadLayerStateManager;
#endif

#endif

#ifndef __IZxDbDocumentEvents_FWD_DEFINED__
#define __IZxDbDocumentEvents_FWD_DEFINED__
typedef interface IZxDbDocumentEvents IZxDbDocumentEvents;
#endif

#ifndef __IZxDbDocument_FWD_DEFINED__
#define __IZxDbDocument_FWD_DEFINED__
typedef interface IZxDbDocument IZxDbDocument;
#endif

#ifndef __ZxDbDocument_FWD_DEFINED__
#define __ZxDbDocument_FWD_DEFINED__

#ifdef __cplusplus
typedef class ZxDbDocument ZxDbDocument;
#else
typedef struct ZxDbDocument ZxDbDocument;
#endif

#endif

#ifdef __cplusplus
extern "C"{
#endif

#ifndef __ZXDBLib_LIBRARY_DEFINED__
#define __ZXDBLib_LIBRARY_DEFINED__




typedef   DECLSPEC_UUID("EC9231C7-5A17-11E7-B72E-BC5FF42AC839")
enum ZcBoolean
    {
        zcFalse	= 0,
        zcTrue	= 1
    } 	ZcBoolean;

typedef   DECLSPEC_UUID("EC9230BD-5A17-11E7-B72E-BC5FF42AC839")
enum ZcOnOff
    {
        zcOff	= 0,
        zcOn	= 1
    } 	ZcOnOff;

typedef   DECLSPEC_UUID("EC923190-5A17-11E7-B72E-BC5FF42AC839")
enum ZcEntityName
    {
        zc3dFace	= 1,
        zc3dPolyline	= 2,
        zc3dSolid	= 3,
        zcArc	= 4,
        zcAttribute	= 5,
        zcAttributeReference	= 6,
        zcBlockReference	= 7,
        zcCircle	= 8,
        zcDimAligned	= 9,
        zcDimAngular	= 10,
        zcDimDiametric	= 12,
        zcDimOrdinate	= 13,
        zcDimRadial	= 14,
        zcDimRotated	= 15,
        zcEllipse	= 16,
        zcHatch	= 17,
        zcLeader	= 18,
        zcLine	= 19,
        zcMtext	= 21,
        zcPoint	= 22,
        zcPolyline	= 23,
        zcPolylineLight	= 24,
        zcPolymesh	= 25,
        zcRaster	= 26,
        zcRay	= 27,
        zcRegion	= 28,
        zcShape	= 29,
        zcSolid	= 30,
        zcSpline	= 31,
        zcText	= 32,
        zcTolerance	= 33,
        zcTrace	= 34,
        zcPViewport	= 35,
        zcXline	= 36,
        zcGroup	= 37,
        zcMInsertBlock	= 38,
        zcPolyfaceMesh	= 39,
        zcMLine	= 40,
        zcDim3PointAngular	= 41,
        zcExternalReference	= 42,
        zcTable	= 43,
        zcDimArcLength	= 44,
        zcDimRadialLarge	= 45,
        zcDwfUnderlay	= 46,
        zcDgnUnderlay	= 47,
        zcMLeader	= 48,
        zcSubDMesh	= 49,
        zcPdfUnderlay	= 50,
        zcNurbSurface	= 51
    } 	ZcEntityName;

typedef   DECLSPEC_UUID("EC92310A-5A17-11E7-B72E-BC5FF42AC839")
enum ZcActiveSpace
    {
        zcPaperSpace	= 0,
        zcModelSpace	= 1
    } 	ZcActiveSpace;

typedef   DECLSPEC_UUID("EC923122-5A17-11E7-B72E-BC5FF42AC839")
enum ZcKeyboardAccelerator
    {
        zcPreferenceClassic	= 0,
        zcPreferenceCustom	= 1
    } 	ZcKeyboardAccelerator;

typedef   DECLSPEC_UUID("EC923074-5A17-11E7-B72E-BC5FF42AC839")
enum ZcPlotOrientation
    {
        zcPlotOrientationPortrait	= 0,
        zcPlotOrientationLandscape	= 1
    } 	ZcPlotOrientation;

typedef   DECLSPEC_UUID("EC923109-5A17-11E7-B72E-BC5FF42AC839")
enum ZcColor
    {
        zcByBlock	= 0,
        zcRed	= 1,
        zcYellow	= 2,
        zcGreen	= 3,
        zcCyan	= 4,
        zcBlue	= 5,
        zcMagenta	= 6,
        zcWhite	= 7,
        zcByLayer	= 256
    } 	ZcColor;

typedef   DECLSPEC_UUID("EC9230A2-5A17-11E7-B72E-BC5FF42AC839")
enum ZcAttachmentPoint
    {
        zcAttachmentPointTopLeft	= 1,
        zcAttachmentPointTopCenter	= 2,
        zcAttachmentPointTopRight	= 3,
        zcAttachmentPointMiddleLeft	= 4,
        zcAttachmentPointMiddleCenter	= 5,
        zcAttachmentPointMiddleRight	= 6,
        zcAttachmentPointBottomLeft	= 7,
        zcAttachmentPointBottomCenter	= 8,
        zcAttachmentPointBottomRight	= 9
    } 	ZcAttachmentPoint;

typedef   DECLSPEC_UUID("EC923021-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDrawingDirection
    {
        zcLeftToRight	= 1,
        zcRightToLeft	= 2,
        zcTopToBottom	= 3,
        zcBottomToTop	= 4,
        zcByStyle	= 5
    } 	ZcDrawingDirection;

typedef   DECLSPEC_UUID("EC9230CE-5A17-11E7-B72E-BC5FF42AC839")
enum ZcLeaderType
    {
        zcLineNoArrow	= 0,
        zcSplineNoArrow	= 1,
        zcLineWithArrow	= 2,
        zcSplineWithArrow	= 3
    } 	ZcLeaderType;

typedef   DECLSPEC_UUID("EC92306F-5A17-11E7-B72E-BC5FF42AC839")
enum ZcAttributeMode
    {
        zcAttributeModeNormal	= 0,
        zcAttributeModeInvisible	= 1,
        zcAttributeModeConstant	= 2,
        zcAttributeModeVerify	= 4,
        zcAttributeModePreset	= 8,
        zcAttributeModeLockPosition	= 16,
        zcAttributeModeMultipleLine	= 32
    } 	ZcAttributeMode;

typedef   DECLSPEC_UUID("EC923025-5A17-11E7-B72E-BC5FF42AC839")
enum ZcHorizontalAlignment
    {
        zcHorizontalAlignmentLeft	= 0,
        zcHorizontalAlignmentCenter	= 1,
        zcHorizontalAlignmentRight	= 2,
        zcHorizontalAlignmentAligned	= 3,
        zcHorizontalAlignmentMiddle	= 4,
        zcHorizontalAlignmentFit	= 5
    } 	ZcHorizontalAlignment;

typedef   DECLSPEC_UUID("EC9230AE-5A17-11E7-B72E-BC5FF42AC839")
enum ZcVerticalAlignment
    {
        zcVerticalAlignmentBaseline	= 0,
        zcVerticalAlignmentBottom	= 1,
        zcVerticalAlignmentMiddle	= 2,
        zcVerticalAlignmentTop	= 3
    } 	ZcVerticalAlignment;

typedef   DECLSPEC_UUID("EC923134-5A17-11E7-B72E-BC5FF42AC839")
enum ZcTextGenerationFlag
    {
        zcTextFlagBackward	= 2,
        zcTextFlagUpsideDown	= 4
    } 	ZcTextGenerationFlag;

typedef   DECLSPEC_UUID("EC9231E1-5A17-11E7-B72E-BC5FF42AC839")
enum ZcSelect
    {
        zcSelectionSetWindow	= 0,
        zcSelectionSetCrossing	= 1,
        zcSelectionSetFence	= 2,
        zcSelectionSetPrevious	= 3,
        zcSelectionSetLast	= 4,
        zcSelectionSetAll	= 5,
        zcSelectionSetWindowPolygon	= 6,
        zcSelectionSetCrossingPolygon	= 7
    } 	ZcSelect;

typedef   DECLSPEC_UUID("EC92307F-5A17-11E7-B72E-BC5FF42AC839")
enum ZcPatternType
    {
        zcHatchPatternTypeUserDefined	= 0,
        zcHatchPatternTypePreDefined	= 1,
        zcHatchPatternTypeCustomDefined	= 2
    } 	ZcPatternType;

typedef   DECLSPEC_UUID("EC923049-5A17-11E7-B72E-BC5FF42AC839")
enum ZcLoopType
    {
        zcHatchLoopTypeDefault	= 0,
        zcHatchLoopTypeExternal	= 1,
        zcHatchLoopTypePolyline	= 2,
        zcHatchLoopTypeDerived	= 4,
        zcHatchLoopTypeTextbox	= 8
    } 	ZcLoopType;

typedef   DECLSPEC_UUID("EC9230AA-5A17-11E7-B72E-BC5FF42AC839")
enum ZcHatchStyle
    {
        zcHatchStyleNormal	= 0,
        zcHatchStyleOuter	= 1,
        zcHatchStyleIgnore	= 2
    } 	ZcHatchStyle;

typedef   DECLSPEC_UUID("EC9230C8-5A17-11E7-B72E-BC5FF42AC839")
enum ZcPolylineType
    {
        zcSimplePoly	= 0,
        zcFitCurvePoly	= 1,
        zcQuadSplinePoly	= 2,
        zcCubicSplinePoly	= 3
    } 	ZcPolylineType;

typedef   DECLSPEC_UUID("EC922FD7-5A17-11E7-B72E-BC5FF42AC839")
enum Zc3DPolylineType
    {
        zcSimple3DPoly	= 0,
        zcQuadSpline3DPoly	= 1,
        zcCubicSpline3DPoly	= 2
    } 	Zc3DPolylineType;

typedef   DECLSPEC_UUID("EC92301A-5A17-11E7-B72E-BC5FF42AC839")
enum ZcViewportSplitType
    {
        zcViewport2Horizontal	= 0,
        zcViewport2Vertical	= 1,
        zcViewport3Left	= 2,
        zcViewport3Right	= 3,
        zcViewport3Horizontal	= 4,
        zcViewport3Vertical	= 5,
        zcViewport3Above	= 6,
        zcViewport3Below	= 7,
        zcViewport4	= 8
    } 	ZcViewportSplitType;

typedef   DECLSPEC_UUID("EC9231E2-5A17-11E7-B72E-BC5FF42AC839")
enum ZcRegenType
    {
        zcActiveViewport	= 0,
        zcAllViewports	= 1
    } 	ZcRegenType;

typedef   DECLSPEC_UUID("EC923011-5A17-11E7-B72E-BC5FF42AC839")
enum ZcBooleanType
    {
        zcUnion	= 0,
        zcIntersection	= 1,
        zcSubtraction	= 2
    } 	ZcBooleanType;

typedef   DECLSPEC_UUID("EC92311C-5A17-11E7-B72E-BC5FF42AC839")
enum ZcExtendOption
    {
        zcExtendNone	= 0,
        zcExtendThisEntity	= 1,
        zcExtendOtherEntity	= 2,
        zcExtendBoth	= 3
    } 	ZcExtendOption;

typedef   DECLSPEC_UUID("EC9231C1-5A17-11E7-B72E-BC5FF42AC839")
enum ZcAngleUnits
    {
        zcDegrees	= 0,
        zcDegreeMinuteSeconds	= 1,
        zcGrads	= 2,
        zcRadians	= 3
    } 	ZcAngleUnits;

typedef   DECLSPEC_UUID("EC923178-5A17-11E7-B72E-BC5FF42AC839")
enum ZcUnits
    {
        zcDefaultUnits	= -1,
        zcScientific	= 1,
        zcDecimal	= 2,
        zcEngineering	= 3,
        zcArchitectural	= 4,
        zcFractional	= 5
    } 	ZcUnits;

typedef   DECLSPEC_UUID("EC922FC8-5A17-11E7-B72E-BC5FF42AC839")
enum ZcCoordinateSystem
    {
        zcWorld	= 0,
        zcUCS	= 1,
        zcDisplayDCS	= 2,
        zcPaperSpaceDCS	= 3,
        zcOCS	= 4
    } 	ZcCoordinateSystem;

typedef   DECLSPEC_UUID("EC92317C-5A17-11E7-B72E-BC5FF42AC839")
enum ZcMeasurementUnits
    {
        zcEnglish	= 0,
        zcMetric	= 1
    } 	ZcMeasurementUnits;

typedef   DECLSPEC_UUID("EC923170-5A17-11E7-B72E-BC5FF42AC839")
enum ZcXRefDemandLoad
    {
        zcDemandLoadDisabled	= 0,
        zcDemandLoadEnabled	= 1,
        zcDemandLoadEnabledWithCopy	= 2
    } 	ZcXRefDemandLoad;

typedef   DECLSPEC_UUID("EC922FCF-5A17-11E7-B72E-BC5FF42AC839")
enum ZcPreviewMode
    {
        zcPartialPreview	= 0,
        zcFullPreview	= 1
    } 	ZcPreviewMode;

typedef   DECLSPEC_UUID("EC9230D3-5A17-11E7-B72E-BC5FF42AC839")
enum ZcPolymeshType
    {
        zcSimpleMesh	= 0,
        zcQuadSurfaceMesh	= 5,
        zcCubicSurfaceMesh	= 6,
        zcBezierSurfaceMesh	= 8
    } 	ZcPolymeshType;

typedef   DECLSPEC_UUID("EC9231A9-5A17-11E7-B72E-BC5FF42AC839")
enum ZcZoomScaleType
    {
        zcZoomScaledAbsolute	= 0,
        zcZoomScaledRelative	= 1,
        zcZoomScaledRelativePSpace	= 2
    } 	ZcZoomScaleType;

typedef   DECLSPEC_UUID("EC92305D-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDragDisplayMode
    {
        zcDragDoNotDisplay	= 0,
        zcDragDisplayOnRequest	= 1,
        zcDragDisplayAutomatically	= 2
    } 	ZcDragDisplayMode;

typedef   DECLSPEC_UUID("EC923163-5A17-11E7-B72E-BC5FF42AC839")
enum ZcZRXDemandLoad
    {
        zcDemanLoadDisable	= 0,
        zcDemandLoadOnObjectDetect	= 1,
        zcDemandLoadCmdInvoke	= 2
    } 	ZcZRXDemandLoad;

typedef   DECLSPEC_UUID("EC9231BC-5A17-11E7-B72E-BC5FF42AC839")
enum ZcTextFontStyle
    {
        zcFontRegular	= 0,
        zcFontItalic	= 1,
        zcFontBold	= 2,
        zcFontBoldItalic	= 3
    } 	ZcTextFontStyle;

typedef   DECLSPEC_UUID("EC9230F9-5A17-11E7-B72E-BC5FF42AC839")
enum ZcProxyImage
    {
        zcProxyNotShow	= 0,
        zcProxyShow	= 1,
        zcProxyBoundingBox	= 2
    } 	ZcProxyImage;

typedef   DECLSPEC_UUID("EC9230D9-5A17-11E7-B72E-BC5FF42AC839")
enum ZcKeyboardPriority
    {
        zcKeyboardRunningObjSnap	= 0,
        zcKeyboardEntry	= 1,
        zcKeyboardEntryExceptScripts	= 2
    } 	ZcKeyboardPriority;

#define	zcAmericanEnglish	( "enu" )

#define	zcAustralianEnglish	( "ena" )

#define	zcBritishEnglishIse	( "ens" )

#define	zcBritishEnglishIze	( "enz" )

#define	zcCatalan	( "ca" )

#define	zcCzech	( "cs" )

#define	zcDanish	( "da" )

#define	zcDutchPrim	( "nl" )

#define	zcDutchSec	( "nls" )

#define	zcFinnish	( "fi" )

#define	zcFrenchUnaccentCap	( "fr" )

#define	zcFrenchAccentCap	( "fra" )

#define	zcGermanScharfesS	( "de" )

#define	zcGermanDoppleS	( "ded" )

#define	zcItalian	( "it" )

#define	zcNorwegianBokmal	( "no" )

#define	zcNorwegianNynorsk	( "non" )

#define	zcPortugueseIberian	( "pt" )

#define	zcPortugueseBrazilian	( "ptb" )

#define	zcRussianInfrequentIo	( "ru" )

#define	zcRussianFrequentIo	( "rui" )

#define	zcSpanishUnaccentCap	( "es" )

#define	zcSpanishAccentCap	( "esa" )

#define	zcSwedish	( "sv" )

typedef   DECLSPEC_UUID("EC923059-5A17-11E7-B72E-BC5FF42AC839")
enum ZcMenuGroupType
    {
        zcBaseMenuGroup	= 0,
        zcPartialMenuGroup	= 1
    } 	ZcMenuGroupType;

typedef   DECLSPEC_UUID("EC923183-5A17-11E7-B72E-BC5FF42AC839")
enum ZcMenuFileType
    {
        zcMenuFileCompiled	= 0,
        zcMenuFileSource	= 1
    } 	ZcMenuFileType;

typedef   DECLSPEC_UUID("EC9230FF-5A17-11E7-B72E-BC5FF42AC839")
enum ZcMenuItemType
    {
        zcMenuItem	= 0,
        zcMenuSeparator	= 1,
        zcMenuSubMenu	= 2
    } 	ZcMenuItemType;

typedef   DECLSPEC_UUID("EC923184-5A17-11E7-B72E-BC5FF42AC839")
enum ZcToolbarItemType
    {
        zcToolbarButton	= 0,
        zcToolbarSeparator	= 1,
        zcToolbarControl	= 2,
        zcToolbarFlyout	= 3
    } 	ZcToolbarItemType;

typedef   DECLSPEC_UUID("EC9230CB-5A17-11E7-B72E-BC5FF42AC839")
enum ZcToolbarDockStatus
    {
        zcToolbarDockTop	= 0,
        zcToolbarDockBottom	= 1,
        zcToolbarDockLeft	= 2,
        zcToolbarDockRight	= 3,
        zcToolbarFloating	= 4
    } 	ZcToolbarDockStatus;

typedef   DECLSPEC_UUID("EC92305F-5A17-11E7-B72E-BC5FF42AC839")
enum ZcLineWeight
    {
        zcLnWt000	= 0,
        zcLnWt005	= 5,
        zcLnWt009	= 9,
        zcLnWt013	= 13,
        zcLnWt015	= 15,
        zcLnWt018	= 18,
        zcLnWt020	= 20,
        zcLnWt025	= 25,
        zcLnWt030	= 30,
        zcLnWt035	= 35,
        zcLnWt040	= 40,
        zcLnWt050	= 50,
        zcLnWt053	= 53,
        zcLnWt060	= 60,
        zcLnWt070	= 70,
        zcLnWt080	= 80,
        zcLnWt090	= 90,
        zcLnWt100	= 100,
        zcLnWt106	= 106,
        zcLnWt120	= 120,
        zcLnWt140	= 140,
        zcLnWt158	= 158,
        zcLnWt200	= 200,
        zcLnWt211	= 211,
        zcLnWtByLayer	= -1,
        zcLnWtByBlock	= -2,
        zcLnWtByLwDefault	= -3
    } 	ZcLineWeight;

typedef   DECLSPEC_UUID("EC9231EF-5A17-11E7-B72E-BC5FF42AC839")
enum ZcWindowState
    {
        zcNorm	= 1,
        zcMin	= ( zcNorm + 1 ) ,
        zcMax	= ( zcMin + 1 )
    } 	ZcWindowState;

typedef   DECLSPEC_UUID("EC923141-5A17-11E7-B72E-BC5FF42AC839")
enum ZcPlotPaperUnits
    {
        zcInches	= 0,
        zcMillimeters	= ( zcInches + 1 ) ,
        zcPixels	= ( zcMillimeters + 1 )
    } 	ZcPlotPaperUnits;

typedef   DECLSPEC_UUID("EC923041-5A17-11E7-B72E-BC5FF42AC839")
enum ZcPlotRotation
    {
        zc0degrees	= 0,
        zc90degrees	= ( zc0degrees + 1 ) ,
        zc180degrees	= ( zc90degrees + 1 ) ,
        zc270degrees	= ( zc180degrees + 1 )
    } 	ZcPlotRotation;

typedef   DECLSPEC_UUID("EC92302E-5A17-11E7-B72E-BC5FF42AC839")
enum ZcPlotType
    {
        zcDisplay	= 0,
        zcExtents	= ( zcDisplay + 1 ) ,
        zcLimits	= ( zcExtents + 1 ) ,
        zcView	= ( zcLimits + 1 ) ,
        zcWindow	= ( zcView + 1 ) ,
        zcLayout	= ( zcWindow + 1 )
    } 	ZcPlotType;

typedef   DECLSPEC_UUID("EC923010-5A17-11E7-B72E-BC5FF42AC839")
enum ZcPlotScale
    {
        zcScaleToFit	= 0,
        zc1_128in_1ft	= ( zcScaleToFit + 1 ) ,
        zc1_64in_1ft	= ( zc1_128in_1ft + 1 ) ,
        zc1_32in_1ft	= ( zc1_64in_1ft + 1 ) ,
        zc1_16in_1ft	= ( zc1_32in_1ft + 1 ) ,
        zc3_32in_1ft	= ( zc1_16in_1ft + 1 ) ,
        zc1_8in_1ft	= ( zc3_32in_1ft + 1 ) ,
        zc3_16in_1ft	= ( zc1_8in_1ft + 1 ) ,
        zc1_4in_1ft	= ( zc3_16in_1ft + 1 ) ,
        zc3_8in_1ft	= ( zc1_4in_1ft + 1 ) ,
        zc1_2in_1ft	= ( zc3_8in_1ft + 1 ) ,
        zc3_4in_1ft	= ( zc1_2in_1ft + 1 ) ,
        zc1in_1ft	= ( zc3_4in_1ft + 1 ) ,
        zc3in_1ft	= ( zc1in_1ft + 1 ) ,
        zc6in_1ft	= ( zc3in_1ft + 1 ) ,
        zc1ft_1ft	= ( zc6in_1ft + 1 ) ,
        zc1_1	= ( zc1ft_1ft + 1 ) ,
        zc1_2	= ( zc1_1 + 1 ) ,
        zc1_4	= ( zc1_2 + 1 ) ,
        zc1_5	= ( zc1_4 + 1 ) ,
        zc1_8	= ( zc1_5 + 1 ) ,
        zc1_10	= ( zc1_8 + 1 ) ,
        zc1_16	= ( zc1_10 + 1 ) ,
        zc1_20	= ( zc1_16 + 1 ) ,
        zc1_30	= ( zc1_20 + 1 ) ,
        zc1_40	= ( zc1_30 + 1 ) ,
        zc1_50	= ( zc1_40 + 1 ) ,
        zc1_100	= ( zc1_50 + 1 ) ,
        zc2_1	= ( zc1_100 + 1 ) ,
        zc4_1	= ( zc2_1 + 1 ) ,
        zc8_1	= ( zc4_1 + 1 ) ,
        zc10_1	= ( zc8_1 + 1 ) ,
        zc100_1	= ( zc10_1 + 1 )
    } 	ZcPlotScale;

typedef   DECLSPEC_UUID("EC9231B5-5A17-11E7-B72E-BC5FF42AC839")
enum ZcAlignment
    {
        zcAlignmentLeft	= 0,
        zcAlignmentCenter	= ( zcAlignmentLeft + 1 ) ,
        zcAlignmentRight	= ( zcAlignmentCenter + 1 ) ,
        zcAlignmentAligned	= ( zcAlignmentRight + 1 ) ,
        zcAlignmentMiddle	= ( zcAlignmentAligned + 1 ) ,
        zcAlignmentFit	= ( zcAlignmentMiddle + 1 ) ,
        zcAlignmentTopLeft	= ( zcAlignmentFit + 1 ) ,
        zcAlignmentTopCenter	= ( zcAlignmentTopLeft + 1 ) ,
        zcAlignmentTopRight	= ( zcAlignmentTopCenter + 1 ) ,
        zcAlignmentMiddleLeft	= ( zcAlignmentTopRight + 1 ) ,
        zcAlignmentMiddleCenter	= ( zcAlignmentMiddleLeft + 1 ) ,
        zcAlignmentMiddleRight	= ( zcAlignmentMiddleCenter + 1 ) ,
        zcAlignmentBottomLeft	= ( zcAlignmentMiddleRight + 1 ) ,
        zcAlignmentBottomCenter	= ( zcAlignmentBottomLeft + 1 ) ,
        zcAlignmentBottomRight	= ( zcAlignmentBottomCenter + 1 )
    } 	ZcAlignment;

typedef   DECLSPEC_UUID("EC9230FC-5A17-11E7-B72E-BC5FF42AC839") ZcColor ZCAD_COLOR;

typedef   DECLSPEC_UUID("EC922FFA-5A17-11E7-B72E-BC5FF42AC839") BSTR ZCAD_LAYER;

typedef   DECLSPEC_UUID("EC923104-5A17-11E7-B72E-BC5FF42AC839") BSTR ZCAD_LTYPE;

typedef   DECLSPEC_UUID("EC923197-5A17-11E7-B72E-BC5FF42AC839") long ZCAD_NULL;

typedef   DECLSPEC_UUID("EC92311F-5A17-11E7-B72E-BC5FF42AC839") double ZCAD_DISTANCE;

typedef   DECLSPEC_UUID("EC9230BE-5A17-11E7-B72E-BC5FF42AC839") double ZCAD_ANGLE;

typedef   DECLSPEC_UUID("EC9231C6-5A17-11E7-B72E-BC5FF42AC839") ZcLineWeight ZCAD_LWEIGHT;

typedef   DECLSPEC_UUID("EC922FD5-5A17-11E7-B72E-BC5FF42AC839") double ZCAD_NOUNITS;

typedef   DECLSPEC_UUID("EC923037-5A17-11E7-B72E-BC5FF42AC839") VARIANT ZCAD_POINT;

typedef   DECLSPEC_UUID("EC922FFD-5A17-11E7-B72E-BC5FF42AC839")
enum ZcLineSpacingStyle
    {
        zcLineSpacingStyleAtLeast	= 1,
        zcLineSpacingStyleExactly	= 2
    } 	ZcLineSpacingStyle;

typedef   DECLSPEC_UUID("EC9230FA-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDimPrecision
    {
        zcDimPrecisionZero	= 0,
        zcDimPrecisionOne	= ( zcDimPrecisionZero + 1 ) ,
        zcDimPrecisionTwo	= ( zcDimPrecisionOne + 1 ) ,
        zcDimPrecisionThree	= ( zcDimPrecisionTwo + 1 ) ,
        zcDimPrecisionFour	= ( zcDimPrecisionThree + 1 ) ,
        zcDimPrecisionFive	= ( zcDimPrecisionFour + 1 ) ,
        zcDimPrecisionSix	= ( zcDimPrecisionFive + 1 ) ,
        zcDimPrecisionSeven	= ( zcDimPrecisionSix + 1 ) ,
        zcDimPrecisionEight	= ( zcDimPrecisionSeven + 1 )
    } 	ZcDimPrecision;

typedef   DECLSPEC_UUID("EC92300E-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDimUnits
    {
        zcDimScientific	= 1,
        zcDimDecimal	= ( zcDimScientific + 1 ) ,
        zcDimEngineering	= ( zcDimDecimal + 1 ) ,
        zcDimArchitecturalStacked	= ( zcDimEngineering + 1 ) ,
        zcDimFractionalStacked	= ( zcDimArchitecturalStacked + 1 ) ,
        zcDimArchitectural	= ( zcDimFractionalStacked + 1 ) ,
        zcDimFractional	= ( zcDimArchitectural + 1 ) ,
        zcDimWindowsDesktop	= ( zcDimFractional + 1 )
    } 	ZcDimUnits;

typedef   DECLSPEC_UUID("EC922FE7-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDimLUnits
    {
        zcDimLScientific	= 1,
        zcDimLDecimal	= ( zcDimLScientific + 1 ) ,
        zcDimLEngineering	= ( zcDimLDecimal + 1 ) ,
        zcDimLArchitectural	= ( zcDimLEngineering + 1 ) ,
        zcDimLFractional	= ( zcDimLArchitectural + 1 ) ,
        zcDimLWindowsDesktop	= ( zcDimLFractional + 1 )
    } 	ZcDimLUnits;

typedef   DECLSPEC_UUID("EC923080-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDimArrowheadType
    {
        zcArrowDefault	= 0,
        zcArrowClosedBlank	= 1,
        zcArrowClosed	= 2,
        zcArrowDot	= 3,
        zcArrowArchTick	= 4,
        zcArrowOblique	= 5,
        zcArrowOpen	= 6,
        zcArrowOrigin	= 7,
        zcArrowOrigin2	= 8,
        zcArrowOpen90	= 9,
        zcArrowOpen30	= 10,
        zcArrowDotSmall	= 11,
        zcArrowDotBlank	= 12,
        zcArrowSmall	= 13,
        zcArrowBoxBlank	= 14,
        zcArrowBoxFilled	= 15,
        zcArrowDatumBlank	= 16,
        zcArrowDatumFilled	= 17,
        zcArrowIntegral	= 18,
        zcArrowNone	= 19,
        zcArrowUserDefined	= 20
    } 	ZcDimArrowheadType;

typedef   DECLSPEC_UUID("EC923001-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDimCenterType
    {
        zcCenterMark	= 0,
        zcCenterLine	= ( zcCenterMark + 1 ) ,
        zcCenterNone	= ( zcCenterLine + 1 )
    } 	ZcDimCenterType;

typedef   DECLSPEC_UUID("EC923057-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDimFit
    {
        zcTextAndArrows	= 0,
        zcArrowsOnly	= ( zcTextAndArrows + 1 ) ,
        zcTextOnly	= ( zcArrowsOnly + 1 ) ,
        zcBestFit	= ( zcTextOnly + 1 )
    } 	ZcDimFit;

typedef   DECLSPEC_UUID("EC9231EA-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDimFractionType
    {
        zcHorizontal	= 0,
        zcDiagonal	= ( zcHorizontal + 1 ) ,
        zcNotStacked	= ( zcDiagonal + 1 )
    } 	ZcDimFractionType;

typedef   DECLSPEC_UUID("EC923135-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDimArcLengthSymbol
    {
        zcSymInFront	= 0,
        zcSymAbove	= ( zcSymInFront + 1 ) ,
        zcSymNone	= ( zcSymAbove + 1 )
    } 	ZcDimArcLengthSymbol;

typedef   DECLSPEC_UUID("EC92315C-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDimHorizontalJustification
    {
        zcHorzCentered	= 0,
        zcFirstExtensionLine	= ( zcHorzCentered + 1 ) ,
        zcSecondExtensionLine	= ( zcFirstExtensionLine + 1 ) ,
        zcOverFirstExtension	= ( zcSecondExtensionLine + 1 ) ,
        zcOverSecondExtension	= ( zcOverFirstExtension + 1 )
    } 	ZcDimHorizontalJustification;

typedef   DECLSPEC_UUID("EC9231DA-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDimVerticalJustification
    {
        zcVertCentered	= 0,
        zcAbove	= ( zcVertCentered + 1 ) ,
        zcOutside	= ( zcAbove + 1 ) ,
        zcJIS	= ( zcOutside + 1 ) ,
        zcUnder	= ( zcJIS + 1 )
    } 	ZcDimVerticalJustification;

typedef   DECLSPEC_UUID("EC923054-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDimTextMovement
    {
        zcDimLineWithText	= 0,
        zcMoveTextAddLeader	= ( zcDimLineWithText + 1 ) ,
        zcMoveTextNoLeader	= ( zcMoveTextAddLeader + 1 )
    } 	ZcDimTextMovement;

typedef   DECLSPEC_UUID("EC9230B6-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDimToleranceMethod
    {
        zcTolNone	= 0,
        zcTolSymmetrical	= ( zcTolNone + 1 ) ,
        zcTolDeviation	= ( zcTolSymmetrical + 1 ) ,
        zcTolLimits	= ( zcTolDeviation + 1 ) ,
        zcTolBasic	= ( zcTolLimits + 1 )
    } 	ZcDimToleranceMethod;

typedef   DECLSPEC_UUID("EC923031-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDimToleranceJustify
    {
        zcTolBottom	= 0,
        zcTolMiddle	= ( zcTolBottom + 1 ) ,
        zcTolTop	= ( zcTolMiddle + 1 )
    } 	ZcDimToleranceJustify;

typedef   DECLSPEC_UUID("EC922FD8-5A17-11E7-B72E-BC5FF42AC839")
enum ZcViewportScale
    {
        zcVpScaleToFit	= 0,
        zcVpCustomScale	= ( zcVpScaleToFit + 1 ) ,
        zcVp1_1	= ( zcVpCustomScale + 1 ) ,
        zcVp1_2	= ( zcVp1_1 + 1 ) ,
        zcVp1_4	= ( zcVp1_2 + 1 ) ,
        zcVp1_5	= ( zcVp1_4 + 1 ) ,
        zcVp1_8	= ( zcVp1_5 + 1 ) ,
        zcVp1_10	= ( zcVp1_8 + 1 ) ,
        zcVp1_16	= ( zcVp1_10 + 1 ) ,
        zcVp1_20	= ( zcVp1_16 + 1 ) ,
        zcVp1_30	= ( zcVp1_20 + 1 ) ,
        zcVp1_40	= ( zcVp1_30 + 1 ) ,
        zcVp1_50	= ( zcVp1_40 + 1 ) ,
        zcVp1_100	= ( zcVp1_50 + 1 ) ,
        zcVp2_1	= ( zcVp1_100 + 1 ) ,
        zcVp4_1	= ( zcVp2_1 + 1 ) ,
        zcVp8_1	= ( zcVp4_1 + 1 ) ,
        zcVp10_1	= ( zcVp8_1 + 1 ) ,
        zcVp100_1	= ( zcVp10_1 + 1 ) ,
        zcVp1_128in_1ft	= ( zcVp100_1 + 1 ) ,
        zcVp1_64in_1ft	= ( zcVp1_128in_1ft + 1 ) ,
        zcVp1_32in_1ft	= ( zcVp1_64in_1ft + 1 ) ,
        zcVp1_16in_1ft	= ( zcVp1_32in_1ft + 1 ) ,
        zcVp3_32in_1ft	= ( zcVp1_16in_1ft + 1 ) ,
        zcVp1_8in_1ft	= ( zcVp3_32in_1ft + 1 ) ,
        zcVp3_16in_1ft	= ( zcVp1_8in_1ft + 1 ) ,
        zcVp1_4in_1ft	= ( zcVp3_16in_1ft + 1 ) ,
        zcVp3_8in_1ft	= ( zcVp1_4in_1ft + 1 ) ,
        zcVp1_2in_1ft	= ( zcVp3_8in_1ft + 1 ) ,
        zcVp3_4in_1ft	= ( zcVp1_2in_1ft + 1 ) ,
        zcVp1in_1ft	= ( zcVp3_4in_1ft + 1 ) ,
        zcVp1and1_2in_1ft	= ( zcVp1in_1ft + 1 ) ,
        zcVp3in_1ft	= ( zcVp1and1_2in_1ft + 1 ) ,
        zcVp6in_1ft	= ( zcVp3in_1ft + 1 ) ,
        zcVp1ft_1ft	= ( zcVp6in_1ft + 1 )
    } 	ZcViewportScale;

typedef   DECLSPEC_UUID("EC923022-5A17-11E7-B72E-BC5FF42AC839")
enum ZcISOPenWidth
    {
        zcPenWidth013	= 13,
        zcPenWidth018	= 18,
        zcPenWidth025	= 25,
        zcPenWidth035	= 35,
        zcPenWidth050	= 50,
        zcPenWidth070	= 70,
        zcPenWidth100	= 100,
        zcPenWidth140	= 140,
        zcPenWidth200	= 200,
        zcPenWidthUnk	= -1
    } 	ZcISOPenWidth;

typedef   DECLSPEC_UUID("EC92301E-5A17-11E7-B72E-BC5FF42AC839")
enum ZcSaveAsType
    {
        zcUnknown	= -1,
        zcR12_dxf	= 1,
        zcR13_dwg	= 4,
        zcR13_dxf	= 5,
        zcR14_dwg	= 8,
        zcR14_dxf	= 9,
        zc2000_dwg	= 12,
        zc2000_dxf	= 13,
        zc2000_Template	= 14,
        zc2004_dwg	= 24,
        zc2004_dxf	= 25,
        zc2004_Template	= 26,
        zc2007_dwg	= 36,
        zc2007_dxf	= 37,
        zc2007_Template	= 38,
        zc2010_dwg	= 48,
        zc2010_dxf	= 49,
        zc2010_Template	= 50,
        zc2013_dwg	= 60,
        zc2013_dxf	= 61,
		zc2013_Template	= 62,
		zc2018_dwg	= 64,
		zc2018_dxf	= 65,
		zc2018_Template	= 66,
        zcNative	= zc2018_dwg,
        zcR15_dwg	= zc2000_dwg,
        zcR15_dxf	= zc2000_dxf,
        zcR15_Template	= zc2000_Template,
        zcR18_dwg	= zc2004_dwg,
        zcR18_dxf	= zc2004_dxf,
        zcR18_Template	= zc2004_Template
    } 	ZcSaveAsType;

typedef   DECLSPEC_UUID("EC92314C-5A17-11E7-B72E-BC5FF42AC839")
enum ZcPrinterSpoolAlert
    {
        zcPrinterAlwaysAlert	= 0,
        zcPrinterAlertOnce	= ( zcPrinterAlwaysAlert + 1 ) ,
        zcPrinterNeverAlertLogOnce	= ( zcPrinterAlertOnce + 1 ) ,
        zcPrinterNeverAlert	= ( zcPrinterNeverAlertLogOnce + 1 )
    } 	ZcPrinterSpoolAlert;

typedef   DECLSPEC_UUID("EC92314E-5A17-11E7-B72E-BC5FF42AC839")
enum ZcPlotPolicyForNewDwgs
    {
        zcPolicyNewDefault	= 0,
        zcPolicyNewLegacy	= ( zcPolicyNewDefault + 1 )
    } 	ZcPlotPolicyForNewDwgs;

typedef   DECLSPEC_UUID("EC922FE8-5A17-11E7-B72E-BC5FF42AC839")
enum ZcPlotPolicyForLegacyDwgs
    {
        zcPolicyLegacyDefault	= 0,
        zcPolicyLegacyQuery	= ( zcPolicyLegacyDefault + 1 ) ,
        zcPolicyLegacyLegacy	= ( zcPolicyLegacyQuery + 1 )
    } 	ZcPlotPolicyForLegacyDwgs;

typedef   DECLSPEC_UUID("EC9231BA-5A17-11E7-B72E-BC5FF42AC839")
enum ZcOleQuality
    {
        zcOQLineArt	= 0,
        zcOQText	= ( zcOQLineArt + 1 ) ,
        zcOQGraphics	= ( zcOQText + 1 ) ,
        zcOQPhoto	= ( zcOQGraphics + 1 ) ,
        zcOQHighPhoto	= ( zcOQPhoto + 1 )
    } 	ZcOleQuality;

typedef   DECLSPEC_UUID("EC923169-5A17-11E7-B72E-BC5FF42AC839")
enum ZcLoadPalette
    {
        zcPaletteByDrawing	= 0,
        zcPaletteBySession	= ( zcPaletteByDrawing + 1 )
    } 	ZcLoadPalette;

typedef   DECLSPEC_UUID("EC923121-5A17-11E7-B72E-BC5FF42AC839") 
enum ZcInsertUnits
    {
        zcInsertUnitsUnitless	= 0,
        zcInsertUnitsInches	= ( zcInsertUnitsUnitless + 1 ) ,
        zcInsertUnitsFeet	= ( zcInsertUnitsInches + 1 ) ,
        zcInsertUnitsMiles	= ( zcInsertUnitsFeet + 1 ) ,
        zcInsertUnitsMillimeters	= ( zcInsertUnitsMiles + 1 ) ,
        zcInsertUnitsCentimeters	= ( zcInsertUnitsMillimeters + 1 ) ,
        zcInsertUnitsMeters	= ( zcInsertUnitsCentimeters + 1 ) ,
        zcInsertUnitsKilometers	= ( zcInsertUnitsMeters + 1 ) ,
        zcInsertUnitsMicroinches	= ( zcInsertUnitsKilometers + 1 ) ,
        zcInsertUnitsMils	= ( zcInsertUnitsMicroinches + 1 ) ,
        zcInsertUnitsYards	= ( zcInsertUnitsMils + 1 ) ,
        zcInsertUnitsAngstroms	= ( zcInsertUnitsYards + 1 ) ,
        zcInsertUnitsNanometers	= ( zcInsertUnitsAngstroms + 1 ) ,
        zcInsertUnitsMicrons	= ( zcInsertUnitsNanometers + 1 ) ,
        zcInsertUnitsDecimeters	= ( zcInsertUnitsMicrons + 1 ) ,
        zcInsertUnitsDecameters	= ( zcInsertUnitsDecimeters + 1 ) ,
        zcInsertUnitsHectometers	= ( zcInsertUnitsDecameters + 1 ) ,
        zcInsertUnitsGigameters	= ( zcInsertUnitsHectometers + 1 ) ,
        zcInsertUnitsAstronomicalUnits	= ( zcInsertUnitsGigameters + 1 ) ,
        zcInsertUnitsLightYears	= ( zcInsertUnitsAstronomicalUnits + 1 ) ,
        zcInsertUnitsParsecs	= ( zcInsertUnitsLightYears + 1 )
    } 	ZcInsertUnits;

typedef   DECLSPEC_UUID("EC923168-5A17-11E7-B72E-BC5FF42AC839")
enum ZcAlignmentPointAcquisition
    {
        zcAlignPntAcquisitionAutomatic	= 0,
        zcAlignPntAcquisitionShiftToAcquire	= ( zcAlignPntAcquisitionAutomatic + 1 )
    } 	ZcAlignmentPointAcquisition;

typedef   DECLSPEC_UUID("EC9230EA-5A17-11E7-B72E-BC5FF42AC839")
enum ZcInsertUnitsAction
    {
        zcInsertUnitsPrompt	= 0,
        zcInsertUnitsAutoAssign	= ( zcInsertUnitsPrompt + 1 )
    } 	ZcInsertUnitsAction;

typedef   DECLSPEC_UUID("EC923132-5A17-11E7-B72E-BC5FF42AC839")
enum ZcPlotPolicy
    {
        zcPolicyNamed	= 0,
        zcPolicyLegacy	= ( zcPolicyNamed + 1 )
    } 	ZcPlotPolicy;

typedef   DECLSPEC_UUID("EC923076-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDrawingAreaShortCutMenu
    {
        zcNoDrawingAreaShortCutMenu	= 0,
        zcUseDefaultDrawingAreaShortCutMenu	= ( zcNoDrawingAreaShortCutMenu + 1 )
    } 	ZcDrawingAreaShortCutMenu;

typedef   DECLSPEC_UUID("EC923161-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDrawingAreaSCMDefault
    {
        zcRepeatLastCommand	= 0,
        zcSCM	= ( zcRepeatLastCommand + 1 )
    } 	ZcDrawingAreaSCMDefault;

typedef   DECLSPEC_UUID("EC923083-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDrawingAreaSCMEdit
    {
        zcEdRepeatLastCommand	= 0,
        zcEdSCM	= ( zcEdRepeatLastCommand + 1 )
    } 	ZcDrawingAreaSCMEdit;

typedef   DECLSPEC_UUID("EC9230E0-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDrawingAreaSCMCommand
    {
        zcEnter	= 0,
        zcEnableSCMOptions	= ( zcEnter + 1 ) ,
        zcEnableSCM	= ( zcEnableSCMOptions + 1 )
    } 	ZcDrawingAreaSCMCommand;

typedef   DECLSPEC_UUID("EC9230C7-5A17-11E7-B72E-BC5FF42AC839")
enum ZcLayerStateMask
    {
        zcLsNone	= 0,
        zcLsOn	= 0x1,
        zcLsFrozen	= 0x2,
        zcLsLocked	= 0x4,
        zcLsPlot	= 0x8,
        zcLsNewViewport	= 0x10,
        zcLsColor	= 0x20,
        zcLsLineType	= 0x40,
        zcLsLineWeight	= 0x80,
        zcLsPlotStyle	= 0x100,
        zcLsAll	= 0xffff
    } 	ZcLayerStateMask;

typedef   DECLSPEC_UUID("EC92317B-5A17-11E7-B72E-BC5FF42AC839")
enum ZcShadePlot
    {
        zcShadePlotAsDisplayed	= 0,
        zcShadePlotWireframe	= ( zcShadePlotAsDisplayed + 1 ) ,
        zcShadePlotHidden	= ( zcShadePlotWireframe + 1 ) ,
        zcShadePlotRendered	= ( zcShadePlotHidden + 1 )
    } 	ZcShadePlot;

typedef   DECLSPEC_UUID("EC92309E-5A17-11E7-B72E-BC5FF42AC839")
enum ZcHatchObjectType
    {
        zcHatchObject	= 0,
        zcGradientObject	= 1
    } 	ZcHatchObjectType;

typedef   DECLSPEC_UUID("EC92318A-5A17-11E7-B72E-BC5FF42AC839")
enum ZcGradientPatternType
    {
        zcPreDefinedGradient	= 0,
        zcUserDefinedGradient	= 1
    } 	ZcGradientPatternType;

typedef   DECLSPEC_UUID("EC9231C9-5A17-11E7-B72E-BC5FF42AC839")
enum ZcTableDirection
    {
        zcTableTopToBottom	= 0,
        zcTableBottomToTop	= 1
    } 	ZcTableDirection;

typedef   DECLSPEC_UUID("EC9230ED-5A17-11E7-B72E-BC5FF42AC839")
enum ZcCellAlignment
    {
        zcTopLeft	= 1,
        zcTopCenter	= 2,
        zcTopRight	= 3,
        zcMiddleLeft	= 4,
        zcMiddleCenter	= 5,
        zcMiddleRight	= 6,
        zcBottomLeft	= 7,
        zcBottomCenter	= 8,
        zcBottomRight	= 9
    } 	ZcCellAlignment;

typedef   DECLSPEC_UUID("EC9230F4-5A17-11E7-B72E-BC5FF42AC839")
enum ZcRowType
    {
        zcUnknownRow	= 0,
        zcDataRow	= 1,
        zcTitleRow	= 2,
        zcHeaderRow	= 4
    } 	ZcRowType;

typedef   DECLSPEC_UUID("EC9231A4-5A17-11E7-B72E-BC5FF42AC839")
enum ZcValueDataType
    {
        zcUnknownDataType	= 0,
        zcLong	= ( 0x1 << 0 ) ,
        zcDouble	= ( 0x1 << 1 ) ,
        zcString	= ( 0x1 << 2 ) ,
        zcDate	= ( 0x1 << 3 ) ,
        zcPoint2d	= ( 0x1 << 4 ) ,
        zcPoint3d	= ( 0x1 << 5 ) ,
        zcObjectId	= ( 0x1 << 6 ) ,
        zcBuffer	= ( 0x1 << 7 ) ,
        zcResbuf	= ( 0x1 << 8 ) ,
        zcGeneral	= ( 0x1 << 9 )
    } 	ZcValueDataType;

typedef   DECLSPEC_UUID("EC922FF2-5A17-11E7-B72E-BC5FF42AC839")
enum ZcValueUnitType
    {
        zcUnitless	= 0,
        zcUnitDistance	= ( 0x1 << 0 ) ,
        zcUnitAngle	= ( 0x1 << 1 ) ,
        zcUnitArea	= ( 0x1 << 2 ) ,
        zcUnitVolume	= ( 0x1 << 3 )
    } 	ZcValueUnitType;

typedef   DECLSPEC_UUID("EC923070-5A17-11E7-B72E-BC5FF42AC839")
enum ZcParseOption
    {
        zcParseOptionNone	= 0,
        zcSetDefaultFormat	= ( 0x1 << 0 ) ,
        zcPreserveMtextFormat	= ( 0x1 << 1 )
    } 	ZcParseOption;

typedef   DECLSPEC_UUID("EC92313E-5A17-11E7-B72E-BC5FF42AC839")
enum ZcFormatOption
    {
        kFormatOptionNone	= 0,
        zcForEditing	= ( 0x1 << 0 ) ,
        zcForExpression	= ( 0x1 << 1 ) ,
        zcUseMaximumPrecision	= ( 0x1 << 2 ) ,
        zcIgnoreMtextFormat	= ( 0x1 << 3 )
    } 	ZcFormatOption;

typedef   DECLSPEC_UUID("EC92311A-5A17-11E7-B72E-BC5FF42AC839")
enum ZcGridLineType
    {
        zcInvalidGridLine	= 0,
        zcHorzTop	= 1,
        zcHorzInside	= 2,
        zcHorzBottom	= 4,
        zcVertLeft	= 8,
        zcVertInside	= 0x10,
        zcVertRight	= 0x20
    } 	ZcGridLineType;

typedef   DECLSPEC_UUID("EC9231C2-5A17-11E7-B72E-BC5FF42AC839")
enum ZcCellType
    {
        zcUnknownCell	= 0,
        zcTextCell	= 1,
        zcBlockCell	= 2
    } 	ZcCellType;

typedef   DECLSPEC_UUID("EC9230AD-5A17-11E7-B72E-BC5FF42AC839")
enum ZcCellEdgeMask
    {
        zcTopMask	= 1,
        zcRightMask	= 2,
        zcBottomMask	= 4,
        zcLeftMask	= 8
    } 	ZcCellEdgeMask;

typedef   DECLSPEC_UUID("EC922FF5-5A17-11E7-B72E-BC5FF42AC839")
enum ZcRotationAngle
    {
        zcDegreesUnknown	= -1,
        zcDegrees000	= 0,
        zcDegrees090	= 1,
        zcDegrees180	= 2,
        zcDegrees270	= 3
    } 	ZcRotationAngle;

typedef   DECLSPEC_UUID("EC9230EE-5A17-11E7-B72E-BC5FF42AC839")
enum ZcMergeCellStyleOption
    {
        zcMergeCellStyleNone	= 0,
        zcMergeCellStyleCopyDuplicates	= 0x1,
        zcMergeCellStyleOverwriteDuplicates	= 0x2,
        zcMergeCellStyleConvertDuplicatesToOverrides	= 0x4,
        zcMergeCellStyleIgnoreNewStyles	= 0x8
    } 	ZcMergeCellStyleOption;

typedef   DECLSPEC_UUID("EC92318E-5A17-11E7-B72E-BC5FF42AC839")
enum ZcSelectType
    {
        zcTableSelectWindow	= 1,
        zcTableSelectCrossing	= 2
    } 	ZcSelectType;

typedef   DECLSPEC_UUID("EC92314A-5A17-11E7-B72E-BC5FF42AC839")
enum ZcOleType
    {
        zcOTLink	= 1,
        zcOTEmbedded	= 2,
        zcOTStatic	= 3
    } 	ZcOleType;

typedef   DECLSPEC_UUID("EC923084-5A17-11E7-B72E-BC5FF42AC839")
enum ZcOlePlotQuality
    {
        zcOPQMonochrome	= 0,
        zcOPQLowGraphics	= ( zcOPQMonochrome + 1 ) ,
        zcOPQHighGraphics	= ( zcOPQLowGraphics + 1 )
    } 	ZcOlePlotQuality;

typedef   DECLSPEC_UUID("EC9230D8-5A17-11E7-B72E-BC5FF42AC839")
enum ZcTableStyleOverrides
    {
        zcTitleSuppressed	= 1,
        zcHeaderSuppressed	= 2,
        zcFlowDirection	= 3,
        zcHorzCellMargin	= 4,
        zcVertCellMargin	= 5,
        zcTitleRowColor	= 6,
        zcHeaderRowColor	= 7,
        zcDataRowColor	= 8,
        zcTitleRowFillNone	= 9,
        zcHeaderRowFillNone	= 10,
        zcDataRowFillNone	= 11,
        zcTitleRowFillColor	= 12,
        zcHeaderRowFillColor	= 13,
        zcDataRowFillColor	= 14,
        zcTitleRowAlignment	= 15,
        zcHeaderRowAlignment	= 16,
        zcDataRowAlignment	= 17,
        zcTitleRowTextStyle	= 18,
        zcHeaderRowTextStyle	= 19,
        zcDataRowTextStyle	= 20,
        zcTitleRowTextHeight	= 21,
        zcHeaderRowTextHeight	= 22,
        zcDataRowTextHeight	= 23,
        zcTitleRowDataType	= 24,
        zcHeaderRowDataType	= 25,
        zcDataRowDataType	= 26,
        zcTitleHorzTopColor	= 40,
        zcTitleHorzInsideColor	= 41,
        zcTitleHorzBottomColor	= 42,
        zcTitleVertLeftColor	= 43,
        zcTitleVertInsideColor	= 44,
        zcTitleVertRightColor	= 45,
        zcHeaderHorzTopColor	= 46,
        zcHeaderHorzInsideColor	= 47,
        zcHeaderHorzBottomColor	= 48,
        zcHeaderVertLeftColor	= 49,
        zcHeaderVertInsideColor	= 50,
        zcHeaderVertRightColor	= 51,
        zcDataHorzTopColor	= 52,
        zcDataHorzInsideColor	= 53,
        zcDataHorzBottomColor	= 54,
        zcDataVertLeftColor	= 55,
        zcDataVertInsideColor	= 56,
        zcDataVertRightColor	= 57,
        zcTitleHorzTopLineWeight	= 70,
        zcTitleHorzInsideLineWeight	= 71,
        zcTitleHorzBottomLineWeight	= 72,
        zcTitleVertLeftLineWeight	= 73,
        zcTitleVertInsideLineWeight	= 74,
        zcTitleVertRightLineWeight	= 75,
        zcHeaderHorzTopLineWeight	= 76,
        zcHeaderHorzInsideLineWeight	= 77,
        zcHeaderHorzBottomLineWeight	= 78,
        zcHeaderVertLeftLineWeight	= 79,
        zcHeaderVertInsideLineWeight	= 80,
        zcHeaderVertRightLineWeight	= 81,
        zcDataHorzTopLineWeight	= 82,
        zcDataHorzInsideLineWeight	= 83,
        zcDataHorzBottomLineWeight	= 84,
        zcDataVertLeftLineWeight	= 85,
        zcDataVertInsideLineWeight	= 86,
        zcDataVertRightLineWeight	= 87,
        zcTitleHorzTopVisibility	= 100,
        zcTitleHorzInsideVisibility	= 101,
        zcTitleHorzBottomVisibility	= 102,
        zcTitleVertLeftVisibility	= 103,
        zcTitleVertInsideVisibility	= 104,
        zcTitleVertRightVisibility	= 105,
        zcHeaderHorzTopVisibility	= 106,
        zcHeaderHorzInsideVisibility	= 107,
        zcHeaderHorzBottomVisibility	= 108,
        zcHeaderVertLeftVisibility	= 109,
        zcHeaderVertInsideVisibility	= 110,
        zcHeaderVertRightVisibility	= 111,
        zcDataHorzTopVisibility	= 112,
        zcDataHorzInsideVisibility	= 113,
        zcDataHorzBottomVisibility	= 114,
        zcDataVertLeftVisibility	= 115,
        zcDataVertInsideVisibility	= 116,
        zcDataVertRightVisibility	= 117,
        zcCellAlign	= 130,
        zcCellBackgroundFillNone	= 131,
        zcCellBackgroundColor	= 132,
        zcCellContentColor	= 133,
        zcCellTextStyle	= 134,
        zcCellTextHeight	= 135,
        zcCellTopGridColor	= 136,
        zcCellRightGridColor	= 137,
        zcCellBottomGridColor	= 138,
        zcCellLeftGridColor	= 139,
        zcCellTopGridLineWeight	= 140,
        zcCellRightGridLineWeight	= 141,
        zcCellBottomGridLineWeight	= 142,
        zcCellLeftGridLineWeight	= 143,
        zcCellTopVisibility	= 144,
        zcCellRightVisibility	= 145,
        zcCellBottomVisibility	= 146,
        zcCellLeftVisibility	= 147,
        zcCellDataType	= 148
    } 	ZcTableStyleOverrides;

typedef   DECLSPEC_UUID("EC92302C-5A17-11E7-B72E-BC5FF42AC839")
enum ZcMLineJustification
    {
        zcTop	= 0,
        zcZero	= 1,
        zcBottom	= 2
    } 	ZcMLineJustification;

typedef   DECLSPEC_UUID("EC922FC4-5A17-11E7-B72E-BC5FF42AC839")
enum ZcBlockScaling
    {
        zcAny	= 0,
        zcUniform	= 1
    } 	ZcBlockScaling;

typedef   DECLSPEC_UUID("EC92316F-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDynamicBlockReferencePropertyUnitsType
    {
        zcNoUnits	= 0,
        zcAngular	= 1,
        zcDistance	= 2,
        zcArea	= 3
    } 	ZcDynamicBlockReferencePropertyUnitsType;

typedef   DECLSPEC_UUID("EC92301F-5A17-11E7-B72E-BC5FF42AC839")
enum ZcSectionState
    {
        zcSectionStatePlane	= ( 0x1 << 0 ) ,
        zcSectionStateBoundary	= ( 0x1 << 1 ) ,
        zcSectionStateVolume	= ( 0x1 << 2 )
    } 	ZcSectionState;

typedef   DECLSPEC_UUID("EC9231D8-5A17-11E7-B72E-BC5FF42AC839")
enum ZcSectionSubItem
    {
        zcSectionSubItemkNone	= 0,
        zcSectionSubItemSectionLine	= ( 0x1 << 0 ) ,
        zcSectionSubItemSectionLineTop	= ( 0x1 << 1 ) ,
        zcSectionSubItemSectionLineBottom	= ( 0x1 << 2 ) ,
        zcSectionSubItemBackLine	= ( 0x1 << 3 ) ,
        zcSectionSubItemBackLineTop	= ( 0x1 << 4 ) ,
        zcSectionSubItemBackLineBottom	= ( 0x1 << 5 ) ,
        zcSectionSubItemVerticalLineTop	= ( 0x1 << 6 ) ,
        zcSectionSubItemVerticalLineBottom	= ( 0x1 << 7 )
    } 	ZcSectionSubItem;

typedef   DECLSPEC_UUID("EC92305C-5A17-11E7-B72E-BC5FF42AC839")
enum ZcSectionType
    {
        zcSectionTypeLiveSection	= ( 0x1 << 0 ) ,
        zcSectionType2dSection	= ( 0x1 << 1 ) ,
        zcSectionType3dSection	= ( 0x1 << 2 )
    } 	ZcSectionType;

typedef   DECLSPEC_UUID("EC9230DB-5A17-11E7-B72E-BC5FF42AC839")
enum ZcSectionGeneration
    {
        zcSectionGenerationSourceAllObjects	= ( 0x1 << 0 ) ,
        zcSectionGenerationSourceSelectedObjects	= ( 0x1 << 1 ) ,
        zcSectionGenerationDestinationNewBlock	= ( 0x1 << 4 ) ,
        zcSectionGenerationDestinationReplaceBlock	= ( 0x1 << 5 ) ,
        zcSectionGenerationDestinationFile	= ( 0x1 << 6 )
    } 	ZcSectionGeneration;

typedef   DECLSPEC_UUID("EC9231C8-5A17-11E7-B72E-BC5FF42AC839")
enum ZcHelixConstrainType
    {
        zcTurnHeight	= 0,
        zcTurns	= 1,
        zcHeight	= 2
    } 	ZcHelixConstrainType;

typedef   DECLSPEC_UUID("EC923154-5A17-11E7-B72E-BC5FF42AC839")
enum ZcShadowDisplayType
    {
        zcCastsAndReceivesShadows	= 0,
        zcCastsShadows	= 1,
        zcReceivesShadows	= 2,
        zcIgnoreShadows	= 3
    } 	ZcShadowDisplayType;

typedef   DECLSPEC_UUID("EC9230E2-5A17-11E7-B72E-BC5FF42AC839")
enum ZcLoftedSurfaceNormalType
    {
        zcRuled	= 0,
        zcSmooth	= 1,
        zcFirstNormal	= 2,
        zcLastNormal	= 3,
        zcEndsNormal	= 4,
        zcAllNormal	= 5,
        zcUseDraftAngles	= 6
    } 	ZcLoftedSurfaceNormalType;

typedef   DECLSPEC_UUID("EC9231A6-5A17-11E7-B72E-BC5FF42AC839")
enum ZcHelixTwistType
    {
        zcCCW	= 0,
        zcCW	= 1
    } 	ZcHelixTwistType;

typedef   DECLSPEC_UUID("EC92303B-5A17-11E7-B72E-BC5FF42AC839")
enum ZcUnderlayLayerOverrideType
    {
        zcNoOverrides	= 0,
        zcApplied	= 1
    } 	ZcUnderlayLayerOverrideType;

typedef   DECLSPEC_UUID("EC9230CC-5A17-11E7-B72E-BC5FF42AC839")
enum ZcTableFlowDirection
    {
        zcTableFlowRight	= 0x1,
        zcTableFlowDownOrUp	= 0x2,
        zcTableFlowLeft	= 0x4
    } 	ZcTableFlowDirection;

typedef   DECLSPEC_UUID("EC922FE6-5A17-11E7-B72E-BC5FF42AC839")
enum ZcCellMargin
    {
        zcCellMarginTop	= 0x1,
        zcCellMarginLeft	= 0x2,
        zcCellMarginBottom	= 0x4,
        zcCellMarginRight	= 0x8,
        zcCellMarginHorzSpacing	= 0x10,
        zcCellMarginVertSpacing	= 0x20
    } 	ZcCellMargin;

typedef   DECLSPEC_UUID("EC923033-5A17-11E7-B72E-BC5FF42AC839")
enum ZcCellContentLayout
    {
        zcCellContentLayoutFlow	= 0x1,
        zcCellContentLayoutStackedHorizontal	= 0x2,
        zcCellContentLayoutStackedVertical	= 0x4
    } 	ZcCellContentLayout;

typedef   DECLSPEC_UUID("EC923071-5A17-11E7-B72E-BC5FF42AC839")
enum ZcCellProperty
    {
        zcInvalidCellProperty	= 0,
        zcLock	= ( 0x1 << 0 ) ,
        zcDataType	= ( 0x1 << 1 ) ,
        zcDataFormat	= ( 0x1 << 2 ) ,
        zcRotation	= ( 0x1 << 3 ) ,
        zcScale	= ( 0x1 << 4 ) ,
        zcAlignmentProperty	= ( 0x1 << 5 ) ,
        zcContentColor	= ( 0x1 << 6 ) ,
        zcBackgroundColor	= ( 0x1 << 7 ) ,
        zcTextStyle	= ( 0x1 << 8 ) ,
        zcTextHeight	= ( 0x1 << 9 ) ,
        zcMarginLeft	= ( 0x1 << 10 ) ,
        zcMarginTop	= ( 0x1 << 11 ) ,
        zcMarginRight	= ( 0x1 << 12 ) ,
        zcMarginBottom	= ( 0x1 << 13 ) ,
        zcEnableBackgroundColor	= ( 0x1 << 14 ) ,
        zcAutoScale	= ( 0x1 << 15 ) ,
        zcMergeAll	= ( 0x1 << 16 ) ,
        zcFlowDirBtoT	= ( 0x1 << 17 ) ,
        zcContentLayout	= ( 0x1 << 18 ) ,
        zcDataTypeAndFormat	= ( zcDataType | zcDataFormat ) ,
        zcContentProperties	= (((((((( zcDataType | zcDataFormat )  | zcRotation )  | zcScale )  | zcAlignmentProperty )  | zcContentColor )  | zcTextStyle )  | zcTextHeight )  | zcAutoScale ) ,
        zcBitProperties	= ((( zcEnableBackgroundColor | zcAutoScale )  | zcMergeAll )  | zcFlowDirBtoT ) ,
        zcAllCellProperties	= (((((((((((((((((( zcLock | zcDataType )  | zcDataFormat )  | zcRotation )  | zcScale )  | zcAlignmentProperty )  | zcContentColor )  | zcBackgroundColor )  | zcTextStyle )  | zcTextHeight )  | zcMarginLeft )  | zcMarginTop )  | zcMarginRight )  | zcMarginBottom )  | zcEnableBackgroundColor )  | zcAutoScale )  | zcMergeAll )  | zcFlowDirBtoT )  | zcContentLayout )
    } 	ZcCellProperty;

typedef   DECLSPEC_UUID("EC9231EE-5A17-11E7-B72E-BC5FF42AC839")
enum ZcGridLineStyle
    {
        zcGridLineStyleSingle	= 1,
        zcGridLineStyleDouble	= 2
    } 	ZcGridLineStyle;

typedef   DECLSPEC_UUID("EC9231F5-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDataLinkUpdateDirection
    {
        zcUpdateDataFromSource	= 0x1,
        zcUpdateSourceFromData	= 0x2
    } 	ZcDataLinkUpdateDirection;

typedef   DECLSPEC_UUID("EC922FEB-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDataLinkUpdateOption
    {
        zcUpdateOptionNone	= 0,
        zcUpdateOptionOverwriteContentModifiedAfterUpdate	= 0x20000,
        zcUpdateOptionOverwriteFormatModifiedAfterUpdate	= 0x40000,
        zcUpdateOptionUpdateFullSourceRange	= 0x80000,
        zcUpdateOptionIncludeXrefs	= 0x100000
    } 	ZcDataLinkUpdateOption;

typedef   DECLSPEC_UUID("EC923026-5A17-11E7-B72E-BC5FF42AC839")
enum ZcCellContentType
    {
        zcCellContentTypeUnknown	= 0,
        zcCellContentTypeValue	= ( 0x1 << 0 ) ,
        zcCellContentTypeField	= ( 0x1 << 1 ) ,
        zcCellContentTypeBlock	= ( 0x1 << 2 )
    } 	ZcCellContentType;

typedef   DECLSPEC_UUID("EC923130-5A17-11E7-B72E-BC5FF42AC839")
enum ZcCellState
    {
        zcCellStateNone	= 0,
        zcCellStateContentLocked	= 0x1,
        zcCellStateContentReadOnly	= 0x2,
        zcCellStateFormatLocked	= 0x4,
        zcCellStateFormatReadOnly	= 0x8,
        zcCellStateLinked	= 0x10,
        zcCellStateContentModified	= 0x20,
        zcCellStateFormatModified	= 0x40
    } 	ZcCellState;

typedef   DECLSPEC_UUID("EC9231A0-5A17-11E7-B72E-BC5FF42AC839")
enum ZcCellOption
    {
        kCellOptionNone	= 0,
        kInheritCellFormat	= 0x1
    } 	ZcCellOption;

typedef   DECLSPEC_UUID("EC9230DC-5A17-11E7-B72E-BC5FF42AC839")
enum ZcTextAttachmentType
    {
        zcAttachmentTopOfTop	= 0,
        zcAttachmentMiddleOfTop	= 1,
        zcAttachmentBottomOfTop	= 2,
        zcAttachmentBottomOfTopLine	= 3,
        zcAttachmentMiddle	= 4,
        zcAttachmentMiddleOfBottom	= 5,
        zcAttachmentBottomOfBottom	= 6,
        zcAttachmentBottomLine	= 7,
        zcAttachmentAllLine	= 8
    } 	ZcTextAttachmentType;

typedef   DECLSPEC_UUID("EC9230BB-5A17-11E7-B72E-BC5FF42AC839")
enum ZcMLeaderType
    {
        zcStraightLeader	= 1,
        zcSplineLeader	= 2,
        zcInVisibleLeader	= 0
    } 	ZcMLeaderType;

typedef   DECLSPEC_UUID("EC923143-5A17-11E7-B72E-BC5FF42AC839")
enum ZcMLeaderContentType
    {
        zcNoneContent	= 0,
        zcBlockContent	= 1,
        zcMTextContent	= 2
    } 	ZcMLeaderContentType;

typedef   DECLSPEC_UUID("EC922FD1-5A17-11E7-B72E-BC5FF42AC839")
enum ZcTextAlignmentType
    {
        zcLeftAlignment	= 0,
        zcCenterAlignment	= 1,
        zcRightAlignment	= 2
    } 	ZcTextAlignmentType;

typedef   DECLSPEC_UUID("EC923082-5A17-11E7-B72E-BC5FF42AC839")
enum ZcTextAngleType
    {
        zcInsertAngle	= 0,
        zcHorizontalAngle	= 1,
        zcAlwaysRightReadingAngle	= 2
    } 	ZcTextAngleType;

typedef   DECLSPEC_UUID("EC92312E-5A17-11E7-B72E-BC5FF42AC839")
enum ZcBlockConnectionType
    {
        zcConnectExtents	= 0,
        zcConnectBase	= 1
    } 	ZcBlockConnectionType;

typedef   DECLSPEC_UUID("EC923018-5A17-11E7-B72E-BC5FF42AC839")
enum ZcPredefBlockType
    {
        zcBlockImperial	= 0,
        zcBlockSlot	= 1,
        zcBlockCircle	= 2,
        zcBlockBox	= 3,
        zcBlockHexagon	= 4,
        zcBlockTriangle	= 5,
        zcBlockUserDefined	= 6
    } 	ZcPredefBlockType;

typedef   DECLSPEC_UUID("EC923062-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDrawLeaderOrderType
    {
        zcDrawLeaderHeadFirst	= 0,
        zcDrawLeaderTailFirst	= 1
    } 	ZcDrawLeaderOrderType;

typedef   DECLSPEC_UUID("EC923051-5A17-11E7-B72E-BC5FF42AC839")
enum ZcDrawMLeaderOrderType
    {
        zcDrawContentFirst	= 0,
        zcDrawLeaderFirst	= 1
    } 	ZcDrawMLeaderOrderType;

typedef   DECLSPEC_UUID("EC92303C-5A17-11E7-B72E-BC5FF42AC839")
enum ZcSegmentAngleType
    {
        zcDegreesAny	= 0,
        zcDegrees15	= 1,
        zcDegrees30	= 2,
        zcDegrees45	= 3,
        zcDegrees60	= 4,
        zcDegrees90	= 6,
        zcDegreesHorz	= 12
    } 	ZcSegmentAngleType;

typedef   DECLSPEC_UUID("EC92310D-5A17-11E7-B72E-BC5FF42AC839")
enum ZcTextAttachmentDirection
    {
        zcAttachmentHorizontal	= 0,
        zcAttachmentVertical	= 1
    } 	ZcTextAttachmentDirection;

typedef   DECLSPEC_UUID("EC923198-5A17-11E7-B72E-BC5FF42AC839")
enum ZcVerticalTextAttachmentType
    {
        zcAttachmentCenter	= 0,
        zcAttachmentLinedCenter	= 1
    } 	ZcVerticalTextAttachmentType;

typedef   DECLSPEC_UUID("FE02ADB1-55F7-403F-9834-1CD7259087AB")
enum ZcMeshCreaseType
    {
        zcNoneCrease	= 0,
        zcAlwaysCrease	= 1,
        zcCreaseByLevel	= 2
    } 	ZcMeshCreaseType;


typedef   DECLSPEC_UUID("EC923105-5A17-11E7-B72E-BC5FF42AC839")
enum ZcWireframeType
    {
        zcIsolines	= 0,
        zcIsoparms	= 1
    } 	ZcWireframeType;

typedef   DECLSPEC_UUID("6545B69A-68E4-403F-8189-44D2039F6E8B")
enum ZcSplineKnotParameterizationType
    {
        zcChord	= 0,
        zcSqrtChord	= 1,
        zcUniformParam	= 2,
        zcCustomParameterization	= 15
    } 	ZcSplineKnotParameterizationType;

typedef   DECLSPEC_UUID("386385C0-2214-4FBA-B46E-B9E0F8DB0678")
enum ZcSplineFrameType
    {
        zcShow	= 0,
        zcHide	= 1
    } 	ZcSplineFrameType;

typedef   DECLSPEC_UUID("8EBC6C2E-89AF-4D14-AEC5-664721D88FDC")
enum ZcSplineMethodType
    {
        zcFit	= 0,
        zcControlVertices	= 1
    } 	ZcSplineMethodType;

typedef   DECLSPEC_UUID("D048709F-F641-4664-9D90-7D88306B58A4")
enum ZcPointCloudColorType
    {
        zcTrueColor	= 0,
        zcByColor	= 1
    } 	ZcPointCloudColorType;

typedef   DECLSPEC_UUID("28EE0ACA-297A-45D7-8494-CA74DB843236")
enum ZcPointCloudStylizationType
    {
        zcScanColor	= 0,
        zcObjectColor	= 1,
        zcNormal	= 2,
        zcIntensity	= 3
    } 	ZcPointCloudStylizationType;

typedef   DECLSPEC_UUID("E65B4D2A-F8A7-464D-9BA5-8DD262589F37")
enum ZcPointCloudIntensityStyle
    {
        zcIntensityGrayscale	= 0,
        zcIntensityRainbow	= 1,
        zcIntensityRed	= 2,
        zcIntensityGreen	= 3,
        zcIntensityBlue	= 4,
        zcIntensityEditableFlag	= 5
    } 	ZcPointCloudIntensityStyle;

typedef   DECLSPEC_UUID("0CFCD999-A3BF-4D24-9CB0-527D13980144")
enum ZcPointCloudExStylizationType
    {
        zcRGB	= 0,
        zcObject	= 1,
        zcNormals	= 2,
        zcIntensities	= 3,
        zcElevation	= 4,
        zcClassification	= 5
    } 	ZcPointCloudExStylizationType;

#pragma once

typedef  DECLSPEC_UUID("EC92319F-5A17-11E7-B72E-BC5FF42AC839") 
enum ZcColorMethod
    {
        zcColorMethodByLayer	= 192,
        zcColorMethodByBlock	= 193,
        zcColorMethodByRGB	= 194,
        zcColorMethodByACI	= 195,
        zcColorMethodForeground	= 197
    } 	ZcColorMethod;


typedef   DECLSPEC_UUID("AA8B80DE-EA59-4EAE-AA3E-C8BF3A5A6C89")
enum __MIDL___MIDL_itf_zxauto_0381_0001
    {
        ZCADSECURITYPARAMS_ENCRYPT_DATA	= 0x1,
        ZCADSECURITYPARAMS_ENCRYPT_PROPS	= 0x2,
        ZCADSECURITYPARAMS_SIGN_DATA	= 0x10,
        ZCADSECURITYPARAMS_ADD_TIMESTAMP	= 0x20
    } 	ZcadSecurityParamsType;

typedef   DECLSPEC_UUID("1B992019-15A0-4BCD-8C8D-79DD5C4AE171")
enum __MIDL___MIDL_itf_zxauto_0381_0002
    {
        ZCADSECURITYPARAMS_ALGID_RC4	= 0x6801
    } 	ZcadSecurityParamsConstants;

DEFINE_GUID(LIBID_ZXAUTOLib,0xEC92300C,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifndef __IZcadObject_INTERFACE_DEFINED__
#define __IZcadObject_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadObject,0xEC9230C6,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9230C6-5A17-11E7-B72E-BC5FF42AC839")
    IZcadObject : public IDispatch
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Handle(
             BSTR *Handle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ObjectName(
             BSTR *ObjectName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetXData(
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetXData(
             VARIANT XDataType,
             VARIANT XDataValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Delete( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ObjectID(
             LONG_PTR *ObjectId) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Application(
             LPDISPATCH *ApplicationObject) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Database(
             IZcadDatabase **pDatabase) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_HasExtensionDictionary(
             VARIANT_BOOL *bHasDictionary) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetExtensionDictionary(
             IZcadDictionary **pExtDictionary) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_OwnerID(
             LONG_PTR *OwnerId) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Document(
             LPDISPATCH *pDocument) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Erase( void) = 0;

    };

#else

    typedef struct IZcadObjectVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadObject * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadObject * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadObject * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadObject * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadObject * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadObject * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadObject * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadObject * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadObject * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadObject * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadObject * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadObject * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadObject * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadObject * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadObject * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadObject * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadObject * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadObject * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadObject * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadObject * This);

        END_INTERFACE
    } IZcadObjectVtbl;

    interface IZcadObject
    {
        CONST_VTBL struct IZcadObjectVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadObject_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadObject_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadObject_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadObject_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadObject_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadObject_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadObject_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadObject_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadObject_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadObject_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadObject_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadObject_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadObject_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadObject_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadObject_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadObject_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadObject_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadObject_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadObject_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadObject_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))

#endif
#endif


#endif

#ifndef __IZcadDictionary_INTERFACE_DEFINED__
#define __IZcadDictionary_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadDictionary,0xEC922FDA,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC922FDA-5A17-11E7-B72E-BC5FF42AC839")
    IZcadDictionary : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Name(
             BSTR *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Name(
             BSTR newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddObject(
             BSTR Keyword,
             BSTR ObjectName,
             IZcadObject **pNewObj) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetName(
             IZcadObject *Object,
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetObject(
             BSTR Name,
             IZcadObject **pObj) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Remove(
             BSTR Name,
             IZcadObject **pObj) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Rename(
             BSTR OldName,
             BSTR NewName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Replace(
             BSTR OldName,
             IZcadObject *pObj) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Item(
             VARIANT Index,
             IZcadObject **pItem) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get__NewEnum(
             LPUNKNOWN *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Count(
             long *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddXRecord(
             BSTR Keyword,
             IZcadXRecord **pNewXRecord) = 0;

    };

#else

    typedef struct IZcadDictionaryVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadDictionary * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadDictionary * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadDictionary * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadDictionary * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadDictionary * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadDictionary * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadDictionary * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadDictionary * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadDictionary * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadDictionary * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadDictionary * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadDictionary * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadDictionary * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadDictionary * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadDictionary * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadDictionary * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadDictionary * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadDictionary * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadDictionary * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadDictionary * This);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadDictionary * This,
             BSTR *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadDictionary * This,
             BSTR newVal);

         HRESULT ( STDMETHODCALLTYPE *AddObject )(
            IZcadDictionary * This,
             BSTR Keyword,
             BSTR ObjectName,
             IZcadObject **pNewObj);

         HRESULT ( STDMETHODCALLTYPE *GetName )(
            IZcadDictionary * This,
             IZcadObject *Object,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *GetObject )(
            IZcadDictionary * This,
             BSTR Name,
             IZcadObject **pObj);

         HRESULT ( STDMETHODCALLTYPE *Remove )(
            IZcadDictionary * This,
             BSTR Name,
             IZcadObject **pObj);

         HRESULT ( STDMETHODCALLTYPE *Rename )(
            IZcadDictionary * This,
             BSTR OldName,
             BSTR NewName);

         HRESULT ( STDMETHODCALLTYPE *Replace )(
            IZcadDictionary * This,
             BSTR OldName,
             IZcadObject *pObj);

         HRESULT ( STDMETHODCALLTYPE *Item )(
            IZcadDictionary * This,
             VARIANT Index,
             IZcadObject **pItem);

         HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            IZcadDictionary * This,
             LPUNKNOWN *pVal);

         HRESULT ( STDMETHODCALLTYPE *get_Count )(
            IZcadDictionary * This,
             long *pVal);

         HRESULT ( STDMETHODCALLTYPE *AddXRecord )(
            IZcadDictionary * This,
             BSTR Keyword,
             IZcadXRecord **pNewXRecord);

        END_INTERFACE
    } IZcadDictionaryVtbl;

    interface IZcadDictionary
    {
        CONST_VTBL struct IZcadDictionaryVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadDictionary_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadDictionary_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadDictionary_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadDictionary_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadDictionary_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadDictionary_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadDictionary_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadDictionary_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadDictionary_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadDictionary_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadDictionary_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadDictionary_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadDictionary_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadDictionary_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadDictionary_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadDictionary_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadDictionary_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadDictionary_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadDictionary_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadDictionary_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadDictionary_get_Name(This,pVal)	\
    ((This)->lpVtbl -> get_Name(This,pVal))

#define IZcadDictionary_put_Name(This,newVal)	\
    ((This)->lpVtbl -> put_Name(This,newVal))

#define IZcadDictionary_AddObject(This,Keyword,ObjectName,pNewObj)	\
    ((This)->lpVtbl -> AddObject(This,Keyword,ObjectName,pNewObj))

#define IZcadDictionary_GetName(This,Object,bstrName)	\
    ((This)->lpVtbl -> GetName(This,Object,bstrName))

#define IZcadDictionary_GetObject(This,Name,pObj)	\
    ((This)->lpVtbl -> GetObject(This,Name,pObj))

#define IZcadDictionary_Remove(This,Name,pObj)	\
    ((This)->lpVtbl -> Remove(This,Name,pObj))

#define IZcadDictionary_Rename(This,OldName,NewName)	\
    ((This)->lpVtbl -> Rename(This,OldName,NewName))

#define IZcadDictionary_Replace(This,OldName,pObj)	\
    ((This)->lpVtbl -> Replace(This,OldName,pObj))

#define IZcadDictionary_Item(This,Index,pItem)	\
    ((This)->lpVtbl -> Item(This,Index,pItem))

#define IZcadDictionary_get__NewEnum(This,pVal)	\
    ((This)->lpVtbl -> get__NewEnum(This,pVal))

#define IZcadDictionary_get_Count(This,pVal)	\
    ((This)->lpVtbl -> get_Count(This,pVal))

#define IZcadDictionary_AddXRecord(This,Keyword,pNewXRecord)	\
    ((This)->lpVtbl -> AddXRecord(This,Keyword,pNewXRecord))

#endif
#endif


#endif

#ifndef __IZcadEntity_INTERFACE_DEFINED__
#define __IZcadEntity_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadEntity,0xEC922FE0,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC922FE0-5A17-11E7-B72E-BC5FF42AC839")
    IZcadEntity : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_TrueColor(
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TrueColor(
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Layer(
             BSTR *Layer) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Layer(
             BSTR Layer) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Linetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Linetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LinetypeScale(
             ZCAD_NOUNITS *ltScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LinetypeScale(
             ZCAD_NOUNITS ltScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Visible(
             VARIANT_BOOL *bVisible) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Visible(
             VARIANT_BOOL bVisible) = 0;

        virtual  HRESULT STDMETHODCALLTYPE ArrayPolar(
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs) = 0;

        virtual  HRESULT STDMETHODCALLTYPE ArrayRectangular(
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Highlight(
             VARIANT_BOOL HighlightFlag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Copy(
             LPDISPATCH *pCopyObj) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Move(
             VARIANT FromPoint,
             VARIANT ToPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Rotate(
             VARIANT BasePoint,
             double RotationAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Rotate3D(
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Mirror(
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Mirror3D(
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj) = 0;

        virtual  HRESULT STDMETHODCALLTYPE ScaleEntity(
             VARIANT BasePoint,
             double ScaleFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE TransformBy(
             VARIANT TransformationMatrix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Update( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetBoundingBox(
             VARIANT *MinPoint,
             VARIANT *MaxPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE IntersectWith(
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PlotStyleName(
             BSTR *plotStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PlotStyleName(
             BSTR plotStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Lineweight(
             ZCAD_LWEIGHT *lineweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Lineweight(
             ZCAD_LWEIGHT lineweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EntityTransparency(
             BSTR *transparency) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_EntityTransparency(
             BSTR transparency) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Hyperlinks(
             IZcadHyperlinks **HyperLinks) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Material(
             BSTR *Material) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Material(
             BSTR Material) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EntityName(
             BSTR *EntityName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EntityType(
             long *entType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Color(
             ZCAD_COLOR *Color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Color(
             ZCAD_COLOR Color) = 0;

    };

#else

    typedef struct IZcadEntityVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadEntity * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadEntity * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadEntity * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadEntity * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadEntity * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadEntity * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadEntity * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadEntity * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadEntity * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadEntity * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadEntity * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadEntity * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadEntity * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadEntity * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadEntity * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadEntity * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadEntity * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadEntity * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadEntity * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadEntity * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadEntity * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadEntity * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadEntity * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadEntity * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadEntity * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadEntity * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadEntity * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadEntity * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadEntity * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadEntity * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadEntity * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadEntity * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadEntity * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadEntity * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadEntity * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadEntity * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadEntity * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadEntity * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadEntity * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadEntity * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadEntity * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadEntity * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadEntity * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadEntity * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadEntity * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadEntity * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadEntity * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadEntity * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadEntity * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadEntity * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadEntity * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadEntity * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadEntity * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadEntity * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadEntity * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadEntity * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadEntity * This,
             ZCAD_COLOR Color);

        END_INTERFACE
    } IZcadEntityVtbl;

    interface IZcadEntity
    {
        CONST_VTBL struct IZcadEntityVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadEntity_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadEntity_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadEntity_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadEntity_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadEntity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadEntity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadEntity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadEntity_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadEntity_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadEntity_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadEntity_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadEntity_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadEntity_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadEntity_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadEntity_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadEntity_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadEntity_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadEntity_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadEntity_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadEntity_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadEntity_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadEntity_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadEntity_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadEntity_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadEntity_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadEntity_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadEntity_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadEntity_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadEntity_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadEntity_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadEntity_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadEntity_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadEntity_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadEntity_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadEntity_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadEntity_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadEntity_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadEntity_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadEntity_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadEntity_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadEntity_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadEntity_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadEntity_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadEntity_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadEntity_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadEntity_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadEntity_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadEntity_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadEntity_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadEntity_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadEntity_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadEntity_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadEntity_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadEntity_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadEntity_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadEntity_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadEntity_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))

#endif
#endif


#endif

#ifndef __IZcadBlock_INTERFACE_DEFINED__
#define __IZcadBlock_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadBlock,0xEC9230D7,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9230D7-5A17-11E7-B72E-BC5FF42AC839")
    IZcadBlock : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE Item(
             VARIANT Index,
             IZcadEntity **pItem) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get__NewEnum(
             LPUNKNOWN *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Count(
             long *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Name(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Name(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Origin(
             VARIANT *origin) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Origin(
             VARIANT origin) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddCustomObject(
             BSTR ClassName,
             LPDISPATCH *pObject) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Add3DFace(
             VARIANT Point1,
             VARIANT Point2,
             VARIANT Point3,
             VARIANT Point4,
             IZcad3DFace **pFace3d) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Add3DMesh(
             int M,
             int N,
             VARIANT PointsMatrix,
             IZcadPolygonMesh **pMesh3d) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Add3DPoly(
             VARIANT PointsArray,
             IZcad3DPolyline **pPoly3d) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddArc(
             VARIANT Center,
             double Radius,
             double StartAngle,
             double EndAngle,
             IZcadArc **pArc) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddAttribute(
             double Height,
             ZcAttributeMode Mode,
             BSTR Prompt,
             VARIANT InsertionPoint,
             BSTR Tag,
             BSTR Value,
             IZcadAttribute **pAttr) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddBox(
             VARIANT Origin,
             double Length,
             double Width,
             double Height,
             IZcad3DSolid **pBox) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddCircle(
             VARIANT center,
             double radius,
             IZcadCircle **pCircle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddCone(
             VARIANT Center,
             double BaseRadius,
             double Height,
             IZcad3DSolid **pCone) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddCylinder(
             VARIANT Center,
             double Radius,
             double Height,
             IZcad3DSolid **pCyl) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddDimAligned(
             VARIANT ExtLine1Point,
             VARIANT ExtLine2Point,
             VARIANT TextPosition,
             IZcadDimAligned **pDim) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddDimAngular(
             VARIANT AngleVertex,
             VARIANT FirstEndPoint,
             VARIANT SecondEndPoint,
             VARIANT TextPoint,
             IZcadDimAngular **pDim) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddDimDiametric(
             VARIANT ChordPoint,
             VARIANT FarChordPoint,
             double LeaderLength,
             IZcadDimDiametric **pDim) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddDimRotated(
             VARIANT ExtLine1Point,
             VARIANT ExtLine2Point,
             VARIANT DimLineLocation,
             double RotationAngle,
             IZcadDimRotated **pDim) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddDimOrdinate(
             VARIANT DefinitionPoint,
             VARIANT LeaderEndPoint,
             int UseXAxis,
             IZcadDimOrdinate **pDim) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddDimRadial(
             VARIANT Center,
             VARIANT ChordPoint,
             double LeaderLength,
             IZcadDimRadial **pDim) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddEllipse(
             VARIANT Center,
             VARIANT MajorAxis,
             double RadiusRatio,
             IZcadEllipse **pEllipse) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddEllipticalCone(
             VARIANT Center,
             double MajorRadius,
             double MinorRadius,
             double Height,
             IZcad3DSolid **pEllipCone) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddEllipticalCylinder(
             VARIANT Center,
             double MajorRadius,
             double MinorRadius,
             double Height,
             IZcad3DSolid **pEllipCyl) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddExtrudedSolid(
             IZcadRegion *Profile,
             double Height,
             double TaperAngle,
             IZcad3DSolid **pExtrSolid) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddExtrudedSolidAlongPath(
             IZcadRegion *Profile,
             IDispatch *Path,
             IZcad3DSolid **pExtrSolid) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddLeader(
             VARIANT PointsArray,
             IZcadEntity *Annotation,
             ZcLeaderType Type,
             IZcadLeader **pLeader) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddMText(
             VARIANT InsertionPoint,
             double Width,
             BSTR Text,
             IZcadMText **pMtext) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddPoint(
             VARIANT Point,
             IZcadPoint **pPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddLightWeightPolyline(
             VARIANT VerticesList,
             IZcadLWPolyline **pLWPolyline) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddPolyline(
             VARIANT VerticesList,
             IZcadPolyline **pPolyline) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddRay(
             VARIANT Point1,
             VARIANT Point2,
             IZcadRay **pRay) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddRegion(
             VARIANT ObjectList,
             VARIANT *pRegions) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddRevolvedSolid(
             IZcadRegion *Profile,
             VARIANT AxisPoint,
             VARIANT AxisDir,
             double Angle,
             IZcad3DSolid **pRevolSolid) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddShape(
             BSTR Name,
             VARIANT InsertionPoint,
             double scaleFactor,
             double rotationAngle,
             IZcadShape **pShape) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddSolid(
             VARIANT Point1,
             VARIANT Point2,
             VARIANT Point3,
             VARIANT Point4,
             IZcadSolid **pSolid) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddSphere(
             VARIANT Center,
             double Radius,
             IZcad3DSolid **pSphere) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddSpline(
             VARIANT PointsArray,
             VARIANT StartTangent,
             VARIANT EndTangent,
             IZcadSpline **pSpline) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddText(
             BSTR TextString,
             VARIANT InsertionPoint,
             double Height,
             IZcadText **pText) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddTolerance(
             BSTR Text,
             VARIANT InsertionPoint,
             VARIANT Direction,
             IZcadTolerance **pTolerance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddTorus(
             VARIANT Center,
             double TorusRadius,
             double TubeRadius,
             IZcad3DSolid **pTorus) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddTrace(
             VARIANT PointsArray,
             IZcadTrace **pTrace) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddWedge(
             VARIANT Center,
             double Length,
             double Width,
             double Height,
             IZcad3DSolid **pWedge) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddXline(
             VARIANT Point1,
             VARIANT Point2,
             IZcadXline **pXline) = 0;

        virtual  HRESULT STDMETHODCALLTYPE InsertBlock(
             VARIANT InsertionPoint,
             BSTR Name,
             double Xscale,
             double Yscale,
             double Zscale,
             double Rotation,
             VARIANT Password,
             IZcadBlockReference **pBlkRef) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddHatch(
             int PatternType,
             BSTR PatternName,
             VARIANT_BOOL Associativity,
             VARIANT HatchObjectType,
             IZcadHatch **pHatch) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddRaster(
             BSTR ImageFileName,
             VARIANT InsertionPoint,
             double ScaleFactor,
             double RotationAngle,
             IZcadRasterImage **pRaster) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddLine(
             VARIANT StartPoint,
             VARIANT EndPoint,
             IZcadLine **pLine) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IsLayout(
             VARIANT_BOOL *bIsLayout) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Layout(
             IZcadLayout **pLayout) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IsXRef(
             VARIANT_BOOL *pIsXRref) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddMInsertBlock(
             VARIANT InsertionPoint,
             BSTR Name,
             double Xscale,
             double Yscale,
             double Zscale,
             double Rotation,
             long NumRows,
             long NumColumns,
             long RowSpacing,
             long ColumnSpacing,
             VARIANT Password,
             IZcadMInsertBlock **pMInsertBlk) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddPolyfaceMesh(
             VARIANT VertexList,
             VARIANT FaceList,
             IZcadPolyfaceMesh **pPFMesh) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddMLine(
             VARIANT VertexList,
             IZcadMLine **pMLine) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddDim3PointAngular(
             VARIANT AngleVertex,
             VARIANT FirstEndPoint,
             VARIANT SecondEndPoint,
             VARIANT TextPoint,
             IZcadDim3PointAngular **pDim) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_XRefDatabase(
             IZcadDatabase **pDatabase) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AttachExternalReference(
             BSTR PathName,
             BSTR Name,
             VARIANT InsertionPoint,
             double Xscale,
             double Yscale,
             double Zscale,
             double Rotation,
             VARIANT_BOOL bOverlay,
             VARIANT Password,
             IZcadExternalReference **pXRef) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Unload( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Reload( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Bind(
             VARIANT_BOOL bPrefixName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Detach( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddTable(
             VARIANT InsertionPoint,
             int NumRows,
             int NumColumns,
             double RowHeight,
             double ColWidth,
             IZcadTable **pTable) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Path(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Path(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Comments(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Comments(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Units(
             ZcInsertUnits *pIU) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Units(
             ZcInsertUnits IU) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Explodable(
             VARIANT_BOOL *bExplodable) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Explodable(
             VARIANT_BOOL bExplodable) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BlockScaling(
             ZcBlockScaling *pBS) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BlockScaling(
             ZcBlockScaling BS) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IsDynamicBlock(
             VARIANT_BOOL *pDynamicBlock) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddDimArc(
             VARIANT ArcCenter,
             VARIANT FirstEndPoint,
             VARIANT SecondEndPoint,
             VARIANT ArcPoint,
             IZcadDimArcLength **pDim) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddDimRadialLarge(
             VARIANT Center,
             VARIANT ChordPoint,
             VARIANT OverrideCenter,
             VARIANT JogPoint,
             double JogAngle,
             IZcadDimRadialLarge **pDim) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddSection(
             VARIANT fromPoint,
             VARIANT toPoint,
             VARIANT planeVector,
             IZcadSection **ppSecPlane) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddMLeader(
             VARIANT pointsArray,
             int *leaderLineIndex,
             IZcadMLeader **pMLeader) = 0;

    };

#else

    typedef struct IZcadBlockVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadBlock * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadBlock * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadBlock * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadBlock * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadBlock * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadBlock * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadBlock * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadBlock * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadBlock * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadBlock * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadBlock * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadBlock * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadBlock * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadBlock * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadBlock * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadBlock * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadBlock * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadBlock * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadBlock * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadBlock * This);

         HRESULT ( STDMETHODCALLTYPE *Item )(
            IZcadBlock * This,
             VARIANT Index,
             IZcadEntity **pItem);

         HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            IZcadBlock * This,
             LPUNKNOWN *pVal);

         HRESULT ( STDMETHODCALLTYPE *get_Count )(
            IZcadBlock * This,
             long *pVal);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadBlock * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadBlock * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_Origin )(
            IZcadBlock * This,
             VARIANT *origin);

         HRESULT ( STDMETHODCALLTYPE *put_Origin )(
            IZcadBlock * This,
             VARIANT origin);

         HRESULT ( STDMETHODCALLTYPE *AddCustomObject )(
            IZcadBlock * This,
             BSTR ClassName,
             LPDISPATCH *pObject);

         HRESULT ( STDMETHODCALLTYPE *Add3DFace )(
            IZcadBlock * This,
             VARIANT Point1,
             VARIANT Point2,
             VARIANT Point3,
             VARIANT Point4,
             IZcad3DFace **pFace3d);

         HRESULT ( STDMETHODCALLTYPE *Add3DMesh )(
            IZcadBlock * This,
             int M,
             int N,
             VARIANT PointsMatrix,
             IZcadPolygonMesh **pMesh3d);

         HRESULT ( STDMETHODCALLTYPE *Add3DPoly )(
            IZcadBlock * This,
             VARIANT PointsArray,
             IZcad3DPolyline **pPoly3d);

         HRESULT ( STDMETHODCALLTYPE *AddArc )(
            IZcadBlock * This,
             VARIANT Center,
             double Radius,
             double StartAngle,
             double EndAngle,
             IZcadArc **pArc);

         HRESULT ( STDMETHODCALLTYPE *AddAttribute )(
            IZcadBlock * This,
             double Height,
             ZcAttributeMode Mode,
             BSTR Prompt,
             VARIANT InsertionPoint,
             BSTR Tag,
             BSTR Value,
             IZcadAttribute **pAttr);

         HRESULT ( STDMETHODCALLTYPE *AddBox )(
            IZcadBlock * This,
             VARIANT Origin,
             double Length,
             double Width,
             double Height,
             IZcad3DSolid **pBox);

         HRESULT ( STDMETHODCALLTYPE *AddCircle )(
            IZcadBlock * This,
             VARIANT center,
             double radius,
             IZcadCircle **pCircle);

         HRESULT ( STDMETHODCALLTYPE *AddCone )(
            IZcadBlock * This,
             VARIANT Center,
             double BaseRadius,
             double Height,
             IZcad3DSolid **pCone);

         HRESULT ( STDMETHODCALLTYPE *AddCylinder )(
            IZcadBlock * This,
             VARIANT Center,
             double Radius,
             double Height,
             IZcad3DSolid **pCyl);

         HRESULT ( STDMETHODCALLTYPE *AddDimAligned )(
            IZcadBlock * This,
             VARIANT ExtLine1Point,
             VARIANT ExtLine2Point,
             VARIANT TextPosition,
             IZcadDimAligned **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddDimAngular )(
            IZcadBlock * This,
             VARIANT AngleVertex,
             VARIANT FirstEndPoint,
             VARIANT SecondEndPoint,
             VARIANT TextPoint,
             IZcadDimAngular **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddDimDiametric )(
            IZcadBlock * This,
             VARIANT ChordPoint,
             VARIANT FarChordPoint,
             double LeaderLength,
             IZcadDimDiametric **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddDimRotated )(
            IZcadBlock * This,
             VARIANT ExtLine1Point,
             VARIANT ExtLine2Point,
             VARIANT DimLineLocation,
             double RotationAngle,
             IZcadDimRotated **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddDimOrdinate )(
            IZcadBlock * This,
             VARIANT DefinitionPoint,
             VARIANT LeaderEndPoint,
             int UseXAxis,
             IZcadDimOrdinate **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddDimRadial )(
            IZcadBlock * This,
             VARIANT Center,
             VARIANT ChordPoint,
             double LeaderLength,
             IZcadDimRadial **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddEllipse )(
            IZcadBlock * This,
             VARIANT Center,
             VARIANT MajorAxis,
             double RadiusRatio,
             IZcadEllipse **pEllipse);

         HRESULT ( STDMETHODCALLTYPE *AddEllipticalCone )(
            IZcadBlock * This,
             VARIANT Center,
             double MajorRadius,
             double MinorRadius,
             double Height,
             IZcad3DSolid **pEllipCone);

         HRESULT ( STDMETHODCALLTYPE *AddEllipticalCylinder )(
            IZcadBlock * This,
             VARIANT Center,
             double MajorRadius,
             double MinorRadius,
             double Height,
             IZcad3DSolid **pEllipCyl);

         HRESULT ( STDMETHODCALLTYPE *AddExtrudedSolid )(
            IZcadBlock * This,
             IZcadRegion *Profile,
             double Height,
             double TaperAngle,
             IZcad3DSolid **pExtrSolid);

         HRESULT ( STDMETHODCALLTYPE *AddExtrudedSolidAlongPath )(
            IZcadBlock * This,
             IZcadRegion *Profile,
             IDispatch *Path,
             IZcad3DSolid **pExtrSolid);

         HRESULT ( STDMETHODCALLTYPE *AddLeader )(
            IZcadBlock * This,
             VARIANT PointsArray,
             IZcadEntity *Annotation,
             ZcLeaderType Type,
             IZcadLeader **pLeader);

         HRESULT ( STDMETHODCALLTYPE *AddMText )(
            IZcadBlock * This,
             VARIANT InsertionPoint,
             double Width,
             BSTR Text,
             IZcadMText **pMtext);

         HRESULT ( STDMETHODCALLTYPE *AddPoint )(
            IZcadBlock * This,
             VARIANT Point,
             IZcadPoint **pPoint);

         HRESULT ( STDMETHODCALLTYPE *AddLightWeightPolyline )(
            IZcadBlock * This,
             VARIANT VerticesList,
             IZcadLWPolyline **pLWPolyline);

         HRESULT ( STDMETHODCALLTYPE *AddPolyline )(
            IZcadBlock * This,
             VARIANT VerticesList,
             IZcadPolyline **pPolyline);

         HRESULT ( STDMETHODCALLTYPE *AddRay )(
            IZcadBlock * This,
             VARIANT Point1,
             VARIANT Point2,
             IZcadRay **pRay);

         HRESULT ( STDMETHODCALLTYPE *AddRegion )(
            IZcadBlock * This,
             VARIANT ObjectList,
             VARIANT *pRegions);

         HRESULT ( STDMETHODCALLTYPE *AddRevolvedSolid )(
            IZcadBlock * This,
             IZcadRegion *Profile,
             VARIANT AxisPoint,
             VARIANT AxisDir,
             double Angle,
             IZcad3DSolid **pRevolSolid);

         HRESULT ( STDMETHODCALLTYPE *AddShape )(
            IZcadBlock * This,
             BSTR Name,
             VARIANT InsertionPoint,
             double scaleFactor,
             double rotationAngle,
             IZcadShape **pShape);

         HRESULT ( STDMETHODCALLTYPE *AddSolid )(
            IZcadBlock * This,
             VARIANT Point1,
             VARIANT Point2,
             VARIANT Point3,
             VARIANT Point4,
             IZcadSolid **pSolid);

         HRESULT ( STDMETHODCALLTYPE *AddSphere )(
            IZcadBlock * This,
             VARIANT Center,
             double Radius,
             IZcad3DSolid **pSphere);

         HRESULT ( STDMETHODCALLTYPE *AddSpline )(
            IZcadBlock * This,
             VARIANT PointsArray,
             VARIANT StartTangent,
             VARIANT EndTangent,
             IZcadSpline **pSpline);

         HRESULT ( STDMETHODCALLTYPE *AddText )(
            IZcadBlock * This,
             BSTR TextString,
             VARIANT InsertionPoint,
             double Height,
             IZcadText **pText);

         HRESULT ( STDMETHODCALLTYPE *AddTolerance )(
            IZcadBlock * This,
             BSTR Text,
             VARIANT InsertionPoint,
             VARIANT Direction,
             IZcadTolerance **pTolerance);

         HRESULT ( STDMETHODCALLTYPE *AddTorus )(
            IZcadBlock * This,
             VARIANT Center,
             double TorusRadius,
             double TubeRadius,
             IZcad3DSolid **pTorus);

         HRESULT ( STDMETHODCALLTYPE *AddTrace )(
            IZcadBlock * This,
             VARIANT PointsArray,
             IZcadTrace **pTrace);

         HRESULT ( STDMETHODCALLTYPE *AddWedge )(
            IZcadBlock * This,
             VARIANT Center,
             double Length,
             double Width,
             double Height,
             IZcad3DSolid **pWedge);

         HRESULT ( STDMETHODCALLTYPE *AddXline )(
            IZcadBlock * This,
             VARIANT Point1,
             VARIANT Point2,
             IZcadXline **pXline);

         HRESULT ( STDMETHODCALLTYPE *InsertBlock )(
            IZcadBlock * This,
             VARIANT InsertionPoint,
             BSTR Name,
             double Xscale,
             double Yscale,
             double Zscale,
             double Rotation,
             VARIANT Password,
             IZcadBlockReference **pBlkRef);

         HRESULT ( STDMETHODCALLTYPE *AddHatch )(
            IZcadBlock * This,
             int PatternType,
             BSTR PatternName,
             VARIANT_BOOL Associativity,
             VARIANT HatchObjectType,
             IZcadHatch **pHatch);

         HRESULT ( STDMETHODCALLTYPE *AddRaster )(
            IZcadBlock * This,
             BSTR ImageFileName,
             VARIANT InsertionPoint,
             double ScaleFactor,
             double RotationAngle,
             IZcadRasterImage **pRaster);

         HRESULT ( STDMETHODCALLTYPE *AddLine )(
            IZcadBlock * This,
             VARIANT StartPoint,
             VARIANT EndPoint,
             IZcadLine **pLine);

         HRESULT ( STDMETHODCALLTYPE *get_IsLayout )(
            IZcadBlock * This,
             VARIANT_BOOL *bIsLayout);

         HRESULT ( STDMETHODCALLTYPE *get_Layout )(
            IZcadBlock * This,
             IZcadLayout **pLayout);

         HRESULT ( STDMETHODCALLTYPE *get_IsXRef )(
            IZcadBlock * This,
             VARIANT_BOOL *pIsXRref);

         HRESULT ( STDMETHODCALLTYPE *AddMInsertBlock )(
            IZcadBlock * This,
             VARIANT InsertionPoint,
             BSTR Name,
             double Xscale,
             double Yscale,
             double Zscale,
             double Rotation,
             long NumRows,
             long NumColumns,
             long RowSpacing,
             long ColumnSpacing,
             VARIANT Password,
             IZcadMInsertBlock **pMInsertBlk);

         HRESULT ( STDMETHODCALLTYPE *AddPolyfaceMesh )(
            IZcadBlock * This,
             VARIANT VertexList,
             VARIANT FaceList,
             IZcadPolyfaceMesh **pPFMesh);

         HRESULT ( STDMETHODCALLTYPE *AddMLine )(
            IZcadBlock * This,
             VARIANT VertexList,
             IZcadMLine **pMLine);

         HRESULT ( STDMETHODCALLTYPE *AddDim3PointAngular )(
            IZcadBlock * This,
             VARIANT AngleVertex,
             VARIANT FirstEndPoint,
             VARIANT SecondEndPoint,
             VARIANT TextPoint,
             IZcadDim3PointAngular **pDim);

         HRESULT ( STDMETHODCALLTYPE *get_XRefDatabase )(
            IZcadBlock * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *AttachExternalReference )(
            IZcadBlock * This,
             BSTR PathName,
             BSTR Name,
             VARIANT InsertionPoint,
             double Xscale,
             double Yscale,
             double Zscale,
             double Rotation,
             VARIANT_BOOL bOverlay,
             VARIANT Password,
             IZcadExternalReference **pXRef);

         HRESULT ( STDMETHODCALLTYPE *Unload )(
            IZcadBlock * This);

         HRESULT ( STDMETHODCALLTYPE *Reload )(
            IZcadBlock * This);

         HRESULT ( STDMETHODCALLTYPE *Bind )(
            IZcadBlock * This,
             VARIANT_BOOL bPrefixName);

         HRESULT ( STDMETHODCALLTYPE *Detach )(
            IZcadBlock * This);

         HRESULT ( STDMETHODCALLTYPE *AddTable )(
            IZcadBlock * This,
             VARIANT InsertionPoint,
             int NumRows,
             int NumColumns,
             double RowHeight,
             double ColWidth,
             IZcadTable **pTable);

         HRESULT ( STDMETHODCALLTYPE *get_Path )(
            IZcadBlock * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Path )(
            IZcadBlock * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_Comments )(
            IZcadBlock * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Comments )(
            IZcadBlock * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_Units )(
            IZcadBlock * This,
             ZcInsertUnits *pIU);

         HRESULT ( STDMETHODCALLTYPE *put_Units )(
            IZcadBlock * This,
             ZcInsertUnits IU);

         HRESULT ( STDMETHODCALLTYPE *get_Explodable )(
            IZcadBlock * This,
             VARIANT_BOOL *bExplodable);

         HRESULT ( STDMETHODCALLTYPE *put_Explodable )(
            IZcadBlock * This,
             VARIANT_BOOL bExplodable);

         HRESULT ( STDMETHODCALLTYPE *get_BlockScaling )(
            IZcadBlock * This,
             ZcBlockScaling *pBS);

         HRESULT ( STDMETHODCALLTYPE *put_BlockScaling )(
            IZcadBlock * This,
             ZcBlockScaling BS);

         HRESULT ( STDMETHODCALLTYPE *get_IsDynamicBlock )(
            IZcadBlock * This,
             VARIANT_BOOL *pDynamicBlock);

         HRESULT ( STDMETHODCALLTYPE *AddDimArc )(
            IZcadBlock * This,
             VARIANT ArcCenter,
             VARIANT FirstEndPoint,
             VARIANT SecondEndPoint,
             VARIANT ArcPoint,
             IZcadDimArcLength **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddDimRadialLarge )(
            IZcadBlock * This,
             VARIANT Center,
             VARIANT ChordPoint,
             VARIANT OverrideCenter,
             VARIANT JogPoint,
             double JogAngle,
             IZcadDimRadialLarge **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddSection )(
            IZcadBlock * This,
             VARIANT fromPoint,
             VARIANT toPoint,
             VARIANT planeVector,
             IZcadSection **ppSecPlane);

         HRESULT ( STDMETHODCALLTYPE *AddMLeader )(
            IZcadBlock * This,
             VARIANT pointsArray,
             int *leaderLineIndex,
             IZcadMLeader **pMLeader);

        END_INTERFACE
    } IZcadBlockVtbl;

    interface IZcadBlock
    {
        CONST_VTBL struct IZcadBlockVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadBlock_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadBlock_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadBlock_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadBlock_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadBlock_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadBlock_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadBlock_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadBlock_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadBlock_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadBlock_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadBlock_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadBlock_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadBlock_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadBlock_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadBlock_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadBlock_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadBlock_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadBlock_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadBlock_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadBlock_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadBlock_Item(This,Index,pItem)	\
    ((This)->lpVtbl -> Item(This,Index,pItem))

#define IZcadBlock_get__NewEnum(This,pVal)	\
    ((This)->lpVtbl -> get__NewEnum(This,pVal))

#define IZcadBlock_get_Count(This,pVal)	\
    ((This)->lpVtbl -> get_Count(This,pVal))

#define IZcadBlock_get_Name(This,bstrName)	\
    ((This)->lpVtbl -> get_Name(This,bstrName))

#define IZcadBlock_put_Name(This,bstrName)	\
    ((This)->lpVtbl -> put_Name(This,bstrName))

#define IZcadBlock_get_Origin(This,origin)	\
    ((This)->lpVtbl -> get_Origin(This,origin))

#define IZcadBlock_put_Origin(This,origin)	\
    ((This)->lpVtbl -> put_Origin(This,origin))

#define IZcadBlock_AddCustomObject(This,ClassName,pObject)	\
    ((This)->lpVtbl -> AddCustomObject(This,ClassName,pObject))

#define IZcadBlock_Add3DFace(This,Point1,Point2,Point3,Point4,pFace3d)	\
    ((This)->lpVtbl -> Add3DFace(This,Point1,Point2,Point3,Point4,pFace3d))

#define IZcadBlock_Add3DMesh(This,M,N,PointsMatrix,pMesh3d)	\
    ((This)->lpVtbl -> Add3DMesh(This,M,N,PointsMatrix,pMesh3d))

#define IZcadBlock_Add3DPoly(This,PointsArray,pPoly3d)	\
    ((This)->lpVtbl -> Add3DPoly(This,PointsArray,pPoly3d))

#define IZcadBlock_AddArc(This,Center,Radius,StartAngle,EndAngle,pArc)	\
    ((This)->lpVtbl -> AddArc(This,Center,Radius,StartAngle,EndAngle,pArc))

#define IZcadBlock_AddAttribute(This,Height,Mode,Prompt,InsertionPoint,Tag,Value,pAttr)	\
    ((This)->lpVtbl -> AddAttribute(This,Height,Mode,Prompt,InsertionPoint,Tag,Value,pAttr))

#define IZcadBlock_AddBox(This,Origin,Length,Width,Height,pBox)	\
    ((This)->lpVtbl -> AddBox(This,Origin,Length,Width,Height,pBox))

#define IZcadBlock_AddCircle(This,center,radius,pCircle)	\
    ((This)->lpVtbl -> AddCircle(This,center,radius,pCircle))

#define IZcadBlock_AddCone(This,Center,BaseRadius,Height,pCone)	\
    ((This)->lpVtbl -> AddCone(This,Center,BaseRadius,Height,pCone))

#define IZcadBlock_AddCylinder(This,Center,Radius,Height,pCyl)	\
    ((This)->lpVtbl -> AddCylinder(This,Center,Radius,Height,pCyl))

#define IZcadBlock_AddDimAligned(This,ExtLine1Point,ExtLine2Point,TextPosition,pDim)	\
    ((This)->lpVtbl -> AddDimAligned(This,ExtLine1Point,ExtLine2Point,TextPosition,pDim))

#define IZcadBlock_AddDimAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim)	\
    ((This)->lpVtbl -> AddDimAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim))

#define IZcadBlock_AddDimDiametric(This,ChordPoint,FarChordPoint,LeaderLength,pDim)	\
    ((This)->lpVtbl -> AddDimDiametric(This,ChordPoint,FarChordPoint,LeaderLength,pDim))

#define IZcadBlock_AddDimRotated(This,ExtLine1Point,ExtLine2Point,DimLineLocation,RotationAngle,pDim)	\
    ((This)->lpVtbl -> AddDimRotated(This,ExtLine1Point,ExtLine2Point,DimLineLocation,RotationAngle,pDim))

#define IZcadBlock_AddDimOrdinate(This,DefinitionPoint,LeaderEndPoint,UseXAxis,pDim)	\
    ((This)->lpVtbl -> AddDimOrdinate(This,DefinitionPoint,LeaderEndPoint,UseXAxis,pDim))

#define IZcadBlock_AddDimRadial(This,Center,ChordPoint,LeaderLength,pDim)	\
    ((This)->lpVtbl -> AddDimRadial(This,Center,ChordPoint,LeaderLength,pDim))

#define IZcadBlock_AddEllipse(This,Center,MajorAxis,RadiusRatio,pEllipse)	\
    ((This)->lpVtbl -> AddEllipse(This,Center,MajorAxis,RadiusRatio,pEllipse))

#define IZcadBlock_AddEllipticalCone(This,Center,MajorRadius,MinorRadius,Height,pEllipCone)	\
    ((This)->lpVtbl -> AddEllipticalCone(This,Center,MajorRadius,MinorRadius,Height,pEllipCone))

#define IZcadBlock_AddEllipticalCylinder(This,Center,MajorRadius,MinorRadius,Height,pEllipCyl)	\
    ((This)->lpVtbl -> AddEllipticalCylinder(This,Center,MajorRadius,MinorRadius,Height,pEllipCyl))

#define IZcadBlock_AddExtrudedSolid(This,Profile,Height,TaperAngle,pExtrSolid)	\
    ((This)->lpVtbl -> AddExtrudedSolid(This,Profile,Height,TaperAngle,pExtrSolid))

#define IZcadBlock_AddExtrudedSolidAlongPath(This,Profile,Path,pExtrSolid)	\
    ((This)->lpVtbl -> AddExtrudedSolidAlongPath(This,Profile,Path,pExtrSolid))

#define IZcadBlock_AddLeader(This,PointsArray,Annotation,Type,pLeader)	\
    ((This)->lpVtbl -> AddLeader(This,PointsArray,Annotation,Type,pLeader))

#define IZcadBlock_AddMText(This,InsertionPoint,Width,Text,pMtext)	\
    ((This)->lpVtbl -> AddMText(This,InsertionPoint,Width,Text,pMtext))

#define IZcadBlock_AddPoint(This,Point,pPoint)	\
    ((This)->lpVtbl -> AddPoint(This,Point,pPoint))

#define IZcadBlock_AddLightWeightPolyline(This,VerticesList,pLWPolyline)	\
    ((This)->lpVtbl -> AddLightWeightPolyline(This,VerticesList,pLWPolyline))

#define IZcadBlock_AddPolyline(This,VerticesList,pPolyline)	\
    ((This)->lpVtbl -> AddPolyline(This,VerticesList,pPolyline))

#define IZcadBlock_AddRay(This,Point1,Point2,pRay)	\
    ((This)->lpVtbl -> AddRay(This,Point1,Point2,pRay))

#define IZcadBlock_AddRegion(This,ObjectList,pRegions)	\
    ((This)->lpVtbl -> AddRegion(This,ObjectList,pRegions))

#define IZcadBlock_AddRevolvedSolid(This,Profile,AxisPoint,AxisDir,Angle,pRevolSolid)	\
    ((This)->lpVtbl -> AddRevolvedSolid(This,Profile,AxisPoint,AxisDir,Angle,pRevolSolid))

#define IZcadBlock_AddShape(This,Name,InsertionPoint,scaleFactor,rotationAngle,pShape)	\
    ((This)->lpVtbl -> AddShape(This,Name,InsertionPoint,scaleFactor,rotationAngle,pShape))

#define IZcadBlock_AddSolid(This,Point1,Point2,Point3,Point4,pSolid)	\
    ((This)->lpVtbl -> AddSolid(This,Point1,Point2,Point3,Point4,pSolid))

#define IZcadBlock_AddSphere(This,Center,Radius,pSphere)	\
    ((This)->lpVtbl -> AddSphere(This,Center,Radius,pSphere))

#define IZcadBlock_AddSpline(This,PointsArray,StartTangent,EndTangent,pSpline)	\
    ((This)->lpVtbl -> AddSpline(This,PointsArray,StartTangent,EndTangent,pSpline))

#define IZcadBlock_AddText(This,TextString,InsertionPoint,Height,pText)	\
    ((This)->lpVtbl -> AddText(This,TextString,InsertionPoint,Height,pText))

#define IZcadBlock_AddTolerance(This,Text,InsertionPoint,Direction,pTolerance)	\
    ((This)->lpVtbl -> AddTolerance(This,Text,InsertionPoint,Direction,pTolerance))

#define IZcadBlock_AddTorus(This,Center,TorusRadius,TubeRadius,pTorus)	\
    ((This)->lpVtbl -> AddTorus(This,Center,TorusRadius,TubeRadius,pTorus))

#define IZcadBlock_AddTrace(This,PointsArray,pTrace)	\
    ((This)->lpVtbl -> AddTrace(This,PointsArray,pTrace))

#define IZcadBlock_AddWedge(This,Center,Length,Width,Height,pWedge)	\
    ((This)->lpVtbl -> AddWedge(This,Center,Length,Width,Height,pWedge))

#define IZcadBlock_AddXline(This,Point1,Point2,pXline)	\
    ((This)->lpVtbl -> AddXline(This,Point1,Point2,pXline))

#define IZcadBlock_InsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,Password,pBlkRef)	\
    ((This)->lpVtbl -> InsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,Password,pBlkRef))

#define IZcadBlock_AddHatch(This,PatternType,PatternName,Associativity,HatchObjectType,pHatch)	\
    ((This)->lpVtbl -> AddHatch(This,PatternType,PatternName,Associativity,HatchObjectType,pHatch))

#define IZcadBlock_AddRaster(This,ImageFileName,InsertionPoint,ScaleFactor,RotationAngle,pRaster)	\
    ((This)->lpVtbl -> AddRaster(This,ImageFileName,InsertionPoint,ScaleFactor,RotationAngle,pRaster))

#define IZcadBlock_AddLine(This,StartPoint,EndPoint,pLine)	\
    ((This)->lpVtbl -> AddLine(This,StartPoint,EndPoint,pLine))

#define IZcadBlock_get_IsLayout(This,bIsLayout)	\
    ((This)->lpVtbl -> get_IsLayout(This,bIsLayout))

#define IZcadBlock_get_Layout(This,pLayout)	\
    ((This)->lpVtbl -> get_Layout(This,pLayout))

#define IZcadBlock_get_IsXRef(This,pIsXRref)	\
    ((This)->lpVtbl -> get_IsXRef(This,pIsXRref))

#define IZcadBlock_AddMInsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,NumRows,NumColumns,RowSpacing,ColumnSpacing,Password,pMInsertBlk)	\
    ((This)->lpVtbl -> AddMInsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,NumRows,NumColumns,RowSpacing,ColumnSpacing,Password,pMInsertBlk))

#define IZcadBlock_AddPolyfaceMesh(This,VertexList,FaceList,pPFMesh)	\
    ((This)->lpVtbl -> AddPolyfaceMesh(This,VertexList,FaceList,pPFMesh))

#define IZcadBlock_AddMLine(This,VertexList,pMLine)	\
    ((This)->lpVtbl -> AddMLine(This,VertexList,pMLine))

#define IZcadBlock_AddDim3PointAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim)	\
    ((This)->lpVtbl -> AddDim3PointAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim))

#define IZcadBlock_get_XRefDatabase(This,pDatabase)	\
    ((This)->lpVtbl -> get_XRefDatabase(This,pDatabase))

#define IZcadBlock_AttachExternalReference(This,PathName,Name,InsertionPoint,Xscale,Yscale,Zscale,Rotation,bOverlay,Password,pXRef)	\
    ((This)->lpVtbl -> AttachExternalReference(This,PathName,Name,InsertionPoint,Xscale,Yscale,Zscale,Rotation,bOverlay,Password,pXRef))

#define IZcadBlock_Unload(This)	\
    ((This)->lpVtbl -> Unload(This))

#define IZcadBlock_Reload(This)	\
    ((This)->lpVtbl -> Reload(This))

#define IZcadBlock_Bind(This,bPrefixName)	\
    ((This)->lpVtbl -> Bind(This,bPrefixName))

#define IZcadBlock_Detach(This)	\
    ((This)->lpVtbl -> Detach(This))

#define IZcadBlock_AddTable(This,InsertionPoint,NumRows,NumColumns,RowHeight,ColWidth,pTable)	\
    ((This)->lpVtbl -> AddTable(This,InsertionPoint,NumRows,NumColumns,RowHeight,ColWidth,pTable))

#define IZcadBlock_get_Path(This,bstrName)	\
    ((This)->lpVtbl -> get_Path(This,bstrName))

#define IZcadBlock_put_Path(This,bstrName)	\
    ((This)->lpVtbl -> put_Path(This,bstrName))

#define IZcadBlock_get_Comments(This,bstrName)	\
    ((This)->lpVtbl -> get_Comments(This,bstrName))

#define IZcadBlock_put_Comments(This,bstrName)	\
    ((This)->lpVtbl -> put_Comments(This,bstrName))

#define IZcadBlock_get_Units(This,pIU)	\
    ((This)->lpVtbl -> get_Units(This,pIU))

#define IZcadBlock_put_Units(This,IU)	\
    ((This)->lpVtbl -> put_Units(This,IU))

#define IZcadBlock_get_Explodable(This,bExplodable)	\
    ((This)->lpVtbl -> get_Explodable(This,bExplodable))

#define IZcadBlock_put_Explodable(This,bExplodable)	\
    ((This)->lpVtbl -> put_Explodable(This,bExplodable))

#define IZcadBlock_get_BlockScaling(This,pBS)	\
    ((This)->lpVtbl -> get_BlockScaling(This,pBS))

#define IZcadBlock_put_BlockScaling(This,BS)	\
    ((This)->lpVtbl -> put_BlockScaling(This,BS))

#define IZcadBlock_get_IsDynamicBlock(This,pDynamicBlock)	\
    ((This)->lpVtbl -> get_IsDynamicBlock(This,pDynamicBlock))

#define IZcadBlock_AddDimArc(This,ArcCenter,FirstEndPoint,SecondEndPoint,ArcPoint,pDim)	\
    ((This)->lpVtbl -> AddDimArc(This,ArcCenter,FirstEndPoint,SecondEndPoint,ArcPoint,pDim))

#define IZcadBlock_AddDimRadialLarge(This,Center,ChordPoint,OverrideCenter,JogPoint,JogAngle,pDim)	\
    ((This)->lpVtbl -> AddDimRadialLarge(This,Center,ChordPoint,OverrideCenter,JogPoint,JogAngle,pDim))

#define IZcadBlock_AddSection(This,fromPoint,toPoint,planeVector,ppSecPlane)	\
    ((This)->lpVtbl -> AddSection(This,fromPoint,toPoint,planeVector,ppSecPlane))

#define IZcadBlock_AddMLeader(This,pointsArray,leaderLineIndex,pMLeader)	\
    ((This)->lpVtbl -> AddMLeader(This,pointsArray,leaderLineIndex,pMLeader))

#endif
#endif


#endif

#ifndef __IZcadDatabase_INTERFACE_DEFINED__
#define __IZcadDatabase_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadDatabase,0xA1E6E812,0x5CC9,0x481E,0xA6,0x99,0x9A,0x67,0xE1,0xD0,0x7D,0xC7);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("A1E6E812-5CC9-481E-A699-9A67E1D07DC7")
    IZcadDatabase : public IDispatch
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_ModelSpace(
             IZcadModelSpace **pMSpace) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PaperSpace(
             IZcadPaperSpace **pPSpace) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Blocks(
             IZcadBlocks **pBlocks) = 0;

        virtual  HRESULT STDMETHODCALLTYPE CopyObjects(
             VARIANT Objects,
             VARIANT Owner,
             VARIANT *IdPairs,
             VARIANT *pNewObjects) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Groups(
             IZcadGroups **pGroups) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimStyles(
             IZcadDimStyles **pDimStyles) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Layers(
             IZcadLayers **pLayers) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Linetypes(
             IZcadLineTypes **pLinetypes) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Dictionaries(
             IZcadDictionaries **pDictionaries) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_RegisteredApplications(
             IZcadRegisteredApplications **pRegApps) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextStyles(
             IZcadTextStyles **pTextStyles) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UserCoordinateSystems(
             IZcadUCSs **pUCSs) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Views(
             IZcadViews **pViews) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Viewports(
             IZcadViewports **pViewports) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ElevationModelSpace(
             double *elevation) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ElevationModelSpace(
             double elevation) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ElevationPaperSpace(
             double *elevation) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ElevationPaperSpace(
             double elevation) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Limits(
             VARIANT *limits) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Limits(
             VARIANT limits) = 0;

        virtual  HRESULT STDMETHODCALLTYPE HandleToObject(
             BSTR Handle,
             IDispatch **pObj) = 0;

        virtual  HRESULT STDMETHODCALLTYPE ObjectIdToObject(
             LONG_PTR ObjectID,
             IDispatch **pObj) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Layouts(
             IZcadLayouts **pLayouts) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PlotConfigurations(
             IZcadPlotConfigurations **pPlotConfigs) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Preferences(
             IZcadDatabasePreferences **pPref) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_FileDependencies(
             IZcadFileDependencies **pFDM) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SummaryInfo(
             IZcadSummaryInfo **pSummaryInfo) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SectionManager(
             IZcadSectionManager **pSecMgr) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Materials(
             IZcadMaterials **pMaterials) = 0;

    };

#else

    typedef struct IZcadDatabaseVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadDatabase * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadDatabase * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadDatabase * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadDatabase * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadDatabase * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadDatabase * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadDatabase * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_ModelSpace )(
            IZcadDatabase * This,
             IZcadModelSpace **pMSpace);

         HRESULT ( STDMETHODCALLTYPE *get_PaperSpace )(
            IZcadDatabase * This,
             IZcadPaperSpace **pPSpace);

         HRESULT ( STDMETHODCALLTYPE *get_Blocks )(
            IZcadDatabase * This,
             IZcadBlocks **pBlocks);

         HRESULT ( STDMETHODCALLTYPE *CopyObjects )(
            IZcadDatabase * This,
             VARIANT Objects,
             VARIANT Owner,
             VARIANT *IdPairs,
             VARIANT *pNewObjects);

         HRESULT ( STDMETHODCALLTYPE *get_Groups )(
            IZcadDatabase * This,
             IZcadGroups **pGroups);

         HRESULT ( STDMETHODCALLTYPE *get_DimStyles )(
            IZcadDatabase * This,
             IZcadDimStyles **pDimStyles);

         HRESULT ( STDMETHODCALLTYPE *get_Layers )(
            IZcadDatabase * This,
             IZcadLayers **pLayers);

         HRESULT ( STDMETHODCALLTYPE *get_Linetypes )(
            IZcadDatabase * This,
             IZcadLineTypes **pLinetypes);

         HRESULT ( STDMETHODCALLTYPE *get_Dictionaries )(
            IZcadDatabase * This,
             IZcadDictionaries **pDictionaries);

         HRESULT ( STDMETHODCALLTYPE *get_RegisteredApplications )(
            IZcadDatabase * This,
             IZcadRegisteredApplications **pRegApps);

         HRESULT ( STDMETHODCALLTYPE *get_TextStyles )(
            IZcadDatabase * This,
             IZcadTextStyles **pTextStyles);

         HRESULT ( STDMETHODCALLTYPE *get_UserCoordinateSystems )(
            IZcadDatabase * This,
             IZcadUCSs **pUCSs);

         HRESULT ( STDMETHODCALLTYPE *get_Views )(
            IZcadDatabase * This,
             IZcadViews **pViews);

         HRESULT ( STDMETHODCALLTYPE *get_Viewports )(
            IZcadDatabase * This,
             IZcadViewports **pViewports);

         HRESULT ( STDMETHODCALLTYPE *get_ElevationModelSpace )(
            IZcadDatabase * This,
             double *elevation);

         HRESULT ( STDMETHODCALLTYPE *put_ElevationModelSpace )(
            IZcadDatabase * This,
             double elevation);

         HRESULT ( STDMETHODCALLTYPE *get_ElevationPaperSpace )(
            IZcadDatabase * This,
             double *elevation);

         HRESULT ( STDMETHODCALLTYPE *put_ElevationPaperSpace )(
            IZcadDatabase * This,
             double elevation);

         HRESULT ( STDMETHODCALLTYPE *get_Limits )(
            IZcadDatabase * This,
             VARIANT *limits);

         HRESULT ( STDMETHODCALLTYPE *put_Limits )(
            IZcadDatabase * This,
             VARIANT limits);

         HRESULT ( STDMETHODCALLTYPE *HandleToObject )(
            IZcadDatabase * This,
             BSTR Handle,
             IDispatch **pObj);

         HRESULT ( STDMETHODCALLTYPE *ObjectIdToObject )(
            IZcadDatabase * This,
             LONG_PTR ObjectID,
             IDispatch **pObj);

         HRESULT ( STDMETHODCALLTYPE *get_Layouts )(
            IZcadDatabase * This,
             IZcadLayouts **pLayouts);

         HRESULT ( STDMETHODCALLTYPE *get_PlotConfigurations )(
            IZcadDatabase * This,
             IZcadPlotConfigurations **pPlotConfigs);

         HRESULT ( STDMETHODCALLTYPE *get_Preferences )(
            IZcadDatabase * This,
             IZcadDatabasePreferences **pPref);

         HRESULT ( STDMETHODCALLTYPE *get_FileDependencies )(
            IZcadDatabase * This,
             IZcadFileDependencies **pFDM);

         HRESULT ( STDMETHODCALLTYPE *get_SummaryInfo )(
            IZcadDatabase * This,
             IZcadSummaryInfo **pSummaryInfo);

         HRESULT ( STDMETHODCALLTYPE *get_SectionManager )(
            IZcadDatabase * This,
             IZcadSectionManager **pSecMgr);

         HRESULT ( STDMETHODCALLTYPE *get_Materials )(
            IZcadDatabase * This,
             IZcadMaterials **pMaterials);

        END_INTERFACE
    } IZcadDatabaseVtbl;

    interface IZcadDatabase
    {
        CONST_VTBL struct IZcadDatabaseVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadDatabase_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadDatabase_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadDatabase_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadDatabase_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadDatabase_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadDatabase_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadDatabase_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadDatabase_get_ModelSpace(This,pMSpace)	\
    ((This)->lpVtbl -> get_ModelSpace(This,pMSpace))

#define IZcadDatabase_get_PaperSpace(This,pPSpace)	\
    ((This)->lpVtbl -> get_PaperSpace(This,pPSpace))

#define IZcadDatabase_get_Blocks(This,pBlocks)	\
    ((This)->lpVtbl -> get_Blocks(This,pBlocks))

#define IZcadDatabase_CopyObjects(This,Objects,Owner,IdPairs,pNewObjects)	\
    ((This)->lpVtbl -> CopyObjects(This,Objects,Owner,IdPairs,pNewObjects))

#define IZcadDatabase_get_Groups(This,pGroups)	\
    ((This)->lpVtbl -> get_Groups(This,pGroups))

#define IZcadDatabase_get_DimStyles(This,pDimStyles)	\
    ((This)->lpVtbl -> get_DimStyles(This,pDimStyles))

#define IZcadDatabase_get_Layers(This,pLayers)	\
    ((This)->lpVtbl -> get_Layers(This,pLayers))

#define IZcadDatabase_get_Linetypes(This,pLinetypes)	\
    ((This)->lpVtbl -> get_Linetypes(This,pLinetypes))

#define IZcadDatabase_get_Dictionaries(This,pDictionaries)	\
    ((This)->lpVtbl -> get_Dictionaries(This,pDictionaries))

#define IZcadDatabase_get_RegisteredApplications(This,pRegApps)	\
    ((This)->lpVtbl -> get_RegisteredApplications(This,pRegApps))

#define IZcadDatabase_get_TextStyles(This,pTextStyles)	\
    ((This)->lpVtbl -> get_TextStyles(This,pTextStyles))

#define IZcadDatabase_get_UserCoordinateSystems(This,pUCSs)	\
    ((This)->lpVtbl -> get_UserCoordinateSystems(This,pUCSs))

#define IZcadDatabase_get_Views(This,pViews)	\
    ((This)->lpVtbl -> get_Views(This,pViews))

#define IZcadDatabase_get_Viewports(This,pViewports)	\
    ((This)->lpVtbl -> get_Viewports(This,pViewports))

#define IZcadDatabase_get_ElevationModelSpace(This,elevation)	\
    ((This)->lpVtbl -> get_ElevationModelSpace(This,elevation))

#define IZcadDatabase_put_ElevationModelSpace(This,elevation)	\
    ((This)->lpVtbl -> put_ElevationModelSpace(This,elevation))

#define IZcadDatabase_get_ElevationPaperSpace(This,elevation)	\
    ((This)->lpVtbl -> get_ElevationPaperSpace(This,elevation))

#define IZcadDatabase_put_ElevationPaperSpace(This,elevation)	\
    ((This)->lpVtbl -> put_ElevationPaperSpace(This,elevation))

#define IZcadDatabase_get_Limits(This,limits)	\
    ((This)->lpVtbl -> get_Limits(This,limits))

#define IZcadDatabase_put_Limits(This,limits)	\
    ((This)->lpVtbl -> put_Limits(This,limits))

#define IZcadDatabase_HandleToObject(This,Handle,pObj)	\
    ((This)->lpVtbl -> HandleToObject(This,Handle,pObj))

#define IZcadDatabase_ObjectIdToObject(This,ObjectID,pObj)	\
    ((This)->lpVtbl -> ObjectIdToObject(This,ObjectID,pObj))

#define IZcadDatabase_get_Layouts(This,pLayouts)	\
    ((This)->lpVtbl -> get_Layouts(This,pLayouts))

#define IZcadDatabase_get_PlotConfigurations(This,pPlotConfigs)	\
    ((This)->lpVtbl -> get_PlotConfigurations(This,pPlotConfigs))

#define IZcadDatabase_get_Preferences(This,pPref)	\
    ((This)->lpVtbl -> get_Preferences(This,pPref))

#define IZcadDatabase_get_FileDependencies(This,pFDM)	\
    ((This)->lpVtbl -> get_FileDependencies(This,pFDM))

#define IZcadDatabase_get_SummaryInfo(This,pSummaryInfo)	\
    ((This)->lpVtbl -> get_SummaryInfo(This,pSummaryInfo))

#define IZcadDatabase_get_SectionManager(This,pSecMgr)	\
    ((This)->lpVtbl -> get_SectionManager(This,pSecMgr))

#define IZcadDatabase_get_Materials(This,pMaterials)	\
    ((This)->lpVtbl -> get_Materials(This,pMaterials))

#endif
#endif


#endif

#ifndef __IZcadSectionTypeSettings_INTERFACE_DEFINED__
#define __IZcadSectionTypeSettings_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadSectionTypeSettings,0xEC92308C,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC92308C-5A17-11E7-B72E-BC5FF42AC839")
    IZcadSectionTypeSettings : public IDispatch
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_GenerationOptions(
             ZcSectionGeneration *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_GenerationOptions(
             ZcSectionGeneration val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SourceObjects(
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SourceObjects(
             VARIANT val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DestinationBlock(
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DestinationBlock(
             VARIANT val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DestinationFile(
             BSTR *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DestinationFile(
             BSTR val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IntersectionBoundaryColor(
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IntersectionBoundaryColor(
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IntersectionBoundaryLayer(
             BSTR *Layer) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IntersectionBoundaryLayer(
             BSTR Layer) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IntersectionBoundaryLinetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IntersectionBoundaryLinetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IntersectionBoundaryLinetypeScale(
             ZCAD_NOUNITS *ltScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IntersectionBoundaryLinetypeScale(
             ZCAD_NOUNITS ltScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IntersectionBoundaryPlotStyleName(
             BSTR *plotStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IntersectionBoundaryPlotStyleName(
             BSTR plotStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IntersectionBoundaryLineweight(
             ZCAD_LWEIGHT *lineweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IntersectionBoundaryLineweight(
             ZCAD_LWEIGHT lineweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IntersectionBoundaryDivisionLines(
             VARIANT_BOOL *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IntersectionBoundaryDivisionLines(
             VARIANT_BOOL val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IntersectionFillVisible(
             VARIANT_BOOL *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IntersectionFillVisible(
             VARIANT_BOOL val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IntersectionFillHatchPatternType(
             ZcPatternType *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IntersectionFillHatchPatternType(
             ZcPatternType val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IntersectionFillHatchPatternName(
             BSTR *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IntersectionFillHatchPatternName(
             BSTR val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IntersectionFillHatchAngle(
             ZCAD_ANGLE *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IntersectionFillHatchAngle(
             ZCAD_ANGLE val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IntersectionFillHatchScale(
             ZCAD_NOUNITS *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IntersectionFillHatchScale(
             ZCAD_NOUNITS val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IntersectionFillHatchSpacing(
             double *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IntersectionFillHatchSpacing(
             double val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IntersectionFillColor(
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IntersectionFillColor(
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IntersectionFillLayer(
             BSTR *Layer) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IntersectionFillLayer(
             BSTR Layer) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IntersectionFillLinetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IntersectionFillLinetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IntersectionFillLinetypeScale(
             ZCAD_NOUNITS *ltScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IntersectionFillLinetypeScale(
             ZCAD_NOUNITS ltScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IntersectionFillPlotStyleName(
             BSTR *plotStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IntersectionFillPlotStyleName(
             BSTR plotStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IntersectionFillLineweight(
             ZCAD_LWEIGHT *lineweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IntersectionFillLineweight(
             ZCAD_LWEIGHT lineweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IntersectionFillFaceTransparency(
             long *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IntersectionFillFaceTransparency(
             long val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BackgroundLinesVisible(
             VARIANT_BOOL *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BackgroundLinesVisible(
             VARIANT_BOOL val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BackgroundLinesHiddenLine(
             VARIANT_BOOL *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BackgroundLinesHiddenLine(
             VARIANT_BOOL val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BackgroundLinesColor(
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BackgroundLinesColor(
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BackgroundLinesLayer(
             BSTR *Layer) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BackgroundLinesLayer(
             BSTR Layer) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BackgroundLinesLinetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BackgroundLinesLinetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BackgroundLinesLinetypeScale(
             ZCAD_NOUNITS *ltScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BackgroundLinesLinetypeScale(
             ZCAD_NOUNITS ltScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BackgroundLinesPlotStyleName(
             BSTR *plotStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BackgroundLinesPlotStyleName(
             BSTR plotStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BackgroundLinesLineweight(
             ZCAD_LWEIGHT *lineweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BackgroundLinesLineweight(
             ZCAD_LWEIGHT lineweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ForegroundLinesVisible(
             VARIANT_BOOL *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ForegroundLinesVisible(
             VARIANT_BOOL val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ForegroundLinesHiddenLine(
             VARIANT_BOOL *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ForegroundLinesHiddenLine(
             VARIANT_BOOL val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ForegroundLinesColor(
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ForegroundLinesColor(
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ForegroundLinesLayer(
             BSTR *Layer) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ForegroundLinesLayer(
             BSTR Layer) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ForegroundLinesLinetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ForegroundLinesLinetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ForegroundLinesLinetypeScale(
             ZCAD_NOUNITS *ltScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ForegroundLinesLinetypeScale(
             ZCAD_NOUNITS ltScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ForegroundLinesPlotStyleName(
             BSTR *plotStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ForegroundLinesPlotStyleName(
             BSTR plotStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ForegroundLinesLineweight(
             ZCAD_LWEIGHT *lineweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ForegroundLinesLineweight(
             ZCAD_LWEIGHT lineweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ForegroundLinesFaceTransparency(
             long *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ForegroundLinesFaceTransparency(
             long val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ForegroundLinesEdgeTransparency(
             long *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ForegroundLinesEdgeTransparency(
             long val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_CurveTangencyLinesVisible(
             VARIANT_BOOL *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_CurveTangencyLinesVisible(
             VARIANT_BOOL val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_CurveTangencyLinesColor(
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_CurveTangencyLinesColor(
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_CurveTangencyLinesLayer(
             BSTR *Layer) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_CurveTangencyLinesLayer(
             BSTR Layer) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_CurveTangencyLinesLinetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_CurveTangencyLinesLinetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_CurveTangencyLinesLinetypeScale(
             ZCAD_NOUNITS *ltScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_CurveTangencyLinesLinetypeScale(
             ZCAD_NOUNITS ltScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_CurveTangencyLinesPlotStyleName(
             BSTR *plotStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_CurveTangencyLinesPlotStyleName(
             BSTR plotStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_CurveTangencyLinesLineweight(
             ZCAD_LWEIGHT *lineweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_CurveTangencyLinesLineweight(
             ZCAD_LWEIGHT lineweight) = 0;

    };

#else

    typedef struct IZcadSectionTypeSettingsVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadSectionTypeSettings * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadSectionTypeSettings * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadSectionTypeSettings * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadSectionTypeSettings * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadSectionTypeSettings * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadSectionTypeSettings * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadSectionTypeSettings * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_GenerationOptions )(
            IZcadSectionTypeSettings * This,
             ZcSectionGeneration *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_GenerationOptions )(
            IZcadSectionTypeSettings * This,
             ZcSectionGeneration val);

         HRESULT ( STDMETHODCALLTYPE *get_SourceObjects )(
            IZcadSectionTypeSettings * This,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_SourceObjects )(
            IZcadSectionTypeSettings * This,
             VARIANT val);

         HRESULT ( STDMETHODCALLTYPE *get_DestinationBlock )(
            IZcadSectionTypeSettings * This,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_DestinationBlock )(
            IZcadSectionTypeSettings * This,
             VARIANT val);

         HRESULT ( STDMETHODCALLTYPE *get_DestinationFile )(
            IZcadSectionTypeSettings * This,
             BSTR *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_DestinationFile )(
            IZcadSectionTypeSettings * This,
             BSTR val);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionBoundaryColor )(
            IZcadSectionTypeSettings * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionBoundaryColor )(
            IZcadSectionTypeSettings * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionBoundaryLayer )(
            IZcadSectionTypeSettings * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionBoundaryLayer )(
            IZcadSectionTypeSettings * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionBoundaryLinetype )(
            IZcadSectionTypeSettings * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionBoundaryLinetype )(
            IZcadSectionTypeSettings * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionBoundaryLinetypeScale )(
            IZcadSectionTypeSettings * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionBoundaryLinetypeScale )(
            IZcadSectionTypeSettings * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionBoundaryPlotStyleName )(
            IZcadSectionTypeSettings * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionBoundaryPlotStyleName )(
            IZcadSectionTypeSettings * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionBoundaryLineweight )(
            IZcadSectionTypeSettings * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionBoundaryLineweight )(
            IZcadSectionTypeSettings * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionBoundaryDivisionLines )(
            IZcadSectionTypeSettings * This,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionBoundaryDivisionLines )(
            IZcadSectionTypeSettings * This,
             VARIANT_BOOL val);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillVisible )(
            IZcadSectionTypeSettings * This,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillVisible )(
            IZcadSectionTypeSettings * This,
             VARIANT_BOOL val);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillHatchPatternType )(
            IZcadSectionTypeSettings * This,
             ZcPatternType *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillHatchPatternType )(
            IZcadSectionTypeSettings * This,
             ZcPatternType val);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillHatchPatternName )(
            IZcadSectionTypeSettings * This,
             BSTR *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillHatchPatternName )(
            IZcadSectionTypeSettings * This,
             BSTR val);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillHatchAngle )(
            IZcadSectionTypeSettings * This,
             ZCAD_ANGLE *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillHatchAngle )(
            IZcadSectionTypeSettings * This,
             ZCAD_ANGLE val);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillHatchScale )(
            IZcadSectionTypeSettings * This,
             ZCAD_NOUNITS *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillHatchScale )(
            IZcadSectionTypeSettings * This,
             ZCAD_NOUNITS val);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillHatchSpacing )(
            IZcadSectionTypeSettings * This,
             double *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillHatchSpacing )(
            IZcadSectionTypeSettings * This,
             double val);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillColor )(
            IZcadSectionTypeSettings * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillColor )(
            IZcadSectionTypeSettings * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillLayer )(
            IZcadSectionTypeSettings * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillLayer )(
            IZcadSectionTypeSettings * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillLinetype )(
            IZcadSectionTypeSettings * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillLinetype )(
            IZcadSectionTypeSettings * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillLinetypeScale )(
            IZcadSectionTypeSettings * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillLinetypeScale )(
            IZcadSectionTypeSettings * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillPlotStyleName )(
            IZcadSectionTypeSettings * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillPlotStyleName )(
            IZcadSectionTypeSettings * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillLineweight )(
            IZcadSectionTypeSettings * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillLineweight )(
            IZcadSectionTypeSettings * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillFaceTransparency )(
            IZcadSectionTypeSettings * This,
             long *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillFaceTransparency )(
            IZcadSectionTypeSettings * This,
             long val);

         HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesVisible )(
            IZcadSectionTypeSettings * This,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesVisible )(
            IZcadSectionTypeSettings * This,
             VARIANT_BOOL val);

         HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesHiddenLine )(
            IZcadSectionTypeSettings * This,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesHiddenLine )(
            IZcadSectionTypeSettings * This,
             VARIANT_BOOL val);

         HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesColor )(
            IZcadSectionTypeSettings * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesColor )(
            IZcadSectionTypeSettings * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesLayer )(
            IZcadSectionTypeSettings * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesLayer )(
            IZcadSectionTypeSettings * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesLinetype )(
            IZcadSectionTypeSettings * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesLinetype )(
            IZcadSectionTypeSettings * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesLinetypeScale )(
            IZcadSectionTypeSettings * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesLinetypeScale )(
            IZcadSectionTypeSettings * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesPlotStyleName )(
            IZcadSectionTypeSettings * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesPlotStyleName )(
            IZcadSectionTypeSettings * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesLineweight )(
            IZcadSectionTypeSettings * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesLineweight )(
            IZcadSectionTypeSettings * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesVisible )(
            IZcadSectionTypeSettings * This,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesVisible )(
            IZcadSectionTypeSettings * This,
             VARIANT_BOOL val);

         HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesHiddenLine )(
            IZcadSectionTypeSettings * This,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesHiddenLine )(
            IZcadSectionTypeSettings * This,
             VARIANT_BOOL val);

         HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesColor )(
            IZcadSectionTypeSettings * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesColor )(
            IZcadSectionTypeSettings * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesLayer )(
            IZcadSectionTypeSettings * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesLayer )(
            IZcadSectionTypeSettings * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesLinetype )(
            IZcadSectionTypeSettings * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesLinetype )(
            IZcadSectionTypeSettings * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesLinetypeScale )(
            IZcadSectionTypeSettings * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesLinetypeScale )(
            IZcadSectionTypeSettings * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesPlotStyleName )(
            IZcadSectionTypeSettings * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesPlotStyleName )(
            IZcadSectionTypeSettings * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesLineweight )(
            IZcadSectionTypeSettings * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesLineweight )(
            IZcadSectionTypeSettings * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesFaceTransparency )(
            IZcadSectionTypeSettings * This,
             long *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesFaceTransparency )(
            IZcadSectionTypeSettings * This,
             long val);

         HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesEdgeTransparency )(
            IZcadSectionTypeSettings * This,
             long *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesEdgeTransparency )(
            IZcadSectionTypeSettings * This,
             long val);

         HRESULT ( STDMETHODCALLTYPE *get_CurveTangencyLinesVisible )(
            IZcadSectionTypeSettings * This,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_CurveTangencyLinesVisible )(
            IZcadSectionTypeSettings * This,
             VARIANT_BOOL val);

         HRESULT ( STDMETHODCALLTYPE *get_CurveTangencyLinesColor )(
            IZcadSectionTypeSettings * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_CurveTangencyLinesColor )(
            IZcadSectionTypeSettings * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_CurveTangencyLinesLayer )(
            IZcadSectionTypeSettings * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_CurveTangencyLinesLayer )(
            IZcadSectionTypeSettings * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_CurveTangencyLinesLinetype )(
            IZcadSectionTypeSettings * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_CurveTangencyLinesLinetype )(
            IZcadSectionTypeSettings * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_CurveTangencyLinesLinetypeScale )(
            IZcadSectionTypeSettings * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_CurveTangencyLinesLinetypeScale )(
            IZcadSectionTypeSettings * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_CurveTangencyLinesPlotStyleName )(
            IZcadSectionTypeSettings * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_CurveTangencyLinesPlotStyleName )(
            IZcadSectionTypeSettings * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_CurveTangencyLinesLineweight )(
            IZcadSectionTypeSettings * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_CurveTangencyLinesLineweight )(
            IZcadSectionTypeSettings * This,
             ZCAD_LWEIGHT lineweight);

        END_INTERFACE
    } IZcadSectionTypeSettingsVtbl;

    interface IZcadSectionTypeSettings
    {
        CONST_VTBL struct IZcadSectionTypeSettingsVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadSectionTypeSettings_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadSectionTypeSettings_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadSectionTypeSettings_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadSectionTypeSettings_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadSectionTypeSettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadSectionTypeSettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadSectionTypeSettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadSectionTypeSettings_get_GenerationOptions(This,pVal)	\
    ((This)->lpVtbl -> get_GenerationOptions(This,pVal))

#define IZcadSectionTypeSettings_put_GenerationOptions(This,val)	\
    ((This)->lpVtbl -> put_GenerationOptions(This,val))

#define IZcadSectionTypeSettings_get_SourceObjects(This,pVal)	\
    ((This)->lpVtbl -> get_SourceObjects(This,pVal))

#define IZcadSectionTypeSettings_put_SourceObjects(This,val)	\
    ((This)->lpVtbl -> put_SourceObjects(This,val))

#define IZcadSectionTypeSettings_get_DestinationBlock(This,pVal)	\
    ((This)->lpVtbl -> get_DestinationBlock(This,pVal))

#define IZcadSectionTypeSettings_put_DestinationBlock(This,val)	\
    ((This)->lpVtbl -> put_DestinationBlock(This,val))

#define IZcadSectionTypeSettings_get_DestinationFile(This,pVal)	\
    ((This)->lpVtbl -> get_DestinationFile(This,pVal))

#define IZcadSectionTypeSettings_put_DestinationFile(This,val)	\
    ((This)->lpVtbl -> put_DestinationFile(This,val))

#define IZcadSectionTypeSettings_get_IntersectionBoundaryColor(This,pColor)	\
    ((This)->lpVtbl -> get_IntersectionBoundaryColor(This,pColor))

#define IZcadSectionTypeSettings_put_IntersectionBoundaryColor(This,pColor)	\
    ((This)->lpVtbl -> put_IntersectionBoundaryColor(This,pColor))

#define IZcadSectionTypeSettings_get_IntersectionBoundaryLayer(This,Layer)	\
    ((This)->lpVtbl -> get_IntersectionBoundaryLayer(This,Layer))

#define IZcadSectionTypeSettings_put_IntersectionBoundaryLayer(This,Layer)	\
    ((This)->lpVtbl -> put_IntersectionBoundaryLayer(This,Layer))

#define IZcadSectionTypeSettings_get_IntersectionBoundaryLinetype(This,Linetype)	\
    ((This)->lpVtbl -> get_IntersectionBoundaryLinetype(This,Linetype))

#define IZcadSectionTypeSettings_put_IntersectionBoundaryLinetype(This,Linetype)	\
    ((This)->lpVtbl -> put_IntersectionBoundaryLinetype(This,Linetype))

#define IZcadSectionTypeSettings_get_IntersectionBoundaryLinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_IntersectionBoundaryLinetypeScale(This,ltScale))

#define IZcadSectionTypeSettings_put_IntersectionBoundaryLinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_IntersectionBoundaryLinetypeScale(This,ltScale))

#define IZcadSectionTypeSettings_get_IntersectionBoundaryPlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_IntersectionBoundaryPlotStyleName(This,plotStyle))

#define IZcadSectionTypeSettings_put_IntersectionBoundaryPlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_IntersectionBoundaryPlotStyleName(This,plotStyle))

#define IZcadSectionTypeSettings_get_IntersectionBoundaryLineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_IntersectionBoundaryLineweight(This,lineweight))

#define IZcadSectionTypeSettings_put_IntersectionBoundaryLineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_IntersectionBoundaryLineweight(This,lineweight))

#define IZcadSectionTypeSettings_get_IntersectionBoundaryDivisionLines(This,pVal)	\
    ((This)->lpVtbl -> get_IntersectionBoundaryDivisionLines(This,pVal))

#define IZcadSectionTypeSettings_put_IntersectionBoundaryDivisionLines(This,val)	\
    ((This)->lpVtbl -> put_IntersectionBoundaryDivisionLines(This,val))

#define IZcadSectionTypeSettings_get_IntersectionFillVisible(This,pVal)	\
    ((This)->lpVtbl -> get_IntersectionFillVisible(This,pVal))

#define IZcadSectionTypeSettings_put_IntersectionFillVisible(This,val)	\
    ((This)->lpVtbl -> put_IntersectionFillVisible(This,val))

#define IZcadSectionTypeSettings_get_IntersectionFillHatchPatternType(This,pVal)	\
    ((This)->lpVtbl -> get_IntersectionFillHatchPatternType(This,pVal))

#define IZcadSectionTypeSettings_put_IntersectionFillHatchPatternType(This,val)	\
    ((This)->lpVtbl -> put_IntersectionFillHatchPatternType(This,val))

#define IZcadSectionTypeSettings_get_IntersectionFillHatchPatternName(This,pVal)	\
    ((This)->lpVtbl -> get_IntersectionFillHatchPatternName(This,pVal))

#define IZcadSectionTypeSettings_put_IntersectionFillHatchPatternName(This,val)	\
    ((This)->lpVtbl -> put_IntersectionFillHatchPatternName(This,val))

#define IZcadSectionTypeSettings_get_IntersectionFillHatchAngle(This,pVal)	\
    ((This)->lpVtbl -> get_IntersectionFillHatchAngle(This,pVal))

#define IZcadSectionTypeSettings_put_IntersectionFillHatchAngle(This,val)	\
    ((This)->lpVtbl -> put_IntersectionFillHatchAngle(This,val))

#define IZcadSectionTypeSettings_get_IntersectionFillHatchScale(This,pVal)	\
    ((This)->lpVtbl -> get_IntersectionFillHatchScale(This,pVal))

#define IZcadSectionTypeSettings_put_IntersectionFillHatchScale(This,val)	\
    ((This)->lpVtbl -> put_IntersectionFillHatchScale(This,val))

#define IZcadSectionTypeSettings_get_IntersectionFillHatchSpacing(This,pVal)	\
    ((This)->lpVtbl -> get_IntersectionFillHatchSpacing(This,pVal))

#define IZcadSectionTypeSettings_put_IntersectionFillHatchSpacing(This,val)	\
    ((This)->lpVtbl -> put_IntersectionFillHatchSpacing(This,val))

#define IZcadSectionTypeSettings_get_IntersectionFillColor(This,pColor)	\
    ((This)->lpVtbl -> get_IntersectionFillColor(This,pColor))

#define IZcadSectionTypeSettings_put_IntersectionFillColor(This,pColor)	\
    ((This)->lpVtbl -> put_IntersectionFillColor(This,pColor))

#define IZcadSectionTypeSettings_get_IntersectionFillLayer(This,Layer)	\
    ((This)->lpVtbl -> get_IntersectionFillLayer(This,Layer))

#define IZcadSectionTypeSettings_put_IntersectionFillLayer(This,Layer)	\
    ((This)->lpVtbl -> put_IntersectionFillLayer(This,Layer))

#define IZcadSectionTypeSettings_get_IntersectionFillLinetype(This,Linetype)	\
    ((This)->lpVtbl -> get_IntersectionFillLinetype(This,Linetype))

#define IZcadSectionTypeSettings_put_IntersectionFillLinetype(This,Linetype)	\
    ((This)->lpVtbl -> put_IntersectionFillLinetype(This,Linetype))

#define IZcadSectionTypeSettings_get_IntersectionFillLinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_IntersectionFillLinetypeScale(This,ltScale))

#define IZcadSectionTypeSettings_put_IntersectionFillLinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_IntersectionFillLinetypeScale(This,ltScale))

#define IZcadSectionTypeSettings_get_IntersectionFillPlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_IntersectionFillPlotStyleName(This,plotStyle))

#define IZcadSectionTypeSettings_put_IntersectionFillPlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_IntersectionFillPlotStyleName(This,plotStyle))

#define IZcadSectionTypeSettings_get_IntersectionFillLineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_IntersectionFillLineweight(This,lineweight))

#define IZcadSectionTypeSettings_put_IntersectionFillLineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_IntersectionFillLineweight(This,lineweight))

#define IZcadSectionTypeSettings_get_IntersectionFillFaceTransparency(This,pVal)	\
    ((This)->lpVtbl -> get_IntersectionFillFaceTransparency(This,pVal))

#define IZcadSectionTypeSettings_put_IntersectionFillFaceTransparency(This,val)	\
    ((This)->lpVtbl -> put_IntersectionFillFaceTransparency(This,val))

#define IZcadSectionTypeSettings_get_BackgroundLinesVisible(This,pVal)	\
    ((This)->lpVtbl -> get_BackgroundLinesVisible(This,pVal))

#define IZcadSectionTypeSettings_put_BackgroundLinesVisible(This,val)	\
    ((This)->lpVtbl -> put_BackgroundLinesVisible(This,val))

#define IZcadSectionTypeSettings_get_BackgroundLinesHiddenLine(This,pVal)	\
    ((This)->lpVtbl -> get_BackgroundLinesHiddenLine(This,pVal))

#define IZcadSectionTypeSettings_put_BackgroundLinesHiddenLine(This,val)	\
    ((This)->lpVtbl -> put_BackgroundLinesHiddenLine(This,val))

#define IZcadSectionTypeSettings_get_BackgroundLinesColor(This,pColor)	\
    ((This)->lpVtbl -> get_BackgroundLinesColor(This,pColor))

#define IZcadSectionTypeSettings_put_BackgroundLinesColor(This,pColor)	\
    ((This)->lpVtbl -> put_BackgroundLinesColor(This,pColor))

#define IZcadSectionTypeSettings_get_BackgroundLinesLayer(This,Layer)	\
    ((This)->lpVtbl -> get_BackgroundLinesLayer(This,Layer))

#define IZcadSectionTypeSettings_put_BackgroundLinesLayer(This,Layer)	\
    ((This)->lpVtbl -> put_BackgroundLinesLayer(This,Layer))

#define IZcadSectionTypeSettings_get_BackgroundLinesLinetype(This,Linetype)	\
    ((This)->lpVtbl -> get_BackgroundLinesLinetype(This,Linetype))

#define IZcadSectionTypeSettings_put_BackgroundLinesLinetype(This,Linetype)	\
    ((This)->lpVtbl -> put_BackgroundLinesLinetype(This,Linetype))

#define IZcadSectionTypeSettings_get_BackgroundLinesLinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_BackgroundLinesLinetypeScale(This,ltScale))

#define IZcadSectionTypeSettings_put_BackgroundLinesLinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_BackgroundLinesLinetypeScale(This,ltScale))

#define IZcadSectionTypeSettings_get_BackgroundLinesPlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_BackgroundLinesPlotStyleName(This,plotStyle))

#define IZcadSectionTypeSettings_put_BackgroundLinesPlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_BackgroundLinesPlotStyleName(This,plotStyle))

#define IZcadSectionTypeSettings_get_BackgroundLinesLineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_BackgroundLinesLineweight(This,lineweight))

#define IZcadSectionTypeSettings_put_BackgroundLinesLineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_BackgroundLinesLineweight(This,lineweight))

#define IZcadSectionTypeSettings_get_ForegroundLinesVisible(This,pVal)	\
    ((This)->lpVtbl -> get_ForegroundLinesVisible(This,pVal))

#define IZcadSectionTypeSettings_put_ForegroundLinesVisible(This,val)	\
    ((This)->lpVtbl -> put_ForegroundLinesVisible(This,val))

#define IZcadSectionTypeSettings_get_ForegroundLinesHiddenLine(This,pVal)	\
    ((This)->lpVtbl -> get_ForegroundLinesHiddenLine(This,pVal))

#define IZcadSectionTypeSettings_put_ForegroundLinesHiddenLine(This,val)	\
    ((This)->lpVtbl -> put_ForegroundLinesHiddenLine(This,val))

#define IZcadSectionTypeSettings_get_ForegroundLinesColor(This,pColor)	\
    ((This)->lpVtbl -> get_ForegroundLinesColor(This,pColor))

#define IZcadSectionTypeSettings_put_ForegroundLinesColor(This,pColor)	\
    ((This)->lpVtbl -> put_ForegroundLinesColor(This,pColor))

#define IZcadSectionTypeSettings_get_ForegroundLinesLayer(This,Layer)	\
    ((This)->lpVtbl -> get_ForegroundLinesLayer(This,Layer))

#define IZcadSectionTypeSettings_put_ForegroundLinesLayer(This,Layer)	\
    ((This)->lpVtbl -> put_ForegroundLinesLayer(This,Layer))

#define IZcadSectionTypeSettings_get_ForegroundLinesLinetype(This,Linetype)	\
    ((This)->lpVtbl -> get_ForegroundLinesLinetype(This,Linetype))

#define IZcadSectionTypeSettings_put_ForegroundLinesLinetype(This,Linetype)	\
    ((This)->lpVtbl -> put_ForegroundLinesLinetype(This,Linetype))

#define IZcadSectionTypeSettings_get_ForegroundLinesLinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_ForegroundLinesLinetypeScale(This,ltScale))

#define IZcadSectionTypeSettings_put_ForegroundLinesLinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_ForegroundLinesLinetypeScale(This,ltScale))

#define IZcadSectionTypeSettings_get_ForegroundLinesPlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_ForegroundLinesPlotStyleName(This,plotStyle))

#define IZcadSectionTypeSettings_put_ForegroundLinesPlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_ForegroundLinesPlotStyleName(This,plotStyle))

#define IZcadSectionTypeSettings_get_ForegroundLinesLineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_ForegroundLinesLineweight(This,lineweight))

#define IZcadSectionTypeSettings_put_ForegroundLinesLineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_ForegroundLinesLineweight(This,lineweight))

#define IZcadSectionTypeSettings_get_ForegroundLinesFaceTransparency(This,pVal)	\
    ((This)->lpVtbl -> get_ForegroundLinesFaceTransparency(This,pVal))

#define IZcadSectionTypeSettings_put_ForegroundLinesFaceTransparency(This,val)	\
    ((This)->lpVtbl -> put_ForegroundLinesFaceTransparency(This,val))

#define IZcadSectionTypeSettings_get_ForegroundLinesEdgeTransparency(This,pVal)	\
    ((This)->lpVtbl -> get_ForegroundLinesEdgeTransparency(This,pVal))

#define IZcadSectionTypeSettings_put_ForegroundLinesEdgeTransparency(This,val)	\
    ((This)->lpVtbl -> put_ForegroundLinesEdgeTransparency(This,val))

#define IZcadSectionTypeSettings_get_CurveTangencyLinesVisible(This,pVal)	\
    ((This)->lpVtbl -> get_CurveTangencyLinesVisible(This,pVal))

#define IZcadSectionTypeSettings_put_CurveTangencyLinesVisible(This,val)	\
    ((This)->lpVtbl -> put_CurveTangencyLinesVisible(This,val))

#define IZcadSectionTypeSettings_get_CurveTangencyLinesColor(This,pColor)	\
    ((This)->lpVtbl -> get_CurveTangencyLinesColor(This,pColor))

#define IZcadSectionTypeSettings_put_CurveTangencyLinesColor(This,pColor)	\
    ((This)->lpVtbl -> put_CurveTangencyLinesColor(This,pColor))

#define IZcadSectionTypeSettings_get_CurveTangencyLinesLayer(This,Layer)	\
    ((This)->lpVtbl -> get_CurveTangencyLinesLayer(This,Layer))

#define IZcadSectionTypeSettings_put_CurveTangencyLinesLayer(This,Layer)	\
    ((This)->lpVtbl -> put_CurveTangencyLinesLayer(This,Layer))

#define IZcadSectionTypeSettings_get_CurveTangencyLinesLinetype(This,Linetype)	\
    ((This)->lpVtbl -> get_CurveTangencyLinesLinetype(This,Linetype))

#define IZcadSectionTypeSettings_put_CurveTangencyLinesLinetype(This,Linetype)	\
    ((This)->lpVtbl -> put_CurveTangencyLinesLinetype(This,Linetype))

#define IZcadSectionTypeSettings_get_CurveTangencyLinesLinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_CurveTangencyLinesLinetypeScale(This,ltScale))

#define IZcadSectionTypeSettings_put_CurveTangencyLinesLinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_CurveTangencyLinesLinetypeScale(This,ltScale))

#define IZcadSectionTypeSettings_get_CurveTangencyLinesPlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_CurveTangencyLinesPlotStyleName(This,plotStyle))

#define IZcadSectionTypeSettings_put_CurveTangencyLinesPlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_CurveTangencyLinesPlotStyleName(This,plotStyle))

#define IZcadSectionTypeSettings_get_CurveTangencyLinesLineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_CurveTangencyLinesLineweight(This,lineweight))

#define IZcadSectionTypeSettings_put_CurveTangencyLinesLineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_CurveTangencyLinesLineweight(This,lineweight))

#endif
#endif


#endif

#ifndef __IZcadSectionTypeSettings2_INTERFACE_DEFINED__
#define __IZcadSectionTypeSettings2_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadSectionTypeSettings2,0xB51F3969,0xDB28,0x49AA,0x81,0x6A,0x41,0xF9,0xFF,0xCE,0x4F,0xFB);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("B51F3969-DB28-49AA-816A-41F9FFCE4FFB")
    IZcadSectionTypeSettings2 : public IZcadSectionTypeSettings
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_IntersectionBoundaryVisible(
             VARIANT_BOOL *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IntersectionBoundaryVisible(
             VARIANT_BOOL val) = 0;

    };

#else

    typedef struct IZcadSectionTypeSettings2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadSectionTypeSettings2 * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadSectionTypeSettings2 * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadSectionTypeSettings2 * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadSectionTypeSettings2 * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadSectionTypeSettings2 * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadSectionTypeSettings2 * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadSectionTypeSettings2 * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_GenerationOptions )(
            IZcadSectionTypeSettings2 * This,
             ZcSectionGeneration *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_GenerationOptions )(
            IZcadSectionTypeSettings2 * This,
             ZcSectionGeneration val);

         HRESULT ( STDMETHODCALLTYPE *get_SourceObjects )(
            IZcadSectionTypeSettings2 * This,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_SourceObjects )(
            IZcadSectionTypeSettings2 * This,
             VARIANT val);

         HRESULT ( STDMETHODCALLTYPE *get_DestinationBlock )(
            IZcadSectionTypeSettings2 * This,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_DestinationBlock )(
            IZcadSectionTypeSettings2 * This,
             VARIANT val);

         HRESULT ( STDMETHODCALLTYPE *get_DestinationFile )(
            IZcadSectionTypeSettings2 * This,
             BSTR *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_DestinationFile )(
            IZcadSectionTypeSettings2 * This,
             BSTR val);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionBoundaryColor )(
            IZcadSectionTypeSettings2 * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionBoundaryColor )(
            IZcadSectionTypeSettings2 * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionBoundaryLayer )(
            IZcadSectionTypeSettings2 * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionBoundaryLayer )(
            IZcadSectionTypeSettings2 * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionBoundaryLinetype )(
            IZcadSectionTypeSettings2 * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionBoundaryLinetype )(
            IZcadSectionTypeSettings2 * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionBoundaryLinetypeScale )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionBoundaryLinetypeScale )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionBoundaryPlotStyleName )(
            IZcadSectionTypeSettings2 * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionBoundaryPlotStyleName )(
            IZcadSectionTypeSettings2 * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionBoundaryLineweight )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionBoundaryLineweight )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionBoundaryDivisionLines )(
            IZcadSectionTypeSettings2 * This,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionBoundaryDivisionLines )(
            IZcadSectionTypeSettings2 * This,
             VARIANT_BOOL val);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillVisible )(
            IZcadSectionTypeSettings2 * This,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillVisible )(
            IZcadSectionTypeSettings2 * This,
             VARIANT_BOOL val);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillHatchPatternType )(
            IZcadSectionTypeSettings2 * This,
             ZcPatternType *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillHatchPatternType )(
            IZcadSectionTypeSettings2 * This,
             ZcPatternType val);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillHatchPatternName )(
            IZcadSectionTypeSettings2 * This,
             BSTR *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillHatchPatternName )(
            IZcadSectionTypeSettings2 * This,
             BSTR val);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillHatchAngle )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_ANGLE *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillHatchAngle )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_ANGLE val);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillHatchScale )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_NOUNITS *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillHatchScale )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_NOUNITS val);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillHatchSpacing )(
            IZcadSectionTypeSettings2 * This,
             double *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillHatchSpacing )(
            IZcadSectionTypeSettings2 * This,
             double val);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillColor )(
            IZcadSectionTypeSettings2 * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillColor )(
            IZcadSectionTypeSettings2 * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillLayer )(
            IZcadSectionTypeSettings2 * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillLayer )(
            IZcadSectionTypeSettings2 * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillLinetype )(
            IZcadSectionTypeSettings2 * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillLinetype )(
            IZcadSectionTypeSettings2 * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillLinetypeScale )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillLinetypeScale )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillPlotStyleName )(
            IZcadSectionTypeSettings2 * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillPlotStyleName )(
            IZcadSectionTypeSettings2 * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillLineweight )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillLineweight )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionFillFaceTransparency )(
            IZcadSectionTypeSettings2 * This,
             long *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionFillFaceTransparency )(
            IZcadSectionTypeSettings2 * This,
             long val);

         HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesVisible )(
            IZcadSectionTypeSettings2 * This,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesVisible )(
            IZcadSectionTypeSettings2 * This,
             VARIANT_BOOL val);

         HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesHiddenLine )(
            IZcadSectionTypeSettings2 * This,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesHiddenLine )(
            IZcadSectionTypeSettings2 * This,
             VARIANT_BOOL val);

         HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesColor )(
            IZcadSectionTypeSettings2 * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesColor )(
            IZcadSectionTypeSettings2 * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesLayer )(
            IZcadSectionTypeSettings2 * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesLayer )(
            IZcadSectionTypeSettings2 * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesLinetype )(
            IZcadSectionTypeSettings2 * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesLinetype )(
            IZcadSectionTypeSettings2 * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesLinetypeScale )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesLinetypeScale )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesPlotStyleName )(
            IZcadSectionTypeSettings2 * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesPlotStyleName )(
            IZcadSectionTypeSettings2 * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_BackgroundLinesLineweight )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_BackgroundLinesLineweight )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesVisible )(
            IZcadSectionTypeSettings2 * This,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesVisible )(
            IZcadSectionTypeSettings2 * This,
             VARIANT_BOOL val);

         HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesHiddenLine )(
            IZcadSectionTypeSettings2 * This,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesHiddenLine )(
            IZcadSectionTypeSettings2 * This,
             VARIANT_BOOL val);

         HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesColor )(
            IZcadSectionTypeSettings2 * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesColor )(
            IZcadSectionTypeSettings2 * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesLayer )(
            IZcadSectionTypeSettings2 * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesLayer )(
            IZcadSectionTypeSettings2 * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesLinetype )(
            IZcadSectionTypeSettings2 * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesLinetype )(
            IZcadSectionTypeSettings2 * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesLinetypeScale )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesLinetypeScale )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesPlotStyleName )(
            IZcadSectionTypeSettings2 * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesPlotStyleName )(
            IZcadSectionTypeSettings2 * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesLineweight )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesLineweight )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesFaceTransparency )(
            IZcadSectionTypeSettings2 * This,
             long *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesFaceTransparency )(
            IZcadSectionTypeSettings2 * This,
             long val);

         HRESULT ( STDMETHODCALLTYPE *get_ForegroundLinesEdgeTransparency )(
            IZcadSectionTypeSettings2 * This,
             long *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_ForegroundLinesEdgeTransparency )(
            IZcadSectionTypeSettings2 * This,
             long val);

         HRESULT ( STDMETHODCALLTYPE *get_CurveTangencyLinesVisible )(
            IZcadSectionTypeSettings2 * This,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_CurveTangencyLinesVisible )(
            IZcadSectionTypeSettings2 * This,
             VARIANT_BOOL val);

         HRESULT ( STDMETHODCALLTYPE *get_CurveTangencyLinesColor )(
            IZcadSectionTypeSettings2 * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_CurveTangencyLinesColor )(
            IZcadSectionTypeSettings2 * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_CurveTangencyLinesLayer )(
            IZcadSectionTypeSettings2 * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_CurveTangencyLinesLayer )(
            IZcadSectionTypeSettings2 * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_CurveTangencyLinesLinetype )(
            IZcadSectionTypeSettings2 * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_CurveTangencyLinesLinetype )(
            IZcadSectionTypeSettings2 * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_CurveTangencyLinesLinetypeScale )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_CurveTangencyLinesLinetypeScale )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_CurveTangencyLinesPlotStyleName )(
            IZcadSectionTypeSettings2 * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_CurveTangencyLinesPlotStyleName )(
            IZcadSectionTypeSettings2 * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_CurveTangencyLinesLineweight )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_CurveTangencyLinesLineweight )(
            IZcadSectionTypeSettings2 * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_IntersectionBoundaryVisible )(
            IZcadSectionTypeSettings2 * This,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_IntersectionBoundaryVisible )(
            IZcadSectionTypeSettings2 * This,
             VARIANT_BOOL val);

        END_INTERFACE
    } IZcadSectionTypeSettings2Vtbl;

    interface IZcadSectionTypeSettings2
    {
        CONST_VTBL struct IZcadSectionTypeSettings2Vtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadSectionTypeSettings2_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadSectionTypeSettings2_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadSectionTypeSettings2_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadSectionTypeSettings2_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadSectionTypeSettings2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadSectionTypeSettings2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadSectionTypeSettings2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))

#define IZcadSectionTypeSettings2_get_GenerationOptions(This,pVal)	\
    ((This)->lpVtbl -> get_GenerationOptions(This,pVal))

#define IZcadSectionTypeSettings2_put_GenerationOptions(This,val)	\
    ((This)->lpVtbl -> put_GenerationOptions(This,val))

#define IZcadSectionTypeSettings2_get_SourceObjects(This,pVal)	\
    ((This)->lpVtbl -> get_SourceObjects(This,pVal))

#define IZcadSectionTypeSettings2_put_SourceObjects(This,val)	\
    ((This)->lpVtbl -> put_SourceObjects(This,val))

#define IZcadSectionTypeSettings2_get_DestinationBlock(This,pVal)	\
    ((This)->lpVtbl -> get_DestinationBlock(This,pVal))

#define IZcadSectionTypeSettings2_put_DestinationBlock(This,val)	\
    ((This)->lpVtbl -> put_DestinationBlock(This,val))

#define IZcadSectionTypeSettings2_get_DestinationFile(This,pVal)	\
    ((This)->lpVtbl -> get_DestinationFile(This,pVal))

#define IZcadSectionTypeSettings2_put_DestinationFile(This,val)	\
    ((This)->lpVtbl -> put_DestinationFile(This,val))

#define IZcadSectionTypeSettings2_get_IntersectionBoundaryColor(This,pColor)	\
    ((This)->lpVtbl -> get_IntersectionBoundaryColor(This,pColor))

#define IZcadSectionTypeSettings2_put_IntersectionBoundaryColor(This,pColor)	\
    ((This)->lpVtbl -> put_IntersectionBoundaryColor(This,pColor))

#define IZcadSectionTypeSettings2_get_IntersectionBoundaryLayer(This,Layer)	\
    ((This)->lpVtbl -> get_IntersectionBoundaryLayer(This,Layer))

#define IZcadSectionTypeSettings2_put_IntersectionBoundaryLayer(This,Layer)	\
    ((This)->lpVtbl -> put_IntersectionBoundaryLayer(This,Layer))

#define IZcadSectionTypeSettings2_get_IntersectionBoundaryLinetype(This,Linetype)	\
    ((This)->lpVtbl -> get_IntersectionBoundaryLinetype(This,Linetype))

#define IZcadSectionTypeSettings2_put_IntersectionBoundaryLinetype(This,Linetype)	\
    ((This)->lpVtbl -> put_IntersectionBoundaryLinetype(This,Linetype))

#define IZcadSectionTypeSettings2_get_IntersectionBoundaryLinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_IntersectionBoundaryLinetypeScale(This,ltScale))

#define IZcadSectionTypeSettings2_put_IntersectionBoundaryLinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_IntersectionBoundaryLinetypeScale(This,ltScale))

#define IZcadSectionTypeSettings2_get_IntersectionBoundaryPlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_IntersectionBoundaryPlotStyleName(This,plotStyle))

#define IZcadSectionTypeSettings2_put_IntersectionBoundaryPlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_IntersectionBoundaryPlotStyleName(This,plotStyle))

#define IZcadSectionTypeSettings2_get_IntersectionBoundaryLineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_IntersectionBoundaryLineweight(This,lineweight))

#define IZcadSectionTypeSettings2_put_IntersectionBoundaryLineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_IntersectionBoundaryLineweight(This,lineweight))

#define IZcadSectionTypeSettings2_get_IntersectionBoundaryDivisionLines(This,pVal)	\
    ((This)->lpVtbl -> get_IntersectionBoundaryDivisionLines(This,pVal))

#define IZcadSectionTypeSettings2_put_IntersectionBoundaryDivisionLines(This,val)	\
    ((This)->lpVtbl -> put_IntersectionBoundaryDivisionLines(This,val))

#define IZcadSectionTypeSettings2_get_IntersectionFillVisible(This,pVal)	\
    ((This)->lpVtbl -> get_IntersectionFillVisible(This,pVal))

#define IZcadSectionTypeSettings2_put_IntersectionFillVisible(This,val)	\
    ((This)->lpVtbl -> put_IntersectionFillVisible(This,val))

#define IZcadSectionTypeSettings2_get_IntersectionFillHatchPatternType(This,pVal)	\
    ((This)->lpVtbl -> get_IntersectionFillHatchPatternType(This,pVal))

#define IZcadSectionTypeSettings2_put_IntersectionFillHatchPatternType(This,val)	\
    ((This)->lpVtbl -> put_IntersectionFillHatchPatternType(This,val))

#define IZcadSectionTypeSettings2_get_IntersectionFillHatchPatternName(This,pVal)	\
    ((This)->lpVtbl -> get_IntersectionFillHatchPatternName(This,pVal))

#define IZcadSectionTypeSettings2_put_IntersectionFillHatchPatternName(This,val)	\
    ((This)->lpVtbl -> put_IntersectionFillHatchPatternName(This,val))

#define IZcadSectionTypeSettings2_get_IntersectionFillHatchAngle(This,pVal)	\
    ((This)->lpVtbl -> get_IntersectionFillHatchAngle(This,pVal))

#define IZcadSectionTypeSettings2_put_IntersectionFillHatchAngle(This,val)	\
    ((This)->lpVtbl -> put_IntersectionFillHatchAngle(This,val))

#define IZcadSectionTypeSettings2_get_IntersectionFillHatchScale(This,pVal)	\
    ((This)->lpVtbl -> get_IntersectionFillHatchScale(This,pVal))

#define IZcadSectionTypeSettings2_put_IntersectionFillHatchScale(This,val)	\
    ((This)->lpVtbl -> put_IntersectionFillHatchScale(This,val))

#define IZcadSectionTypeSettings2_get_IntersectionFillHatchSpacing(This,pVal)	\
    ((This)->lpVtbl -> get_IntersectionFillHatchSpacing(This,pVal))

#define IZcadSectionTypeSettings2_put_IntersectionFillHatchSpacing(This,val)	\
    ((This)->lpVtbl -> put_IntersectionFillHatchSpacing(This,val))

#define IZcadSectionTypeSettings2_get_IntersectionFillColor(This,pColor)	\
    ((This)->lpVtbl -> get_IntersectionFillColor(This,pColor))

#define IZcadSectionTypeSettings2_put_IntersectionFillColor(This,pColor)	\
    ((This)->lpVtbl -> put_IntersectionFillColor(This,pColor))

#define IZcadSectionTypeSettings2_get_IntersectionFillLayer(This,Layer)	\
    ((This)->lpVtbl -> get_IntersectionFillLayer(This,Layer))

#define IZcadSectionTypeSettings2_put_IntersectionFillLayer(This,Layer)	\
    ((This)->lpVtbl -> put_IntersectionFillLayer(This,Layer))

#define IZcadSectionTypeSettings2_get_IntersectionFillLinetype(This,Linetype)	\
    ((This)->lpVtbl -> get_IntersectionFillLinetype(This,Linetype))

#define IZcadSectionTypeSettings2_put_IntersectionFillLinetype(This,Linetype)	\
    ((This)->lpVtbl -> put_IntersectionFillLinetype(This,Linetype))

#define IZcadSectionTypeSettings2_get_IntersectionFillLinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_IntersectionFillLinetypeScale(This,ltScale))

#define IZcadSectionTypeSettings2_put_IntersectionFillLinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_IntersectionFillLinetypeScale(This,ltScale))

#define IZcadSectionTypeSettings2_get_IntersectionFillPlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_IntersectionFillPlotStyleName(This,plotStyle))

#define IZcadSectionTypeSettings2_put_IntersectionFillPlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_IntersectionFillPlotStyleName(This,plotStyle))

#define IZcadSectionTypeSettings2_get_IntersectionFillLineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_IntersectionFillLineweight(This,lineweight))

#define IZcadSectionTypeSettings2_put_IntersectionFillLineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_IntersectionFillLineweight(This,lineweight))

#define IZcadSectionTypeSettings2_get_IntersectionFillFaceTransparency(This,pVal)	\
    ((This)->lpVtbl -> get_IntersectionFillFaceTransparency(This,pVal))

#define IZcadSectionTypeSettings2_put_IntersectionFillFaceTransparency(This,val)	\
    ((This)->lpVtbl -> put_IntersectionFillFaceTransparency(This,val))

#define IZcadSectionTypeSettings2_get_BackgroundLinesVisible(This,pVal)	\
    ((This)->lpVtbl -> get_BackgroundLinesVisible(This,pVal))

#define IZcadSectionTypeSettings2_put_BackgroundLinesVisible(This,val)	\
    ((This)->lpVtbl -> put_BackgroundLinesVisible(This,val))

#define IZcadSectionTypeSettings2_get_BackgroundLinesHiddenLine(This,pVal)	\
    ((This)->lpVtbl -> get_BackgroundLinesHiddenLine(This,pVal))

#define IZcadSectionTypeSettings2_put_BackgroundLinesHiddenLine(This,val)	\
    ((This)->lpVtbl -> put_BackgroundLinesHiddenLine(This,val))

#define IZcadSectionTypeSettings2_get_BackgroundLinesColor(This,pColor)	\
    ((This)->lpVtbl -> get_BackgroundLinesColor(This,pColor))

#define IZcadSectionTypeSettings2_put_BackgroundLinesColor(This,pColor)	\
    ((This)->lpVtbl -> put_BackgroundLinesColor(This,pColor))

#define IZcadSectionTypeSettings2_get_BackgroundLinesLayer(This,Layer)	\
    ((This)->lpVtbl -> get_BackgroundLinesLayer(This,Layer))

#define IZcadSectionTypeSettings2_put_BackgroundLinesLayer(This,Layer)	\
    ((This)->lpVtbl -> put_BackgroundLinesLayer(This,Layer))

#define IZcadSectionTypeSettings2_get_BackgroundLinesLinetype(This,Linetype)	\
    ((This)->lpVtbl -> get_BackgroundLinesLinetype(This,Linetype))

#define IZcadSectionTypeSettings2_put_BackgroundLinesLinetype(This,Linetype)	\
    ((This)->lpVtbl -> put_BackgroundLinesLinetype(This,Linetype))

#define IZcadSectionTypeSettings2_get_BackgroundLinesLinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_BackgroundLinesLinetypeScale(This,ltScale))

#define IZcadSectionTypeSettings2_put_BackgroundLinesLinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_BackgroundLinesLinetypeScale(This,ltScale))

#define IZcadSectionTypeSettings2_get_BackgroundLinesPlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_BackgroundLinesPlotStyleName(This,plotStyle))

#define IZcadSectionTypeSettings2_put_BackgroundLinesPlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_BackgroundLinesPlotStyleName(This,plotStyle))

#define IZcadSectionTypeSettings2_get_BackgroundLinesLineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_BackgroundLinesLineweight(This,lineweight))

#define IZcadSectionTypeSettings2_put_BackgroundLinesLineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_BackgroundLinesLineweight(This,lineweight))

#define IZcadSectionTypeSettings2_get_ForegroundLinesVisible(This,pVal)	\
    ((This)->lpVtbl -> get_ForegroundLinesVisible(This,pVal))

#define IZcadSectionTypeSettings2_put_ForegroundLinesVisible(This,val)	\
    ((This)->lpVtbl -> put_ForegroundLinesVisible(This,val))

#define IZcadSectionTypeSettings2_get_ForegroundLinesHiddenLine(This,pVal)	\
    ((This)->lpVtbl -> get_ForegroundLinesHiddenLine(This,pVal))

#define IZcadSectionTypeSettings2_put_ForegroundLinesHiddenLine(This,val)	\
    ((This)->lpVtbl -> put_ForegroundLinesHiddenLine(This,val))

#define IZcadSectionTypeSettings2_get_ForegroundLinesColor(This,pColor)	\
    ((This)->lpVtbl -> get_ForegroundLinesColor(This,pColor))

#define IZcadSectionTypeSettings2_put_ForegroundLinesColor(This,pColor)	\
    ((This)->lpVtbl -> put_ForegroundLinesColor(This,pColor))

#define IZcadSectionTypeSettings2_get_ForegroundLinesLayer(This,Layer)	\
    ((This)->lpVtbl -> get_ForegroundLinesLayer(This,Layer))

#define IZcadSectionTypeSettings2_put_ForegroundLinesLayer(This,Layer)	\
    ((This)->lpVtbl -> put_ForegroundLinesLayer(This,Layer))

#define IZcadSectionTypeSettings2_get_ForegroundLinesLinetype(This,Linetype)	\
    ((This)->lpVtbl -> get_ForegroundLinesLinetype(This,Linetype))

#define IZcadSectionTypeSettings2_put_ForegroundLinesLinetype(This,Linetype)	\
    ((This)->lpVtbl -> put_ForegroundLinesLinetype(This,Linetype))

#define IZcadSectionTypeSettings2_get_ForegroundLinesLinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_ForegroundLinesLinetypeScale(This,ltScale))

#define IZcadSectionTypeSettings2_put_ForegroundLinesLinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_ForegroundLinesLinetypeScale(This,ltScale))

#define IZcadSectionTypeSettings2_get_ForegroundLinesPlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_ForegroundLinesPlotStyleName(This,plotStyle))

#define IZcadSectionTypeSettings2_put_ForegroundLinesPlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_ForegroundLinesPlotStyleName(This,plotStyle))

#define IZcadSectionTypeSettings2_get_ForegroundLinesLineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_ForegroundLinesLineweight(This,lineweight))

#define IZcadSectionTypeSettings2_put_ForegroundLinesLineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_ForegroundLinesLineweight(This,lineweight))

#define IZcadSectionTypeSettings2_get_ForegroundLinesFaceTransparency(This,pVal)	\
    ((This)->lpVtbl -> get_ForegroundLinesFaceTransparency(This,pVal))

#define IZcadSectionTypeSettings2_put_ForegroundLinesFaceTransparency(This,val)	\
    ((This)->lpVtbl -> put_ForegroundLinesFaceTransparency(This,val))

#define IZcadSectionTypeSettings2_get_ForegroundLinesEdgeTransparency(This,pVal)	\
    ((This)->lpVtbl -> get_ForegroundLinesEdgeTransparency(This,pVal))

#define IZcadSectionTypeSettings2_put_ForegroundLinesEdgeTransparency(This,val)	\
    ((This)->lpVtbl -> put_ForegroundLinesEdgeTransparency(This,val))

#define IZcadSectionTypeSettings2_get_CurveTangencyLinesVisible(This,pVal)	\
    ((This)->lpVtbl -> get_CurveTangencyLinesVisible(This,pVal))

#define IZcadSectionTypeSettings2_put_CurveTangencyLinesVisible(This,val)	\
    ((This)->lpVtbl -> put_CurveTangencyLinesVisible(This,val))

#define IZcadSectionTypeSettings2_get_CurveTangencyLinesColor(This,pColor)	\
    ((This)->lpVtbl -> get_CurveTangencyLinesColor(This,pColor))

#define IZcadSectionTypeSettings2_put_CurveTangencyLinesColor(This,pColor)	\
    ((This)->lpVtbl -> put_CurveTangencyLinesColor(This,pColor))

#define IZcadSectionTypeSettings2_get_CurveTangencyLinesLayer(This,Layer)	\
    ((This)->lpVtbl -> get_CurveTangencyLinesLayer(This,Layer))

#define IZcadSectionTypeSettings2_put_CurveTangencyLinesLayer(This,Layer)	\
    ((This)->lpVtbl -> put_CurveTangencyLinesLayer(This,Layer))

#define IZcadSectionTypeSettings2_get_CurveTangencyLinesLinetype(This,Linetype)	\
    ((This)->lpVtbl -> get_CurveTangencyLinesLinetype(This,Linetype))

#define IZcadSectionTypeSettings2_put_CurveTangencyLinesLinetype(This,Linetype)	\
    ((This)->lpVtbl -> put_CurveTangencyLinesLinetype(This,Linetype))

#define IZcadSectionTypeSettings2_get_CurveTangencyLinesLinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_CurveTangencyLinesLinetypeScale(This,ltScale))

#define IZcadSectionTypeSettings2_put_CurveTangencyLinesLinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_CurveTangencyLinesLinetypeScale(This,ltScale))

#define IZcadSectionTypeSettings2_get_CurveTangencyLinesPlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_CurveTangencyLinesPlotStyleName(This,plotStyle))

#define IZcadSectionTypeSettings2_put_CurveTangencyLinesPlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_CurveTangencyLinesPlotStyleName(This,plotStyle))

#define IZcadSectionTypeSettings2_get_CurveTangencyLinesLineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_CurveTangencyLinesLineweight(This,lineweight))

#define IZcadSectionTypeSettings2_put_CurveTangencyLinesLineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_CurveTangencyLinesLineweight(This,lineweight))


#define IZcadSectionTypeSettings2_get_IntersectionBoundaryVisible(This,pVal)	\
    ((This)->lpVtbl -> get_IntersectionBoundaryVisible(This,pVal))

#define IZcadSectionTypeSettings2_put_IntersectionBoundaryVisible(This,val)	\
    ((This)->lpVtbl -> put_IntersectionBoundaryVisible(This,val))

#endif
#endif


#endif

#ifndef __IZcadHyperlink_INTERFACE_DEFINED__
#define __IZcadHyperlink_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadHyperlink,0xEC923112,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923112-5A17-11E7-B72E-BC5FF42AC839")
    IZcadHyperlink : public IDispatch
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE put_URL(
             BSTR URLPath) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_URL(
             BSTR *URLPath) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_URLDescription(
             BSTR Description) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_URLDescription(
             BSTR *Description) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Application(
             LPDISPATCH *ApplicationObject) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Delete( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_URLNamedLocation(
             BSTR Location) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_URLNamedLocation(
             BSTR *Location) = 0;

    };

#else

    typedef struct IZcadHyperlinkVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadHyperlink * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadHyperlink * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadHyperlink * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadHyperlink * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadHyperlink * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadHyperlink * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadHyperlink * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *put_URL )(
            IZcadHyperlink * This,
             BSTR URLPath);

         HRESULT ( STDMETHODCALLTYPE *get_URL )(
            IZcadHyperlink * This,
             BSTR *URLPath);

         HRESULT ( STDMETHODCALLTYPE *put_URLDescription )(
            IZcadHyperlink * This,
             BSTR Description);

         HRESULT ( STDMETHODCALLTYPE *get_URLDescription )(
            IZcadHyperlink * This,
             BSTR *Description);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadHyperlink * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadHyperlink * This);

         HRESULT ( STDMETHODCALLTYPE *put_URLNamedLocation )(
            IZcadHyperlink * This,
             BSTR Location);

         HRESULT ( STDMETHODCALLTYPE *get_URLNamedLocation )(
            IZcadHyperlink * This,
             BSTR *Location);

        END_INTERFACE
    } IZcadHyperlinkVtbl;

    interface IZcadHyperlink
    {
        CONST_VTBL struct IZcadHyperlinkVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadHyperlink_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadHyperlink_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadHyperlink_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadHyperlink_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadHyperlink_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadHyperlink_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadHyperlink_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadHyperlink_put_URL(This,URLPath)	\
    ((This)->lpVtbl -> put_URL(This,URLPath))

#define IZcadHyperlink_get_URL(This,URLPath)	\
    ((This)->lpVtbl -> get_URL(This,URLPath))

#define IZcadHyperlink_put_URLDescription(This,Description)	\
    ((This)->lpVtbl -> put_URLDescription(This,Description))

#define IZcadHyperlink_get_URLDescription(This,Description)	\
    ((This)->lpVtbl -> get_URLDescription(This,Description))

#define IZcadHyperlink_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadHyperlink_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadHyperlink_put_URLNamedLocation(This,Location)	\
    ((This)->lpVtbl -> put_URLNamedLocation(This,Location))

#define IZcadHyperlink_get_URLNamedLocation(This,Location)	\
    ((This)->lpVtbl -> get_URLNamedLocation(This,Location))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadHyperlink,0xEC9230B3,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9230B3-5A17-11E7-B72E-BC5FF42AC839")
ZcadHyperlink;
#endif

#ifndef __IZcadDynamicBlockReferenceProperty_INTERFACE_DEFINED__
#define __IZcadDynamicBlockReferenceProperty_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadDynamicBlockReferenceProperty,0xEC92310E,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC92310E-5A17-11E7-B72E-BC5FF42AC839")
    IZcadDynamicBlockReferenceProperty : public IDispatch
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_PropertyName(
             BSTR *propertyName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ReadOnly(
             VARIANT_BOOL *readOnly) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Show(
             VARIANT_BOOL *show) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Description(
             BSTR *Description) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AllowedValues(
             VARIANT *AllowedValues) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Value(
             VARIANT *Value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Value(
             VARIANT Value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UnitsType(
             ZcDynamicBlockReferencePropertyUnitsType *units) = 0;

    };

#else

    typedef struct IZcadDynamicBlockReferencePropertyVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadDynamicBlockReferenceProperty * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadDynamicBlockReferenceProperty * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadDynamicBlockReferenceProperty * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadDynamicBlockReferenceProperty * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadDynamicBlockReferenceProperty * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadDynamicBlockReferenceProperty * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadDynamicBlockReferenceProperty * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_PropertyName )(
            IZcadDynamicBlockReferenceProperty * This,
             BSTR *propertyName);

         HRESULT ( STDMETHODCALLTYPE *get_ReadOnly )(
            IZcadDynamicBlockReferenceProperty * This,
             VARIANT_BOOL *readOnly);

         HRESULT ( STDMETHODCALLTYPE *get_Show )(
            IZcadDynamicBlockReferenceProperty * This,
             VARIANT_BOOL *show);

         HRESULT ( STDMETHODCALLTYPE *get_Description )(
            IZcadDynamicBlockReferenceProperty * This,
             BSTR *Description);

         HRESULT ( STDMETHODCALLTYPE *get_AllowedValues )(
            IZcadDynamicBlockReferenceProperty * This,
             VARIANT *AllowedValues);

         HRESULT ( STDMETHODCALLTYPE *get_Value )(
            IZcadDynamicBlockReferenceProperty * This,
             VARIANT *Value);

         HRESULT ( STDMETHODCALLTYPE *put_Value )(
            IZcadDynamicBlockReferenceProperty * This,
             VARIANT Value);

         HRESULT ( STDMETHODCALLTYPE *get_UnitsType )(
            IZcadDynamicBlockReferenceProperty * This,
             ZcDynamicBlockReferencePropertyUnitsType *units);

        END_INTERFACE
    } IZcadDynamicBlockReferencePropertyVtbl;

    interface IZcadDynamicBlockReferenceProperty
    {
        CONST_VTBL struct IZcadDynamicBlockReferencePropertyVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadDynamicBlockReferenceProperty_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadDynamicBlockReferenceProperty_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadDynamicBlockReferenceProperty_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadDynamicBlockReferenceProperty_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadDynamicBlockReferenceProperty_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadDynamicBlockReferenceProperty_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadDynamicBlockReferenceProperty_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadDynamicBlockReferenceProperty_get_PropertyName(This,propertyName)	\
    ((This)->lpVtbl -> get_PropertyName(This,propertyName))

#define IZcadDynamicBlockReferenceProperty_get_ReadOnly(This,readOnly)	\
    ((This)->lpVtbl -> get_ReadOnly(This,readOnly))

#define IZcadDynamicBlockReferenceProperty_get_Show(This,show)	\
    ((This)->lpVtbl -> get_Show(This,show))

#define IZcadDynamicBlockReferenceProperty_get_Description(This,Description)	\
    ((This)->lpVtbl -> get_Description(This,Description))

#define IZcadDynamicBlockReferenceProperty_get_AllowedValues(This,AllowedValues)	\
    ((This)->lpVtbl -> get_AllowedValues(This,AllowedValues))

#define IZcadDynamicBlockReferenceProperty_get_Value(This,Value)	\
    ((This)->lpVtbl -> get_Value(This,Value))

#define IZcadDynamicBlockReferenceProperty_put_Value(This,Value)	\
    ((This)->lpVtbl -> put_Value(This,Value))

#define IZcadDynamicBlockReferenceProperty_get_UnitsType(This,units)	\
    ((This)->lpVtbl -> get_UnitsType(This,units))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadDynamicBlockReferenceProperty,0xEC922FC3,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC922FC3-5A17-11E7-B72E-BC5FF42AC839")
ZcadDynamicBlockReferenceProperty;
#endif

#ifndef __IZcadZcCmColor_INTERFACE_DEFINED__
#define __IZcadZcCmColor_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadZcCmColor,0xEC922FFB,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC922FFB-5A17-11E7-B72E-BC5FF42AC839")
    IZcadZcCmColor : public IDispatch
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE put_EntityColor(
             long eColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EntityColor(
             long *eColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ColorName(
             BSTR *Name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BookName(
             BSTR *Name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetNames(
             BSTR colorName,
             BSTR bookName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Delete( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Red(
             long *red) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Blue(
             long *blue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Green(
             long *green) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetRGB(
             long red,
             long green,
             long blue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ColorMethod(
             ZcColorMethod Flags) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ColorMethod(
             ZcColorMethod *Flags) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ColorIndex(
             ZcColor *color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ColorIndex(
             ZcColor color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetColorBookColor(
             BSTR bookName,
             BSTR colorName) = 0;

    };

#else

    typedef struct IZcadZcCmColorVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadZcCmColor * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadZcCmColor * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadZcCmColor * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadZcCmColor * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadZcCmColor * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadZcCmColor * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadZcCmColor * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *put_EntityColor )(
            IZcadZcCmColor * This,
             long eColor);

         HRESULT ( STDMETHODCALLTYPE *get_EntityColor )(
            IZcadZcCmColor * This,
             long *eColor);

         HRESULT ( STDMETHODCALLTYPE *get_ColorName )(
            IZcadZcCmColor * This,
             BSTR *Name);

         HRESULT ( STDMETHODCALLTYPE *get_BookName )(
            IZcadZcCmColor * This,
             BSTR *Name);

         HRESULT ( STDMETHODCALLTYPE *SetNames )(
            IZcadZcCmColor * This,
             BSTR colorName,
             BSTR bookName);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadZcCmColor * This);

         HRESULT ( STDMETHODCALLTYPE *get_Red )(
            IZcadZcCmColor * This,
             long *red);

         HRESULT ( STDMETHODCALLTYPE *get_Blue )(
            IZcadZcCmColor * This,
             long *blue);

         HRESULT ( STDMETHODCALLTYPE *get_Green )(
            IZcadZcCmColor * This,
             long *green);

         HRESULT ( STDMETHODCALLTYPE *SetRGB )(
            IZcadZcCmColor * This,
             long red,
             long green,
             long blue);

         HRESULT ( STDMETHODCALLTYPE *put_ColorMethod )(
            IZcadZcCmColor * This,
             ZcColorMethod Flags);

         HRESULT ( STDMETHODCALLTYPE *get_ColorMethod )(
            IZcadZcCmColor * This,
             ZcColorMethod *Flags);

         HRESULT ( STDMETHODCALLTYPE *get_ColorIndex )(
            IZcadZcCmColor * This,
             ZcColor *color);

         HRESULT ( STDMETHODCALLTYPE *put_ColorIndex )(
            IZcadZcCmColor * This,
             ZcColor color);

         HRESULT ( STDMETHODCALLTYPE *SetColorBookColor )(
            IZcadZcCmColor * This,
             BSTR bookName,
             BSTR colorName);

        END_INTERFACE
    } IZcadZcCmColorVtbl;

    interface IZcadZcCmColor
    {
        CONST_VTBL struct IZcadZcCmColorVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadZcCmColor_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadZcCmColor_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadZcCmColor_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadZcCmColor_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadZcCmColor_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadZcCmColor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadZcCmColor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadZcCmColor_put_EntityColor(This,eColor)	\
    ((This)->lpVtbl -> put_EntityColor(This,eColor))

#define IZcadZcCmColor_get_EntityColor(This,eColor)	\
    ((This)->lpVtbl -> get_EntityColor(This,eColor))

#define IZcadZcCmColor_get_ColorName(This,Name)	\
    ((This)->lpVtbl -> get_ColorName(This,Name))

#define IZcadZcCmColor_get_BookName(This,Name)	\
    ((This)->lpVtbl -> get_BookName(This,Name))

#define IZcadZcCmColor_SetNames(This,colorName,bookName)	\
    ((This)->lpVtbl -> SetNames(This,colorName,bookName))

#define IZcadZcCmColor_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadZcCmColor_get_Red(This,red)	\
    ((This)->lpVtbl -> get_Red(This,red))

#define IZcadZcCmColor_get_Blue(This,blue)	\
    ((This)->lpVtbl -> get_Blue(This,blue))

#define IZcadZcCmColor_get_Green(This,green)	\
    ((This)->lpVtbl -> get_Green(This,green))

#define IZcadZcCmColor_SetRGB(This,red,green,blue)	\
    ((This)->lpVtbl -> SetRGB(This,red,green,blue))

#define IZcadZcCmColor_put_ColorMethod(This,Flags)	\
    ((This)->lpVtbl -> put_ColorMethod(This,Flags))

#define IZcadZcCmColor_get_ColorMethod(This,Flags)	\
    ((This)->lpVtbl -> get_ColorMethod(This,Flags))

#define IZcadZcCmColor_get_ColorIndex(This,color)	\
    ((This)->lpVtbl -> get_ColorIndex(This,color))

#define IZcadZcCmColor_put_ColorIndex(This,color)	\
    ((This)->lpVtbl -> put_ColorIndex(This,color))

#define IZcadZcCmColor_SetColorBookColor(This,bookName,colorName)	\
    ((This)->lpVtbl -> SetColorBookColor(This,bookName,colorName))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadZcCmColor,0xEC9231C3,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9231C3-5A17-11E7-B72E-BC5FF42AC839")
ZcadZcCmColor;
#endif

#ifndef __IZcadObjectEvents_INTERFACE_DEFINED__
#define __IZcadObjectEvents_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadObjectEvents,0x638FF72D,0x8E0A,0x4A6C,0x81,0xAF,0x6D,0x81,0x5E,0x7F,0x34,0x40);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("638FF72D-8E0A-4A6C-81AF-6D815E7F3440")
    IZcadObjectEvents : public IUnknown
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE Modified(
             IZcadObject *pObject) = 0;

    };

#else

    typedef struct IZcadObjectEventsVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadObjectEvents * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadObjectEvents * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadObjectEvents * This);

         HRESULT ( STDMETHODCALLTYPE *Modified )(
            IZcadObjectEvents * This,
             IZcadObject *pObject);

        END_INTERFACE
    } IZcadObjectEventsVtbl;

    interface IZcadObjectEvents
    {
        CONST_VTBL struct IZcadObjectEventsVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadObjectEvents_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadObjectEvents_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadObjectEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadObjectEvents_Modified(This,pObject)	\
    ((This)->lpVtbl -> Modified(This,pObject))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadObject,0xEC923157,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923157-5A17-11E7-B72E-BC5FF42AC839")
ZcadObject;
#endif

#ifndef __IZcadXRecord_INTERFACE_DEFINED__
#define __IZcadXRecord_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadXRecord,0xEC92307A,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC92307A-5A17-11E7-B72E-BC5FF42AC839")
    IZcadXRecord : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Name(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Name(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetXRecordData(
             VARIANT *XRecordDataType,
             VARIANT *XRecordDataValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetXRecordData(
             VARIANT XRecordDataType,
             VARIANT XRecordDataValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TranslateIDs(
             VARIANT_BOOL *xlateIds) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TranslateIDs(
             VARIANT_BOOL xlateIds) = 0;

    };

#else

    typedef struct IZcadXRecordVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadXRecord * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadXRecord * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadXRecord * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadXRecord * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadXRecord * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadXRecord * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadXRecord * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadXRecord * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadXRecord * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadXRecord * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadXRecord * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadXRecord * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadXRecord * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadXRecord * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadXRecord * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadXRecord * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadXRecord * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadXRecord * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadXRecord * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadXRecord * This);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadXRecord * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadXRecord * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *GetXRecordData )(
            IZcadXRecord * This,
             VARIANT *XRecordDataType,
             VARIANT *XRecordDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXRecordData )(
            IZcadXRecord * This,
             VARIANT XRecordDataType,
             VARIANT XRecordDataValue);

         HRESULT ( STDMETHODCALLTYPE *get_TranslateIDs )(
            IZcadXRecord * This,
             VARIANT_BOOL *xlateIds);

         HRESULT ( STDMETHODCALLTYPE *put_TranslateIDs )(
            IZcadXRecord * This,
             VARIANT_BOOL xlateIds);

        END_INTERFACE
    } IZcadXRecordVtbl;

    interface IZcadXRecord
    {
        CONST_VTBL struct IZcadXRecordVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadXRecord_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadXRecord_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadXRecord_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadXRecord_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadXRecord_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadXRecord_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadXRecord_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadXRecord_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadXRecord_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadXRecord_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadXRecord_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadXRecord_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadXRecord_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadXRecord_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadXRecord_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadXRecord_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadXRecord_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadXRecord_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadXRecord_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadXRecord_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadXRecord_get_Name(This,bstrName)	\
    ((This)->lpVtbl -> get_Name(This,bstrName))

#define IZcadXRecord_put_Name(This,bstrName)	\
    ((This)->lpVtbl -> put_Name(This,bstrName))

#define IZcadXRecord_GetXRecordData(This,XRecordDataType,XRecordDataValue)	\
    ((This)->lpVtbl -> GetXRecordData(This,XRecordDataType,XRecordDataValue))

#define IZcadXRecord_SetXRecordData(This,XRecordDataType,XRecordDataValue)	\
    ((This)->lpVtbl -> SetXRecordData(This,XRecordDataType,XRecordDataValue))

#define IZcadXRecord_get_TranslateIDs(This,xlateIds)	\
    ((This)->lpVtbl -> get_TranslateIDs(This,xlateIds))

#define IZcadXRecord_put_TranslateIDs(This,xlateIds)	\
    ((This)->lpVtbl -> put_TranslateIDs(This,xlateIds))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadXRecord,0xEC923032,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923032-5A17-11E7-B72E-BC5FF42AC839")
ZcadXRecord;
#endif

#ifndef __IZcadSortentsTable_INTERFACE_DEFINED__
#define __IZcadSortentsTable_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadSortentsTable,0xEC9230B5,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9230B5-5A17-11E7-B72E-BC5FF42AC839")
    IZcadSortentsTable : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE MoveToBottom(
             VARIANT Objects) = 0;

        virtual  HRESULT STDMETHODCALLTYPE MoveToTop(
             VARIANT Objects) = 0;

        virtual  HRESULT STDMETHODCALLTYPE MoveBelow(
             VARIANT Objects,
             IZcadEntity *Target) = 0;

        virtual  HRESULT STDMETHODCALLTYPE MoveAbove(
             VARIANT Objects,
             IZcadEntity *Target) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SwapOrder(
             IZcadEntity *Object1,
             IZcadEntity *Object2) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Block(
             IZcadBlock **pBlock) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetFullDrawOrder(
             VARIANT *Objects,
             VARIANT_BOOL honorSortentsSysvar) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetRelativeDrawOrder(
             VARIANT *Objects,
             VARIANT_BOOL honorSortentsSysvar) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetRelativeDrawOrder(
             VARIANT Objects) = 0;

    };

#else

    typedef struct IZcadSortentsTableVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadSortentsTable * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadSortentsTable * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadSortentsTable * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadSortentsTable * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadSortentsTable * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadSortentsTable * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadSortentsTable * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadSortentsTable * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadSortentsTable * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadSortentsTable * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadSortentsTable * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadSortentsTable * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadSortentsTable * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadSortentsTable * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadSortentsTable * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadSortentsTable * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadSortentsTable * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadSortentsTable * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadSortentsTable * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadSortentsTable * This);

         HRESULT ( STDMETHODCALLTYPE *MoveToBottom )(
            IZcadSortentsTable * This,
             VARIANT Objects);

         HRESULT ( STDMETHODCALLTYPE *MoveToTop )(
            IZcadSortentsTable * This,
             VARIANT Objects);

         HRESULT ( STDMETHODCALLTYPE *MoveBelow )(
            IZcadSortentsTable * This,
             VARIANT Objects,
             IZcadEntity *Target);

         HRESULT ( STDMETHODCALLTYPE *MoveAbove )(
            IZcadSortentsTable * This,
             VARIANT Objects,
             IZcadEntity *Target);

         HRESULT ( STDMETHODCALLTYPE *SwapOrder )(
            IZcadSortentsTable * This,
             IZcadEntity *Object1,
             IZcadEntity *Object2);

         HRESULT ( STDMETHODCALLTYPE *Block )(
            IZcadSortentsTable * This,
             IZcadBlock **pBlock);

         HRESULT ( STDMETHODCALLTYPE *GetFullDrawOrder )(
            IZcadSortentsTable * This,
             VARIANT *Objects,
             VARIANT_BOOL honorSortentsSysvar);

         HRESULT ( STDMETHODCALLTYPE *GetRelativeDrawOrder )(
            IZcadSortentsTable * This,
             VARIANT *Objects,
             VARIANT_BOOL honorSortentsSysvar);

         HRESULT ( STDMETHODCALLTYPE *SetRelativeDrawOrder )(
            IZcadSortentsTable * This,
             VARIANT Objects);

        END_INTERFACE
    } IZcadSortentsTableVtbl;

    interface IZcadSortentsTable
    {
        CONST_VTBL struct IZcadSortentsTableVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadSortentsTable_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadSortentsTable_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadSortentsTable_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadSortentsTable_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadSortentsTable_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadSortentsTable_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadSortentsTable_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadSortentsTable_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadSortentsTable_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadSortentsTable_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadSortentsTable_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadSortentsTable_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadSortentsTable_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadSortentsTable_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadSortentsTable_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadSortentsTable_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadSortentsTable_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadSortentsTable_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadSortentsTable_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadSortentsTable_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadSortentsTable_MoveToBottom(This,Objects)	\
    ((This)->lpVtbl -> MoveToBottom(This,Objects))

#define IZcadSortentsTable_MoveToTop(This,Objects)	\
    ((This)->lpVtbl -> MoveToTop(This,Objects))

#define IZcadSortentsTable_MoveBelow(This,Objects,Target)	\
    ((This)->lpVtbl -> MoveBelow(This,Objects,Target))

#define IZcadSortentsTable_MoveAbove(This,Objects,Target)	\
    ((This)->lpVtbl -> MoveAbove(This,Objects,Target))

#define IZcadSortentsTable_SwapOrder(This,Object1,Object2)	\
    ((This)->lpVtbl -> SwapOrder(This,Object1,Object2))

#define IZcadSortentsTable_Block(This,pBlock)	\
    ((This)->lpVtbl -> Block(This,pBlock))

#define IZcadSortentsTable_GetFullDrawOrder(This,Objects,honorSortentsSysvar)	\
    ((This)->lpVtbl -> GetFullDrawOrder(This,Objects,honorSortentsSysvar))

#define IZcadSortentsTable_GetRelativeDrawOrder(This,Objects,honorSortentsSysvar)	\
    ((This)->lpVtbl -> GetRelativeDrawOrder(This,Objects,honorSortentsSysvar))

#define IZcadSortentsTable_SetRelativeDrawOrder(This,Objects)	\
    ((This)->lpVtbl -> SetRelativeDrawOrder(This,Objects))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadSortentsTable,0xEC92308A,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC92308A-5A17-11E7-B72E-BC5FF42AC839")
ZcadSortentsTable;
#endif

#ifndef __IZcadDimStyle_INTERFACE_DEFINED__
#define __IZcadDimStyle_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadDimStyle,0xEC923160,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923160-5A17-11E7-B72E-BC5FF42AC839")
    IZcadDimStyle : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Name(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Name(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE CopyFrom(
             IDispatch *StyleSource) = 0;

    };

#else

    typedef struct IZcadDimStyleVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadDimStyle * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadDimStyle * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadDimStyle * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadDimStyle * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadDimStyle * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadDimStyle * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadDimStyle * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadDimStyle * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadDimStyle * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadDimStyle * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadDimStyle * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadDimStyle * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadDimStyle * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadDimStyle * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadDimStyle * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadDimStyle * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadDimStyle * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadDimStyle * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadDimStyle * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadDimStyle * This);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadDimStyle * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadDimStyle * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *CopyFrom )(
            IZcadDimStyle * This,
             IDispatch *StyleSource);

        END_INTERFACE
    } IZcadDimStyleVtbl;

    interface IZcadDimStyle
    {
        CONST_VTBL struct IZcadDimStyleVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadDimStyle_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadDimStyle_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadDimStyle_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadDimStyle_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadDimStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadDimStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadDimStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadDimStyle_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadDimStyle_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadDimStyle_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadDimStyle_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadDimStyle_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadDimStyle_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadDimStyle_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadDimStyle_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadDimStyle_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadDimStyle_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadDimStyle_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadDimStyle_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadDimStyle_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadDimStyle_get_Name(This,bstrName)	\
    ((This)->lpVtbl -> get_Name(This,bstrName))

#define IZcadDimStyle_put_Name(This,bstrName)	\
    ((This)->lpVtbl -> put_Name(This,bstrName))

#define IZcadDimStyle_CopyFrom(This,StyleSource)	\
    ((This)->lpVtbl -> CopyFrom(This,StyleSource))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadDimStyle,0xEC923085,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923085-5A17-11E7-B72E-BC5FF42AC839")
ZcadDimStyle;
#endif

#ifndef __IZcadLayer_INTERFACE_DEFINED__
#define __IZcadLayer_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadLayer,0xEC9230C0,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9230C0-5A17-11E7-B72E-BC5FF42AC839")
    IZcadLayer : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Color(
             ZcColor *color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Color(
             ZcColor color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TrueColor(
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TrueColor(
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Freeze(
             VARIANT_BOOL *bFreeze) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Freeze(
             VARIANT_BOOL bFreeze) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LayerOn(
             VARIANT_BOOL *bOn) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LayerOn(
             VARIANT_BOOL bOn) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Linetype(
             BSTR *lineType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Linetype(
             BSTR lineType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Lock(
             VARIANT_BOOL *bLock) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Lock(
             VARIANT_BOOL bLock) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Name(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Name(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Plottable(
             VARIANT_BOOL *bPlottable) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Plottable(
             VARIANT_BOOL bPlottable) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ViewportDefault(
             VARIANT_BOOL *bDefault) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ViewportDefault(
             VARIANT_BOOL bDefault) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PlotStyleName(
             BSTR *plotStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PlotStyleName(
             BSTR plotStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Lineweight(
             ZCAD_LWEIGHT *lineweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Lineweight(
             ZCAD_LWEIGHT lineweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Description(
             BSTR *description) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Description(
             BSTR description) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Used(
             VARIANT_BOOL *bUsed) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Material(
             BSTR *Material) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Material(
             BSTR Material) = 0;

    };

#else

    typedef struct IZcadLayerVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadLayer * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadLayer * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadLayer * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadLayer * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadLayer * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadLayer * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadLayer * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadLayer * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadLayer * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadLayer * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadLayer * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadLayer * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadLayer * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadLayer * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadLayer * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadLayer * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadLayer * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadLayer * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadLayer * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadLayer * This);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadLayer * This,
             ZcColor *color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadLayer * This,
             ZcColor color);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadLayer * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadLayer * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Freeze )(
            IZcadLayer * This,
             VARIANT_BOOL *bFreeze);

         HRESULT ( STDMETHODCALLTYPE *put_Freeze )(
            IZcadLayer * This,
             VARIANT_BOOL bFreeze);

         HRESULT ( STDMETHODCALLTYPE *get_LayerOn )(
            IZcadLayer * This,
             VARIANT_BOOL *bOn);

         HRESULT ( STDMETHODCALLTYPE *put_LayerOn )(
            IZcadLayer * This,
             VARIANT_BOOL bOn);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadLayer * This,
             BSTR *lineType);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadLayer * This,
             BSTR lineType);

         HRESULT ( STDMETHODCALLTYPE *get_Lock )(
            IZcadLayer * This,
             VARIANT_BOOL *bLock);

         HRESULT ( STDMETHODCALLTYPE *put_Lock )(
            IZcadLayer * This,
             VARIANT_BOOL bLock);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadLayer * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadLayer * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_Plottable )(
            IZcadLayer * This,
             VARIANT_BOOL *bPlottable);

         HRESULT ( STDMETHODCALLTYPE *put_Plottable )(
            IZcadLayer * This,
             VARIANT_BOOL bPlottable);

         HRESULT ( STDMETHODCALLTYPE *get_ViewportDefault )(
            IZcadLayer * This,
             VARIANT_BOOL *bDefault);

         HRESULT ( STDMETHODCALLTYPE *put_ViewportDefault )(
            IZcadLayer * This,
             VARIANT_BOOL bDefault);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadLayer * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadLayer * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadLayer * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadLayer * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_Description )(
            IZcadLayer * This,
             BSTR *description);

         HRESULT ( STDMETHODCALLTYPE *put_Description )(
            IZcadLayer * This,
             BSTR description);

         HRESULT ( STDMETHODCALLTYPE *get_Used )(
            IZcadLayer * This,
             VARIANT_BOOL *bUsed);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadLayer * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadLayer * This,
             BSTR Material);

        END_INTERFACE
    } IZcadLayerVtbl;

    interface IZcadLayer
    {
        CONST_VTBL struct IZcadLayerVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadLayer_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadLayer_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadLayer_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadLayer_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadLayer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadLayer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadLayer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadLayer_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadLayer_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadLayer_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadLayer_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadLayer_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadLayer_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadLayer_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadLayer_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadLayer_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadLayer_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadLayer_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadLayer_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadLayer_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadLayer_get_Color(This,color)	\
    ((This)->lpVtbl -> get_Color(This,color))

#define IZcadLayer_put_Color(This,color)	\
    ((This)->lpVtbl -> put_Color(This,color))

#define IZcadLayer_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadLayer_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadLayer_get_Freeze(This,bFreeze)	\
    ((This)->lpVtbl -> get_Freeze(This,bFreeze))

#define IZcadLayer_put_Freeze(This,bFreeze)	\
    ((This)->lpVtbl -> put_Freeze(This,bFreeze))

#define IZcadLayer_get_LayerOn(This,bOn)	\
    ((This)->lpVtbl -> get_LayerOn(This,bOn))

#define IZcadLayer_put_LayerOn(This,bOn)	\
    ((This)->lpVtbl -> put_LayerOn(This,bOn))

#define IZcadLayer_get_Linetype(This,lineType)	\
    ((This)->lpVtbl -> get_Linetype(This,lineType))

#define IZcadLayer_put_Linetype(This,lineType)	\
    ((This)->lpVtbl -> put_Linetype(This,lineType))

#define IZcadLayer_get_Lock(This,bLock)	\
    ((This)->lpVtbl -> get_Lock(This,bLock))

#define IZcadLayer_put_Lock(This,bLock)	\
    ((This)->lpVtbl -> put_Lock(This,bLock))

#define IZcadLayer_get_Name(This,bstrName)	\
    ((This)->lpVtbl -> get_Name(This,bstrName))

#define IZcadLayer_put_Name(This,bstrName)	\
    ((This)->lpVtbl -> put_Name(This,bstrName))

#define IZcadLayer_get_Plottable(This,bPlottable)	\
    ((This)->lpVtbl -> get_Plottable(This,bPlottable))

#define IZcadLayer_put_Plottable(This,bPlottable)	\
    ((This)->lpVtbl -> put_Plottable(This,bPlottable))

#define IZcadLayer_get_ViewportDefault(This,bDefault)	\
    ((This)->lpVtbl -> get_ViewportDefault(This,bDefault))

#define IZcadLayer_put_ViewportDefault(This,bDefault)	\
    ((This)->lpVtbl -> put_ViewportDefault(This,bDefault))

#define IZcadLayer_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadLayer_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadLayer_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadLayer_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadLayer_get_Description(This,description)	\
    ((This)->lpVtbl -> get_Description(This,description))

#define IZcadLayer_put_Description(This,description)	\
    ((This)->lpVtbl -> put_Description(This,description))

#define IZcadLayer_get_Used(This,bUsed)	\
    ((This)->lpVtbl -> get_Used(This,bUsed))

#define IZcadLayer_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadLayer_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadLayer,0xEC9231D0,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9231D0-5A17-11E7-B72E-BC5FF42AC839")
ZcadLayer;
#endif

#ifndef __IZcadLineType_INTERFACE_DEFINED__
#define __IZcadLineType_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadLineType,0xEC922FF1,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC922FF1-5A17-11E7-B72E-BC5FF42AC839")
    IZcadLineType : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Description(
             BSTR *bstrDes) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Description(
             BSTR bstrDes) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Name(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Name(
             BSTR bstrName) = 0;

    };

#else

    typedef struct IZcadLineTypeVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadLineType * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadLineType * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadLineType * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadLineType * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadLineType * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadLineType * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadLineType * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadLineType * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadLineType * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadLineType * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadLineType * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadLineType * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadLineType * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadLineType * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadLineType * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadLineType * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadLineType * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadLineType * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadLineType * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadLineType * This);

         HRESULT ( STDMETHODCALLTYPE *get_Description )(
            IZcadLineType * This,
             BSTR *bstrDes);

         HRESULT ( STDMETHODCALLTYPE *put_Description )(
            IZcadLineType * This,
             BSTR bstrDes);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadLineType * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadLineType * This,
             BSTR bstrName);

        END_INTERFACE
    } IZcadLineTypeVtbl;

    interface IZcadLineType
    {
        CONST_VTBL struct IZcadLineTypeVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadLineType_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadLineType_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadLineType_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadLineType_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadLineType_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadLineType_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadLineType_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadLineType_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadLineType_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadLineType_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadLineType_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadLineType_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadLineType_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadLineType_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadLineType_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadLineType_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadLineType_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadLineType_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadLineType_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadLineType_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadLineType_get_Description(This,bstrDes)	\
    ((This)->lpVtbl -> get_Description(This,bstrDes))

#define IZcadLineType_put_Description(This,bstrDes)	\
    ((This)->lpVtbl -> put_Description(This,bstrDes))

#define IZcadLineType_get_Name(This,bstrName)	\
    ((This)->lpVtbl -> get_Name(This,bstrName))

#define IZcadLineType_put_Name(This,bstrName)	\
    ((This)->lpVtbl -> put_Name(This,bstrName))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadLineType,0xEC922FF6,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC922FF6-5A17-11E7-B72E-BC5FF42AC839")
ZcadLineType;
#endif

#ifndef __IZcadMaterial_INTERFACE_DEFINED__
#define __IZcadMaterial_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadMaterial,0xEC9230DD,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9230DD-5A17-11E7-B72E-BC5FF42AC839")
    IZcadMaterial : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Description(
             BSTR *bstrDes) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Description(
             BSTR bstrDes) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Name(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Name(
             BSTR bstrName) = 0;

    };

#else

    typedef struct IZcadMaterialVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadMaterial * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadMaterial * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadMaterial * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadMaterial * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadMaterial * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadMaterial * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadMaterial * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadMaterial * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadMaterial * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadMaterial * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadMaterial * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadMaterial * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadMaterial * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadMaterial * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadMaterial * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadMaterial * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadMaterial * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadMaterial * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadMaterial * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadMaterial * This);

         HRESULT ( STDMETHODCALLTYPE *get_Description )(
            IZcadMaterial * This,
             BSTR *bstrDes);

         HRESULT ( STDMETHODCALLTYPE *put_Description )(
            IZcadMaterial * This,
             BSTR bstrDes);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadMaterial * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadMaterial * This,
             BSTR bstrName);

        END_INTERFACE
    } IZcadMaterialVtbl;

    interface IZcadMaterial
    {
        CONST_VTBL struct IZcadMaterialVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadMaterial_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadMaterial_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadMaterial_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadMaterial_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadMaterial_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadMaterial_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadMaterial_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadMaterial_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadMaterial_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadMaterial_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadMaterial_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadMaterial_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadMaterial_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadMaterial_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadMaterial_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadMaterial_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadMaterial_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadMaterial_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadMaterial_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadMaterial_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadMaterial_get_Description(This,bstrDes)	\
    ((This)->lpVtbl -> get_Description(This,bstrDes))

#define IZcadMaterial_put_Description(This,bstrDes)	\
    ((This)->lpVtbl -> put_Description(This,bstrDes))

#define IZcadMaterial_get_Name(This,bstrName)	\
    ((This)->lpVtbl -> get_Name(This,bstrName))

#define IZcadMaterial_put_Name(This,bstrName)	\
    ((This)->lpVtbl -> put_Name(This,bstrName))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadMaterial,0xEC923024,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923024-5A17-11E7-B72E-BC5FF42AC839")
ZcadMaterial;
#endif

#ifndef __IZcadRegisteredApplication_INTERFACE_DEFINED__
#define __IZcadRegisteredApplication_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadRegisteredApplication,0xEC92318F,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC92318F-5A17-11E7-B72E-BC5FF42AC839")
    IZcadRegisteredApplication : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Name(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Name(
             BSTR bstrName) = 0;

    };

#else

    typedef struct IZcadRegisteredApplicationVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadRegisteredApplication * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadRegisteredApplication * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadRegisteredApplication * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadRegisteredApplication * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadRegisteredApplication * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadRegisteredApplication * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadRegisteredApplication * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadRegisteredApplication * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadRegisteredApplication * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadRegisteredApplication * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadRegisteredApplication * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadRegisteredApplication * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadRegisteredApplication * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadRegisteredApplication * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadRegisteredApplication * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadRegisteredApplication * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadRegisteredApplication * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadRegisteredApplication * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadRegisteredApplication * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadRegisteredApplication * This);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadRegisteredApplication * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadRegisteredApplication * This,
             BSTR bstrName);

        END_INTERFACE
    } IZcadRegisteredApplicationVtbl;

    interface IZcadRegisteredApplication
    {
        CONST_VTBL struct IZcadRegisteredApplicationVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadRegisteredApplication_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadRegisteredApplication_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadRegisteredApplication_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadRegisteredApplication_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadRegisteredApplication_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadRegisteredApplication_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadRegisteredApplication_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadRegisteredApplication_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadRegisteredApplication_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadRegisteredApplication_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadRegisteredApplication_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadRegisteredApplication_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadRegisteredApplication_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadRegisteredApplication_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadRegisteredApplication_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadRegisteredApplication_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadRegisteredApplication_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadRegisteredApplication_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadRegisteredApplication_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadRegisteredApplication_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadRegisteredApplication_get_Name(This,bstrName)	\
    ((This)->lpVtbl -> get_Name(This,bstrName))

#define IZcadRegisteredApplication_put_Name(This,bstrName)	\
    ((This)->lpVtbl -> put_Name(This,bstrName))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadRegisteredApplication,0xEC923107,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923107-5A17-11E7-B72E-BC5FF42AC839")
ZcadRegisteredApplication;
#endif

#ifndef __IZcadTextStyle_INTERFACE_DEFINED__
#define __IZcadTextStyle_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadTextStyle,0xEC922FF8,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC922FF8-5A17-11E7-B72E-BC5FF42AC839")
    IZcadTextStyle : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_BigFontFile(
             BSTR *fontFile) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BigFontFile(
             BSTR fontFile) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_FontFile(
             BSTR *fontFile) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_FontFile(
             BSTR fontFile) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Height(
             double *height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Height(
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LastHeight(
             double *height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LastHeight(
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Name(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ObliqueAngle(
             ZCAD_ANGLE *obliAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ObliqueAngle(
             ZCAD_ANGLE obliAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextGenerationFlag(
             long *textGenFlag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextGenerationFlag(
             long textGenFlag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Width(
             double *width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Width(
             double width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetFont(
             BSTR *TypeFace,
             VARIANT_BOOL *Bold,
             VARIANT_BOOL *Italic,
             long *Charset,
             long *PitchAndFamily) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetFont(
             BSTR TypeFace,
             VARIANT_BOOL Bold,
             VARIANT_BOOL Italic,
             long Charset,
             long PitchAndFamily) = 0;

    };

#else

    typedef struct IZcadTextStyleVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadTextStyle * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadTextStyle * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadTextStyle * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadTextStyle * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadTextStyle * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadTextStyle * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadTextStyle * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadTextStyle * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadTextStyle * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadTextStyle * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadTextStyle * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadTextStyle * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadTextStyle * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadTextStyle * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadTextStyle * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadTextStyle * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadTextStyle * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadTextStyle * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadTextStyle * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadTextStyle * This);

         HRESULT ( STDMETHODCALLTYPE *get_BigFontFile )(
            IZcadTextStyle * This,
             BSTR *fontFile);

         HRESULT ( STDMETHODCALLTYPE *put_BigFontFile )(
            IZcadTextStyle * This,
             BSTR fontFile);

         HRESULT ( STDMETHODCALLTYPE *get_FontFile )(
            IZcadTextStyle * This,
             BSTR *fontFile);

         HRESULT ( STDMETHODCALLTYPE *put_FontFile )(
            IZcadTextStyle * This,
             BSTR fontFile);

         HRESULT ( STDMETHODCALLTYPE *get_Height )(
            IZcadTextStyle * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_Height )(
            IZcadTextStyle * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_LastHeight )(
            IZcadTextStyle * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_LastHeight )(
            IZcadTextStyle * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadTextStyle * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_ObliqueAngle )(
            IZcadTextStyle * This,
             ZCAD_ANGLE *obliAngle);

         HRESULT ( STDMETHODCALLTYPE *put_ObliqueAngle )(
            IZcadTextStyle * This,
             ZCAD_ANGLE obliAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextGenerationFlag )(
            IZcadTextStyle * This,
             long *textGenFlag);

         HRESULT ( STDMETHODCALLTYPE *put_TextGenerationFlag )(
            IZcadTextStyle * This,
             long textGenFlag);

         HRESULT ( STDMETHODCALLTYPE *get_Width )(
            IZcadTextStyle * This,
             double *width);

         HRESULT ( STDMETHODCALLTYPE *put_Width )(
            IZcadTextStyle * This,
             double width);

         HRESULT ( STDMETHODCALLTYPE *GetFont )(
            IZcadTextStyle * This,
             BSTR *TypeFace,
             VARIANT_BOOL *Bold,
             VARIANT_BOOL *Italic,
             long *Charset,
             long *PitchAndFamily);

         HRESULT ( STDMETHODCALLTYPE *SetFont )(
            IZcadTextStyle * This,
             BSTR TypeFace,
             VARIANT_BOOL Bold,
             VARIANT_BOOL Italic,
             long Charset,
             long PitchAndFamily);

        END_INTERFACE
    } IZcadTextStyleVtbl;

    interface IZcadTextStyle
    {
        CONST_VTBL struct IZcadTextStyleVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadTextStyle_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadTextStyle_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadTextStyle_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadTextStyle_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadTextStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadTextStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadTextStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadTextStyle_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadTextStyle_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadTextStyle_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadTextStyle_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadTextStyle_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadTextStyle_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadTextStyle_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadTextStyle_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadTextStyle_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadTextStyle_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadTextStyle_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadTextStyle_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadTextStyle_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadTextStyle_get_BigFontFile(This,fontFile)	\
    ((This)->lpVtbl -> get_BigFontFile(This,fontFile))

#define IZcadTextStyle_put_BigFontFile(This,fontFile)	\
    ((This)->lpVtbl -> put_BigFontFile(This,fontFile))

#define IZcadTextStyle_get_FontFile(This,fontFile)	\
    ((This)->lpVtbl -> get_FontFile(This,fontFile))

#define IZcadTextStyle_put_FontFile(This,fontFile)	\
    ((This)->lpVtbl -> put_FontFile(This,fontFile))

#define IZcadTextStyle_get_Height(This,height)	\
    ((This)->lpVtbl -> get_Height(This,height))

#define IZcadTextStyle_put_Height(This,height)	\
    ((This)->lpVtbl -> put_Height(This,height))

#define IZcadTextStyle_get_LastHeight(This,height)	\
    ((This)->lpVtbl -> get_LastHeight(This,height))

#define IZcadTextStyle_put_LastHeight(This,height)	\
    ((This)->lpVtbl -> put_LastHeight(This,height))

#define IZcadTextStyle_get_Name(This,bstrName)	\
    ((This)->lpVtbl -> get_Name(This,bstrName))

#define IZcadTextStyle_get_ObliqueAngle(This,obliAngle)	\
    ((This)->lpVtbl -> get_ObliqueAngle(This,obliAngle))

#define IZcadTextStyle_put_ObliqueAngle(This,obliAngle)	\
    ((This)->lpVtbl -> put_ObliqueAngle(This,obliAngle))

#define IZcadTextStyle_get_TextGenerationFlag(This,textGenFlag)	\
    ((This)->lpVtbl -> get_TextGenerationFlag(This,textGenFlag))

#define IZcadTextStyle_put_TextGenerationFlag(This,textGenFlag)	\
    ((This)->lpVtbl -> put_TextGenerationFlag(This,textGenFlag))

#define IZcadTextStyle_get_Width(This,width)	\
    ((This)->lpVtbl -> get_Width(This,width))

#define IZcadTextStyle_put_Width(This,width)	\
    ((This)->lpVtbl -> put_Width(This,width))

#define IZcadTextStyle_GetFont(This,TypeFace,Bold,Italic,Charset,PitchAndFamily)	\
    ((This)->lpVtbl -> GetFont(This,TypeFace,Bold,Italic,Charset,PitchAndFamily))

#define IZcadTextStyle_SetFont(This,TypeFace,Bold,Italic,Charset,PitchAndFamily)	\
    ((This)->lpVtbl -> SetFont(This,TypeFace,Bold,Italic,Charset,PitchAndFamily))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadTextStyle,0xEC9231A2,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9231A2-5A17-11E7-B72E-BC5FF42AC839")
ZcadTextStyle;
#endif

#ifndef __IZcadUCS_INTERFACE_DEFINED__
#define __IZcadUCS_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadUCS,0xEC9230AB,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9230AB-5A17-11E7-B72E-BC5FF42AC839")
    IZcadUCS : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Name(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Name(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Origin(
             VARIANT *origin) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Origin(
             VARIANT origin) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_XVector(
             VARIANT *xVector) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_XVector(
             VARIANT xVector) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_YVector(
             VARIANT *yVector) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_YVector(
             VARIANT yVector) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetUCSMatrix(
             VARIANT *transMatrix) = 0;

    };

#else

    typedef struct IZcadUCSVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadUCS * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadUCS * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadUCS * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadUCS * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadUCS * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadUCS * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadUCS * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadUCS * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadUCS * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadUCS * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadUCS * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadUCS * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadUCS * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadUCS * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadUCS * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadUCS * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadUCS * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadUCS * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadUCS * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadUCS * This);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadUCS * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadUCS * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_Origin )(
            IZcadUCS * This,
             VARIANT *origin);

         HRESULT ( STDMETHODCALLTYPE *put_Origin )(
            IZcadUCS * This,
             VARIANT origin);

         HRESULT ( STDMETHODCALLTYPE *get_XVector )(
            IZcadUCS * This,
             VARIANT *xVector);

         HRESULT ( STDMETHODCALLTYPE *put_XVector )(
            IZcadUCS * This,
             VARIANT xVector);

         HRESULT ( STDMETHODCALLTYPE *get_YVector )(
            IZcadUCS * This,
             VARIANT *yVector);

         HRESULT ( STDMETHODCALLTYPE *put_YVector )(
            IZcadUCS * This,
             VARIANT yVector);

         HRESULT ( STDMETHODCALLTYPE *GetUCSMatrix )(
            IZcadUCS * This,
             VARIANT *transMatrix);

        END_INTERFACE
    } IZcadUCSVtbl;

    interface IZcadUCS
    {
        CONST_VTBL struct IZcadUCSVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadUCS_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadUCS_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadUCS_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadUCS_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadUCS_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadUCS_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadUCS_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadUCS_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadUCS_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadUCS_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadUCS_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadUCS_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadUCS_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadUCS_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadUCS_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadUCS_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadUCS_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadUCS_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadUCS_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadUCS_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadUCS_get_Name(This,bstrName)	\
    ((This)->lpVtbl -> get_Name(This,bstrName))

#define IZcadUCS_put_Name(This,bstrName)	\
    ((This)->lpVtbl -> put_Name(This,bstrName))

#define IZcadUCS_get_Origin(This,origin)	\
    ((This)->lpVtbl -> get_Origin(This,origin))

#define IZcadUCS_put_Origin(This,origin)	\
    ((This)->lpVtbl -> put_Origin(This,origin))

#define IZcadUCS_get_XVector(This,xVector)	\
    ((This)->lpVtbl -> get_XVector(This,xVector))

#define IZcadUCS_put_XVector(This,xVector)	\
    ((This)->lpVtbl -> put_XVector(This,xVector))

#define IZcadUCS_get_YVector(This,yVector)	\
    ((This)->lpVtbl -> get_YVector(This,yVector))

#define IZcadUCS_put_YVector(This,yVector)	\
    ((This)->lpVtbl -> put_YVector(This,yVector))

#define IZcadUCS_GetUCSMatrix(This,transMatrix)	\
    ((This)->lpVtbl -> GetUCSMatrix(This,transMatrix))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadUCS,0xEC922FCB,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC922FCB-5A17-11E7-B72E-BC5FF42AC839")
ZcadUCS;
#endif

#ifndef __IZcadView_INTERFACE_DEFINED__
#define __IZcadView_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadView,0xEC923075,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923075-5A17-11E7-B72E-BC5FF42AC839")
    IZcadView : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Center(
             VARIANT *center) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Center(
             VARIANT center) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Height(
             double *height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Height(
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Width(
             double *width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Width(
             double width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Target(
             VARIANT *targetPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Target(
             VARIANT targetPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Direction(
             VARIANT *dirVec) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Direction(
             VARIANT dirVec) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Name(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Name(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_CategoryName(
             BSTR *category) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_CategoryName(
             BSTR category) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LayoutId(
             LONG_PTR *ObjectID) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LayoutId(
             LONG_PTR ObjectID) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LayerState(
             BSTR *layerState) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LayerState(
             BSTR layerState) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_HasVpAssociation(
             VARIANT_BOOL *bVpAssoc) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_HasVpAssociation(
             VARIANT_BOOL bVpAssoc) = 0;

    };

#else

    typedef struct IZcadViewVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadView * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadView * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadView * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadView * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadView * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadView * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadView * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadView * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadView * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadView * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadView * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadView * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadView * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadView * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadView * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadView * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadView * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadView * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadView * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadView * This);

         HRESULT ( STDMETHODCALLTYPE *get_Center )(
            IZcadView * This,
             VARIANT *center);

         HRESULT ( STDMETHODCALLTYPE *put_Center )(
            IZcadView * This,
             VARIANT center);

         HRESULT ( STDMETHODCALLTYPE *get_Height )(
            IZcadView * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_Height )(
            IZcadView * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_Width )(
            IZcadView * This,
             double *width);

         HRESULT ( STDMETHODCALLTYPE *put_Width )(
            IZcadView * This,
             double width);

         HRESULT ( STDMETHODCALLTYPE *get_Target )(
            IZcadView * This,
             VARIANT *targetPoint);

         HRESULT ( STDMETHODCALLTYPE *put_Target )(
            IZcadView * This,
             VARIANT targetPoint);

         HRESULT ( STDMETHODCALLTYPE *get_Direction )(
            IZcadView * This,
             VARIANT *dirVec);

         HRESULT ( STDMETHODCALLTYPE *put_Direction )(
            IZcadView * This,
             VARIANT dirVec);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadView * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadView * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_CategoryName )(
            IZcadView * This,
             BSTR *category);

         HRESULT ( STDMETHODCALLTYPE *put_CategoryName )(
            IZcadView * This,
             BSTR category);

         HRESULT ( STDMETHODCALLTYPE *get_LayoutId )(
            IZcadView * This,
             LONG_PTR *ObjectID);

         HRESULT ( STDMETHODCALLTYPE *put_LayoutId )(
            IZcadView * This,
             LONG_PTR ObjectID);

         HRESULT ( STDMETHODCALLTYPE *get_LayerState )(
            IZcadView * This,
             BSTR *layerState);

         HRESULT ( STDMETHODCALLTYPE *put_LayerState )(
            IZcadView * This,
             BSTR layerState);

         HRESULT ( STDMETHODCALLTYPE *get_HasVpAssociation )(
            IZcadView * This,
             VARIANT_BOOL *bVpAssoc);

         HRESULT ( STDMETHODCALLTYPE *put_HasVpAssociation )(
            IZcadView * This,
             VARIANT_BOOL bVpAssoc);

        END_INTERFACE
    } IZcadViewVtbl;

    interface IZcadView
    {
        CONST_VTBL struct IZcadViewVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadView_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadView_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadView_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadView_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadView_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadView_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadView_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadView_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadView_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadView_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadView_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadView_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadView_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadView_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadView_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadView_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadView_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadView_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadView_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadView_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadView_get_Center(This,center)	\
    ((This)->lpVtbl -> get_Center(This,center))

#define IZcadView_put_Center(This,center)	\
    ((This)->lpVtbl -> put_Center(This,center))

#define IZcadView_get_Height(This,height)	\
    ((This)->lpVtbl -> get_Height(This,height))

#define IZcadView_put_Height(This,height)	\
    ((This)->lpVtbl -> put_Height(This,height))

#define IZcadView_get_Width(This,width)	\
    ((This)->lpVtbl -> get_Width(This,width))

#define IZcadView_put_Width(This,width)	\
    ((This)->lpVtbl -> put_Width(This,width))

#define IZcadView_get_Target(This,targetPoint)	\
    ((This)->lpVtbl -> get_Target(This,targetPoint))

#define IZcadView_put_Target(This,targetPoint)	\
    ((This)->lpVtbl -> put_Target(This,targetPoint))

#define IZcadView_get_Direction(This,dirVec)	\
    ((This)->lpVtbl -> get_Direction(This,dirVec))

#define IZcadView_put_Direction(This,dirVec)	\
    ((This)->lpVtbl -> put_Direction(This,dirVec))

#define IZcadView_get_Name(This,bstrName)	\
    ((This)->lpVtbl -> get_Name(This,bstrName))

#define IZcadView_put_Name(This,bstrName)	\
    ((This)->lpVtbl -> put_Name(This,bstrName))

#define IZcadView_get_CategoryName(This,category)	\
    ((This)->lpVtbl -> get_CategoryName(This,category))

#define IZcadView_put_CategoryName(This,category)	\
    ((This)->lpVtbl -> put_CategoryName(This,category))

#define IZcadView_get_LayoutId(This,ObjectID)	\
    ((This)->lpVtbl -> get_LayoutId(This,ObjectID))

#define IZcadView_put_LayoutId(This,ObjectID)	\
    ((This)->lpVtbl -> put_LayoutId(This,ObjectID))

#define IZcadView_get_LayerState(This,layerState)	\
    ((This)->lpVtbl -> get_LayerState(This,layerState))

#define IZcadView_put_LayerState(This,layerState)	\
    ((This)->lpVtbl -> put_LayerState(This,layerState))

#define IZcadView_get_HasVpAssociation(This,bVpAssoc)	\
    ((This)->lpVtbl -> get_HasVpAssociation(This,bVpAssoc))

#define IZcadView_put_HasVpAssociation(This,bVpAssoc)	\
    ((This)->lpVtbl -> put_HasVpAssociation(This,bVpAssoc))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadView,0xEC923014,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923014-5A17-11E7-B72E-BC5FF42AC839")
ZcadView;
#endif

#ifndef __IZcadViewport_INTERFACE_DEFINED__
#define __IZcadViewport_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadViewport,0xEC92303D,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC92303D-5A17-11E7-B72E-BC5FF42AC839")
    IZcadViewport : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Center(
             VARIANT *center) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Center(
             VARIANT center) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Height(
             double *height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Height(
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Width(
             double *width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Width(
             double width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Target(
             VARIANT *targetPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Target(
             VARIANT targetPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Direction(
             VARIANT *dirVec) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Direction(
             VARIANT dirVec) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Name(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Name(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_GridOn(
             VARIANT_BOOL *bGridOn) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_GridOn(
             VARIANT_BOOL bGridOn) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_OrthoOn(
             VARIANT_BOOL *bOrthoOn) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_OrthoOn(
             VARIANT_BOOL bOrthoOn) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SnapBasePoint(
             VARIANT *lowLeft) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SnapBasePoint(
             VARIANT lowLeft) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SnapOn(
             VARIANT_BOOL *bSnapOn) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SnapOn(
             VARIANT_BOOL bSnapOn) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SnapRotationAngle(
             ZCAD_ANGLE *angle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SnapRotationAngle(
             ZCAD_ANGLE angle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UCSIconOn(
             VARIANT_BOOL *bIconOn) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_UCSIconOn(
             VARIANT_BOOL bIconOn) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UCSIconAtOrigin(
             VARIANT_BOOL *bIconAtOrigin) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_UCSIconAtOrigin(
             VARIANT_BOOL bIconAtOrigin) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LowerLeftCorner(
             VARIANT *lowLeft) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UpperRightCorner(
             VARIANT *upperRight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Split(
             ZcViewportSplitType NumWins) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetGridSpacing(
             double *XSpacing,
             double *YSpacing) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetGridSpacing(
             double XSpacing,
             double YSpacing) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetSnapSpacing(
             double *XSpacing,
             double *YSpacing) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetSnapSpacing(
             double XSpacing,
             double YSpacing) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetView(
             IZcadView *View) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArcSmoothness(
             long *arcSmooth) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArcSmoothness(
             long arcSmooth) = 0;

    };

#else

    typedef struct IZcadViewportVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadViewport * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadViewport * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadViewport * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadViewport * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadViewport * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadViewport * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadViewport * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadViewport * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadViewport * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadViewport * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadViewport * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadViewport * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadViewport * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadViewport * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadViewport * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadViewport * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadViewport * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadViewport * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadViewport * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadViewport * This);

         HRESULT ( STDMETHODCALLTYPE *get_Center )(
            IZcadViewport * This,
             VARIANT *center);

         HRESULT ( STDMETHODCALLTYPE *put_Center )(
            IZcadViewport * This,
             VARIANT center);

         HRESULT ( STDMETHODCALLTYPE *get_Height )(
            IZcadViewport * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_Height )(
            IZcadViewport * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_Width )(
            IZcadViewport * This,
             double *width);

         HRESULT ( STDMETHODCALLTYPE *put_Width )(
            IZcadViewport * This,
             double width);

         HRESULT ( STDMETHODCALLTYPE *get_Target )(
            IZcadViewport * This,
             VARIANT *targetPoint);

         HRESULT ( STDMETHODCALLTYPE *put_Target )(
            IZcadViewport * This,
             VARIANT targetPoint);

         HRESULT ( STDMETHODCALLTYPE *get_Direction )(
            IZcadViewport * This,
             VARIANT *dirVec);

         HRESULT ( STDMETHODCALLTYPE *put_Direction )(
            IZcadViewport * This,
             VARIANT dirVec);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadViewport * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadViewport * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_GridOn )(
            IZcadViewport * This,
             VARIANT_BOOL *bGridOn);

         HRESULT ( STDMETHODCALLTYPE *put_GridOn )(
            IZcadViewport * This,
             VARIANT_BOOL bGridOn);

         HRESULT ( STDMETHODCALLTYPE *get_OrthoOn )(
            IZcadViewport * This,
             VARIANT_BOOL *bOrthoOn);

         HRESULT ( STDMETHODCALLTYPE *put_OrthoOn )(
            IZcadViewport * This,
             VARIANT_BOOL bOrthoOn);

         HRESULT ( STDMETHODCALLTYPE *get_SnapBasePoint )(
            IZcadViewport * This,
             VARIANT *lowLeft);

         HRESULT ( STDMETHODCALLTYPE *put_SnapBasePoint )(
            IZcadViewport * This,
             VARIANT lowLeft);

         HRESULT ( STDMETHODCALLTYPE *get_SnapOn )(
            IZcadViewport * This,
             VARIANT_BOOL *bSnapOn);

         HRESULT ( STDMETHODCALLTYPE *put_SnapOn )(
            IZcadViewport * This,
             VARIANT_BOOL bSnapOn);

         HRESULT ( STDMETHODCALLTYPE *get_SnapRotationAngle )(
            IZcadViewport * This,
             ZCAD_ANGLE *angle);

         HRESULT ( STDMETHODCALLTYPE *put_SnapRotationAngle )(
            IZcadViewport * This,
             ZCAD_ANGLE angle);

         HRESULT ( STDMETHODCALLTYPE *get_UCSIconOn )(
            IZcadViewport * This,
             VARIANT_BOOL *bIconOn);

         HRESULT ( STDMETHODCALLTYPE *put_UCSIconOn )(
            IZcadViewport * This,
             VARIANT_BOOL bIconOn);

         HRESULT ( STDMETHODCALLTYPE *get_UCSIconAtOrigin )(
            IZcadViewport * This,
             VARIANT_BOOL *bIconAtOrigin);

         HRESULT ( STDMETHODCALLTYPE *put_UCSIconAtOrigin )(
            IZcadViewport * This,
             VARIANT_BOOL bIconAtOrigin);

         HRESULT ( STDMETHODCALLTYPE *get_LowerLeftCorner )(
            IZcadViewport * This,
             VARIANT *lowLeft);

         HRESULT ( STDMETHODCALLTYPE *get_UpperRightCorner )(
            IZcadViewport * This,
             VARIANT *upperRight);

         HRESULT ( STDMETHODCALLTYPE *Split )(
            IZcadViewport * This,
             ZcViewportSplitType NumWins);

         HRESULT ( STDMETHODCALLTYPE *GetGridSpacing )(
            IZcadViewport * This,
             double *XSpacing,
             double *YSpacing);

         HRESULT ( STDMETHODCALLTYPE *SetGridSpacing )(
            IZcadViewport * This,
             double XSpacing,
             double YSpacing);

         HRESULT ( STDMETHODCALLTYPE *GetSnapSpacing )(
            IZcadViewport * This,
             double *XSpacing,
             double *YSpacing);

         HRESULT ( STDMETHODCALLTYPE *SetSnapSpacing )(
            IZcadViewport * This,
             double XSpacing,
             double YSpacing);

         HRESULT ( STDMETHODCALLTYPE *SetView )(
            IZcadViewport * This,
             IZcadView *View);

         HRESULT ( STDMETHODCALLTYPE *get_ArcSmoothness )(
            IZcadViewport * This,
             long *arcSmooth);

         HRESULT ( STDMETHODCALLTYPE *put_ArcSmoothness )(
            IZcadViewport * This,
             long arcSmooth);

        END_INTERFACE
    } IZcadViewportVtbl;

    interface IZcadViewport
    {
        CONST_VTBL struct IZcadViewportVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadViewport_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadViewport_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadViewport_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadViewport_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadViewport_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadViewport_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadViewport_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadViewport_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadViewport_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadViewport_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadViewport_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadViewport_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadViewport_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadViewport_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadViewport_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadViewport_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadViewport_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadViewport_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadViewport_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadViewport_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadViewport_get_Center(This,center)	\
    ((This)->lpVtbl -> get_Center(This,center))

#define IZcadViewport_put_Center(This,center)	\
    ((This)->lpVtbl -> put_Center(This,center))

#define IZcadViewport_get_Height(This,height)	\
    ((This)->lpVtbl -> get_Height(This,height))

#define IZcadViewport_put_Height(This,height)	\
    ((This)->lpVtbl -> put_Height(This,height))

#define IZcadViewport_get_Width(This,width)	\
    ((This)->lpVtbl -> get_Width(This,width))

#define IZcadViewport_put_Width(This,width)	\
    ((This)->lpVtbl -> put_Width(This,width))

#define IZcadViewport_get_Target(This,targetPoint)	\
    ((This)->lpVtbl -> get_Target(This,targetPoint))

#define IZcadViewport_put_Target(This,targetPoint)	\
    ((This)->lpVtbl -> put_Target(This,targetPoint))

#define IZcadViewport_get_Direction(This,dirVec)	\
    ((This)->lpVtbl -> get_Direction(This,dirVec))

#define IZcadViewport_put_Direction(This,dirVec)	\
    ((This)->lpVtbl -> put_Direction(This,dirVec))

#define IZcadViewport_get_Name(This,bstrName)	\
    ((This)->lpVtbl -> get_Name(This,bstrName))

#define IZcadViewport_put_Name(This,bstrName)	\
    ((This)->lpVtbl -> put_Name(This,bstrName))

#define IZcadViewport_get_GridOn(This,bGridOn)	\
    ((This)->lpVtbl -> get_GridOn(This,bGridOn))

#define IZcadViewport_put_GridOn(This,bGridOn)	\
    ((This)->lpVtbl -> put_GridOn(This,bGridOn))

#define IZcadViewport_get_OrthoOn(This,bOrthoOn)	\
    ((This)->lpVtbl -> get_OrthoOn(This,bOrthoOn))

#define IZcadViewport_put_OrthoOn(This,bOrthoOn)	\
    ((This)->lpVtbl -> put_OrthoOn(This,bOrthoOn))

#define IZcadViewport_get_SnapBasePoint(This,lowLeft)	\
    ((This)->lpVtbl -> get_SnapBasePoint(This,lowLeft))

#define IZcadViewport_put_SnapBasePoint(This,lowLeft)	\
    ((This)->lpVtbl -> put_SnapBasePoint(This,lowLeft))

#define IZcadViewport_get_SnapOn(This,bSnapOn)	\
    ((This)->lpVtbl -> get_SnapOn(This,bSnapOn))

#define IZcadViewport_put_SnapOn(This,bSnapOn)	\
    ((This)->lpVtbl -> put_SnapOn(This,bSnapOn))

#define IZcadViewport_get_SnapRotationAngle(This,angle)	\
    ((This)->lpVtbl -> get_SnapRotationAngle(This,angle))

#define IZcadViewport_put_SnapRotationAngle(This,angle)	\
    ((This)->lpVtbl -> put_SnapRotationAngle(This,angle))

#define IZcadViewport_get_UCSIconOn(This,bIconOn)	\
    ((This)->lpVtbl -> get_UCSIconOn(This,bIconOn))

#define IZcadViewport_put_UCSIconOn(This,bIconOn)	\
    ((This)->lpVtbl -> put_UCSIconOn(This,bIconOn))

#define IZcadViewport_get_UCSIconAtOrigin(This,bIconAtOrigin)	\
    ((This)->lpVtbl -> get_UCSIconAtOrigin(This,bIconAtOrigin))

#define IZcadViewport_put_UCSIconAtOrigin(This,bIconAtOrigin)	\
    ((This)->lpVtbl -> put_UCSIconAtOrigin(This,bIconAtOrigin))

#define IZcadViewport_get_LowerLeftCorner(This,lowLeft)	\
    ((This)->lpVtbl -> get_LowerLeftCorner(This,lowLeft))

#define IZcadViewport_get_UpperRightCorner(This,upperRight)	\
    ((This)->lpVtbl -> get_UpperRightCorner(This,upperRight))

#define IZcadViewport_Split(This,NumWins)	\
    ((This)->lpVtbl -> Split(This,NumWins))

#define IZcadViewport_GetGridSpacing(This,XSpacing,YSpacing)	\
    ((This)->lpVtbl -> GetGridSpacing(This,XSpacing,YSpacing))

#define IZcadViewport_SetGridSpacing(This,XSpacing,YSpacing)	\
    ((This)->lpVtbl -> SetGridSpacing(This,XSpacing,YSpacing))

#define IZcadViewport_GetSnapSpacing(This,XSpacing,YSpacing)	\
    ((This)->lpVtbl -> GetSnapSpacing(This,XSpacing,YSpacing))

#define IZcadViewport_SetSnapSpacing(This,XSpacing,YSpacing)	\
    ((This)->lpVtbl -> SetSnapSpacing(This,XSpacing,YSpacing))

#define IZcadViewport_SetView(This,View)	\
    ((This)->lpVtbl -> SetView(This,View))

#define IZcadViewport_get_ArcSmoothness(This,arcSmooth)	\
    ((This)->lpVtbl -> get_ArcSmoothness(This,arcSmooth))

#define IZcadViewport_put_ArcSmoothness(This,arcSmooth)	\
    ((This)->lpVtbl -> put_ArcSmoothness(This,arcSmooth))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadViewport,0xEC9231D1,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9231D1-5A17-11E7-B72E-BC5FF42AC839")
ZcadViewport;
#endif

#ifndef __IZcadGroup_INTERFACE_DEFINED__
#define __IZcadGroup_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadGroup,0xEC92319A,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC92319A-5A17-11E7-B72E-BC5FF42AC839")
    IZcadGroup : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE Item(
             VARIANT Index,
             IZcadEntity **ppEntity) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get__NewEnum(
             LPUNKNOWN *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Count(
             long *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TrueColor(
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Layer(
             BSTR newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Linetype(
             BSTR newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LinetypeScale(
             ZCAD_NOUNITS newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Visible(
             VARIANT_BOOL newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Highlight(
             VARIANT_BOOL HighlightFlag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PlotStyleName(
             BSTR newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LineWeight(
             ZCAD_LWEIGHT newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Name(
             BSTR *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Name(
             BSTR newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AppendItems(
             VARIANT Objects) = 0;

        virtual  HRESULT STDMETHODCALLTYPE RemoveItems(
             VARIANT Objects) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Update( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Material(
             BSTR newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Color(
             ZcColor newVal) = 0;

    };

#else

    typedef struct IZcadGroupVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadGroup * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadGroup * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadGroup * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadGroup * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadGroup * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadGroup * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadGroup * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadGroup * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadGroup * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadGroup * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadGroup * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadGroup * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadGroup * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadGroup * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadGroup * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadGroup * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadGroup * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadGroup * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadGroup * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadGroup * This);

         HRESULT ( STDMETHODCALLTYPE *Item )(
            IZcadGroup * This,
             VARIANT Index,
             IZcadEntity **ppEntity);

         HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            IZcadGroup * This,
             LPUNKNOWN *pVal);

         HRESULT ( STDMETHODCALLTYPE *get_Count )(
            IZcadGroup * This,
             long *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadGroup * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadGroup * This,
             BSTR newVal);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadGroup * This,
             BSTR newVal);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadGroup * This,
             ZCAD_NOUNITS newVal);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadGroup * This,
             VARIANT_BOOL newVal);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadGroup * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadGroup * This,
             BSTR newVal);

         HRESULT ( STDMETHODCALLTYPE *put_LineWeight )(
            IZcadGroup * This,
             ZCAD_LWEIGHT newVal);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadGroup * This,
             BSTR *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadGroup * This,
             BSTR newVal);

         HRESULT ( STDMETHODCALLTYPE *AppendItems )(
            IZcadGroup * This,
             VARIANT Objects);

         HRESULT ( STDMETHODCALLTYPE *RemoveItems )(
            IZcadGroup * This,
             VARIANT Objects);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadGroup * This);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadGroup * This,
             BSTR newVal);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadGroup * This,
             ZcColor newVal);

        END_INTERFACE
    } IZcadGroupVtbl;

    interface IZcadGroup
    {
        CONST_VTBL struct IZcadGroupVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadGroup_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadGroup_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadGroup_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadGroup_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadGroup_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadGroup_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadGroup_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadGroup_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadGroup_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadGroup_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadGroup_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadGroup_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadGroup_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadGroup_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadGroup_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadGroup_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadGroup_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadGroup_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadGroup_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadGroup_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadGroup_Item(This,Index,ppEntity)	\
    ((This)->lpVtbl -> Item(This,Index,ppEntity))

#define IZcadGroup_get__NewEnum(This,pVal)	\
    ((This)->lpVtbl -> get__NewEnum(This,pVal))

#define IZcadGroup_get_Count(This,pVal)	\
    ((This)->lpVtbl -> get_Count(This,pVal))

#define IZcadGroup_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadGroup_put_Layer(This,newVal)	\
    ((This)->lpVtbl -> put_Layer(This,newVal))

#define IZcadGroup_put_Linetype(This,newVal)	\
    ((This)->lpVtbl -> put_Linetype(This,newVal))

#define IZcadGroup_put_LinetypeScale(This,newVal)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,newVal))

#define IZcadGroup_put_Visible(This,newVal)	\
    ((This)->lpVtbl -> put_Visible(This,newVal))

#define IZcadGroup_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadGroup_put_PlotStyleName(This,newVal)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,newVal))

#define IZcadGroup_put_LineWeight(This,newVal)	\
    ((This)->lpVtbl -> put_LineWeight(This,newVal))

#define IZcadGroup_get_Name(This,pVal)	\
    ((This)->lpVtbl -> get_Name(This,pVal))

#define IZcadGroup_put_Name(This,newVal)	\
    ((This)->lpVtbl -> put_Name(This,newVal))

#define IZcadGroup_AppendItems(This,Objects)	\
    ((This)->lpVtbl -> AppendItems(This,Objects))

#define IZcadGroup_RemoveItems(This,Objects)	\
    ((This)->lpVtbl -> RemoveItems(This,Objects))

#define IZcadGroup_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadGroup_put_Material(This,newVal)	\
    ((This)->lpVtbl -> put_Material(This,newVal))

#define IZcadGroup_put_Color(This,newVal)	\
    ((This)->lpVtbl -> put_Color(This,newVal))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadGroup,0xEC92316E,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC92316E-5A17-11E7-B72E-BC5FF42AC839")
ZcadGroup;
#endif

#ifndef __IZcadPlotConfiguration_INTERFACE_DEFINED__
#define __IZcadPlotConfiguration_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadPlotConfiguration,0xEC9231DB,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9231DB-5A17-11E7-B72E-BC5FF42AC839")
    IZcadPlotConfiguration : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Name(
             BSTR *pName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Name(
             BSTR Name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ConfigName(
             BSTR *pName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ConfigName(
             BSTR Name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_CanonicalMediaName(
             BSTR *pName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_CanonicalMediaName(
             BSTR Name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PaperUnits(
             ZcPlotPaperUnits *pPaperUnits) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PaperUnits(
             ZcPlotPaperUnits PaperUnits) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PlotViewportBorders(
             VARIANT_BOOL *pViewportBorders) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PlotViewportBorders(
             VARIANT_BOOL ViewportBorders) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ShowPlotStyles(
             VARIANT_BOOL *pStyles) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ShowPlotStyles(
             VARIANT_BOOL Styles) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PlotRotation(
             ZcPlotRotation *pRotation) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PlotRotation(
             ZcPlotRotation Rotation) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_CenterPlot(
             VARIANT_BOOL *pCentered) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_CenterPlot(
             VARIANT_BOOL Centered) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PlotHidden(
             VARIANT_BOOL *pHidden) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PlotHidden(
             VARIANT_BOOL Hidden) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PlotType(
             ZcPlotType *pType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PlotType(
             ZcPlotType Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ViewToPlot(
             BSTR *pName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ViewToPlot(
             BSTR Name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UseStandardScale(
             VARIANT_BOOL *pUseStdScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_UseStandardScale(
             VARIANT_BOOL UseStdScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_StandardScale(
             ZcPlotScale *pStdScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StandardScale(
             ZcPlotScale StdScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCustomScale(
             double *Numerator,
             double *Denominator) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetCustomScale(
             double Numerator,
             double Denominator) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ScaleLineweights(
             VARIANT_BOOL *pScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ScaleLineweights(
             VARIANT_BOOL scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PlotWithLineweights(
             VARIANT_BOOL *pPlot) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PlotWithLineweights(
             VARIANT_BOOL plot) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PlotViewportsFirst(
             VARIANT_BOOL *pViewportsFirst) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PlotViewportsFirst(
             VARIANT_BOOL ViewportsFirst) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_StyleSheet(
             BSTR *pName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StyleSheet(
             BSTR Name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetPaperMargins(
             VARIANT *LowerLeft,
             VARIANT *UpperRight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetPaperSize(
             double *Width,
             double *Height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PlotOrigin(
             VARIANT *pOrigin) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PlotOrigin(
             VARIANT Origin) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetWindowToPlot(
             VARIANT *LowerLeft,
             VARIANT *UpperRight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetWindowToPlot(
             VARIANT LowerLeft,
             VARIANT UpperRight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PlotWithPlotStyles(
             VARIANT_BOOL *pStyles) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PlotWithPlotStyles(
             VARIANT_BOOL Styles) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ModelType(
             VARIANT_BOOL *pType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE CopyFrom(
             IZcadPlotConfiguration *pPlotConfig) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCanonicalMediaNames(
             VARIANT *pNames) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetPlotDeviceNames(
             VARIANT *pNames) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetPlotStyleTableNames(
             VARIANT *pNames) = 0;

        virtual  HRESULT STDMETHODCALLTYPE RefreshPlotDeviceInfo( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetLocaleMediaName(
             BSTR Name,
             BSTR *pLocalName) = 0;

    };

#else

    typedef struct IZcadPlotConfigurationVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadPlotConfiguration * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadPlotConfiguration * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadPlotConfiguration * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadPlotConfiguration * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadPlotConfiguration * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadPlotConfiguration * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadPlotConfiguration * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadPlotConfiguration * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadPlotConfiguration * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadPlotConfiguration * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadPlotConfiguration * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadPlotConfiguration * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadPlotConfiguration * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadPlotConfiguration * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadPlotConfiguration * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadPlotConfiguration * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadPlotConfiguration * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadPlotConfiguration * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadPlotConfiguration * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadPlotConfiguration * This);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadPlotConfiguration * This,
             BSTR *pName);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadPlotConfiguration * This,
             BSTR Name);

         HRESULT ( STDMETHODCALLTYPE *get_ConfigName )(
            IZcadPlotConfiguration * This,
             BSTR *pName);

         HRESULT ( STDMETHODCALLTYPE *put_ConfigName )(
            IZcadPlotConfiguration * This,
             BSTR Name);

         HRESULT ( STDMETHODCALLTYPE *get_CanonicalMediaName )(
            IZcadPlotConfiguration * This,
             BSTR *pName);

         HRESULT ( STDMETHODCALLTYPE *put_CanonicalMediaName )(
            IZcadPlotConfiguration * This,
             BSTR Name);

         HRESULT ( STDMETHODCALLTYPE *get_PaperUnits )(
            IZcadPlotConfiguration * This,
             ZcPlotPaperUnits *pPaperUnits);

         HRESULT ( STDMETHODCALLTYPE *put_PaperUnits )(
            IZcadPlotConfiguration * This,
             ZcPlotPaperUnits PaperUnits);

         HRESULT ( STDMETHODCALLTYPE *get_PlotViewportBorders )(
            IZcadPlotConfiguration * This,
             VARIANT_BOOL *pViewportBorders);

         HRESULT ( STDMETHODCALLTYPE *put_PlotViewportBorders )(
            IZcadPlotConfiguration * This,
             VARIANT_BOOL ViewportBorders);

         HRESULT ( STDMETHODCALLTYPE *get_ShowPlotStyles )(
            IZcadPlotConfiguration * This,
             VARIANT_BOOL *pStyles);

         HRESULT ( STDMETHODCALLTYPE *put_ShowPlotStyles )(
            IZcadPlotConfiguration * This,
             VARIANT_BOOL Styles);

         HRESULT ( STDMETHODCALLTYPE *get_PlotRotation )(
            IZcadPlotConfiguration * This,
             ZcPlotRotation *pRotation);

         HRESULT ( STDMETHODCALLTYPE *put_PlotRotation )(
            IZcadPlotConfiguration * This,
             ZcPlotRotation Rotation);

         HRESULT ( STDMETHODCALLTYPE *get_CenterPlot )(
            IZcadPlotConfiguration * This,
             VARIANT_BOOL *pCentered);

         HRESULT ( STDMETHODCALLTYPE *put_CenterPlot )(
            IZcadPlotConfiguration * This,
             VARIANT_BOOL Centered);

         HRESULT ( STDMETHODCALLTYPE *get_PlotHidden )(
            IZcadPlotConfiguration * This,
             VARIANT_BOOL *pHidden);

         HRESULT ( STDMETHODCALLTYPE *put_PlotHidden )(
            IZcadPlotConfiguration * This,
             VARIANT_BOOL Hidden);

         HRESULT ( STDMETHODCALLTYPE *get_PlotType )(
            IZcadPlotConfiguration * This,
             ZcPlotType *pType);

         HRESULT ( STDMETHODCALLTYPE *put_PlotType )(
            IZcadPlotConfiguration * This,
             ZcPlotType Type);

         HRESULT ( STDMETHODCALLTYPE *get_ViewToPlot )(
            IZcadPlotConfiguration * This,
             BSTR *pName);

         HRESULT ( STDMETHODCALLTYPE *put_ViewToPlot )(
            IZcadPlotConfiguration * This,
             BSTR Name);

         HRESULT ( STDMETHODCALLTYPE *get_UseStandardScale )(
            IZcadPlotConfiguration * This,
             VARIANT_BOOL *pUseStdScale);

         HRESULT ( STDMETHODCALLTYPE *put_UseStandardScale )(
            IZcadPlotConfiguration * This,
             VARIANT_BOOL UseStdScale);

         HRESULT ( STDMETHODCALLTYPE *get_StandardScale )(
            IZcadPlotConfiguration * This,
             ZcPlotScale *pStdScale);

         HRESULT ( STDMETHODCALLTYPE *put_StandardScale )(
            IZcadPlotConfiguration * This,
             ZcPlotScale StdScale);

         HRESULT ( STDMETHODCALLTYPE *GetCustomScale )(
            IZcadPlotConfiguration * This,
             double *Numerator,
             double *Denominator);

         HRESULT ( STDMETHODCALLTYPE *SetCustomScale )(
            IZcadPlotConfiguration * This,
             double Numerator,
             double Denominator);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleLineweights )(
            IZcadPlotConfiguration * This,
             VARIANT_BOOL *pScale);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleLineweights )(
            IZcadPlotConfiguration * This,
             VARIANT_BOOL scale);

         HRESULT ( STDMETHODCALLTYPE *get_PlotWithLineweights )(
            IZcadPlotConfiguration * This,
             VARIANT_BOOL *pPlot);

         HRESULT ( STDMETHODCALLTYPE *put_PlotWithLineweights )(
            IZcadPlotConfiguration * This,
             VARIANT_BOOL plot);

         HRESULT ( STDMETHODCALLTYPE *get_PlotViewportsFirst )(
            IZcadPlotConfiguration * This,
             VARIANT_BOOL *pViewportsFirst);

         HRESULT ( STDMETHODCALLTYPE *put_PlotViewportsFirst )(
            IZcadPlotConfiguration * This,
             VARIANT_BOOL ViewportsFirst);

         HRESULT ( STDMETHODCALLTYPE *get_StyleSheet )(
            IZcadPlotConfiguration * This,
             BSTR *pName);

         HRESULT ( STDMETHODCALLTYPE *put_StyleSheet )(
            IZcadPlotConfiguration * This,
             BSTR Name);

         HRESULT ( STDMETHODCALLTYPE *GetPaperMargins )(
            IZcadPlotConfiguration * This,
             VARIANT *LowerLeft,
             VARIANT *UpperRight);

         HRESULT ( STDMETHODCALLTYPE *GetPaperSize )(
            IZcadPlotConfiguration * This,
             double *Width,
             double *Height);

         HRESULT ( STDMETHODCALLTYPE *get_PlotOrigin )(
            IZcadPlotConfiguration * This,
             VARIANT *pOrigin);

         HRESULT ( STDMETHODCALLTYPE *put_PlotOrigin )(
            IZcadPlotConfiguration * This,
             VARIANT Origin);

         HRESULT ( STDMETHODCALLTYPE *GetWindowToPlot )(
            IZcadPlotConfiguration * This,
             VARIANT *LowerLeft,
             VARIANT *UpperRight);

         HRESULT ( STDMETHODCALLTYPE *SetWindowToPlot )(
            IZcadPlotConfiguration * This,
             VARIANT LowerLeft,
             VARIANT UpperRight);

         HRESULT ( STDMETHODCALLTYPE *get_PlotWithPlotStyles )(
            IZcadPlotConfiguration * This,
             VARIANT_BOOL *pStyles);

         HRESULT ( STDMETHODCALLTYPE *put_PlotWithPlotStyles )(
            IZcadPlotConfiguration * This,
             VARIANT_BOOL Styles);

         HRESULT ( STDMETHODCALLTYPE *get_ModelType )(
            IZcadPlotConfiguration * This,
             VARIANT_BOOL *pType);

         HRESULT ( STDMETHODCALLTYPE *CopyFrom )(
            IZcadPlotConfiguration * This,
             IZcadPlotConfiguration *pPlotConfig);

         HRESULT ( STDMETHODCALLTYPE *GetCanonicalMediaNames )(
            IZcadPlotConfiguration * This,
             VARIANT *pNames);

         HRESULT ( STDMETHODCALLTYPE *GetPlotDeviceNames )(
            IZcadPlotConfiguration * This,
             VARIANT *pNames);

         HRESULT ( STDMETHODCALLTYPE *GetPlotStyleTableNames )(
            IZcadPlotConfiguration * This,
             VARIANT *pNames);

         HRESULT ( STDMETHODCALLTYPE *RefreshPlotDeviceInfo )(
            IZcadPlotConfiguration * This);

         HRESULT ( STDMETHODCALLTYPE *GetLocaleMediaName )(
            IZcadPlotConfiguration * This,
             BSTR Name,
             BSTR *pLocalName);

        END_INTERFACE
    } IZcadPlotConfigurationVtbl;

    interface IZcadPlotConfiguration
    {
        CONST_VTBL struct IZcadPlotConfigurationVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadPlotConfiguration_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadPlotConfiguration_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadPlotConfiguration_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadPlotConfiguration_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadPlotConfiguration_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadPlotConfiguration_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadPlotConfiguration_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadPlotConfiguration_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadPlotConfiguration_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadPlotConfiguration_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadPlotConfiguration_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadPlotConfiguration_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadPlotConfiguration_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadPlotConfiguration_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadPlotConfiguration_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadPlotConfiguration_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadPlotConfiguration_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadPlotConfiguration_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadPlotConfiguration_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadPlotConfiguration_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadPlotConfiguration_get_Name(This,pName)	\
    ((This)->lpVtbl -> get_Name(This,pName))

#define IZcadPlotConfiguration_put_Name(This,Name)	\
    ((This)->lpVtbl -> put_Name(This,Name))

#define IZcadPlotConfiguration_get_ConfigName(This,pName)	\
    ((This)->lpVtbl -> get_ConfigName(This,pName))

#define IZcadPlotConfiguration_put_ConfigName(This,Name)	\
    ((This)->lpVtbl -> put_ConfigName(This,Name))

#define IZcadPlotConfiguration_get_CanonicalMediaName(This,pName)	\
    ((This)->lpVtbl -> get_CanonicalMediaName(This,pName))

#define IZcadPlotConfiguration_put_CanonicalMediaName(This,Name)	\
    ((This)->lpVtbl -> put_CanonicalMediaName(This,Name))

#define IZcadPlotConfiguration_get_PaperUnits(This,pPaperUnits)	\
    ((This)->lpVtbl -> get_PaperUnits(This,pPaperUnits))

#define IZcadPlotConfiguration_put_PaperUnits(This,PaperUnits)	\
    ((This)->lpVtbl -> put_PaperUnits(This,PaperUnits))

#define IZcadPlotConfiguration_get_PlotViewportBorders(This,pViewportBorders)	\
    ((This)->lpVtbl -> get_PlotViewportBorders(This,pViewportBorders))

#define IZcadPlotConfiguration_put_PlotViewportBorders(This,ViewportBorders)	\
    ((This)->lpVtbl -> put_PlotViewportBorders(This,ViewportBorders))

#define IZcadPlotConfiguration_get_ShowPlotStyles(This,pStyles)	\
    ((This)->lpVtbl -> get_ShowPlotStyles(This,pStyles))

#define IZcadPlotConfiguration_put_ShowPlotStyles(This,Styles)	\
    ((This)->lpVtbl -> put_ShowPlotStyles(This,Styles))

#define IZcadPlotConfiguration_get_PlotRotation(This,pRotation)	\
    ((This)->lpVtbl -> get_PlotRotation(This,pRotation))

#define IZcadPlotConfiguration_put_PlotRotation(This,Rotation)	\
    ((This)->lpVtbl -> put_PlotRotation(This,Rotation))

#define IZcadPlotConfiguration_get_CenterPlot(This,pCentered)	\
    ((This)->lpVtbl -> get_CenterPlot(This,pCentered))

#define IZcadPlotConfiguration_put_CenterPlot(This,Centered)	\
    ((This)->lpVtbl -> put_CenterPlot(This,Centered))

#define IZcadPlotConfiguration_get_PlotHidden(This,pHidden)	\
    ((This)->lpVtbl -> get_PlotHidden(This,pHidden))

#define IZcadPlotConfiguration_put_PlotHidden(This,Hidden)	\
    ((This)->lpVtbl -> put_PlotHidden(This,Hidden))

#define IZcadPlotConfiguration_get_PlotType(This,pType)	\
    ((This)->lpVtbl -> get_PlotType(This,pType))

#define IZcadPlotConfiguration_put_PlotType(This,Type)	\
    ((This)->lpVtbl -> put_PlotType(This,Type))

#define IZcadPlotConfiguration_get_ViewToPlot(This,pName)	\
    ((This)->lpVtbl -> get_ViewToPlot(This,pName))

#define IZcadPlotConfiguration_put_ViewToPlot(This,Name)	\
    ((This)->lpVtbl -> put_ViewToPlot(This,Name))

#define IZcadPlotConfiguration_get_UseStandardScale(This,pUseStdScale)	\
    ((This)->lpVtbl -> get_UseStandardScale(This,pUseStdScale))

#define IZcadPlotConfiguration_put_UseStandardScale(This,UseStdScale)	\
    ((This)->lpVtbl -> put_UseStandardScale(This,UseStdScale))

#define IZcadPlotConfiguration_get_StandardScale(This,pStdScale)	\
    ((This)->lpVtbl -> get_StandardScale(This,pStdScale))

#define IZcadPlotConfiguration_put_StandardScale(This,StdScale)	\
    ((This)->lpVtbl -> put_StandardScale(This,StdScale))

#define IZcadPlotConfiguration_GetCustomScale(This,Numerator,Denominator)	\
    ((This)->lpVtbl -> GetCustomScale(This,Numerator,Denominator))

#define IZcadPlotConfiguration_SetCustomScale(This,Numerator,Denominator)	\
    ((This)->lpVtbl -> SetCustomScale(This,Numerator,Denominator))

#define IZcadPlotConfiguration_get_ScaleLineweights(This,pScale)	\
    ((This)->lpVtbl -> get_ScaleLineweights(This,pScale))

#define IZcadPlotConfiguration_put_ScaleLineweights(This,scale)	\
    ((This)->lpVtbl -> put_ScaleLineweights(This,scale))

#define IZcadPlotConfiguration_get_PlotWithLineweights(This,pPlot)	\
    ((This)->lpVtbl -> get_PlotWithLineweights(This,pPlot))

#define IZcadPlotConfiguration_put_PlotWithLineweights(This,plot)	\
    ((This)->lpVtbl -> put_PlotWithLineweights(This,plot))

#define IZcadPlotConfiguration_get_PlotViewportsFirst(This,pViewportsFirst)	\
    ((This)->lpVtbl -> get_PlotViewportsFirst(This,pViewportsFirst))

#define IZcadPlotConfiguration_put_PlotViewportsFirst(This,ViewportsFirst)	\
    ((This)->lpVtbl -> put_PlotViewportsFirst(This,ViewportsFirst))

#define IZcadPlotConfiguration_get_StyleSheet(This,pName)	\
    ((This)->lpVtbl -> get_StyleSheet(This,pName))

#define IZcadPlotConfiguration_put_StyleSheet(This,Name)	\
    ((This)->lpVtbl -> put_StyleSheet(This,Name))

#define IZcadPlotConfiguration_GetPaperMargins(This,LowerLeft,UpperRight)	\
    ((This)->lpVtbl -> GetPaperMargins(This,LowerLeft,UpperRight))

#define IZcadPlotConfiguration_GetPaperSize(This,Width,Height)	\
    ((This)->lpVtbl -> GetPaperSize(This,Width,Height))

#define IZcadPlotConfiguration_get_PlotOrigin(This,pOrigin)	\
    ((This)->lpVtbl -> get_PlotOrigin(This,pOrigin))

#define IZcadPlotConfiguration_put_PlotOrigin(This,Origin)	\
    ((This)->lpVtbl -> put_PlotOrigin(This,Origin))

#define IZcadPlotConfiguration_GetWindowToPlot(This,LowerLeft,UpperRight)	\
    ((This)->lpVtbl -> GetWindowToPlot(This,LowerLeft,UpperRight))

#define IZcadPlotConfiguration_SetWindowToPlot(This,LowerLeft,UpperRight)	\
    ((This)->lpVtbl -> SetWindowToPlot(This,LowerLeft,UpperRight))

#define IZcadPlotConfiguration_get_PlotWithPlotStyles(This,pStyles)	\
    ((This)->lpVtbl -> get_PlotWithPlotStyles(This,pStyles))

#define IZcadPlotConfiguration_put_PlotWithPlotStyles(This,Styles)	\
    ((This)->lpVtbl -> put_PlotWithPlotStyles(This,Styles))

#define IZcadPlotConfiguration_get_ModelType(This,pType)	\
    ((This)->lpVtbl -> get_ModelType(This,pType))

#define IZcadPlotConfiguration_CopyFrom(This,pPlotConfig)	\
    ((This)->lpVtbl -> CopyFrom(This,pPlotConfig))

#define IZcadPlotConfiguration_GetCanonicalMediaNames(This,pNames)	\
    ((This)->lpVtbl -> GetCanonicalMediaNames(This,pNames))

#define IZcadPlotConfiguration_GetPlotDeviceNames(This,pNames)	\
    ((This)->lpVtbl -> GetPlotDeviceNames(This,pNames))

#define IZcadPlotConfiguration_GetPlotStyleTableNames(This,pNames)	\
    ((This)->lpVtbl -> GetPlotStyleTableNames(This,pNames))

#define IZcadPlotConfiguration_RefreshPlotDeviceInfo(This)	\
    ((This)->lpVtbl -> RefreshPlotDeviceInfo(This))

#define IZcadPlotConfiguration_GetLocaleMediaName(This,Name,pLocalName)	\
    ((This)->lpVtbl -> GetLocaleMediaName(This,Name,pLocalName))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadPlotConfiguration,0xEC9231A5,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9231A5-5A17-11E7-B72E-BC5FF42AC839")
ZcadPlotConfiguration;
#endif

#ifndef __IZcadLayout_INTERFACE_DEFINED__
#define __IZcadLayout_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadLayout,0xEC923115,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923115-5A17-11E7-B72E-BC5FF42AC839")
    IZcadLayout : public IZcadPlotConfiguration
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Block(
             IZcadBlock **pBlock) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TabOrder(
             long *pOrder) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TabOrder(
             long Order) = 0;

    };

#else

    typedef struct IZcadLayoutVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadLayout * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadLayout * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadLayout * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadLayout * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadLayout * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadLayout * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadLayout * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadLayout * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadLayout * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadLayout * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadLayout * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadLayout * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadLayout * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadLayout * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadLayout * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadLayout * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadLayout * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadLayout * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadLayout * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadLayout * This);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadLayout * This,
             BSTR *pName);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadLayout * This,
             BSTR Name);

         HRESULT ( STDMETHODCALLTYPE *get_ConfigName )(
            IZcadLayout * This,
             BSTR *pName);

         HRESULT ( STDMETHODCALLTYPE *put_ConfigName )(
            IZcadLayout * This,
             BSTR Name);

         HRESULT ( STDMETHODCALLTYPE *get_CanonicalMediaName )(
            IZcadLayout * This,
             BSTR *pName);

         HRESULT ( STDMETHODCALLTYPE *put_CanonicalMediaName )(
            IZcadLayout * This,
             BSTR Name);

         HRESULT ( STDMETHODCALLTYPE *get_PaperUnits )(
            IZcadLayout * This,
             ZcPlotPaperUnits *pPaperUnits);

         HRESULT ( STDMETHODCALLTYPE *put_PaperUnits )(
            IZcadLayout * This,
             ZcPlotPaperUnits PaperUnits);

         HRESULT ( STDMETHODCALLTYPE *get_PlotViewportBorders )(
            IZcadLayout * This,
             VARIANT_BOOL *pViewportBorders);

         HRESULT ( STDMETHODCALLTYPE *put_PlotViewportBorders )(
            IZcadLayout * This,
             VARIANT_BOOL ViewportBorders);

         HRESULT ( STDMETHODCALLTYPE *get_ShowPlotStyles )(
            IZcadLayout * This,
             VARIANT_BOOL *pStyles);

         HRESULT ( STDMETHODCALLTYPE *put_ShowPlotStyles )(
            IZcadLayout * This,
             VARIANT_BOOL Styles);

         HRESULT ( STDMETHODCALLTYPE *get_PlotRotation )(
            IZcadLayout * This,
             ZcPlotRotation *pRotation);

         HRESULT ( STDMETHODCALLTYPE *put_PlotRotation )(
            IZcadLayout * This,
             ZcPlotRotation Rotation);

         HRESULT ( STDMETHODCALLTYPE *get_CenterPlot )(
            IZcadLayout * This,
             VARIANT_BOOL *pCentered);

         HRESULT ( STDMETHODCALLTYPE *put_CenterPlot )(
            IZcadLayout * This,
             VARIANT_BOOL Centered);

         HRESULT ( STDMETHODCALLTYPE *get_PlotHidden )(
            IZcadLayout * This,
             VARIANT_BOOL *pHidden);

         HRESULT ( STDMETHODCALLTYPE *put_PlotHidden )(
            IZcadLayout * This,
             VARIANT_BOOL Hidden);

         HRESULT ( STDMETHODCALLTYPE *get_PlotType )(
            IZcadLayout * This,
             ZcPlotType *pType);

         HRESULT ( STDMETHODCALLTYPE *put_PlotType )(
            IZcadLayout * This,
             ZcPlotType Type);

         HRESULT ( STDMETHODCALLTYPE *get_ViewToPlot )(
            IZcadLayout * This,
             BSTR *pName);

         HRESULT ( STDMETHODCALLTYPE *put_ViewToPlot )(
            IZcadLayout * This,
             BSTR Name);

         HRESULT ( STDMETHODCALLTYPE *get_UseStandardScale )(
            IZcadLayout * This,
             VARIANT_BOOL *pUseStdScale);

         HRESULT ( STDMETHODCALLTYPE *put_UseStandardScale )(
            IZcadLayout * This,
             VARIANT_BOOL UseStdScale);

         HRESULT ( STDMETHODCALLTYPE *get_StandardScale )(
            IZcadLayout * This,
             ZcPlotScale *pStdScale);

         HRESULT ( STDMETHODCALLTYPE *put_StandardScale )(
            IZcadLayout * This,
             ZcPlotScale StdScale);

         HRESULT ( STDMETHODCALLTYPE *GetCustomScale )(
            IZcadLayout * This,
             double *Numerator,
             double *Denominator);

         HRESULT ( STDMETHODCALLTYPE *SetCustomScale )(
            IZcadLayout * This,
             double Numerator,
             double Denominator);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleLineweights )(
            IZcadLayout * This,
             VARIANT_BOOL *pScale);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleLineweights )(
            IZcadLayout * This,
             VARIANT_BOOL scale);

         HRESULT ( STDMETHODCALLTYPE *get_PlotWithLineweights )(
            IZcadLayout * This,
             VARIANT_BOOL *pPlot);

         HRESULT ( STDMETHODCALLTYPE *put_PlotWithLineweights )(
            IZcadLayout * This,
             VARIANT_BOOL plot);

         HRESULT ( STDMETHODCALLTYPE *get_PlotViewportsFirst )(
            IZcadLayout * This,
             VARIANT_BOOL *pViewportsFirst);

         HRESULT ( STDMETHODCALLTYPE *put_PlotViewportsFirst )(
            IZcadLayout * This,
             VARIANT_BOOL ViewportsFirst);

         HRESULT ( STDMETHODCALLTYPE *get_StyleSheet )(
            IZcadLayout * This,
             BSTR *pName);

         HRESULT ( STDMETHODCALLTYPE *put_StyleSheet )(
            IZcadLayout * This,
             BSTR Name);

         HRESULT ( STDMETHODCALLTYPE *GetPaperMargins )(
            IZcadLayout * This,
             VARIANT *LowerLeft,
             VARIANT *UpperRight);

         HRESULT ( STDMETHODCALLTYPE *GetPaperSize )(
            IZcadLayout * This,
             double *Width,
             double *Height);

         HRESULT ( STDMETHODCALLTYPE *get_PlotOrigin )(
            IZcadLayout * This,
             VARIANT *pOrigin);

         HRESULT ( STDMETHODCALLTYPE *put_PlotOrigin )(
            IZcadLayout * This,
             VARIANT Origin);

         HRESULT ( STDMETHODCALLTYPE *GetWindowToPlot )(
            IZcadLayout * This,
             VARIANT *LowerLeft,
             VARIANT *UpperRight);

         HRESULT ( STDMETHODCALLTYPE *SetWindowToPlot )(
            IZcadLayout * This,
             VARIANT LowerLeft,
             VARIANT UpperRight);

         HRESULT ( STDMETHODCALLTYPE *get_PlotWithPlotStyles )(
            IZcadLayout * This,
             VARIANT_BOOL *pStyles);

         HRESULT ( STDMETHODCALLTYPE *put_PlotWithPlotStyles )(
            IZcadLayout * This,
             VARIANT_BOOL Styles);

         HRESULT ( STDMETHODCALLTYPE *get_ModelType )(
            IZcadLayout * This,
             VARIANT_BOOL *pType);

         HRESULT ( STDMETHODCALLTYPE *CopyFrom )(
            IZcadLayout * This,
             IZcadPlotConfiguration *pPlotConfig);

         HRESULT ( STDMETHODCALLTYPE *GetCanonicalMediaNames )(
            IZcadLayout * This,
             VARIANT *pNames);

         HRESULT ( STDMETHODCALLTYPE *GetPlotDeviceNames )(
            IZcadLayout * This,
             VARIANT *pNames);

         HRESULT ( STDMETHODCALLTYPE *GetPlotStyleTableNames )(
            IZcadLayout * This,
             VARIANT *pNames);

         HRESULT ( STDMETHODCALLTYPE *RefreshPlotDeviceInfo )(
            IZcadLayout * This);

         HRESULT ( STDMETHODCALLTYPE *GetLocaleMediaName )(
            IZcadLayout * This,
             BSTR Name,
             BSTR *pLocalName);

         HRESULT ( STDMETHODCALLTYPE *get_Block )(
            IZcadLayout * This,
             IZcadBlock **pBlock);

         HRESULT ( STDMETHODCALLTYPE *get_TabOrder )(
            IZcadLayout * This,
             long *pOrder);

         HRESULT ( STDMETHODCALLTYPE *put_TabOrder )(
            IZcadLayout * This,
             long Order);

        END_INTERFACE
    } IZcadLayoutVtbl;

    interface IZcadLayout
    {
        CONST_VTBL struct IZcadLayoutVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadLayout_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadLayout_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadLayout_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadLayout_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadLayout_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadLayout_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadLayout_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadLayout_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadLayout_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadLayout_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadLayout_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadLayout_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadLayout_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadLayout_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadLayout_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadLayout_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadLayout_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadLayout_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadLayout_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadLayout_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadLayout_get_Name(This,pName)	\
    ((This)->lpVtbl -> get_Name(This,pName))

#define IZcadLayout_put_Name(This,Name)	\
    ((This)->lpVtbl -> put_Name(This,Name))

#define IZcadLayout_get_ConfigName(This,pName)	\
    ((This)->lpVtbl -> get_ConfigName(This,pName))

#define IZcadLayout_put_ConfigName(This,Name)	\
    ((This)->lpVtbl -> put_ConfigName(This,Name))

#define IZcadLayout_get_CanonicalMediaName(This,pName)	\
    ((This)->lpVtbl -> get_CanonicalMediaName(This,pName))

#define IZcadLayout_put_CanonicalMediaName(This,Name)	\
    ((This)->lpVtbl -> put_CanonicalMediaName(This,Name))

#define IZcadLayout_get_PaperUnits(This,pPaperUnits)	\
    ((This)->lpVtbl -> get_PaperUnits(This,pPaperUnits))

#define IZcadLayout_put_PaperUnits(This,PaperUnits)	\
    ((This)->lpVtbl -> put_PaperUnits(This,PaperUnits))

#define IZcadLayout_get_PlotViewportBorders(This,pViewportBorders)	\
    ((This)->lpVtbl -> get_PlotViewportBorders(This,pViewportBorders))

#define IZcadLayout_put_PlotViewportBorders(This,ViewportBorders)	\
    ((This)->lpVtbl -> put_PlotViewportBorders(This,ViewportBorders))

#define IZcadLayout_get_ShowPlotStyles(This,pStyles)	\
    ((This)->lpVtbl -> get_ShowPlotStyles(This,pStyles))

#define IZcadLayout_put_ShowPlotStyles(This,Styles)	\
    ((This)->lpVtbl -> put_ShowPlotStyles(This,Styles))

#define IZcadLayout_get_PlotRotation(This,pRotation)	\
    ((This)->lpVtbl -> get_PlotRotation(This,pRotation))

#define IZcadLayout_put_PlotRotation(This,Rotation)	\
    ((This)->lpVtbl -> put_PlotRotation(This,Rotation))

#define IZcadLayout_get_CenterPlot(This,pCentered)	\
    ((This)->lpVtbl -> get_CenterPlot(This,pCentered))

#define IZcadLayout_put_CenterPlot(This,Centered)	\
    ((This)->lpVtbl -> put_CenterPlot(This,Centered))

#define IZcadLayout_get_PlotHidden(This,pHidden)	\
    ((This)->lpVtbl -> get_PlotHidden(This,pHidden))

#define IZcadLayout_put_PlotHidden(This,Hidden)	\
    ((This)->lpVtbl -> put_PlotHidden(This,Hidden))

#define IZcadLayout_get_PlotType(This,pType)	\
    ((This)->lpVtbl -> get_PlotType(This,pType))

#define IZcadLayout_put_PlotType(This,Type)	\
    ((This)->lpVtbl -> put_PlotType(This,Type))

#define IZcadLayout_get_ViewToPlot(This,pName)	\
    ((This)->lpVtbl -> get_ViewToPlot(This,pName))

#define IZcadLayout_put_ViewToPlot(This,Name)	\
    ((This)->lpVtbl -> put_ViewToPlot(This,Name))

#define IZcadLayout_get_UseStandardScale(This,pUseStdScale)	\
    ((This)->lpVtbl -> get_UseStandardScale(This,pUseStdScale))

#define IZcadLayout_put_UseStandardScale(This,UseStdScale)	\
    ((This)->lpVtbl -> put_UseStandardScale(This,UseStdScale))

#define IZcadLayout_get_StandardScale(This,pStdScale)	\
    ((This)->lpVtbl -> get_StandardScale(This,pStdScale))

#define IZcadLayout_put_StandardScale(This,StdScale)	\
    ((This)->lpVtbl -> put_StandardScale(This,StdScale))

#define IZcadLayout_GetCustomScale(This,Numerator,Denominator)	\
    ((This)->lpVtbl -> GetCustomScale(This,Numerator,Denominator))

#define IZcadLayout_SetCustomScale(This,Numerator,Denominator)	\
    ((This)->lpVtbl -> SetCustomScale(This,Numerator,Denominator))

#define IZcadLayout_get_ScaleLineweights(This,pScale)	\
    ((This)->lpVtbl -> get_ScaleLineweights(This,pScale))

#define IZcadLayout_put_ScaleLineweights(This,scale)	\
    ((This)->lpVtbl -> put_ScaleLineweights(This,scale))

#define IZcadLayout_get_PlotWithLineweights(This,pPlot)	\
    ((This)->lpVtbl -> get_PlotWithLineweights(This,pPlot))

#define IZcadLayout_put_PlotWithLineweights(This,plot)	\
    ((This)->lpVtbl -> put_PlotWithLineweights(This,plot))

#define IZcadLayout_get_PlotViewportsFirst(This,pViewportsFirst)	\
    ((This)->lpVtbl -> get_PlotViewportsFirst(This,pViewportsFirst))

#define IZcadLayout_put_PlotViewportsFirst(This,ViewportsFirst)	\
    ((This)->lpVtbl -> put_PlotViewportsFirst(This,ViewportsFirst))

#define IZcadLayout_get_StyleSheet(This,pName)	\
    ((This)->lpVtbl -> get_StyleSheet(This,pName))

#define IZcadLayout_put_StyleSheet(This,Name)	\
    ((This)->lpVtbl -> put_StyleSheet(This,Name))

#define IZcadLayout_GetPaperMargins(This,LowerLeft,UpperRight)	\
    ((This)->lpVtbl -> GetPaperMargins(This,LowerLeft,UpperRight))

#define IZcadLayout_GetPaperSize(This,Width,Height)	\
    ((This)->lpVtbl -> GetPaperSize(This,Width,Height))

#define IZcadLayout_get_PlotOrigin(This,pOrigin)	\
    ((This)->lpVtbl -> get_PlotOrigin(This,pOrigin))

#define IZcadLayout_put_PlotOrigin(This,Origin)	\
    ((This)->lpVtbl -> put_PlotOrigin(This,Origin))

#define IZcadLayout_GetWindowToPlot(This,LowerLeft,UpperRight)	\
    ((This)->lpVtbl -> GetWindowToPlot(This,LowerLeft,UpperRight))

#define IZcadLayout_SetWindowToPlot(This,LowerLeft,UpperRight)	\
    ((This)->lpVtbl -> SetWindowToPlot(This,LowerLeft,UpperRight))

#define IZcadLayout_get_PlotWithPlotStyles(This,pStyles)	\
    ((This)->lpVtbl -> get_PlotWithPlotStyles(This,pStyles))

#define IZcadLayout_put_PlotWithPlotStyles(This,Styles)	\
    ((This)->lpVtbl -> put_PlotWithPlotStyles(This,Styles))

#define IZcadLayout_get_ModelType(This,pType)	\
    ((This)->lpVtbl -> get_ModelType(This,pType))

#define IZcadLayout_CopyFrom(This,pPlotConfig)	\
    ((This)->lpVtbl -> CopyFrom(This,pPlotConfig))

#define IZcadLayout_GetCanonicalMediaNames(This,pNames)	\
    ((This)->lpVtbl -> GetCanonicalMediaNames(This,pNames))

#define IZcadLayout_GetPlotDeviceNames(This,pNames)	\
    ((This)->lpVtbl -> GetPlotDeviceNames(This,pNames))

#define IZcadLayout_GetPlotStyleTableNames(This,pNames)	\
    ((This)->lpVtbl -> GetPlotStyleTableNames(This,pNames))

#define IZcadLayout_RefreshPlotDeviceInfo(This)	\
    ((This)->lpVtbl -> RefreshPlotDeviceInfo(This))

#define IZcadLayout_GetLocaleMediaName(This,Name,pLocalName)	\
    ((This)->lpVtbl -> GetLocaleMediaName(This,Name,pLocalName))


#define IZcadLayout_get_Block(This,pBlock)	\
    ((This)->lpVtbl -> get_Block(This,pBlock))

#define IZcadLayout_get_TabOrder(This,pOrder)	\
    ((This)->lpVtbl -> get_TabOrder(This,pOrder))

#define IZcadLayout_put_TabOrder(This,Order)	\
    ((This)->lpVtbl -> put_TabOrder(This,Order))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadLayout,0xEC922FF9,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC922FF9-5A17-11E7-B72E-BC5FF42AC839")
ZcadLayout;
#endif

#ifndef __IZcadIdPair_INTERFACE_DEFINED__
#define __IZcadIdPair_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadIdPair,0xEC9230D6,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9230D6-5A17-11E7-B72E-BC5FF42AC839")
    IZcadIdPair : public IDispatch
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_IsCloned(
             VARIANT_BOOL *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IsOwnerXlated(
             VARIANT_BOOL *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IsPrimary(
             VARIANT_BOOL *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Key(
             LONG_PTR *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Value(
             LONG_PTR *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Application(
             LPDISPATCH *ApplicationObject) = 0;

    };

#else

    typedef struct IZcadIdPairVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadIdPair * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadIdPair * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadIdPair * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadIdPair * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadIdPair * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadIdPair * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadIdPair * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_IsCloned )(
            IZcadIdPair * This,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *get_IsOwnerXlated )(
            IZcadIdPair * This,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *get_IsPrimary )(
            IZcadIdPair * This,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *get_Key )(
            IZcadIdPair * This,
             LONG_PTR *pVal);

         HRESULT ( STDMETHODCALLTYPE *get_Value )(
            IZcadIdPair * This,
             LONG_PTR *pVal);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadIdPair * This,
             LPDISPATCH *ApplicationObject);

        END_INTERFACE
    } IZcadIdPairVtbl;

    interface IZcadIdPair
    {
        CONST_VTBL struct IZcadIdPairVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadIdPair_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadIdPair_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadIdPair_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadIdPair_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadIdPair_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadIdPair_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadIdPair_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadIdPair_get_IsCloned(This,pVal)	\
    ((This)->lpVtbl -> get_IsCloned(This,pVal))

#define IZcadIdPair_get_IsOwnerXlated(This,pVal)	\
    ((This)->lpVtbl -> get_IsOwnerXlated(This,pVal))

#define IZcadIdPair_get_IsPrimary(This,pVal)	\
    ((This)->lpVtbl -> get_IsPrimary(This,pVal))

#define IZcadIdPair_get_Key(This,pVal)	\
    ((This)->lpVtbl -> get_Key(This,pVal))

#define IZcadIdPair_get_Value(This,pVal)	\
    ((This)->lpVtbl -> get_Value(This,pVal))

#define IZcadIdPair_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadIdPair,0xEC9230BC,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9230BC-5A17-11E7-B72E-BC5FF42AC839")
ZcadIdPair;
#endif

#ifndef __IZcadTableStyle_INTERFACE_DEFINED__
#define __IZcadTableStyle_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadTableStyle,0xEC923133,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923133-5A17-11E7-B72E-BC5FF42AC839")
    IZcadTableStyle : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Name(
             BSTR *bstrValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Name(
             BSTR bstrValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Description(
             BSTR *bstr) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Description(
             BSTR bstrValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BitFlags(
             long *bitFlag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BitFlags(
             long bitFlag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_FlowDirection(
             ZcTableDirection *pFlow) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_FlowDirection(
             ZcTableDirection flow) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_HorzCellMargin(
             double *dHorzCellMargin) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_HorzCellMargin(
             double dHorzCellMargin) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_VertCellMargin(
             double *dVertCellMargin) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_VertCellMargin(
             double dVertCellmargin) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TitleSuppressed(
             VARIANT_BOOL *bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TitleSuppressed(
             VARIANT_BOOL bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_HeaderSuppressed(
             VARIANT_BOOL *bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_HeaderSuppressed(
             VARIANT_BOOL bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetTextStyle(
             ZcRowType rowType,
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetTextStyle(
             int rowTypes,
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetTextHeight(
             ZcRowType rowType,
             double *pTextHeight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetTextHeight(
             int rowTypes,
             double textHeight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetAlignment(
             ZcRowType rowType,
             ZcCellAlignment *pCellAlignment) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetAlignment(
             int rowTypes,
             ZcCellAlignment cellAlignment) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetColor(
             ZcRowType rowType,
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetColor(
             int rowTypes,
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetBackgroundColor(
             ZcRowType rowType,
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetBackgroundColor(
             int rowTypes,
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetBackgroundColorNone(
             ZcRowType rowType,
             VARIANT_BOOL *bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetBackgroundColorNone(
             int rowTypes,
             VARIANT_BOOL *bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetGridLineWeight(
             ZcGridLineType gridLineType,
             ZcRowType rowType,
             ZCAD_LWEIGHT *lineweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetGridLineWeight(
             int gridLineTypes,
             int rowTypes,
             ZCAD_LWEIGHT lineweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetGridColor(
             ZcGridLineType gridLineType,
             ZcRowType rowType,
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetGridColor(
             int gridLineTypes,
             int rowTypes,
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetGridVisibility(
             ZcGridLineType gridLineType,
             ZcRowType rowType,
             VARIANT_BOOL *bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetGridVisibility(
             int gridLineTypes,
             int rowTypes,
             VARIANT_BOOL bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetDataType(
             ZcRowType rowType,
             ZcValueDataType *pDataType,
             ZcValueUnitType *pUnitType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetDataType(
             int rowTypes,
             ZcValueDataType nDataType,
             ZcValueUnitType nUnitType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetFormat(
             ZcRowType rowType,
             BSTR *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetFormat(
             int rowTypes,
             BSTR val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE CreateCellStyle(
             BSTR bstrCellStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE CreateCellStyleFromStyle(
             BSTR bstrCellStyle,
             BSTR bstrSourceCellStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE RenameCellStyle(
             BSTR bstrOldName,
             BSTR bstrNewName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE DeleteCellStyle(
             BSTR bstrCellStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetUniqueCellStyleName(
             BSTR pszBaseName,
             BSTR *pbstrUniqueName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetIsCellStyleInUse(
             BSTR pszCellStyle,
             VARIANT_BOOL *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_NumCellStyles(
             long *numCellStyles) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCellStyles(
             VARIANT *cellStylesArray) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetTextStyleId(
             BSTR bstrCellStyle,
             LONG_PTR *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetTextStyleId(
             BSTR bstrCellStyle,
             LONG_PTR val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetTextHeight2(
             BSTR bstrCellStyle,
             double *pHeight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetTextHeight2(
             BSTR bstrCellStyle,
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetAlignment2(
             BSTR bstrCellStyle,
             ZcCellAlignment *pCellAlignment) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetAlignment2(
             BSTR bstrCellStyle,
             ZcCellAlignment cellAlignment) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetColor2(
             BSTR bstrCellStyle,
             IZcadZcCmColor **color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetColor2(
             BSTR bstrCellStyle,
             IZcadZcCmColor *color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetBackgroundColor2(
             BSTR bstrCellStyle,
             IZcadZcCmColor **color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetBackgroundColor2(
             BSTR bstrCellStyle,
             IZcadZcCmColor *color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetDataType2(
             BSTR bstrCellStyle,
             ZcValueDataType *pDataType,
             ZcValueUnitType *pUnitType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetDataType2(
             BSTR bstrCellStyle,
             ZcValueDataType nDataType,
             ZcValueUnitType nUnitType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetFormat2(
             BSTR bstrCellStyle,
             BSTR *pbstrFormat) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetFormat2(
             BSTR bstrCellStyle,
             BSTR bstrFormat) = 0;

        virtual HRESULT STDMETHODCALLTYPE GetCellClass(
             BSTR bstrCellStyle,
             int *cellClass) = 0;

        virtual HRESULT STDMETHODCALLTYPE SetCellClass(
             BSTR bstrCellStyle,
             int cellClass) = 0;

        virtual HRESULT STDMETHODCALLTYPE GetRotation(
             BSTR bstrCellStyle,
             double *rotation) = 0;

        virtual HRESULT STDMETHODCALLTYPE SetRotation(
             BSTR bstrCellStyle,
             double rotation) = 0;

        virtual HRESULT STDMETHODCALLTYPE GetIsMergeAllEnabled(
             BSTR bstrCellStyle,
             VARIANT_BOOL *bEnable) = 0;

        virtual HRESULT STDMETHODCALLTYPE EnableMergeAll(
             BSTR bstrCellStyle,
             VARIANT_BOOL bEnable) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetGridLineWeight2(
             BSTR bstrCellStyle,
             ZcGridLineType gridLineType,
             ZCAD_LWEIGHT *lineweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetGridLineWeight2(
             BSTR bstrCellStyle,
             ZcGridLineType gridLineTypes,
             ZCAD_LWEIGHT lineweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetGridColor2(
             BSTR bstrCellStyle,
             ZcGridLineType gridLineType,
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetGridColor2(
             BSTR bstrCellStyle,
             ZcGridLineType gridLineTypes,
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetGridVisibility2(
             BSTR bstrCellStyle,
             ZcGridLineType gridLineType,
             VARIANT_BOOL *bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetGridVisibility2(
             BSTR bstrCellStyle,
             ZcGridLineType gridLineTypes,
             VARIANT_BOOL bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TemplateId(
             LONG_PTR *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TemplateId(
             LONG_PTR val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetTemplateId(
             LONG_PTR val,
            ZcMergeCellStyleOption option) = 0;

    };

#else

    typedef struct IZcadTableStyleVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadTableStyle * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadTableStyle * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadTableStyle * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadTableStyle * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadTableStyle * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadTableStyle * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadTableStyle * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadTableStyle * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadTableStyle * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadTableStyle * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadTableStyle * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadTableStyle * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadTableStyle * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadTableStyle * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadTableStyle * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadTableStyle * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadTableStyle * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadTableStyle * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadTableStyle * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadTableStyle * This);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadTableStyle * This,
             BSTR *bstrValue);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadTableStyle * This,
             BSTR bstrValue);

         HRESULT ( STDMETHODCALLTYPE *get_Description )(
            IZcadTableStyle * This,
             BSTR *bstr);

         HRESULT ( STDMETHODCALLTYPE *put_Description )(
            IZcadTableStyle * This,
             BSTR bstrValue);

         HRESULT ( STDMETHODCALLTYPE *get_BitFlags )(
            IZcadTableStyle * This,
             long *bitFlag);

         HRESULT ( STDMETHODCALLTYPE *put_BitFlags )(
            IZcadTableStyle * This,
             long bitFlag);

         HRESULT ( STDMETHODCALLTYPE *get_FlowDirection )(
            IZcadTableStyle * This,
             ZcTableDirection *pFlow);

         HRESULT ( STDMETHODCALLTYPE *put_FlowDirection )(
            IZcadTableStyle * This,
             ZcTableDirection flow);

         HRESULT ( STDMETHODCALLTYPE *get_HorzCellMargin )(
            IZcadTableStyle * This,
             double *dHorzCellMargin);

         HRESULT ( STDMETHODCALLTYPE *put_HorzCellMargin )(
            IZcadTableStyle * This,
             double dHorzCellMargin);

         HRESULT ( STDMETHODCALLTYPE *get_VertCellMargin )(
            IZcadTableStyle * This,
             double *dVertCellMargin);

         HRESULT ( STDMETHODCALLTYPE *put_VertCellMargin )(
            IZcadTableStyle * This,
             double dVertCellmargin);

         HRESULT ( STDMETHODCALLTYPE *get_TitleSuppressed )(
            IZcadTableStyle * This,
             VARIANT_BOOL *bValue);

         HRESULT ( STDMETHODCALLTYPE *put_TitleSuppressed )(
            IZcadTableStyle * This,
             VARIANT_BOOL bValue);

         HRESULT ( STDMETHODCALLTYPE *get_HeaderSuppressed )(
            IZcadTableStyle * This,
             VARIANT_BOOL *bValue);

         HRESULT ( STDMETHODCALLTYPE *put_HeaderSuppressed )(
            IZcadTableStyle * This,
             VARIANT_BOOL bValue);

         HRESULT ( STDMETHODCALLTYPE *GetTextStyle )(
            IZcadTableStyle * This,
             ZcRowType rowType,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *SetTextStyle )(
            IZcadTableStyle * This,
             int rowTypes,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *GetTextHeight )(
            IZcadTableStyle * This,
             ZcRowType rowType,
             double *pTextHeight);

         HRESULT ( STDMETHODCALLTYPE *SetTextHeight )(
            IZcadTableStyle * This,
             int rowTypes,
             double textHeight);

         HRESULT ( STDMETHODCALLTYPE *GetAlignment )(
            IZcadTableStyle * This,
             ZcRowType rowType,
             ZcCellAlignment *pCellAlignment);

         HRESULT ( STDMETHODCALLTYPE *SetAlignment )(
            IZcadTableStyle * This,
             int rowTypes,
             ZcCellAlignment cellAlignment);

         HRESULT ( STDMETHODCALLTYPE *GetColor )(
            IZcadTableStyle * This,
             ZcRowType rowType,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *SetColor )(
            IZcadTableStyle * This,
             int rowTypes,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *GetBackgroundColor )(
            IZcadTableStyle * This,
             ZcRowType rowType,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *SetBackgroundColor )(
            IZcadTableStyle * This,
             int rowTypes,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *GetBackgroundColorNone )(
            IZcadTableStyle * This,
             ZcRowType rowType,
             VARIANT_BOOL *bValue);

         HRESULT ( STDMETHODCALLTYPE *SetBackgroundColorNone )(
            IZcadTableStyle * This,
             int rowTypes,
             VARIANT_BOOL *bValue);

         HRESULT ( STDMETHODCALLTYPE *GetGridLineWeight )(
            IZcadTableStyle * This,
             ZcGridLineType gridLineType,
             ZcRowType rowType,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *SetGridLineWeight )(
            IZcadTableStyle * This,
             int gridLineTypes,
             int rowTypes,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *GetGridColor )(
            IZcadTableStyle * This,
             ZcGridLineType gridLineType,
             ZcRowType rowType,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *SetGridColor )(
            IZcadTableStyle * This,
             int gridLineTypes,
             int rowTypes,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *GetGridVisibility )(
            IZcadTableStyle * This,
             ZcGridLineType gridLineType,
             ZcRowType rowType,
             VARIANT_BOOL *bValue);

         HRESULT ( STDMETHODCALLTYPE *SetGridVisibility )(
            IZcadTableStyle * This,
             int gridLineTypes,
             int rowTypes,
             VARIANT_BOOL bValue);

         HRESULT ( STDMETHODCALLTYPE *GetDataType )(
            IZcadTableStyle * This,
             ZcRowType rowType,
             ZcValueDataType *pDataType,
             ZcValueUnitType *pUnitType);

         HRESULT ( STDMETHODCALLTYPE *SetDataType )(
            IZcadTableStyle * This,
             int rowTypes,
             ZcValueDataType nDataType,
             ZcValueUnitType nUnitType);

         HRESULT ( STDMETHODCALLTYPE *GetFormat )(
            IZcadTableStyle * This,
             ZcRowType rowType,
             BSTR *pVal);

         HRESULT ( STDMETHODCALLTYPE *SetFormat )(
            IZcadTableStyle * This,
             int rowTypes,
             BSTR val);

         HRESULT ( STDMETHODCALLTYPE *CreateCellStyle )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle);

         HRESULT ( STDMETHODCALLTYPE *CreateCellStyleFromStyle )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             BSTR bstrSourceCellStyle);

         HRESULT ( STDMETHODCALLTYPE *RenameCellStyle )(
            IZcadTableStyle * This,
             BSTR bstrOldName,
             BSTR bstrNewName);

         HRESULT ( STDMETHODCALLTYPE *DeleteCellStyle )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle);

         HRESULT ( STDMETHODCALLTYPE *GetUniqueCellStyleName )(
            IZcadTableStyle * This,
             BSTR pszBaseName,
             BSTR *pbstrUniqueName);

         HRESULT ( STDMETHODCALLTYPE *GetIsCellStyleInUse )(
            IZcadTableStyle * This,
             BSTR pszCellStyle,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *get_NumCellStyles )(
            IZcadTableStyle * This,
             long *numCellStyles);

         HRESULT ( STDMETHODCALLTYPE *GetCellStyles )(
            IZcadTableStyle * This,
             VARIANT *cellStylesArray);

         HRESULT ( STDMETHODCALLTYPE *GetTextStyleId )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             LONG_PTR *pVal);

         HRESULT ( STDMETHODCALLTYPE *SetTextStyleId )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             LONG_PTR val);

         HRESULT ( STDMETHODCALLTYPE *GetTextHeight2 )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             double *pHeight);

         HRESULT ( STDMETHODCALLTYPE *SetTextHeight2 )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             double height);

         HRESULT ( STDMETHODCALLTYPE *GetAlignment2 )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             ZcCellAlignment *pCellAlignment);

         HRESULT ( STDMETHODCALLTYPE *SetAlignment2 )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             ZcCellAlignment cellAlignment);

         HRESULT ( STDMETHODCALLTYPE *GetColor2 )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             IZcadZcCmColor **color);

         HRESULT ( STDMETHODCALLTYPE *SetColor2 )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             IZcadZcCmColor *color);

         HRESULT ( STDMETHODCALLTYPE *GetBackgroundColor2 )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             IZcadZcCmColor **color);

         HRESULT ( STDMETHODCALLTYPE *SetBackgroundColor2 )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             IZcadZcCmColor *color);

         HRESULT ( STDMETHODCALLTYPE *GetDataType2 )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             ZcValueDataType *pDataType,
             ZcValueUnitType *pUnitType);

         HRESULT ( STDMETHODCALLTYPE *SetDataType2 )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             ZcValueDataType nDataType,
             ZcValueUnitType nUnitType);

         HRESULT ( STDMETHODCALLTYPE *GetFormat2 )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             BSTR *pbstrFormat);

         HRESULT ( STDMETHODCALLTYPE *SetFormat2 )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             BSTR bstrFormat);

        HRESULT ( STDMETHODCALLTYPE *GetCellClass )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             int *cellClass);

        HRESULT ( STDMETHODCALLTYPE *SetCellClass )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             int cellClass);

        HRESULT ( STDMETHODCALLTYPE *GetRotation )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             double *rotation);

        HRESULT ( STDMETHODCALLTYPE *SetRotation )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             double rotation);

        HRESULT ( STDMETHODCALLTYPE *GetIsMergeAllEnabled )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             VARIANT_BOOL *bEnable);

        HRESULT ( STDMETHODCALLTYPE *EnableMergeAll )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             VARIANT_BOOL bEnable);

         HRESULT ( STDMETHODCALLTYPE *GetGridLineWeight2 )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             ZcGridLineType gridLineType,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *SetGridLineWeight2 )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             ZcGridLineType gridLineTypes,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *GetGridColor2 )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             ZcGridLineType gridLineType,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *SetGridColor2 )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             ZcGridLineType gridLineTypes,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *GetGridVisibility2 )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             ZcGridLineType gridLineType,
             VARIANT_BOOL *bValue);

         HRESULT ( STDMETHODCALLTYPE *SetGridVisibility2 )(
            IZcadTableStyle * This,
             BSTR bstrCellStyle,
             ZcGridLineType gridLineTypes,
             VARIANT_BOOL bValue);

         HRESULT ( STDMETHODCALLTYPE *get_TemplateId )(
            IZcadTableStyle * This,
             LONG_PTR *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_TemplateId )(
            IZcadTableStyle * This,
             LONG_PTR val);

         HRESULT ( STDMETHODCALLTYPE *SetTemplateId )(
            IZcadTableStyle * This,
             LONG_PTR val,
            ZcMergeCellStyleOption option);

        END_INTERFACE
    } IZcadTableStyleVtbl;

    interface IZcadTableStyle
    {
        CONST_VTBL struct IZcadTableStyleVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadTableStyle_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadTableStyle_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadTableStyle_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadTableStyle_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadTableStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadTableStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadTableStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadTableStyle_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadTableStyle_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadTableStyle_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadTableStyle_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadTableStyle_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadTableStyle_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadTableStyle_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadTableStyle_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadTableStyle_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadTableStyle_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadTableStyle_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadTableStyle_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadTableStyle_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadTableStyle_get_Name(This,bstrValue)	\
    ((This)->lpVtbl -> get_Name(This,bstrValue))

#define IZcadTableStyle_put_Name(This,bstrValue)	\
    ((This)->lpVtbl -> put_Name(This,bstrValue))

#define IZcadTableStyle_get_Description(This,bstr)	\
    ((This)->lpVtbl -> get_Description(This,bstr))

#define IZcadTableStyle_put_Description(This,bstrValue)	\
    ((This)->lpVtbl -> put_Description(This,bstrValue))

#define IZcadTableStyle_get_BitFlags(This,bitFlag)	\
    ((This)->lpVtbl -> get_BitFlags(This,bitFlag))

#define IZcadTableStyle_put_BitFlags(This,bitFlag)	\
    ((This)->lpVtbl -> put_BitFlags(This,bitFlag))

#define IZcadTableStyle_get_FlowDirection(This,pFlow)	\
    ((This)->lpVtbl -> get_FlowDirection(This,pFlow))

#define IZcadTableStyle_put_FlowDirection(This,flow)	\
    ((This)->lpVtbl -> put_FlowDirection(This,flow))

#define IZcadTableStyle_get_HorzCellMargin(This,dHorzCellMargin)	\
    ((This)->lpVtbl -> get_HorzCellMargin(This,dHorzCellMargin))

#define IZcadTableStyle_put_HorzCellMargin(This,dHorzCellMargin)	\
    ((This)->lpVtbl -> put_HorzCellMargin(This,dHorzCellMargin))

#define IZcadTableStyle_get_VertCellMargin(This,dVertCellMargin)	\
    ((This)->lpVtbl -> get_VertCellMargin(This,dVertCellMargin))

#define IZcadTableStyle_put_VertCellMargin(This,dVertCellmargin)	\
    ((This)->lpVtbl -> put_VertCellMargin(This,dVertCellmargin))

#define IZcadTableStyle_get_TitleSuppressed(This,bValue)	\
    ((This)->lpVtbl -> get_TitleSuppressed(This,bValue))

#define IZcadTableStyle_put_TitleSuppressed(This,bValue)	\
    ((This)->lpVtbl -> put_TitleSuppressed(This,bValue))

#define IZcadTableStyle_get_HeaderSuppressed(This,bValue)	\
    ((This)->lpVtbl -> get_HeaderSuppressed(This,bValue))

#define IZcadTableStyle_put_HeaderSuppressed(This,bValue)	\
    ((This)->lpVtbl -> put_HeaderSuppressed(This,bValue))

#define IZcadTableStyle_GetTextStyle(This,rowType,bstrName)	\
    ((This)->lpVtbl -> GetTextStyle(This,rowType,bstrName))

#define IZcadTableStyle_SetTextStyle(This,rowTypes,bstrName)	\
    ((This)->lpVtbl -> SetTextStyle(This,rowTypes,bstrName))

#define IZcadTableStyle_GetTextHeight(This,rowType,pTextHeight)	\
    ((This)->lpVtbl -> GetTextHeight(This,rowType,pTextHeight))

#define IZcadTableStyle_SetTextHeight(This,rowTypes,textHeight)	\
    ((This)->lpVtbl -> SetTextHeight(This,rowTypes,textHeight))

#define IZcadTableStyle_GetAlignment(This,rowType,pCellAlignment)	\
    ((This)->lpVtbl -> GetAlignment(This,rowType,pCellAlignment))

#define IZcadTableStyle_SetAlignment(This,rowTypes,cellAlignment)	\
    ((This)->lpVtbl -> SetAlignment(This,rowTypes,cellAlignment))

#define IZcadTableStyle_GetColor(This,rowType,pColor)	\
    ((This)->lpVtbl -> GetColor(This,rowType,pColor))

#define IZcadTableStyle_SetColor(This,rowTypes,pColor)	\
    ((This)->lpVtbl -> SetColor(This,rowTypes,pColor))

#define IZcadTableStyle_GetBackgroundColor(This,rowType,pColor)	\
    ((This)->lpVtbl -> GetBackgroundColor(This,rowType,pColor))

#define IZcadTableStyle_SetBackgroundColor(This,rowTypes,pColor)	\
    ((This)->lpVtbl -> SetBackgroundColor(This,rowTypes,pColor))

#define IZcadTableStyle_GetBackgroundColorNone(This,rowType,bValue)	\
    ((This)->lpVtbl -> GetBackgroundColorNone(This,rowType,bValue))

#define IZcadTableStyle_SetBackgroundColorNone(This,rowTypes,bValue)	\
    ((This)->lpVtbl -> SetBackgroundColorNone(This,rowTypes,bValue))

#define IZcadTableStyle_GetGridLineWeight(This,gridLineType,rowType,lineweight)	\
    ((This)->lpVtbl -> GetGridLineWeight(This,gridLineType,rowType,lineweight))

#define IZcadTableStyle_SetGridLineWeight(This,gridLineTypes,rowTypes,lineweight)	\
    ((This)->lpVtbl -> SetGridLineWeight(This,gridLineTypes,rowTypes,lineweight))

#define IZcadTableStyle_GetGridColor(This,gridLineType,rowType,pColor)	\
    ((This)->lpVtbl -> GetGridColor(This,gridLineType,rowType,pColor))

#define IZcadTableStyle_SetGridColor(This,gridLineTypes,rowTypes,pColor)	\
    ((This)->lpVtbl -> SetGridColor(This,gridLineTypes,rowTypes,pColor))

#define IZcadTableStyle_GetGridVisibility(This,gridLineType,rowType,bValue)	\
    ((This)->lpVtbl -> GetGridVisibility(This,gridLineType,rowType,bValue))

#define IZcadTableStyle_SetGridVisibility(This,gridLineTypes,rowTypes,bValue)	\
    ((This)->lpVtbl -> SetGridVisibility(This,gridLineTypes,rowTypes,bValue))

#define IZcadTableStyle_GetDataType(This,rowType,pDataType,pUnitType)	\
    ((This)->lpVtbl -> GetDataType(This,rowType,pDataType,pUnitType))

#define IZcadTableStyle_SetDataType(This,rowTypes,nDataType,nUnitType)	\
    ((This)->lpVtbl -> SetDataType(This,rowTypes,nDataType,nUnitType))

#define IZcadTableStyle_GetFormat(This,rowType,pVal)	\
    ((This)->lpVtbl -> GetFormat(This,rowType,pVal))

#define IZcadTableStyle_SetFormat(This,rowTypes,val)	\
    ((This)->lpVtbl -> SetFormat(This,rowTypes,val))

#define IZcadTableStyle_CreateCellStyle(This,bstrCellStyle)	\
    ((This)->lpVtbl -> CreateCellStyle(This,bstrCellStyle))

#define IZcadTableStyle_CreateCellStyleFromStyle(This,bstrCellStyle,bstrSourceCellStyle)	\
    ((This)->lpVtbl -> CreateCellStyleFromStyle(This,bstrCellStyle,bstrSourceCellStyle))

#define IZcadTableStyle_RenameCellStyle(This,bstrOldName,bstrNewName)	\
    ((This)->lpVtbl -> RenameCellStyle(This,bstrOldName,bstrNewName))

#define IZcadTableStyle_DeleteCellStyle(This,bstrCellStyle)	\
    ((This)->lpVtbl -> DeleteCellStyle(This,bstrCellStyle))

#define IZcadTableStyle_GetUniqueCellStyleName(This,pszBaseName,pbstrUniqueName)	\
    ((This)->lpVtbl -> GetUniqueCellStyleName(This,pszBaseName,pbstrUniqueName))

#define IZcadTableStyle_GetIsCellStyleInUse(This,pszCellStyle,pVal)	\
    ((This)->lpVtbl -> GetIsCellStyleInUse(This,pszCellStyle,pVal))

#define IZcadTableStyle_get_NumCellStyles(This,numCellStyles)	\
    ((This)->lpVtbl -> get_NumCellStyles(This,numCellStyles))

#define IZcadTableStyle_GetCellStyles(This,cellStylesArray)	\
    ((This)->lpVtbl -> GetCellStyles(This,cellStylesArray))

#define IZcadTableStyle_GetTextStyleId(This,bstrCellStyle,pVal)	\
    ((This)->lpVtbl -> GetTextStyleId(This,bstrCellStyle,pVal))

#define IZcadTableStyle_SetTextStyleId(This,bstrCellStyle,val)	\
    ((This)->lpVtbl -> SetTextStyleId(This,bstrCellStyle,val))

#define IZcadTableStyle_GetTextHeight2(This,bstrCellStyle,pHeight)	\
    ((This)->lpVtbl -> GetTextHeight2(This,bstrCellStyle,pHeight))

#define IZcadTableStyle_SetTextHeight2(This,bstrCellStyle,height)	\
    ((This)->lpVtbl -> SetTextHeight2(This,bstrCellStyle,height))

#define IZcadTableStyle_GetAlignment2(This,bstrCellStyle,pCellAlignment)	\
    ((This)->lpVtbl -> GetAlignment2(This,bstrCellStyle,pCellAlignment))

#define IZcadTableStyle_SetAlignment2(This,bstrCellStyle,cellAlignment)	\
    ((This)->lpVtbl -> SetAlignment2(This,bstrCellStyle,cellAlignment))

#define IZcadTableStyle_GetColor2(This,bstrCellStyle,color)	\
    ((This)->lpVtbl -> GetColor2(This,bstrCellStyle,color))

#define IZcadTableStyle_SetColor2(This,bstrCellStyle,color)	\
    ((This)->lpVtbl -> SetColor2(This,bstrCellStyle,color))

#define IZcadTableStyle_GetBackgroundColor2(This,bstrCellStyle,color)	\
    ((This)->lpVtbl -> GetBackgroundColor2(This,bstrCellStyle,color))

#define IZcadTableStyle_SetBackgroundColor2(This,bstrCellStyle,color)	\
    ((This)->lpVtbl -> SetBackgroundColor2(This,bstrCellStyle,color))

#define IZcadTableStyle_GetDataType2(This,bstrCellStyle,pDataType,pUnitType)	\
    ((This)->lpVtbl -> GetDataType2(This,bstrCellStyle,pDataType,pUnitType))

#define IZcadTableStyle_SetDataType2(This,bstrCellStyle,nDataType,nUnitType)	\
    ((This)->lpVtbl -> SetDataType2(This,bstrCellStyle,nDataType,nUnitType))

#define IZcadTableStyle_GetFormat2(This,bstrCellStyle,pbstrFormat)	\
    ((This)->lpVtbl -> GetFormat2(This,bstrCellStyle,pbstrFormat))

#define IZcadTableStyle_SetFormat2(This,bstrCellStyle,bstrFormat)	\
    ((This)->lpVtbl -> SetFormat2(This,bstrCellStyle,bstrFormat))

#define IZcadTableStyle_GetCellClass(This,bstrCellStyle,cellClass)	\
    ((This)->lpVtbl -> GetCellClass(This,bstrCellStyle,cellClass))

#define IZcadTableStyle_SetCellClass(This,bstrCellStyle,cellClass)	\
    ((This)->lpVtbl -> SetCellClass(This,bstrCellStyle,cellClass))

#define IZcadTableStyle_GetRotation(This,bstrCellStyle,rotation)	\
    ((This)->lpVtbl -> GetRotation(This,bstrCellStyle,rotation))

#define IZcadTableStyle_SetRotation(This,bstrCellStyle,rotation)	\
    ((This)->lpVtbl -> SetRotation(This,bstrCellStyle,rotation))

#define IZcadTableStyle_GetIsMergeAllEnabled(This,bstrCellStyle,bEnable)	\
    ((This)->lpVtbl -> GetIsMergeAllEnabled(This,bstrCellStyle,bEnable))

#define IZcadTableStyle_EnableMergeAll(This,bstrCellStyle,bEnable)	\
    ((This)->lpVtbl -> EnableMergeAll(This,bstrCellStyle,bEnable))

#define IZcadTableStyle_GetGridLineWeight2(This,bstrCellStyle,gridLineType,lineweight)	\
    ((This)->lpVtbl -> GetGridLineWeight2(This,bstrCellStyle,gridLineType,lineweight))

#define IZcadTableStyle_SetGridLineWeight2(This,bstrCellStyle,gridLineTypes,lineweight)	\
    ((This)->lpVtbl -> SetGridLineWeight2(This,bstrCellStyle,gridLineTypes,lineweight))

#define IZcadTableStyle_GetGridColor2(This,bstrCellStyle,gridLineType,pColor)	\
    ((This)->lpVtbl -> GetGridColor2(This,bstrCellStyle,gridLineType,pColor))

#define IZcadTableStyle_SetGridColor2(This,bstrCellStyle,gridLineTypes,pColor)	\
    ((This)->lpVtbl -> SetGridColor2(This,bstrCellStyle,gridLineTypes,pColor))

#define IZcadTableStyle_GetGridVisibility2(This,bstrCellStyle,gridLineType,bValue)	\
    ((This)->lpVtbl -> GetGridVisibility2(This,bstrCellStyle,gridLineType,bValue))

#define IZcadTableStyle_SetGridVisibility2(This,bstrCellStyle,gridLineTypes,bValue)	\
    ((This)->lpVtbl -> SetGridVisibility2(This,bstrCellStyle,gridLineTypes,bValue))

#define IZcadTableStyle_get_TemplateId(This,pVal)	\
    ((This)->lpVtbl -> get_TemplateId(This,pVal))

#define IZcadTableStyle_put_TemplateId(This,val)	\
    ((This)->lpVtbl -> put_TemplateId(This,val))

#define IZcadTableStyle_SetTemplateId(This,val,option)	\
    ((This)->lpVtbl -> SetTemplateId(This,val,option))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadTableStyle,0xEC923111,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923111-5A17-11E7-B72E-BC5FF42AC839")
ZcadTableStyle;
#endif

#ifndef __IZcadSectionSettings_INTERFACE_DEFINED__
#define __IZcadSectionSettings_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadSectionSettings,0xEC9230B0,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9230B0-5A17-11E7-B72E-BC5FF42AC839")
    IZcadSectionSettings : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_CurrentSectionType(
             ZcSectionType *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_CurrentSectionType(
             ZcSectionType val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetSectionTypeSettings(
             ZcSectionType secType,
             IZcadSectionTypeSettings **pUnk) = 0;

    };

#else

    typedef struct IZcadSectionSettingsVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadSectionSettings * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadSectionSettings * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadSectionSettings * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadSectionSettings * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadSectionSettings * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadSectionSettings * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadSectionSettings * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadSectionSettings * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadSectionSettings * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadSectionSettings * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadSectionSettings * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadSectionSettings * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadSectionSettings * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadSectionSettings * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadSectionSettings * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadSectionSettings * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadSectionSettings * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadSectionSettings * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadSectionSettings * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadSectionSettings * This);

         HRESULT ( STDMETHODCALLTYPE *get_CurrentSectionType )(
            IZcadSectionSettings * This,
             ZcSectionType *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_CurrentSectionType )(
            IZcadSectionSettings * This,
             ZcSectionType val);

         HRESULT ( STDMETHODCALLTYPE *GetSectionTypeSettings )(
            IZcadSectionSettings * This,
             ZcSectionType secType,
             IZcadSectionTypeSettings **pUnk);

        END_INTERFACE
    } IZcadSectionSettingsVtbl;

    interface IZcadSectionSettings
    {
        CONST_VTBL struct IZcadSectionSettingsVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadSectionSettings_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadSectionSettings_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadSectionSettings_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadSectionSettings_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadSectionSettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadSectionSettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadSectionSettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadSectionSettings_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadSectionSettings_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadSectionSettings_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadSectionSettings_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadSectionSettings_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadSectionSettings_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadSectionSettings_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadSectionSettings_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadSectionSettings_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadSectionSettings_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadSectionSettings_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadSectionSettings_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadSectionSettings_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadSectionSettings_get_CurrentSectionType(This,pVal)	\
    ((This)->lpVtbl -> get_CurrentSectionType(This,pVal))

#define IZcadSectionSettings_put_CurrentSectionType(This,val)	\
    ((This)->lpVtbl -> put_CurrentSectionType(This,val))

#define IZcadSectionSettings_GetSectionTypeSettings(This,secType,pUnk)	\
    ((This)->lpVtbl -> GetSectionTypeSettings(This,secType,pUnk))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadSectionSettings,0xEC923094,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923094-5A17-11E7-B72E-BC5FF42AC839")
ZcadSectionSettings;
#endif

DEFINE_GUID(CLSID_ZcadSectionTypeSettings,0xEC923027,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923027-5A17-11E7-B72E-BC5FF42AC839")
ZcadSectionTypeSettings;
#endif

#ifndef __IZcadMLeaderStyle_INTERFACE_DEFINED__
#define __IZcadMLeaderStyle_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadMLeaderStyle,0xEC923040,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923040-5A17-11E7-B72E-BC5FF42AC839")
    IZcadMLeaderStyle : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Name(
             BSTR *name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Name(
             BSTR name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Description(
             BSTR *description) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Description(
             BSTR description) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BitFlags(
             long *bitFlag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BitFlags(
             long bitFlag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ContentType(
             ZcMLeaderContentType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ContentType(
             ZcMLeaderContentType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DrawMLeaderOrderType(
             ZcDrawMLeaderOrderType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DrawMLeaderOrderType(
             ZcDrawMLeaderOrderType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DrawLeaderOrderType(
             ZcDrawLeaderOrderType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DrawLeaderOrderType(
             ZcDrawLeaderOrderType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MaxLeaderSegmentsPoints(
             int *number) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_MaxLeaderSegmentsPoints(
             int number) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_FirstSegmentAngleConstraint(
             ZcSegmentAngleType *constraint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_FirstSegmentAngleConstraint(
             ZcSegmentAngleType constraint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SecondSegmentAngleConstraint(
             ZcSegmentAngleType *constraint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SecondSegmentAngleConstraint(
             ZcSegmentAngleType constraint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LeaderLineType(
             ZcMLeaderType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LeaderLineType(
             ZcMLeaderType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LeaderLineColor(
             IZcadZcCmColor **color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LeaderLineColor(
             IZcadZcCmColor *color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LeaderLineTypeId(
             ZCAD_LTYPE *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LeaderLineTypeId(
             ZCAD_LTYPE type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LeaderLineWeight(
             ZcLineWeight *weight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LeaderLineWeight(
             ZcLineWeight weight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EnableLanding(
             VARIANT_BOOL *enabled) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_EnableLanding(
             VARIANT_BOOL enabled) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LandingGap(
             double *landingGap) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LandingGap(
             double landingGap) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EnableDogleg(
             VARIANT_BOOL *enabled) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_EnableDogleg(
             VARIANT_BOOL enabled) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DoglegLength(
             double *doglegLength) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DoglegLength(
             double doglegLength) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArrowSymbol(
             BSTR *name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArrowSymbol(
             BSTR name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArrowSize(
             double *size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArrowSize(
             double size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextStyle(
             BSTR *name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextStyle(
             BSTR name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextAttachmentDirection(
             ZcTextAttachmentDirection *dir) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextAttachmentDirection(
             ZcTextAttachmentDirection dir) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextLeftAttachmentType(
             ZcTextAttachmentType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextLeftAttachmentType(
             ZcTextAttachmentType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextRightAttachmentType(
             ZcTextAttachmentType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextRightAttachmentType(
             ZcTextAttachmentType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextTopAttachmentType(
             ZcVerticalTextAttachmentType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextTopAttachmentType(
             ZcVerticalTextAttachmentType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextBottomAttachmentType(
             ZcVerticalTextAttachmentType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextBottomAttachmentType(
             ZcVerticalTextAttachmentType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextColor(
             IZcadZcCmColor **color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextColor(
             IZcadZcCmColor *color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextHeight(
             double *height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextHeight(
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EnableFrameText(
             VARIANT_BOOL *enabled) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_EnableFrameText(
             VARIANT_BOOL enabled) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AlignSpace(
             double *alignSpace) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AlignSpace(
             double alignSpace) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Block(
             BSTR *name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Block(
             BSTR name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BlockColor(
             IZcadZcCmColor **color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BlockColor(
             IZcadZcCmColor *color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EnableBlockScale(
             VARIANT_BOOL *enabled) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_EnableBlockScale(
             VARIANT_BOOL enabled) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BlockScale(
             double *scaleFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BlockScale(
             double scaleFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EnableBlockRotation(
             VARIANT_BOOL *enabled) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_EnableBlockRotation(
             VARIANT_BOOL enabled) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BlockRotation(
             double *rotation) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BlockRotation(
             double rotation) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BlockConnectionType(
             ZcBlockConnectionType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BlockConnectionType(
             ZcBlockConnectionType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ScaleFactor(
             double *Scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ScaleFactor(
             double Scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_OverwritePropChanged(
             VARIANT_BOOL *changed) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Annotative(
             VARIANT_BOOL *annotative) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Annotative(
             VARIANT_BOOL annotative) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BreakSize(
             double *size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BreakSize(
             double size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextString(
             BSTR *text) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextString(
             BSTR text) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextAngleType(
             ZcTextAngleType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextAngleType(
             ZcTextAngleType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextAlignmentType(
             ZcTextAlignmentType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextAlignmentType(
             ZcTextAlignmentType type) = 0;

    };

#else

    typedef struct IZcadMLeaderStyleVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadMLeaderStyle * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadMLeaderStyle * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadMLeaderStyle * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadMLeaderStyle * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadMLeaderStyle * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadMLeaderStyle * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadMLeaderStyle * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadMLeaderStyle * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadMLeaderStyle * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadMLeaderStyle * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadMLeaderStyle * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadMLeaderStyle * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadMLeaderStyle * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadMLeaderStyle * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadMLeaderStyle * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadMLeaderStyle * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadMLeaderStyle * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadMLeaderStyle * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadMLeaderStyle * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadMLeaderStyle * This);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadMLeaderStyle * This,
             BSTR *name);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadMLeaderStyle * This,
             BSTR name);

         HRESULT ( STDMETHODCALLTYPE *get_Description )(
            IZcadMLeaderStyle * This,
             BSTR *description);

         HRESULT ( STDMETHODCALLTYPE *put_Description )(
            IZcadMLeaderStyle * This,
             BSTR description);

         HRESULT ( STDMETHODCALLTYPE *get_BitFlags )(
            IZcadMLeaderStyle * This,
             long *bitFlag);

         HRESULT ( STDMETHODCALLTYPE *put_BitFlags )(
            IZcadMLeaderStyle * This,
             long bitFlag);

         HRESULT ( STDMETHODCALLTYPE *get_ContentType )(
            IZcadMLeaderStyle * This,
             ZcMLeaderContentType *type);

         HRESULT ( STDMETHODCALLTYPE *put_ContentType )(
            IZcadMLeaderStyle * This,
             ZcMLeaderContentType type);

         HRESULT ( STDMETHODCALLTYPE *get_DrawMLeaderOrderType )(
            IZcadMLeaderStyle * This,
             ZcDrawMLeaderOrderType *type);

         HRESULT ( STDMETHODCALLTYPE *put_DrawMLeaderOrderType )(
            IZcadMLeaderStyle * This,
             ZcDrawMLeaderOrderType type);

         HRESULT ( STDMETHODCALLTYPE *get_DrawLeaderOrderType )(
            IZcadMLeaderStyle * This,
             ZcDrawLeaderOrderType *type);

         HRESULT ( STDMETHODCALLTYPE *put_DrawLeaderOrderType )(
            IZcadMLeaderStyle * This,
             ZcDrawLeaderOrderType type);

         HRESULT ( STDMETHODCALLTYPE *get_MaxLeaderSegmentsPoints )(
            IZcadMLeaderStyle * This,
             int *number);

         HRESULT ( STDMETHODCALLTYPE *put_MaxLeaderSegmentsPoints )(
            IZcadMLeaderStyle * This,
             int number);

         HRESULT ( STDMETHODCALLTYPE *get_FirstSegmentAngleConstraint )(
            IZcadMLeaderStyle * This,
             ZcSegmentAngleType *constraint);

         HRESULT ( STDMETHODCALLTYPE *put_FirstSegmentAngleConstraint )(
            IZcadMLeaderStyle * This,
             ZcSegmentAngleType constraint);

         HRESULT ( STDMETHODCALLTYPE *get_SecondSegmentAngleConstraint )(
            IZcadMLeaderStyle * This,
             ZcSegmentAngleType *constraint);

         HRESULT ( STDMETHODCALLTYPE *put_SecondSegmentAngleConstraint )(
            IZcadMLeaderStyle * This,
             ZcSegmentAngleType constraint);

         HRESULT ( STDMETHODCALLTYPE *get_LeaderLineType )(
            IZcadMLeaderStyle * This,
             ZcMLeaderType *type);

         HRESULT ( STDMETHODCALLTYPE *put_LeaderLineType )(
            IZcadMLeaderStyle * This,
             ZcMLeaderType type);

         HRESULT ( STDMETHODCALLTYPE *get_LeaderLineColor )(
            IZcadMLeaderStyle * This,
             IZcadZcCmColor **color);

         HRESULT ( STDMETHODCALLTYPE *put_LeaderLineColor )(
            IZcadMLeaderStyle * This,
             IZcadZcCmColor *color);

         HRESULT ( STDMETHODCALLTYPE *get_LeaderLineTypeId )(
            IZcadMLeaderStyle * This,
             ZCAD_LTYPE *type);

         HRESULT ( STDMETHODCALLTYPE *put_LeaderLineTypeId )(
            IZcadMLeaderStyle * This,
             ZCAD_LTYPE type);

         HRESULT ( STDMETHODCALLTYPE *get_LeaderLineWeight )(
            IZcadMLeaderStyle * This,
             ZcLineWeight *weight);

         HRESULT ( STDMETHODCALLTYPE *put_LeaderLineWeight )(
            IZcadMLeaderStyle * This,
             ZcLineWeight weight);

         HRESULT ( STDMETHODCALLTYPE *get_EnableLanding )(
            IZcadMLeaderStyle * This,
             VARIANT_BOOL *enabled);

         HRESULT ( STDMETHODCALLTYPE *put_EnableLanding )(
            IZcadMLeaderStyle * This,
             VARIANT_BOOL enabled);

         HRESULT ( STDMETHODCALLTYPE *get_LandingGap )(
            IZcadMLeaderStyle * This,
             double *landingGap);

         HRESULT ( STDMETHODCALLTYPE *put_LandingGap )(
            IZcadMLeaderStyle * This,
             double landingGap);

         HRESULT ( STDMETHODCALLTYPE *get_EnableDogleg )(
            IZcadMLeaderStyle * This,
             VARIANT_BOOL *enabled);

         HRESULT ( STDMETHODCALLTYPE *put_EnableDogleg )(
            IZcadMLeaderStyle * This,
             VARIANT_BOOL enabled);

         HRESULT ( STDMETHODCALLTYPE *get_DoglegLength )(
            IZcadMLeaderStyle * This,
             double *doglegLength);

         HRESULT ( STDMETHODCALLTYPE *put_DoglegLength )(
            IZcadMLeaderStyle * This,
             double doglegLength);

         HRESULT ( STDMETHODCALLTYPE *get_ArrowSymbol )(
            IZcadMLeaderStyle * This,
             BSTR *name);

         HRESULT ( STDMETHODCALLTYPE *put_ArrowSymbol )(
            IZcadMLeaderStyle * This,
             BSTR name);

         HRESULT ( STDMETHODCALLTYPE *get_ArrowSize )(
            IZcadMLeaderStyle * This,
             double *size);

         HRESULT ( STDMETHODCALLTYPE *put_ArrowSize )(
            IZcadMLeaderStyle * This,
             double size);

         HRESULT ( STDMETHODCALLTYPE *get_TextStyle )(
            IZcadMLeaderStyle * This,
             BSTR *name);

         HRESULT ( STDMETHODCALLTYPE *put_TextStyle )(
            IZcadMLeaderStyle * This,
             BSTR name);

         HRESULT ( STDMETHODCALLTYPE *get_TextAttachmentDirection )(
            IZcadMLeaderStyle * This,
             ZcTextAttachmentDirection *dir);

         HRESULT ( STDMETHODCALLTYPE *put_TextAttachmentDirection )(
            IZcadMLeaderStyle * This,
             ZcTextAttachmentDirection dir);

         HRESULT ( STDMETHODCALLTYPE *get_TextLeftAttachmentType )(
            IZcadMLeaderStyle * This,
             ZcTextAttachmentType *type);

         HRESULT ( STDMETHODCALLTYPE *put_TextLeftAttachmentType )(
            IZcadMLeaderStyle * This,
             ZcTextAttachmentType type);

         HRESULT ( STDMETHODCALLTYPE *get_TextRightAttachmentType )(
            IZcadMLeaderStyle * This,
             ZcTextAttachmentType *type);

         HRESULT ( STDMETHODCALLTYPE *put_TextRightAttachmentType )(
            IZcadMLeaderStyle * This,
             ZcTextAttachmentType type);

         HRESULT ( STDMETHODCALLTYPE *get_TextTopAttachmentType )(
            IZcadMLeaderStyle * This,
             ZcVerticalTextAttachmentType *type);

         HRESULT ( STDMETHODCALLTYPE *put_TextTopAttachmentType )(
            IZcadMLeaderStyle * This,
             ZcVerticalTextAttachmentType type);

         HRESULT ( STDMETHODCALLTYPE *get_TextBottomAttachmentType )(
            IZcadMLeaderStyle * This,
             ZcVerticalTextAttachmentType *type);

         HRESULT ( STDMETHODCALLTYPE *put_TextBottomAttachmentType )(
            IZcadMLeaderStyle * This,
             ZcVerticalTextAttachmentType type);

         HRESULT ( STDMETHODCALLTYPE *get_TextColor )(
            IZcadMLeaderStyle * This,
             IZcadZcCmColor **color);

         HRESULT ( STDMETHODCALLTYPE *put_TextColor )(
            IZcadMLeaderStyle * This,
             IZcadZcCmColor *color);

         HRESULT ( STDMETHODCALLTYPE *get_TextHeight )(
            IZcadMLeaderStyle * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_TextHeight )(
            IZcadMLeaderStyle * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_EnableFrameText )(
            IZcadMLeaderStyle * This,
             VARIANT_BOOL *enabled);

         HRESULT ( STDMETHODCALLTYPE *put_EnableFrameText )(
            IZcadMLeaderStyle * This,
             VARIANT_BOOL enabled);

         HRESULT ( STDMETHODCALLTYPE *get_AlignSpace )(
            IZcadMLeaderStyle * This,
             double *alignSpace);

         HRESULT ( STDMETHODCALLTYPE *put_AlignSpace )(
            IZcadMLeaderStyle * This,
             double alignSpace);

         HRESULT ( STDMETHODCALLTYPE *get_Block )(
            IZcadMLeaderStyle * This,
             BSTR *name);

         HRESULT ( STDMETHODCALLTYPE *put_Block )(
            IZcadMLeaderStyle * This,
             BSTR name);

         HRESULT ( STDMETHODCALLTYPE *get_BlockColor )(
            IZcadMLeaderStyle * This,
             IZcadZcCmColor **color);

         HRESULT ( STDMETHODCALLTYPE *put_BlockColor )(
            IZcadMLeaderStyle * This,
             IZcadZcCmColor *color);

         HRESULT ( STDMETHODCALLTYPE *get_EnableBlockScale )(
            IZcadMLeaderStyle * This,
             VARIANT_BOOL *enabled);

         HRESULT ( STDMETHODCALLTYPE *put_EnableBlockScale )(
            IZcadMLeaderStyle * This,
             VARIANT_BOOL enabled);

         HRESULT ( STDMETHODCALLTYPE *get_BlockScale )(
            IZcadMLeaderStyle * This,
             double *scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *put_BlockScale )(
            IZcadMLeaderStyle * This,
             double scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *get_EnableBlockRotation )(
            IZcadMLeaderStyle * This,
             VARIANT_BOOL *enabled);

         HRESULT ( STDMETHODCALLTYPE *put_EnableBlockRotation )(
            IZcadMLeaderStyle * This,
             VARIANT_BOOL enabled);

         HRESULT ( STDMETHODCALLTYPE *get_BlockRotation )(
            IZcadMLeaderStyle * This,
             double *rotation);

         HRESULT ( STDMETHODCALLTYPE *put_BlockRotation )(
            IZcadMLeaderStyle * This,
             double rotation);

         HRESULT ( STDMETHODCALLTYPE *get_BlockConnectionType )(
            IZcadMLeaderStyle * This,
             ZcBlockConnectionType *type);

         HRESULT ( STDMETHODCALLTYPE *put_BlockConnectionType )(
            IZcadMLeaderStyle * This,
             ZcBlockConnectionType type);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )(
            IZcadMLeaderStyle * This,
             double *Scale);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )(
            IZcadMLeaderStyle * This,
             double Scale);

         HRESULT ( STDMETHODCALLTYPE *get_OverwritePropChanged )(
            IZcadMLeaderStyle * This,
             VARIANT_BOOL *changed);

         HRESULT ( STDMETHODCALLTYPE *get_Annotative )(
            IZcadMLeaderStyle * This,
             VARIANT_BOOL *annotative);

         HRESULT ( STDMETHODCALLTYPE *put_Annotative )(
            IZcadMLeaderStyle * This,
             VARIANT_BOOL annotative);

         HRESULT ( STDMETHODCALLTYPE *get_BreakSize )(
            IZcadMLeaderStyle * This,
             double *size);

         HRESULT ( STDMETHODCALLTYPE *put_BreakSize )(
            IZcadMLeaderStyle * This,
             double size);

         HRESULT ( STDMETHODCALLTYPE *get_TextString )(
            IZcadMLeaderStyle * This,
             BSTR *text);

         HRESULT ( STDMETHODCALLTYPE *put_TextString )(
            IZcadMLeaderStyle * This,
             BSTR text);

         HRESULT ( STDMETHODCALLTYPE *get_TextAngleType )(
            IZcadMLeaderStyle * This,
             ZcTextAngleType *type);

         HRESULT ( STDMETHODCALLTYPE *put_TextAngleType )(
            IZcadMLeaderStyle * This,
             ZcTextAngleType type);

         HRESULT ( STDMETHODCALLTYPE *get_TextAlignmentType )(
            IZcadMLeaderStyle * This,
             ZcTextAlignmentType *type);

         HRESULT ( STDMETHODCALLTYPE *put_TextAlignmentType )(
            IZcadMLeaderStyle * This,
             ZcTextAlignmentType type);

        END_INTERFACE
    } IZcadMLeaderStyleVtbl;

    interface IZcadMLeaderStyle
    {
        CONST_VTBL struct IZcadMLeaderStyleVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadMLeaderStyle_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadMLeaderStyle_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadMLeaderStyle_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadMLeaderStyle_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadMLeaderStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadMLeaderStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadMLeaderStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadMLeaderStyle_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadMLeaderStyle_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadMLeaderStyle_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadMLeaderStyle_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadMLeaderStyle_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadMLeaderStyle_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadMLeaderStyle_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadMLeaderStyle_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadMLeaderStyle_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadMLeaderStyle_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadMLeaderStyle_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadMLeaderStyle_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadMLeaderStyle_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadMLeaderStyle_get_Name(This,name)	\
    ((This)->lpVtbl -> get_Name(This,name))

#define IZcadMLeaderStyle_put_Name(This,name)	\
    ((This)->lpVtbl -> put_Name(This,name))

#define IZcadMLeaderStyle_get_Description(This,description)	\
    ((This)->lpVtbl -> get_Description(This,description))

#define IZcadMLeaderStyle_put_Description(This,description)	\
    ((This)->lpVtbl -> put_Description(This,description))

#define IZcadMLeaderStyle_get_BitFlags(This,bitFlag)	\
    ((This)->lpVtbl -> get_BitFlags(This,bitFlag))

#define IZcadMLeaderStyle_put_BitFlags(This,bitFlag)	\
    ((This)->lpVtbl -> put_BitFlags(This,bitFlag))

#define IZcadMLeaderStyle_get_ContentType(This,type)	\
    ((This)->lpVtbl -> get_ContentType(This,type))

#define IZcadMLeaderStyle_put_ContentType(This,type)	\
    ((This)->lpVtbl -> put_ContentType(This,type))

#define IZcadMLeaderStyle_get_DrawMLeaderOrderType(This,type)	\
    ((This)->lpVtbl -> get_DrawMLeaderOrderType(This,type))

#define IZcadMLeaderStyle_put_DrawMLeaderOrderType(This,type)	\
    ((This)->lpVtbl -> put_DrawMLeaderOrderType(This,type))

#define IZcadMLeaderStyle_get_DrawLeaderOrderType(This,type)	\
    ((This)->lpVtbl -> get_DrawLeaderOrderType(This,type))

#define IZcadMLeaderStyle_put_DrawLeaderOrderType(This,type)	\
    ((This)->lpVtbl -> put_DrawLeaderOrderType(This,type))

#define IZcadMLeaderStyle_get_MaxLeaderSegmentsPoints(This,number)	\
    ((This)->lpVtbl -> get_MaxLeaderSegmentsPoints(This,number))

#define IZcadMLeaderStyle_put_MaxLeaderSegmentsPoints(This,number)	\
    ((This)->lpVtbl -> put_MaxLeaderSegmentsPoints(This,number))

#define IZcadMLeaderStyle_get_FirstSegmentAngleConstraint(This,constraint)	\
    ((This)->lpVtbl -> get_FirstSegmentAngleConstraint(This,constraint))

#define IZcadMLeaderStyle_put_FirstSegmentAngleConstraint(This,constraint)	\
    ((This)->lpVtbl -> put_FirstSegmentAngleConstraint(This,constraint))

#define IZcadMLeaderStyle_get_SecondSegmentAngleConstraint(This,constraint)	\
    ((This)->lpVtbl -> get_SecondSegmentAngleConstraint(This,constraint))

#define IZcadMLeaderStyle_put_SecondSegmentAngleConstraint(This,constraint)	\
    ((This)->lpVtbl -> put_SecondSegmentAngleConstraint(This,constraint))

#define IZcadMLeaderStyle_get_LeaderLineType(This,type)	\
    ((This)->lpVtbl -> get_LeaderLineType(This,type))

#define IZcadMLeaderStyle_put_LeaderLineType(This,type)	\
    ((This)->lpVtbl -> put_LeaderLineType(This,type))

#define IZcadMLeaderStyle_get_LeaderLineColor(This,color)	\
    ((This)->lpVtbl -> get_LeaderLineColor(This,color))

#define IZcadMLeaderStyle_put_LeaderLineColor(This,color)	\
    ((This)->lpVtbl -> put_LeaderLineColor(This,color))

#define IZcadMLeaderStyle_get_LeaderLineTypeId(This,type)	\
    ((This)->lpVtbl -> get_LeaderLineTypeId(This,type))

#define IZcadMLeaderStyle_put_LeaderLineTypeId(This,type)	\
    ((This)->lpVtbl -> put_LeaderLineTypeId(This,type))

#define IZcadMLeaderStyle_get_LeaderLineWeight(This,weight)	\
    ((This)->lpVtbl -> get_LeaderLineWeight(This,weight))

#define IZcadMLeaderStyle_put_LeaderLineWeight(This,weight)	\
    ((This)->lpVtbl -> put_LeaderLineWeight(This,weight))

#define IZcadMLeaderStyle_get_EnableLanding(This,enabled)	\
    ((This)->lpVtbl -> get_EnableLanding(This,enabled))

#define IZcadMLeaderStyle_put_EnableLanding(This,enabled)	\
    ((This)->lpVtbl -> put_EnableLanding(This,enabled))

#define IZcadMLeaderStyle_get_LandingGap(This,landingGap)	\
    ((This)->lpVtbl -> get_LandingGap(This,landingGap))

#define IZcadMLeaderStyle_put_LandingGap(This,landingGap)	\
    ((This)->lpVtbl -> put_LandingGap(This,landingGap))

#define IZcadMLeaderStyle_get_EnableDogleg(This,enabled)	\
    ((This)->lpVtbl -> get_EnableDogleg(This,enabled))

#define IZcadMLeaderStyle_put_EnableDogleg(This,enabled)	\
    ((This)->lpVtbl -> put_EnableDogleg(This,enabled))

#define IZcadMLeaderStyle_get_DoglegLength(This,doglegLength)	\
    ((This)->lpVtbl -> get_DoglegLength(This,doglegLength))

#define IZcadMLeaderStyle_put_DoglegLength(This,doglegLength)	\
    ((This)->lpVtbl -> put_DoglegLength(This,doglegLength))

#define IZcadMLeaderStyle_get_ArrowSymbol(This,name)	\
    ((This)->lpVtbl -> get_ArrowSymbol(This,name))

#define IZcadMLeaderStyle_put_ArrowSymbol(This,name)	\
    ((This)->lpVtbl -> put_ArrowSymbol(This,name))

#define IZcadMLeaderStyle_get_ArrowSize(This,size)	\
    ((This)->lpVtbl -> get_ArrowSize(This,size))

#define IZcadMLeaderStyle_put_ArrowSize(This,size)	\
    ((This)->lpVtbl -> put_ArrowSize(This,size))

#define IZcadMLeaderStyle_get_TextStyle(This,name)	\
    ((This)->lpVtbl -> get_TextStyle(This,name))

#define IZcadMLeaderStyle_put_TextStyle(This,name)	\
    ((This)->lpVtbl -> put_TextStyle(This,name))

#define IZcadMLeaderStyle_get_TextAttachmentDirection(This,dir)	\
    ((This)->lpVtbl -> get_TextAttachmentDirection(This,dir))

#define IZcadMLeaderStyle_put_TextAttachmentDirection(This,dir)	\
    ((This)->lpVtbl -> put_TextAttachmentDirection(This,dir))

#define IZcadMLeaderStyle_get_TextLeftAttachmentType(This,type)	\
    ((This)->lpVtbl -> get_TextLeftAttachmentType(This,type))

#define IZcadMLeaderStyle_put_TextLeftAttachmentType(This,type)	\
    ((This)->lpVtbl -> put_TextLeftAttachmentType(This,type))

#define IZcadMLeaderStyle_get_TextRightAttachmentType(This,type)	\
    ((This)->lpVtbl -> get_TextRightAttachmentType(This,type))

#define IZcadMLeaderStyle_put_TextRightAttachmentType(This,type)	\
    ((This)->lpVtbl -> put_TextRightAttachmentType(This,type))

#define IZcadMLeaderStyle_get_TextTopAttachmentType(This,type)	\
    ((This)->lpVtbl -> get_TextTopAttachmentType(This,type))

#define IZcadMLeaderStyle_put_TextTopAttachmentType(This,type)	\
    ((This)->lpVtbl -> put_TextTopAttachmentType(This,type))

#define IZcadMLeaderStyle_get_TextBottomAttachmentType(This,type)	\
    ((This)->lpVtbl -> get_TextBottomAttachmentType(This,type))

#define IZcadMLeaderStyle_put_TextBottomAttachmentType(This,type)	\
    ((This)->lpVtbl -> put_TextBottomAttachmentType(This,type))

#define IZcadMLeaderStyle_get_TextColor(This,color)	\
    ((This)->lpVtbl -> get_TextColor(This,color))

#define IZcadMLeaderStyle_put_TextColor(This,color)	\
    ((This)->lpVtbl -> put_TextColor(This,color))

#define IZcadMLeaderStyle_get_TextHeight(This,height)	\
    ((This)->lpVtbl -> get_TextHeight(This,height))

#define IZcadMLeaderStyle_put_TextHeight(This,height)	\
    ((This)->lpVtbl -> put_TextHeight(This,height))

#define IZcadMLeaderStyle_get_EnableFrameText(This,enabled)	\
    ((This)->lpVtbl -> get_EnableFrameText(This,enabled))

#define IZcadMLeaderStyle_put_EnableFrameText(This,enabled)	\
    ((This)->lpVtbl -> put_EnableFrameText(This,enabled))

#define IZcadMLeaderStyle_get_AlignSpace(This,alignSpace)	\
    ((This)->lpVtbl -> get_AlignSpace(This,alignSpace))

#define IZcadMLeaderStyle_put_AlignSpace(This,alignSpace)	\
    ((This)->lpVtbl -> put_AlignSpace(This,alignSpace))

#define IZcadMLeaderStyle_get_Block(This,name)	\
    ((This)->lpVtbl -> get_Block(This,name))

#define IZcadMLeaderStyle_put_Block(This,name)	\
    ((This)->lpVtbl -> put_Block(This,name))

#define IZcadMLeaderStyle_get_BlockColor(This,color)	\
    ((This)->lpVtbl -> get_BlockColor(This,color))

#define IZcadMLeaderStyle_put_BlockColor(This,color)	\
    ((This)->lpVtbl -> put_BlockColor(This,color))

#define IZcadMLeaderStyle_get_EnableBlockScale(This,enabled)	\
    ((This)->lpVtbl -> get_EnableBlockScale(This,enabled))

#define IZcadMLeaderStyle_put_EnableBlockScale(This,enabled)	\
    ((This)->lpVtbl -> put_EnableBlockScale(This,enabled))

#define IZcadMLeaderStyle_get_BlockScale(This,scaleFactor)	\
    ((This)->lpVtbl -> get_BlockScale(This,scaleFactor))

#define IZcadMLeaderStyle_put_BlockScale(This,scaleFactor)	\
    ((This)->lpVtbl -> put_BlockScale(This,scaleFactor))

#define IZcadMLeaderStyle_get_EnableBlockRotation(This,enabled)	\
    ((This)->lpVtbl -> get_EnableBlockRotation(This,enabled))

#define IZcadMLeaderStyle_put_EnableBlockRotation(This,enabled)	\
    ((This)->lpVtbl -> put_EnableBlockRotation(This,enabled))

#define IZcadMLeaderStyle_get_BlockRotation(This,rotation)	\
    ((This)->lpVtbl -> get_BlockRotation(This,rotation))

#define IZcadMLeaderStyle_put_BlockRotation(This,rotation)	\
    ((This)->lpVtbl -> put_BlockRotation(This,rotation))

#define IZcadMLeaderStyle_get_BlockConnectionType(This,type)	\
    ((This)->lpVtbl -> get_BlockConnectionType(This,type))

#define IZcadMLeaderStyle_put_BlockConnectionType(This,type)	\
    ((This)->lpVtbl -> put_BlockConnectionType(This,type))

#define IZcadMLeaderStyle_get_ScaleFactor(This,Scale)	\
    ((This)->lpVtbl -> get_ScaleFactor(This,Scale))

#define IZcadMLeaderStyle_put_ScaleFactor(This,Scale)	\
    ((This)->lpVtbl -> put_ScaleFactor(This,Scale))

#define IZcadMLeaderStyle_get_OverwritePropChanged(This,changed)	\
    ((This)->lpVtbl -> get_OverwritePropChanged(This,changed))

#define IZcadMLeaderStyle_get_Annotative(This,annotative)	\
    ((This)->lpVtbl -> get_Annotative(This,annotative))

#define IZcadMLeaderStyle_put_Annotative(This,annotative)	\
    ((This)->lpVtbl -> put_Annotative(This,annotative))

#define IZcadMLeaderStyle_get_BreakSize(This,size)	\
    ((This)->lpVtbl -> get_BreakSize(This,size))

#define IZcadMLeaderStyle_put_BreakSize(This,size)	\
    ((This)->lpVtbl -> put_BreakSize(This,size))

#define IZcadMLeaderStyle_get_TextString(This,text)	\
    ((This)->lpVtbl -> get_TextString(This,text))

#define IZcadMLeaderStyle_put_TextString(This,text)	\
    ((This)->lpVtbl -> put_TextString(This,text))

#define IZcadMLeaderStyle_get_TextAngleType(This,type)	\
    ((This)->lpVtbl -> get_TextAngleType(This,type))

#define IZcadMLeaderStyle_put_TextAngleType(This,type)	\
    ((This)->lpVtbl -> put_TextAngleType(This,type))

#define IZcadMLeaderStyle_get_TextAlignmentType(This,type)	\
    ((This)->lpVtbl -> get_TextAlignmentType(This,type))

#define IZcadMLeaderStyle_put_TextAlignmentType(This,type)	\
    ((This)->lpVtbl -> put_TextAlignmentType(This,type))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadMLeaderStyle,0xEC923148,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923148-5A17-11E7-B72E-BC5FF42AC839")
ZcadMLeaderStyle;
#endif

#ifndef __IZcadHyperlinks_INTERFACE_DEFINED__
#define __IZcadHyperlinks_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadHyperlinks,0xEC9231DD,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9231DD-5A17-11E7-B72E-BC5FF42AC839")
    IZcadHyperlinks : public IDispatch
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE Item(
             long Index,
             IZcadHyperlink **pItem) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Count(
             long *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get__NewEnum(
             LPUNKNOWN *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Application(
             LPDISPATCH *ApplicationObject) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Add(
             BSTR Name,
             VARIANT Description,
             VARIANT NamedLocation,
             IZcadHyperlink **pHyperlink) = 0;

    };

#else

    typedef struct IZcadHyperlinksVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadHyperlinks * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadHyperlinks * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadHyperlinks * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadHyperlinks * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadHyperlinks * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadHyperlinks * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadHyperlinks * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *Item )(
            IZcadHyperlinks * This,
             long Index,
             IZcadHyperlink **pItem);

         HRESULT ( STDMETHODCALLTYPE *get_Count )(
            IZcadHyperlinks * This,
             long *pVal);

         HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            IZcadHyperlinks * This,
             LPUNKNOWN *pVal);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadHyperlinks * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *Add )(
            IZcadHyperlinks * This,
             BSTR Name,
             VARIANT Description,
             VARIANT NamedLocation,
             IZcadHyperlink **pHyperlink);

        END_INTERFACE
    } IZcadHyperlinksVtbl;

    interface IZcadHyperlinks
    {
        CONST_VTBL struct IZcadHyperlinksVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadHyperlinks_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadHyperlinks_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadHyperlinks_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadHyperlinks_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadHyperlinks_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadHyperlinks_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadHyperlinks_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadHyperlinks_Item(This,Index,pItem)	\
    ((This)->lpVtbl -> Item(This,Index,pItem))

#define IZcadHyperlinks_get_Count(This,pVal)	\
    ((This)->lpVtbl -> get_Count(This,pVal))

#define IZcadHyperlinks_get__NewEnum(This,pVal)	\
    ((This)->lpVtbl -> get__NewEnum(This,pVal))

#define IZcadHyperlinks_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadHyperlinks_Add(This,Name,Description,NamedLocation,pHyperlink)	\
    ((This)->lpVtbl -> Add(This,Name,Description,NamedLocation,pHyperlink))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadHyperlinks,0xEC923046,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923046-5A17-11E7-B72E-BC5FF42AC839")
ZcadHyperlinks;
#endif

DEFINE_GUID(CLSID_ZcadDictionary,0xEC9230BF,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9230BF-5A17-11E7-B72E-BC5FF42AC839")
ZcadDictionary;
#endif

#ifndef __IZcadLayers_INTERFACE_DEFINED__
#define __IZcadLayers_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadLayers,0xEC923043,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923043-5A17-11E7-B72E-BC5FF42AC839")
    IZcadLayers : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE Item(
             VARIANT Index,
             IZcadLayer **pItem) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Count(
             long *pCount) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get__NewEnum(
             LPUNKNOWN *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Add(
             BSTR Name,
             IZcadLayer **pLayer) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GenerateUsageData( void) = 0;

    };

#else

    typedef struct IZcadLayersVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadLayers * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadLayers * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadLayers * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadLayers * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadLayers * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadLayers * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadLayers * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadLayers * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadLayers * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadLayers * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadLayers * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadLayers * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadLayers * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadLayers * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadLayers * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadLayers * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadLayers * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadLayers * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadLayers * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadLayers * This);

         HRESULT ( STDMETHODCALLTYPE *Item )(
            IZcadLayers * This,
             VARIANT Index,
             IZcadLayer **pItem);

         HRESULT ( STDMETHODCALLTYPE *get_Count )(
            IZcadLayers * This,
             long *pCount);

         HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            IZcadLayers * This,
             LPUNKNOWN *pVal);

         HRESULT ( STDMETHODCALLTYPE *Add )(
            IZcadLayers * This,
             BSTR Name,
             IZcadLayer **pLayer);

         HRESULT ( STDMETHODCALLTYPE *GenerateUsageData )(
            IZcadLayers * This);

        END_INTERFACE
    } IZcadLayersVtbl;

    interface IZcadLayers
    {
        CONST_VTBL struct IZcadLayersVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadLayers_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadLayers_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadLayers_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadLayers_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadLayers_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadLayers_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadLayers_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadLayers_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadLayers_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadLayers_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadLayers_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadLayers_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadLayers_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadLayers_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadLayers_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadLayers_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadLayers_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadLayers_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadLayers_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadLayers_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadLayers_Item(This,Index,pItem)	\
    ((This)->lpVtbl -> Item(This,Index,pItem))

#define IZcadLayers_get_Count(This,pCount)	\
    ((This)->lpVtbl -> get_Count(This,pCount))

#define IZcadLayers_get__NewEnum(This,pVal)	\
    ((This)->lpVtbl -> get__NewEnum(This,pVal))

#define IZcadLayers_Add(This,Name,pLayer)	\
    ((This)->lpVtbl -> Add(This,Name,pLayer))

#define IZcadLayers_GenerateUsageData(This)	\
    ((This)->lpVtbl -> GenerateUsageData(This))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadLayers,0xEC9230B8,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9230B8-5A17-11E7-B72E-BC5FF42AC839")
ZcadLayers;
#endif

#ifndef __IZcadDimStyles_INTERFACE_DEFINED__
#define __IZcadDimStyles_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadDimStyles,0xEC9230AF,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9230AF-5A17-11E7-B72E-BC5FF42AC839")
    IZcadDimStyles : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE Item(
             VARIANT Index,
             IZcadDimStyle **pItem) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Count(
             long *pCount) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get__NewEnum(
             LPUNKNOWN *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Add(
             BSTR Name,
             IZcadDimStyle **pDimStyle) = 0;

    };

#else

    typedef struct IZcadDimStylesVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadDimStyles * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadDimStyles * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadDimStyles * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadDimStyles * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadDimStyles * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadDimStyles * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadDimStyles * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadDimStyles * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadDimStyles * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadDimStyles * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadDimStyles * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadDimStyles * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadDimStyles * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadDimStyles * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadDimStyles * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadDimStyles * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadDimStyles * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadDimStyles * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadDimStyles * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadDimStyles * This);

         HRESULT ( STDMETHODCALLTYPE *Item )(
            IZcadDimStyles * This,
             VARIANT Index,
             IZcadDimStyle **pItem);

         HRESULT ( STDMETHODCALLTYPE *get_Count )(
            IZcadDimStyles * This,
             long *pCount);

         HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            IZcadDimStyles * This,
             LPUNKNOWN *pVal);

         HRESULT ( STDMETHODCALLTYPE *Add )(
            IZcadDimStyles * This,
             BSTR Name,
             IZcadDimStyle **pDimStyle);

        END_INTERFACE
    } IZcadDimStylesVtbl;

    interface IZcadDimStyles
    {
        CONST_VTBL struct IZcadDimStylesVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadDimStyles_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadDimStyles_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadDimStyles_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadDimStyles_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadDimStyles_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadDimStyles_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadDimStyles_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadDimStyles_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadDimStyles_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadDimStyles_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadDimStyles_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadDimStyles_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadDimStyles_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadDimStyles_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadDimStyles_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadDimStyles_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadDimStyles_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadDimStyles_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadDimStyles_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadDimStyles_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadDimStyles_Item(This,Index,pItem)	\
    ((This)->lpVtbl -> Item(This,Index,pItem))

#define IZcadDimStyles_get_Count(This,pCount)	\
    ((This)->lpVtbl -> get_Count(This,pCount))

#define IZcadDimStyles_get__NewEnum(This,pVal)	\
    ((This)->lpVtbl -> get__NewEnum(This,pVal))

#define IZcadDimStyles_Add(This,Name,pDimStyle)	\
    ((This)->lpVtbl -> Add(This,Name,pDimStyle))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadDimStyles,0xEC923002,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923002-5A17-11E7-B72E-BC5FF42AC839")
ZcadDimStyles;
#endif

#ifndef __IZcadDictionaries_INTERFACE_DEFINED__
#define __IZcadDictionaries_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadDictionaries,0xEC92309D,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC92309D-5A17-11E7-B72E-BC5FF42AC839")
    IZcadDictionaries : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE Item(
             VARIANT Index,
             IZcadObject **pItem) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Count(
             long *pCount) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get__NewEnum(
             LPUNKNOWN *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Add(
             BSTR Name,
             IZcadDictionary **pDimStyle) = 0;

    };

#else

    typedef struct IZcadDictionariesVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadDictionaries * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadDictionaries * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadDictionaries * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadDictionaries * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadDictionaries * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadDictionaries * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadDictionaries * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadDictionaries * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadDictionaries * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadDictionaries * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadDictionaries * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadDictionaries * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadDictionaries * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadDictionaries * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadDictionaries * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadDictionaries * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadDictionaries * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadDictionaries * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadDictionaries * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadDictionaries * This);

         HRESULT ( STDMETHODCALLTYPE *Item )(
            IZcadDictionaries * This,
             VARIANT Index,
             IZcadObject **pItem);

         HRESULT ( STDMETHODCALLTYPE *get_Count )(
            IZcadDictionaries * This,
             long *pCount);

         HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            IZcadDictionaries * This,
             LPUNKNOWN *pVal);

         HRESULT ( STDMETHODCALLTYPE *Add )(
            IZcadDictionaries * This,
             BSTR Name,
             IZcadDictionary **pDimStyle);

        END_INTERFACE
    } IZcadDictionariesVtbl;

    interface IZcadDictionaries
    {
        CONST_VTBL struct IZcadDictionariesVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadDictionaries_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadDictionaries_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadDictionaries_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadDictionaries_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadDictionaries_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadDictionaries_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadDictionaries_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadDictionaries_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadDictionaries_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadDictionaries_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadDictionaries_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadDictionaries_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadDictionaries_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadDictionaries_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadDictionaries_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadDictionaries_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadDictionaries_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadDictionaries_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadDictionaries_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadDictionaries_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadDictionaries_Item(This,Index,pItem)	\
    ((This)->lpVtbl -> Item(This,Index,pItem))

#define IZcadDictionaries_get_Count(This,pCount)	\
    ((This)->lpVtbl -> get_Count(This,pCount))

#define IZcadDictionaries_get__NewEnum(This,pVal)	\
    ((This)->lpVtbl -> get__NewEnum(This,pVal))

#define IZcadDictionaries_Add(This,Name,pDimStyle)	\
    ((This)->lpVtbl -> Add(This,Name,pDimStyle))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadDictionaries,0xEC923015,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923015-5A17-11E7-B72E-BC5FF42AC839")
ZcadDictionaries;
#endif

#ifndef __IZcadLineTypes_INTERFACE_DEFINED__
#define __IZcadLineTypes_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadLineTypes,0xEC923098,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923098-5A17-11E7-B72E-BC5FF42AC839")
    IZcadLineTypes : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE Item(
             VARIANT Index,
             IZcadLineType **pItem) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Count(
             long *pCount) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get__NewEnum(
             LPUNKNOWN *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Add(
             BSTR Name,
             IZcadLineType **pLinetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Load(
             BSTR Name,
             BSTR FileName) = 0;

    };

#else

    typedef struct IZcadLineTypesVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadLineTypes * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadLineTypes * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadLineTypes * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadLineTypes * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadLineTypes * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadLineTypes * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadLineTypes * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadLineTypes * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadLineTypes * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadLineTypes * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadLineTypes * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadLineTypes * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadLineTypes * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadLineTypes * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadLineTypes * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadLineTypes * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadLineTypes * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadLineTypes * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadLineTypes * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadLineTypes * This);

         HRESULT ( STDMETHODCALLTYPE *Item )(
            IZcadLineTypes * This,
             VARIANT Index,
             IZcadLineType **pItem);

         HRESULT ( STDMETHODCALLTYPE *get_Count )(
            IZcadLineTypes * This,
             long *pCount);

         HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            IZcadLineTypes * This,
             LPUNKNOWN *pVal);

         HRESULT ( STDMETHODCALLTYPE *Add )(
            IZcadLineTypes * This,
             BSTR Name,
             IZcadLineType **pLinetype);

         HRESULT ( STDMETHODCALLTYPE *Load )(
            IZcadLineTypes * This,
             BSTR Name,
             BSTR FileName);

        END_INTERFACE
    } IZcadLineTypesVtbl;

    interface IZcadLineTypes
    {
        CONST_VTBL struct IZcadLineTypesVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadLineTypes_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadLineTypes_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadLineTypes_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadLineTypes_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadLineTypes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadLineTypes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadLineTypes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadLineTypes_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadLineTypes_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadLineTypes_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadLineTypes_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadLineTypes_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadLineTypes_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadLineTypes_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadLineTypes_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadLineTypes_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadLineTypes_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadLineTypes_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadLineTypes_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadLineTypes_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadLineTypes_Item(This,Index,pItem)	\
    ((This)->lpVtbl -> Item(This,Index,pItem))

#define IZcadLineTypes_get_Count(This,pCount)	\
    ((This)->lpVtbl -> get_Count(This,pCount))

#define IZcadLineTypes_get__NewEnum(This,pVal)	\
    ((This)->lpVtbl -> get__NewEnum(This,pVal))

#define IZcadLineTypes_Add(This,Name,pLinetype)	\
    ((This)->lpVtbl -> Add(This,Name,pLinetype))

#define IZcadLineTypes_Load(This,Name,FileName)	\
    ((This)->lpVtbl -> Load(This,Name,FileName))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadLineTypes,0xEC922FE5,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC922FE5-5A17-11E7-B72E-BC5FF42AC839")
ZcadLineTypes;
#endif

#ifndef __IZcadMaterials_INTERFACE_DEFINED__
#define __IZcadMaterials_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadMaterials,0xEC9230AC,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9230AC-5A17-11E7-B72E-BC5FF42AC839")
    IZcadMaterials : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE Item(
             VARIANT Index,
             IZcadMaterial **pItem) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Count(
             long *pCount) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get__NewEnum(
             LPUNKNOWN *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Add(
             BSTR Name,
             IZcadMaterial **pDimStyle) = 0;

    };

#else

    typedef struct IZcadMaterialsVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadMaterials * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadMaterials * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadMaterials * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadMaterials * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadMaterials * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadMaterials * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadMaterials * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadMaterials * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadMaterials * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadMaterials * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadMaterials * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadMaterials * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadMaterials * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadMaterials * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadMaterials * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadMaterials * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadMaterials * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadMaterials * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadMaterials * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadMaterials * This);

         HRESULT ( STDMETHODCALLTYPE *Item )(
            IZcadMaterials * This,
             VARIANT Index,
             IZcadMaterial **pItem);

         HRESULT ( STDMETHODCALLTYPE *get_Count )(
            IZcadMaterials * This,
             long *pCount);

         HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            IZcadMaterials * This,
             LPUNKNOWN *pVal);

         HRESULT ( STDMETHODCALLTYPE *Add )(
            IZcadMaterials * This,
             BSTR Name,
             IZcadMaterial **pDimStyle);

        END_INTERFACE
    } IZcadMaterialsVtbl;

    interface IZcadMaterials
    {
        CONST_VTBL struct IZcadMaterialsVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadMaterials_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadMaterials_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadMaterials_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadMaterials_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadMaterials_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadMaterials_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadMaterials_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadMaterials_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadMaterials_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadMaterials_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadMaterials_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadMaterials_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadMaterials_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadMaterials_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadMaterials_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadMaterials_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadMaterials_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadMaterials_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadMaterials_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadMaterials_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadMaterials_Item(This,Index,pItem)	\
    ((This)->lpVtbl -> Item(This,Index,pItem))

#define IZcadMaterials_get_Count(This,pCount)	\
    ((This)->lpVtbl -> get_Count(This,pCount))

#define IZcadMaterials_get__NewEnum(This,pVal)	\
    ((This)->lpVtbl -> get__NewEnum(This,pVal))

#define IZcadMaterials_Add(This,Name,pDimStyle)	\
    ((This)->lpVtbl -> Add(This,Name,pDimStyle))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadMaterials,0xEC92310B,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC92310B-5A17-11E7-B72E-BC5FF42AC839")
ZcadMaterials;
#endif

#ifndef __IZcadTextStyles_INTERFACE_DEFINED__
#define __IZcadTextStyles_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadTextStyles,0xEC923131,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923131-5A17-11E7-B72E-BC5FF42AC839")
    IZcadTextStyles : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE Item(
             VARIANT Index,
             IZcadTextStyle **pItem) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Count(
             long *pCount) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get__NewEnum(
             LPUNKNOWN *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Add(
             BSTR Name,
             IZcadTextStyle **pTextStyle) = 0;

    };

#else

    typedef struct IZcadTextStylesVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadTextStyles * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadTextStyles * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadTextStyles * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadTextStyles * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadTextStyles * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadTextStyles * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadTextStyles * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadTextStyles * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadTextStyles * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadTextStyles * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadTextStyles * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadTextStyles * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadTextStyles * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadTextStyles * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadTextStyles * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadTextStyles * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadTextStyles * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadTextStyles * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadTextStyles * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadTextStyles * This);

         HRESULT ( STDMETHODCALLTYPE *Item )(
            IZcadTextStyles * This,
             VARIANT Index,
             IZcadTextStyle **pItem);

         HRESULT ( STDMETHODCALLTYPE *get_Count )(
            IZcadTextStyles * This,
             long *pCount);

         HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            IZcadTextStyles * This,
             LPUNKNOWN *pVal);

         HRESULT ( STDMETHODCALLTYPE *Add )(
            IZcadTextStyles * This,
             BSTR Name,
             IZcadTextStyle **pTextStyle);

        END_INTERFACE
    } IZcadTextStylesVtbl;

    interface IZcadTextStyles
    {
        CONST_VTBL struct IZcadTextStylesVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadTextStyles_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadTextStyles_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadTextStyles_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadTextStyles_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadTextStyles_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadTextStyles_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadTextStyles_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadTextStyles_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadTextStyles_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadTextStyles_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadTextStyles_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadTextStyles_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadTextStyles_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadTextStyles_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadTextStyles_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadTextStyles_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadTextStyles_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadTextStyles_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadTextStyles_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadTextStyles_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadTextStyles_Item(This,Index,pItem)	\
    ((This)->lpVtbl -> Item(This,Index,pItem))

#define IZcadTextStyles_get_Count(This,pCount)	\
    ((This)->lpVtbl -> get_Count(This,pCount))

#define IZcadTextStyles_get__NewEnum(This,pVal)	\
    ((This)->lpVtbl -> get__NewEnum(This,pVal))

#define IZcadTextStyles_Add(This,Name,pTextStyle)	\
    ((This)->lpVtbl -> Add(This,Name,pTextStyle))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadTextStyles,0xEC9230C5,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9230C5-5A17-11E7-B72E-BC5FF42AC839")
ZcadTextStyles;
#endif

#ifndef __IZcadUCSs_INTERFACE_DEFINED__
#define __IZcadUCSs_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadUCSs,0xEC9230EC,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9230EC-5A17-11E7-B72E-BC5FF42AC839")
    IZcadUCSs : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE Item(
             VARIANT Index,
             IZcadUCS **pItem) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Count(
             long *pCount) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get__NewEnum(
             LPUNKNOWN *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Add(
             VARIANT Origin,
             VARIANT XAxisPoint,
             VARIANT YAxisPoint,
             BSTR Name,
             IZcadUCS **pUCS) = 0;

    };

#else

    typedef struct IZcadUCSsVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadUCSs * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadUCSs * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadUCSs * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadUCSs * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadUCSs * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadUCSs * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadUCSs * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadUCSs * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadUCSs * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadUCSs * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadUCSs * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadUCSs * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadUCSs * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadUCSs * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadUCSs * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadUCSs * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadUCSs * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadUCSs * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadUCSs * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadUCSs * This);

         HRESULT ( STDMETHODCALLTYPE *Item )(
            IZcadUCSs * This,
             VARIANT Index,
             IZcadUCS **pItem);

         HRESULT ( STDMETHODCALLTYPE *get_Count )(
            IZcadUCSs * This,
             long *pCount);

         HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            IZcadUCSs * This,
             LPUNKNOWN *pVal);

         HRESULT ( STDMETHODCALLTYPE *Add )(
            IZcadUCSs * This,
             VARIANT Origin,
             VARIANT XAxisPoint,
             VARIANT YAxisPoint,
             BSTR Name,
             IZcadUCS **pUCS);

        END_INTERFACE
    } IZcadUCSsVtbl;

    interface IZcadUCSs
    {
        CONST_VTBL struct IZcadUCSsVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadUCSs_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadUCSs_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadUCSs_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadUCSs_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadUCSs_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadUCSs_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadUCSs_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadUCSs_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadUCSs_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadUCSs_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadUCSs_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadUCSs_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadUCSs_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadUCSs_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadUCSs_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadUCSs_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadUCSs_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadUCSs_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadUCSs_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadUCSs_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadUCSs_Item(This,Index,pItem)	\
    ((This)->lpVtbl -> Item(This,Index,pItem))

#define IZcadUCSs_get_Count(This,pCount)	\
    ((This)->lpVtbl -> get_Count(This,pCount))

#define IZcadUCSs_get__NewEnum(This,pVal)	\
    ((This)->lpVtbl -> get__NewEnum(This,pVal))

#define IZcadUCSs_Add(This,Origin,XAxisPoint,YAxisPoint,Name,pUCS)	\
    ((This)->lpVtbl -> Add(This,Origin,XAxisPoint,YAxisPoint,Name,pUCS))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadUCSs,0xEC9231CD,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9231CD-5A17-11E7-B72E-BC5FF42AC839")
ZcadUCSs;
#endif

#ifndef __IZcadRegisteredApplications_INTERFACE_DEFINED__
#define __IZcadRegisteredApplications_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadRegisteredApplications,0xEC9231AE,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9231AE-5A17-11E7-B72E-BC5FF42AC839")
    IZcadRegisteredApplications : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE Item(
             VARIANT Index,
             IZcadRegisteredApplication **pItem) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Count(
             long *pCount) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get__NewEnum(
             LPUNKNOWN *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Add(
             BSTR Name,
             IZcadRegisteredApplication **pRegApp) = 0;

    };

#else

    typedef struct IZcadRegisteredApplicationsVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadRegisteredApplications * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadRegisteredApplications * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadRegisteredApplications * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadRegisteredApplications * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadRegisteredApplications * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadRegisteredApplications * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadRegisteredApplications * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadRegisteredApplications * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadRegisteredApplications * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadRegisteredApplications * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadRegisteredApplications * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadRegisteredApplications * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadRegisteredApplications * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadRegisteredApplications * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadRegisteredApplications * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadRegisteredApplications * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadRegisteredApplications * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadRegisteredApplications * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadRegisteredApplications * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadRegisteredApplications * This);

         HRESULT ( STDMETHODCALLTYPE *Item )(
            IZcadRegisteredApplications * This,
             VARIANT Index,
             IZcadRegisteredApplication **pItem);

         HRESULT ( STDMETHODCALLTYPE *get_Count )(
            IZcadRegisteredApplications * This,
             long *pCount);

         HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            IZcadRegisteredApplications * This,
             LPUNKNOWN *pVal);

         HRESULT ( STDMETHODCALLTYPE *Add )(
            IZcadRegisteredApplications * This,
             BSTR Name,
             IZcadRegisteredApplication **pRegApp);

        END_INTERFACE
    } IZcadRegisteredApplicationsVtbl;

    interface IZcadRegisteredApplications
    {
        CONST_VTBL struct IZcadRegisteredApplicationsVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadRegisteredApplications_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadRegisteredApplications_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadRegisteredApplications_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadRegisteredApplications_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadRegisteredApplications_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadRegisteredApplications_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadRegisteredApplications_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadRegisteredApplications_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadRegisteredApplications_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadRegisteredApplications_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadRegisteredApplications_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadRegisteredApplications_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadRegisteredApplications_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadRegisteredApplications_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadRegisteredApplications_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadRegisteredApplications_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadRegisteredApplications_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadRegisteredApplications_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadRegisteredApplications_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadRegisteredApplications_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadRegisteredApplications_Item(This,Index,pItem)	\
    ((This)->lpVtbl -> Item(This,Index,pItem))

#define IZcadRegisteredApplications_get_Count(This,pCount)	\
    ((This)->lpVtbl -> get_Count(This,pCount))

#define IZcadRegisteredApplications_get__NewEnum(This,pVal)	\
    ((This)->lpVtbl -> get__NewEnum(This,pVal))

#define IZcadRegisteredApplications_Add(This,Name,pRegApp)	\
    ((This)->lpVtbl -> Add(This,Name,pRegApp))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadRegisteredApplications,0xEC923188,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923188-5A17-11E7-B72E-BC5FF42AC839")
ZcadRegisteredApplications;
#endif

#ifndef __IZcadViews_INTERFACE_DEFINED__
#define __IZcadViews_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadViews,0xEC92318D,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC92318D-5A17-11E7-B72E-BC5FF42AC839")
    IZcadViews : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE Item(
             VARIANT Index,
             IZcadView **pItem) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Count(
             long *pCount) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get__NewEnum(
             LPUNKNOWN *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Add(
             BSTR Name,
             IZcadView **pRegApp) = 0;

    };

#else

    typedef struct IZcadViewsVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadViews * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadViews * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadViews * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadViews * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadViews * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadViews * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadViews * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadViews * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadViews * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadViews * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadViews * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadViews * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadViews * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadViews * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadViews * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadViews * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadViews * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadViews * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadViews * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadViews * This);

         HRESULT ( STDMETHODCALLTYPE *Item )(
            IZcadViews * This,
             VARIANT Index,
             IZcadView **pItem);

         HRESULT ( STDMETHODCALLTYPE *get_Count )(
            IZcadViews * This,
             long *pCount);

         HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            IZcadViews * This,
             LPUNKNOWN *pVal);

         HRESULT ( STDMETHODCALLTYPE *Add )(
            IZcadViews * This,
             BSTR Name,
             IZcadView **pRegApp);

        END_INTERFACE
    } IZcadViewsVtbl;

    interface IZcadViews
    {
        CONST_VTBL struct IZcadViewsVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadViews_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadViews_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadViews_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadViews_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadViews_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadViews_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadViews_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadViews_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadViews_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadViews_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadViews_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadViews_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadViews_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadViews_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadViews_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadViews_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadViews_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadViews_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadViews_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadViews_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadViews_Item(This,Index,pItem)	\
    ((This)->lpVtbl -> Item(This,Index,pItem))

#define IZcadViews_get_Count(This,pCount)	\
    ((This)->lpVtbl -> get_Count(This,pCount))

#define IZcadViews_get__NewEnum(This,pVal)	\
    ((This)->lpVtbl -> get__NewEnum(This,pVal))

#define IZcadViews_Add(This,Name,pRegApp)	\
    ((This)->lpVtbl -> Add(This,Name,pRegApp))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadViews,0xEC9230A8,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9230A8-5A17-11E7-B72E-BC5FF42AC839")
ZcadViews;
#endif

#ifndef __IZcadViewports_INTERFACE_DEFINED__
#define __IZcadViewports_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadViewports,0xEC923149,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923149-5A17-11E7-B72E-BC5FF42AC839")
    IZcadViewports : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE Item(
             VARIANT Index,
             IZcadViewport **pItem) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Count(
             long *pCount) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get__NewEnum(
             LPUNKNOWN *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Add(
             BSTR Name,
             IZcadViewport **pRegApp) = 0;

        virtual  HRESULT STDMETHODCALLTYPE DeleteConfiguration(
             BSTR Name) = 0;

    };

#else

    typedef struct IZcadViewportsVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadViewports * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadViewports * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadViewports * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadViewports * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadViewports * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadViewports * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadViewports * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadViewports * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadViewports * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadViewports * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadViewports * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadViewports * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadViewports * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadViewports * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadViewports * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadViewports * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadViewports * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadViewports * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadViewports * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadViewports * This);

         HRESULT ( STDMETHODCALLTYPE *Item )(
            IZcadViewports * This,
             VARIANT Index,
             IZcadViewport **pItem);

         HRESULT ( STDMETHODCALLTYPE *get_Count )(
            IZcadViewports * This,
             long *pCount);

         HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            IZcadViewports * This,
             LPUNKNOWN *pVal);

         HRESULT ( STDMETHODCALLTYPE *Add )(
            IZcadViewports * This,
             BSTR Name,
             IZcadViewport **pRegApp);

         HRESULT ( STDMETHODCALLTYPE *DeleteConfiguration )(
            IZcadViewports * This,
             BSTR Name);

        END_INTERFACE
    } IZcadViewportsVtbl;

    interface IZcadViewports
    {
        CONST_VTBL struct IZcadViewportsVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadViewports_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadViewports_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadViewports_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadViewports_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadViewports_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadViewports_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadViewports_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadViewports_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadViewports_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadViewports_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadViewports_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadViewports_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadViewports_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadViewports_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadViewports_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadViewports_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadViewports_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadViewports_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadViewports_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadViewports_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadViewports_Item(This,Index,pItem)	\
    ((This)->lpVtbl -> Item(This,Index,pItem))

#define IZcadViewports_get_Count(This,pCount)	\
    ((This)->lpVtbl -> get_Count(This,pCount))

#define IZcadViewports_get__NewEnum(This,pVal)	\
    ((This)->lpVtbl -> get__NewEnum(This,pVal))

#define IZcadViewports_Add(This,Name,pRegApp)	\
    ((This)->lpVtbl -> Add(This,Name,pRegApp))

#define IZcadViewports_DeleteConfiguration(This,Name)	\
    ((This)->lpVtbl -> DeleteConfiguration(This,Name))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadViewports,0xEC922FCD,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC922FCD-5A17-11E7-B72E-BC5FF42AC839")
ZcadViewports;
#endif

#ifndef __IZcadGroups_INTERFACE_DEFINED__
#define __IZcadGroups_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadGroups,0xEC92316B,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC92316B-5A17-11E7-B72E-BC5FF42AC839")
    IZcadGroups : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE Item(
             VARIANT Index,
             IZcadGroup **pItem) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Count(
             long *pCount) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get__NewEnum(
             LPUNKNOWN *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Add(
             BSTR Name,
             IZcadGroup **pDimStyle) = 0;

    };

#else

    typedef struct IZcadGroupsVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadGroups * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadGroups * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadGroups * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadGroups * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadGroups * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadGroups * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadGroups * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadGroups * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadGroups * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadGroups * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadGroups * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadGroups * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadGroups * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadGroups * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadGroups * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadGroups * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadGroups * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadGroups * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadGroups * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadGroups * This);

         HRESULT ( STDMETHODCALLTYPE *Item )(
            IZcadGroups * This,
             VARIANT Index,
             IZcadGroup **pItem);

         HRESULT ( STDMETHODCALLTYPE *get_Count )(
            IZcadGroups * This,
             long *pCount);

         HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            IZcadGroups * This,
             LPUNKNOWN *pVal);

         HRESULT ( STDMETHODCALLTYPE *Add )(
            IZcadGroups * This,
             BSTR Name,
             IZcadGroup **pDimStyle);

        END_INTERFACE
    } IZcadGroupsVtbl;

    interface IZcadGroups
    {
        CONST_VTBL struct IZcadGroupsVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadGroups_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadGroups_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadGroups_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadGroups_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadGroups_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadGroups_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadGroups_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadGroups_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadGroups_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadGroups_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadGroups_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadGroups_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadGroups_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadGroups_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadGroups_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadGroups_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadGroups_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadGroups_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadGroups_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadGroups_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadGroups_Item(This,Index,pItem)	\
    ((This)->lpVtbl -> Item(This,Index,pItem))

#define IZcadGroups_get_Count(This,pCount)	\
    ((This)->lpVtbl -> get_Count(This,pCount))

#define IZcadGroups_get__NewEnum(This,pVal)	\
    ((This)->lpVtbl -> get__NewEnum(This,pVal))

#define IZcadGroups_Add(This,Name,pDimStyle)	\
    ((This)->lpVtbl -> Add(This,Name,pDimStyle))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadGroups,0xEC9231D7,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9231D7-5A17-11E7-B72E-BC5FF42AC839")
ZcadGroups;
#endif

#ifndef __IZcadBlocks_INTERFACE_DEFINED__
#define __IZcadBlocks_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadBlocks,0xE58AB1C5,0x54CE,0x477E,0x83,0x13,0xAA,0x72,0x87,0x88,0xBD,0x7E);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("E58AB1C5-54CE-477E-8313-AA728788BD7E")
    IZcadBlocks : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE Item(
             VARIANT Index,
             IZcadBlock **pItem) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Count(
             long *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get__NewEnum(
             LPUNKNOWN *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Add(
             VARIANT InsertionPoint,
             BSTR Name,
             IZcadBlock **pBlock) = 0;

    };

#else

    typedef struct IZcadBlocksVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadBlocks * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadBlocks * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadBlocks * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadBlocks * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadBlocks * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadBlocks * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadBlocks * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadBlocks * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadBlocks * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadBlocks * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadBlocks * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadBlocks * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadBlocks * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadBlocks * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadBlocks * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadBlocks * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadBlocks * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadBlocks * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadBlocks * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadBlocks * This);

         HRESULT ( STDMETHODCALLTYPE *Item )(
            IZcadBlocks * This,
             VARIANT Index,
             IZcadBlock **pItem);

         HRESULT ( STDMETHODCALLTYPE *get_Count )(
            IZcadBlocks * This,
             long *pVal);

         HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            IZcadBlocks * This,
             LPUNKNOWN *pVal);

         HRESULT ( STDMETHODCALLTYPE *Add )(
            IZcadBlocks * This,
             VARIANT InsertionPoint,
             BSTR Name,
             IZcadBlock **pBlock);

        END_INTERFACE
    } IZcadBlocksVtbl;

    interface IZcadBlocks
    {
        CONST_VTBL struct IZcadBlocksVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadBlocks_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadBlocks_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadBlocks_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadBlocks_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadBlocks_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadBlocks_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadBlocks_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadBlocks_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadBlocks_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadBlocks_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadBlocks_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadBlocks_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadBlocks_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadBlocks_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadBlocks_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadBlocks_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadBlocks_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadBlocks_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadBlocks_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadBlocks_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadBlocks_Item(This,Index,pItem)	\
    ((This)->lpVtbl -> Item(This,Index,pItem))

#define IZcadBlocks_get_Count(This,pVal)	\
    ((This)->lpVtbl -> get_Count(This,pVal))

#define IZcadBlocks_get__NewEnum(This,pVal)	\
    ((This)->lpVtbl -> get__NewEnum(This,pVal))

#define IZcadBlocks_Add(This,InsertionPoint,Name,pBlock)	\
    ((This)->lpVtbl -> Add(This,InsertionPoint,Name,pBlock))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadBlocks,0xEC9231B1,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9231B1-5A17-11E7-B72E-BC5FF42AC839")
ZcadBlocks;
#endif

#ifndef __IZcadLayouts_INTERFACE_DEFINED__
#define __IZcadLayouts_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadLayouts,0xEC92312D,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC92312D-5A17-11E7-B72E-BC5FF42AC839")
    IZcadLayouts : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE Item(
             VARIANT Index,
             IZcadLayout **pItem) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Count(
             long *pCount) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get__NewEnum(
             LPUNKNOWN *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Add(
             BSTR Name,
             IZcadLayout **pLayout) = 0;

    };

#else

    typedef struct IZcadLayoutsVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadLayouts * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadLayouts * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadLayouts * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadLayouts * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadLayouts * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadLayouts * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadLayouts * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadLayouts * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadLayouts * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadLayouts * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadLayouts * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadLayouts * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadLayouts * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadLayouts * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadLayouts * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadLayouts * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadLayouts * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadLayouts * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadLayouts * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadLayouts * This);

         HRESULT ( STDMETHODCALLTYPE *Item )(
            IZcadLayouts * This,
             VARIANT Index,
             IZcadLayout **pItem);

         HRESULT ( STDMETHODCALLTYPE *get_Count )(
            IZcadLayouts * This,
             long *pCount);

         HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            IZcadLayouts * This,
             LPUNKNOWN *pVal);

         HRESULT ( STDMETHODCALLTYPE *Add )(
            IZcadLayouts * This,
             BSTR Name,
             IZcadLayout **pLayout);

        END_INTERFACE
    } IZcadLayoutsVtbl;

    interface IZcadLayouts
    {
        CONST_VTBL struct IZcadLayoutsVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadLayouts_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadLayouts_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadLayouts_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadLayouts_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadLayouts_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadLayouts_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadLayouts_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadLayouts_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadLayouts_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadLayouts_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadLayouts_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadLayouts_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadLayouts_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadLayouts_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadLayouts_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadLayouts_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadLayouts_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadLayouts_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadLayouts_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadLayouts_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadLayouts_Item(This,Index,pItem)	\
    ((This)->lpVtbl -> Item(This,Index,pItem))

#define IZcadLayouts_get_Count(This,pCount)	\
    ((This)->lpVtbl -> get_Count(This,pCount))

#define IZcadLayouts_get__NewEnum(This,pVal)	\
    ((This)->lpVtbl -> get__NewEnum(This,pVal))

#define IZcadLayouts_Add(This,Name,pLayout)	\
    ((This)->lpVtbl -> Add(This,Name,pLayout))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadLayouts,0xEC923079,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923079-5A17-11E7-B72E-BC5FF42AC839")
ZcadLayouts;
#endif

#ifndef __IZcadPlotConfigurations_INTERFACE_DEFINED__
#define __IZcadPlotConfigurations_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadPlotConfigurations,0xEC9231BD,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9231BD-5A17-11E7-B72E-BC5FF42AC839")
    IZcadPlotConfigurations : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE Item(
             VARIANT Index,
             IZcadPlotConfiguration **pItem) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Count(
             long *pCount) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get__NewEnum(
             LPUNKNOWN *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Add(
             BSTR Name,
             VARIANT ModelType,
             IZcadPlotConfiguration **pPlotConfig) = 0;

    };

#else

    typedef struct IZcadPlotConfigurationsVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadPlotConfigurations * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadPlotConfigurations * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadPlotConfigurations * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadPlotConfigurations * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadPlotConfigurations * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadPlotConfigurations * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadPlotConfigurations * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadPlotConfigurations * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadPlotConfigurations * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadPlotConfigurations * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadPlotConfigurations * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadPlotConfigurations * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadPlotConfigurations * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadPlotConfigurations * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadPlotConfigurations * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadPlotConfigurations * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadPlotConfigurations * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadPlotConfigurations * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadPlotConfigurations * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadPlotConfigurations * This);

         HRESULT ( STDMETHODCALLTYPE *Item )(
            IZcadPlotConfigurations * This,
             VARIANT Index,
             IZcadPlotConfiguration **pItem);

         HRESULT ( STDMETHODCALLTYPE *get_Count )(
            IZcadPlotConfigurations * This,
             long *pCount);

         HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            IZcadPlotConfigurations * This,
             LPUNKNOWN *pVal);

         HRESULT ( STDMETHODCALLTYPE *Add )(
            IZcadPlotConfigurations * This,
             BSTR Name,
             VARIANT ModelType,
             IZcadPlotConfiguration **pPlotConfig);

        END_INTERFACE
    } IZcadPlotConfigurationsVtbl;

    interface IZcadPlotConfigurations
    {
        CONST_VTBL struct IZcadPlotConfigurationsVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadPlotConfigurations_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadPlotConfigurations_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadPlotConfigurations_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadPlotConfigurations_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadPlotConfigurations_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadPlotConfigurations_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadPlotConfigurations_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadPlotConfigurations_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadPlotConfigurations_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadPlotConfigurations_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadPlotConfigurations_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadPlotConfigurations_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadPlotConfigurations_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadPlotConfigurations_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadPlotConfigurations_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadPlotConfigurations_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadPlotConfigurations_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadPlotConfigurations_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadPlotConfigurations_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadPlotConfigurations_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadPlotConfigurations_Item(This,Index,pItem)	\
    ((This)->lpVtbl -> Item(This,Index,pItem))

#define IZcadPlotConfigurations_get_Count(This,pCount)	\
    ((This)->lpVtbl -> get_Count(This,pCount))

#define IZcadPlotConfigurations_get__NewEnum(This,pVal)	\
    ((This)->lpVtbl -> get__NewEnum(This,pVal))

#define IZcadPlotConfigurations_Add(This,Name,ModelType,pPlotConfig)	\
    ((This)->lpVtbl -> Add(This,Name,ModelType,pPlotConfig))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadPlotConfigurations,0xEC923069,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923069-5A17-11E7-B72E-BC5FF42AC839")
ZcadPlotConfigurations;
#endif

DEFINE_GUID(CLSID_ZcadEntity,0xEC92304D,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC92304D-5A17-11E7-B72E-BC5FF42AC839")
ZcadEntity;
#endif

#ifndef __IZcadShadowDisplay_INTERFACE_DEFINED__
#define __IZcadShadowDisplay_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadShadowDisplay,0x93397123,0x5E07,0x47EB,0xA6,0xBB,0x62,0xA0,0x31,0xBC,0x44,0x37);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("93397123-5E07-47EB-A6BB-62A031BC4437")
    IZcadShadowDisplay : public IUnknown
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_ShadowDisplay(
             ZcShadowDisplayType *shadowDisplay) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ShadowDisplay(
             ZcShadowDisplayType shadowDisplay) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EnableShadowDisplay(
             BOOL *shadowDisplay) = 0;

    };

#else

    typedef struct IZcadShadowDisplayVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadShadowDisplay * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadShadowDisplay * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadShadowDisplay * This);

         HRESULT ( STDMETHODCALLTYPE *get_ShadowDisplay )(
            IZcadShadowDisplay * This,
             ZcShadowDisplayType *shadowDisplay);

         HRESULT ( STDMETHODCALLTYPE *put_ShadowDisplay )(
            IZcadShadowDisplay * This,
             ZcShadowDisplayType shadowDisplay);

         HRESULT ( STDMETHODCALLTYPE *get_EnableShadowDisplay )(
            IZcadShadowDisplay * This,
             BOOL *shadowDisplay);

        END_INTERFACE
    } IZcadShadowDisplayVtbl;

    interface IZcadShadowDisplay
    {
        CONST_VTBL struct IZcadShadowDisplayVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadShadowDisplay_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadShadowDisplay_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadShadowDisplay_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadShadowDisplay_get_ShadowDisplay(This,shadowDisplay)	\
    ((This)->lpVtbl -> get_ShadowDisplay(This,shadowDisplay))

#define IZcadShadowDisplay_put_ShadowDisplay(This,shadowDisplay)	\
    ((This)->lpVtbl -> put_ShadowDisplay(This,shadowDisplay))

#define IZcadShadowDisplay_get_EnableShadowDisplay(This,shadowDisplay)	\
    ((This)->lpVtbl -> get_EnableShadowDisplay(This,shadowDisplay))

#endif
#endif


#endif

#ifndef __IZcadRasterImage_INTERFACE_DEFINED__
#define __IZcadRasterImage_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadRasterImage,0xEC923005,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923005-5A17-11E7-B72E-BC5FF42AC839")
    IZcadRasterImage : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Brightness(
             long *brightness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Brightness(
             long brightness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Contrast(
             long *contrast) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Contrast(
             long contrast) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Fade(
             long *fade) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Fade(
             long fade) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Origin(
             VARIANT *origin) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Origin(
             VARIANT Origin) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Rotation(
             ZCAD_ANGLE *rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Rotation(
             ZCAD_ANGLE rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ImageWidth(
             double *width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ImageWidth(
             double width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ImageHeight(
             double *height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ImageHeight(
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Name(
             BSTR *Name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Name(
             BSTR Name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ImageFile(
             BSTR imageFileName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ImageFile(
             BSTR *imageFileName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ImageVisibility(
             VARIANT_BOOL *fVisible) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ImageVisibility(
             VARIANT_BOOL fVisible) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ClippingEnabled(
             VARIANT_BOOL *kClip) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ClippingEnabled(
             VARIANT_BOOL kClip) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Transparency(
             VARIANT_BOOL *bTransp) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Transparency(
             VARIANT_BOOL bTransp) = 0;

        virtual  HRESULT STDMETHODCALLTYPE ClipBoundary(
             VARIANT boundry) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Height(
             double *pixelHeight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Width(
             double *pixelWidth) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ShowRotation(
             VARIANT_BOOL *bShow) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ShowRotation(
             VARIANT_BOOL bShow) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ScaleFactor(
             ZCAD_NOUNITS *scaleFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ScaleFactor(
             ZCAD_NOUNITS scaleFactor) = 0;

    };

#else

    typedef struct IZcadRasterImageVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadRasterImage * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadRasterImage * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadRasterImage * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadRasterImage * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadRasterImage * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadRasterImage * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadRasterImage * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadRasterImage * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadRasterImage * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadRasterImage * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadRasterImage * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadRasterImage * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadRasterImage * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadRasterImage * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadRasterImage * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadRasterImage * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadRasterImage * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadRasterImage * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadRasterImage * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadRasterImage * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadRasterImage * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadRasterImage * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadRasterImage * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadRasterImage * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadRasterImage * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadRasterImage * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadRasterImage * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadRasterImage * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadRasterImage * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadRasterImage * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadRasterImage * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadRasterImage * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadRasterImage * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadRasterImage * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadRasterImage * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadRasterImage * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadRasterImage * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadRasterImage * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadRasterImage * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadRasterImage * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadRasterImage * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadRasterImage * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadRasterImage * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadRasterImage * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadRasterImage * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadRasterImage * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadRasterImage * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadRasterImage * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadRasterImage * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadRasterImage * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadRasterImage * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadRasterImage * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadRasterImage * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadRasterImage * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadRasterImage * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadRasterImage * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadRasterImage * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Brightness )(
            IZcadRasterImage * This,
             long *brightness);

         HRESULT ( STDMETHODCALLTYPE *put_Brightness )(
            IZcadRasterImage * This,
             long brightness);

         HRESULT ( STDMETHODCALLTYPE *get_Contrast )(
            IZcadRasterImage * This,
             long *contrast);

         HRESULT ( STDMETHODCALLTYPE *put_Contrast )(
            IZcadRasterImage * This,
             long contrast);

         HRESULT ( STDMETHODCALLTYPE *get_Fade )(
            IZcadRasterImage * This,
             long *fade);

         HRESULT ( STDMETHODCALLTYPE *put_Fade )(
            IZcadRasterImage * This,
             long fade);

         HRESULT ( STDMETHODCALLTYPE *get_Origin )(
            IZcadRasterImage * This,
             VARIANT *origin);

         HRESULT ( STDMETHODCALLTYPE *put_Origin )(
            IZcadRasterImage * This,
             VARIANT Origin);

         HRESULT ( STDMETHODCALLTYPE *get_Rotation )(
            IZcadRasterImage * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_Rotation )(
            IZcadRasterImage * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_ImageWidth )(
            IZcadRasterImage * This,
             double *width);

         HRESULT ( STDMETHODCALLTYPE *put_ImageWidth )(
            IZcadRasterImage * This,
             double width);

         HRESULT ( STDMETHODCALLTYPE *get_ImageHeight )(
            IZcadRasterImage * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_ImageHeight )(
            IZcadRasterImage * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadRasterImage * This,
             BSTR *Name);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadRasterImage * This,
             BSTR Name);

         HRESULT ( STDMETHODCALLTYPE *put_ImageFile )(
            IZcadRasterImage * This,
             BSTR imageFileName);

         HRESULT ( STDMETHODCALLTYPE *get_ImageFile )(
            IZcadRasterImage * This,
             BSTR *imageFileName);

         HRESULT ( STDMETHODCALLTYPE *get_ImageVisibility )(
            IZcadRasterImage * This,
             VARIANT_BOOL *fVisible);

         HRESULT ( STDMETHODCALLTYPE *put_ImageVisibility )(
            IZcadRasterImage * This,
             VARIANT_BOOL fVisible);

         HRESULT ( STDMETHODCALLTYPE *get_ClippingEnabled )(
            IZcadRasterImage * This,
             VARIANT_BOOL *kClip);

         HRESULT ( STDMETHODCALLTYPE *put_ClippingEnabled )(
            IZcadRasterImage * This,
             VARIANT_BOOL kClip);

         HRESULT ( STDMETHODCALLTYPE *get_Transparency )(
            IZcadRasterImage * This,
             VARIANT_BOOL *bTransp);

         HRESULT ( STDMETHODCALLTYPE *put_Transparency )(
            IZcadRasterImage * This,
             VARIANT_BOOL bTransp);

         HRESULT ( STDMETHODCALLTYPE *ClipBoundary )(
            IZcadRasterImage * This,
             VARIANT boundry);

         HRESULT ( STDMETHODCALLTYPE *get_Height )(
            IZcadRasterImage * This,
             double *pixelHeight);

         HRESULT ( STDMETHODCALLTYPE *get_Width )(
            IZcadRasterImage * This,
             double *pixelWidth);

         HRESULT ( STDMETHODCALLTYPE *get_ShowRotation )(
            IZcadRasterImage * This,
             VARIANT_BOOL *bShow);

         HRESULT ( STDMETHODCALLTYPE *put_ShowRotation )(
            IZcadRasterImage * This,
             VARIANT_BOOL bShow);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )(
            IZcadRasterImage * This,
             ZCAD_NOUNITS *scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )(
            IZcadRasterImage * This,
             ZCAD_NOUNITS scaleFactor);

        END_INTERFACE
    } IZcadRasterImageVtbl;

    interface IZcadRasterImage
    {
        CONST_VTBL struct IZcadRasterImageVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadRasterImage_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadRasterImage_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadRasterImage_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadRasterImage_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadRasterImage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadRasterImage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadRasterImage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadRasterImage_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadRasterImage_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadRasterImage_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadRasterImage_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadRasterImage_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadRasterImage_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadRasterImage_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadRasterImage_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadRasterImage_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadRasterImage_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadRasterImage_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadRasterImage_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadRasterImage_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadRasterImage_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadRasterImage_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadRasterImage_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadRasterImage_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadRasterImage_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadRasterImage_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadRasterImage_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadRasterImage_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadRasterImage_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadRasterImage_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadRasterImage_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadRasterImage_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadRasterImage_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadRasterImage_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadRasterImage_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadRasterImage_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadRasterImage_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadRasterImage_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadRasterImage_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadRasterImage_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadRasterImage_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadRasterImage_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadRasterImage_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadRasterImage_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadRasterImage_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadRasterImage_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadRasterImage_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadRasterImage_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadRasterImage_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadRasterImage_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadRasterImage_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadRasterImage_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadRasterImage_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadRasterImage_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadRasterImage_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadRasterImage_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadRasterImage_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadRasterImage_get_Brightness(This,brightness)	\
    ((This)->lpVtbl -> get_Brightness(This,brightness))

#define IZcadRasterImage_put_Brightness(This,brightness)	\
    ((This)->lpVtbl -> put_Brightness(This,brightness))

#define IZcadRasterImage_get_Contrast(This,contrast)	\
    ((This)->lpVtbl -> get_Contrast(This,contrast))

#define IZcadRasterImage_put_Contrast(This,contrast)	\
    ((This)->lpVtbl -> put_Contrast(This,contrast))

#define IZcadRasterImage_get_Fade(This,fade)	\
    ((This)->lpVtbl -> get_Fade(This,fade))

#define IZcadRasterImage_put_Fade(This,fade)	\
    ((This)->lpVtbl -> put_Fade(This,fade))

#define IZcadRasterImage_get_Origin(This,origin)	\
    ((This)->lpVtbl -> get_Origin(This,origin))

#define IZcadRasterImage_put_Origin(This,Origin)	\
    ((This)->lpVtbl -> put_Origin(This,Origin))

#define IZcadRasterImage_get_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_Rotation(This,rotAngle))

#define IZcadRasterImage_put_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_Rotation(This,rotAngle))

#define IZcadRasterImage_get_ImageWidth(This,width)	\
    ((This)->lpVtbl -> get_ImageWidth(This,width))

#define IZcadRasterImage_put_ImageWidth(This,width)	\
    ((This)->lpVtbl -> put_ImageWidth(This,width))

#define IZcadRasterImage_get_ImageHeight(This,height)	\
    ((This)->lpVtbl -> get_ImageHeight(This,height))

#define IZcadRasterImage_put_ImageHeight(This,height)	\
    ((This)->lpVtbl -> put_ImageHeight(This,height))

#define IZcadRasterImage_get_Name(This,Name)	\
    ((This)->lpVtbl -> get_Name(This,Name))

#define IZcadRasterImage_put_Name(This,Name)	\
    ((This)->lpVtbl -> put_Name(This,Name))

#define IZcadRasterImage_put_ImageFile(This,imageFileName)	\
    ((This)->lpVtbl -> put_ImageFile(This,imageFileName))

#define IZcadRasterImage_get_ImageFile(This,imageFileName)	\
    ((This)->lpVtbl -> get_ImageFile(This,imageFileName))

#define IZcadRasterImage_get_ImageVisibility(This,fVisible)	\
    ((This)->lpVtbl -> get_ImageVisibility(This,fVisible))

#define IZcadRasterImage_put_ImageVisibility(This,fVisible)	\
    ((This)->lpVtbl -> put_ImageVisibility(This,fVisible))

#define IZcadRasterImage_get_ClippingEnabled(This,kClip)	\
    ((This)->lpVtbl -> get_ClippingEnabled(This,kClip))

#define IZcadRasterImage_put_ClippingEnabled(This,kClip)	\
    ((This)->lpVtbl -> put_ClippingEnabled(This,kClip))

#define IZcadRasterImage_get_Transparency(This,bTransp)	\
    ((This)->lpVtbl -> get_Transparency(This,bTransp))

#define IZcadRasterImage_put_Transparency(This,bTransp)	\
    ((This)->lpVtbl -> put_Transparency(This,bTransp))

#define IZcadRasterImage_ClipBoundary(This,boundry)	\
    ((This)->lpVtbl -> ClipBoundary(This,boundry))

#define IZcadRasterImage_get_Height(This,pixelHeight)	\
    ((This)->lpVtbl -> get_Height(This,pixelHeight))

#define IZcadRasterImage_get_Width(This,pixelWidth)	\
    ((This)->lpVtbl -> get_Width(This,pixelWidth))

#define IZcadRasterImage_get_ShowRotation(This,bShow)	\
    ((This)->lpVtbl -> get_ShowRotation(This,bShow))

#define IZcadRasterImage_put_ShowRotation(This,bShow)	\
    ((This)->lpVtbl -> put_ShowRotation(This,bShow))

#define IZcadRasterImage_get_ScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> get_ScaleFactor(This,scaleFactor))

#define IZcadRasterImage_put_ScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> put_ScaleFactor(This,scaleFactor))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadRasterImage,0xEC923047,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923047-5A17-11E7-B72E-BC5FF42AC839")
ZcadRasterImage;
#endif

#ifndef __IZcad3DFace_INTERFACE_DEFINED__
#define __IZcad3DFace_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcad3DFace,0xEC9231DC,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9231DC-5A17-11E7-B72E-BC5FF42AC839")
    IZcad3DFace : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Coordinates(
             VARIANT *corners) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Coordinates(
             VARIANT corners) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_VisibilityEdge1(
             VARIANT_BOOL *visibility) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_VisibilityEdge1(
             VARIANT_BOOL visibility) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_VisibilityEdge2(
             VARIANT_BOOL *visibility) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_VisibilityEdge2(
             VARIANT_BOOL visibility) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_VisibilityEdge3(
             VARIANT_BOOL *visibility) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_VisibilityEdge3(
             VARIANT_BOOL visibility) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_VisibilityEdge4(
             VARIANT_BOOL *visibility) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_VisibilityEdge4(
             VARIANT_BOOL visibility) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetInvisibleEdge(
             int Index,
             VARIANT_BOOL *bVisible) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetInvisibleEdge(
             int Index,
             VARIANT_BOOL State) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Coordinate(
             int Index,
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Coordinate(
             int Index,
             VARIANT newVal) = 0;

    };

#else

    typedef struct IZcad3DFaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcad3DFace * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcad3DFace * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcad3DFace * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcad3DFace * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcad3DFace * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcad3DFace * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcad3DFace * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcad3DFace * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcad3DFace * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcad3DFace * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcad3DFace * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcad3DFace * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcad3DFace * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcad3DFace * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcad3DFace * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcad3DFace * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcad3DFace * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcad3DFace * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcad3DFace * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcad3DFace * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcad3DFace * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcad3DFace * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcad3DFace * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcad3DFace * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcad3DFace * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcad3DFace * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcad3DFace * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcad3DFace * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcad3DFace * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcad3DFace * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcad3DFace * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcad3DFace * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcad3DFace * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcad3DFace * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcad3DFace * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcad3DFace * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcad3DFace * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcad3DFace * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcad3DFace * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcad3DFace * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcad3DFace * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcad3DFace * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcad3DFace * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcad3DFace * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcad3DFace * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcad3DFace * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcad3DFace * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcad3DFace * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcad3DFace * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcad3DFace * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcad3DFace * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcad3DFace * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcad3DFace * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcad3DFace * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcad3DFace * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcad3DFace * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcad3DFace * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Coordinates )(
            IZcad3DFace * This,
             VARIANT *corners);

         HRESULT ( STDMETHODCALLTYPE *put_Coordinates )(
            IZcad3DFace * This,
             VARIANT corners);

         HRESULT ( STDMETHODCALLTYPE *get_VisibilityEdge1 )(
            IZcad3DFace * This,
             VARIANT_BOOL *visibility);

         HRESULT ( STDMETHODCALLTYPE *put_VisibilityEdge1 )(
            IZcad3DFace * This,
             VARIANT_BOOL visibility);

         HRESULT ( STDMETHODCALLTYPE *get_VisibilityEdge2 )(
            IZcad3DFace * This,
             VARIANT_BOOL *visibility);

         HRESULT ( STDMETHODCALLTYPE *put_VisibilityEdge2 )(
            IZcad3DFace * This,
             VARIANT_BOOL visibility);

         HRESULT ( STDMETHODCALLTYPE *get_VisibilityEdge3 )(
            IZcad3DFace * This,
             VARIANT_BOOL *visibility);

         HRESULT ( STDMETHODCALLTYPE *put_VisibilityEdge3 )(
            IZcad3DFace * This,
             VARIANT_BOOL visibility);

         HRESULT ( STDMETHODCALLTYPE *get_VisibilityEdge4 )(
            IZcad3DFace * This,
             VARIANT_BOOL *visibility);

         HRESULT ( STDMETHODCALLTYPE *put_VisibilityEdge4 )(
            IZcad3DFace * This,
             VARIANT_BOOL visibility);

         HRESULT ( STDMETHODCALLTYPE *GetInvisibleEdge )(
            IZcad3DFace * This,
             int Index,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *SetInvisibleEdge )(
            IZcad3DFace * This,
             int Index,
             VARIANT_BOOL State);

         HRESULT ( STDMETHODCALLTYPE *get_Coordinate )(
            IZcad3DFace * This,
             int Index,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_Coordinate )(
            IZcad3DFace * This,
             int Index,
             VARIANT newVal);

        END_INTERFACE
    } IZcad3DFaceVtbl;

    interface IZcad3DFace
    {
        CONST_VTBL struct IZcad3DFaceVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcad3DFace_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcad3DFace_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcad3DFace_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcad3DFace_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcad3DFace_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcad3DFace_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcad3DFace_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcad3DFace_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcad3DFace_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcad3DFace_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcad3DFace_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcad3DFace_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcad3DFace_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcad3DFace_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcad3DFace_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcad3DFace_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcad3DFace_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcad3DFace_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcad3DFace_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcad3DFace_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcad3DFace_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcad3DFace_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcad3DFace_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcad3DFace_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcad3DFace_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcad3DFace_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcad3DFace_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcad3DFace_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcad3DFace_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcad3DFace_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcad3DFace_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcad3DFace_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcad3DFace_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcad3DFace_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcad3DFace_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcad3DFace_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcad3DFace_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcad3DFace_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcad3DFace_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcad3DFace_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcad3DFace_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcad3DFace_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcad3DFace_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcad3DFace_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcad3DFace_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcad3DFace_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcad3DFace_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcad3DFace_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcad3DFace_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcad3DFace_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcad3DFace_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcad3DFace_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcad3DFace_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcad3DFace_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcad3DFace_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcad3DFace_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcad3DFace_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcad3DFace_get_Coordinates(This,corners)	\
    ((This)->lpVtbl -> get_Coordinates(This,corners))

#define IZcad3DFace_put_Coordinates(This,corners)	\
    ((This)->lpVtbl -> put_Coordinates(This,corners))

#define IZcad3DFace_get_VisibilityEdge1(This,visibility)	\
    ((This)->lpVtbl -> get_VisibilityEdge1(This,visibility))

#define IZcad3DFace_put_VisibilityEdge1(This,visibility)	\
    ((This)->lpVtbl -> put_VisibilityEdge1(This,visibility))

#define IZcad3DFace_get_VisibilityEdge2(This,visibility)	\
    ((This)->lpVtbl -> get_VisibilityEdge2(This,visibility))

#define IZcad3DFace_put_VisibilityEdge2(This,visibility)	\
    ((This)->lpVtbl -> put_VisibilityEdge2(This,visibility))

#define IZcad3DFace_get_VisibilityEdge3(This,visibility)	\
    ((This)->lpVtbl -> get_VisibilityEdge3(This,visibility))

#define IZcad3DFace_put_VisibilityEdge3(This,visibility)	\
    ((This)->lpVtbl -> put_VisibilityEdge3(This,visibility))

#define IZcad3DFace_get_VisibilityEdge4(This,visibility)	\
    ((This)->lpVtbl -> get_VisibilityEdge4(This,visibility))

#define IZcad3DFace_put_VisibilityEdge4(This,visibility)	\
    ((This)->lpVtbl -> put_VisibilityEdge4(This,visibility))

#define IZcad3DFace_GetInvisibleEdge(This,Index,bVisible)	\
    ((This)->lpVtbl -> GetInvisibleEdge(This,Index,bVisible))

#define IZcad3DFace_SetInvisibleEdge(This,Index,State)	\
    ((This)->lpVtbl -> SetInvisibleEdge(This,Index,State))

#define IZcad3DFace_get_Coordinate(This,Index,pVal)	\
    ((This)->lpVtbl -> get_Coordinate(This,Index,pVal))

#define IZcad3DFace_put_Coordinate(This,Index,newVal)	\
    ((This)->lpVtbl -> put_Coordinate(This,Index,newVal))

#endif
#endif


#endif

DEFINE_GUID(CLSID_Zcad3DFace,0xEC9231B4,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9231B4-5A17-11E7-B72E-BC5FF42AC839")
Zcad3DFace;
#endif

#ifndef __IZcad3DPolyline_INTERFACE_DEFINED__
#define __IZcad3DPolyline_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcad3DPolyline,0xEC923081,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923081-5A17-11E7-B72E-BC5FF42AC839")
    IZcad3DPolyline : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Coordinates(
             VARIANT *coordinates) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Coordinates(
             VARIANT coordinates) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AppendVertex(
             VARIANT Vertex) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Explode(
             VARIANT *pArrayObjs) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Coordinate(
             int Index,
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Coordinate(
             int Index,
             VARIANT newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Type(
             Zc3DPolylineType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Type(
             Zc3DPolylineType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Closed(
             VARIANT_BOOL *fClose) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Closed(
             VARIANT_BOOL fClose) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Length(
             double *length) = 0;

    };

#else

    typedef struct IZcad3DPolylineVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcad3DPolyline * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcad3DPolyline * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcad3DPolyline * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcad3DPolyline * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcad3DPolyline * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcad3DPolyline * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcad3DPolyline * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcad3DPolyline * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcad3DPolyline * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcad3DPolyline * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcad3DPolyline * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcad3DPolyline * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcad3DPolyline * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcad3DPolyline * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcad3DPolyline * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcad3DPolyline * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcad3DPolyline * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcad3DPolyline * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcad3DPolyline * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcad3DPolyline * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcad3DPolyline * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcad3DPolyline * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcad3DPolyline * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcad3DPolyline * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcad3DPolyline * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcad3DPolyline * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcad3DPolyline * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcad3DPolyline * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcad3DPolyline * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcad3DPolyline * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcad3DPolyline * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcad3DPolyline * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcad3DPolyline * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcad3DPolyline * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcad3DPolyline * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcad3DPolyline * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcad3DPolyline * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcad3DPolyline * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcad3DPolyline * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcad3DPolyline * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcad3DPolyline * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcad3DPolyline * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcad3DPolyline * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcad3DPolyline * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcad3DPolyline * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcad3DPolyline * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcad3DPolyline * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcad3DPolyline * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcad3DPolyline * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcad3DPolyline * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcad3DPolyline * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcad3DPolyline * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcad3DPolyline * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcad3DPolyline * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcad3DPolyline * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcad3DPolyline * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcad3DPolyline * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Coordinates )(
            IZcad3DPolyline * This,
             VARIANT *coordinates);

         HRESULT ( STDMETHODCALLTYPE *put_Coordinates )(
            IZcad3DPolyline * This,
             VARIANT coordinates);

         HRESULT ( STDMETHODCALLTYPE *AppendVertex )(
            IZcad3DPolyline * This,
             VARIANT Vertex);

         HRESULT ( STDMETHODCALLTYPE *Explode )(
            IZcad3DPolyline * This,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *get_Coordinate )(
            IZcad3DPolyline * This,
             int Index,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_Coordinate )(
            IZcad3DPolyline * This,
             int Index,
             VARIANT newVal);

         HRESULT ( STDMETHODCALLTYPE *get_Type )(
            IZcad3DPolyline * This,
             Zc3DPolylineType *type);

         HRESULT ( STDMETHODCALLTYPE *put_Type )(
            IZcad3DPolyline * This,
             Zc3DPolylineType type);

         HRESULT ( STDMETHODCALLTYPE *get_Closed )(
            IZcad3DPolyline * This,
             VARIANT_BOOL *fClose);

         HRESULT ( STDMETHODCALLTYPE *put_Closed )(
            IZcad3DPolyline * This,
             VARIANT_BOOL fClose);

         HRESULT ( STDMETHODCALLTYPE *get_Length )(
            IZcad3DPolyline * This,
             double *length);

        END_INTERFACE
    } IZcad3DPolylineVtbl;

    interface IZcad3DPolyline
    {
        CONST_VTBL struct IZcad3DPolylineVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcad3DPolyline_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcad3DPolyline_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcad3DPolyline_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcad3DPolyline_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcad3DPolyline_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcad3DPolyline_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcad3DPolyline_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcad3DPolyline_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcad3DPolyline_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcad3DPolyline_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcad3DPolyline_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcad3DPolyline_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcad3DPolyline_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcad3DPolyline_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcad3DPolyline_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcad3DPolyline_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcad3DPolyline_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcad3DPolyline_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcad3DPolyline_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcad3DPolyline_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcad3DPolyline_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcad3DPolyline_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcad3DPolyline_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcad3DPolyline_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcad3DPolyline_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcad3DPolyline_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcad3DPolyline_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcad3DPolyline_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcad3DPolyline_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcad3DPolyline_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcad3DPolyline_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcad3DPolyline_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcad3DPolyline_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcad3DPolyline_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcad3DPolyline_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcad3DPolyline_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcad3DPolyline_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcad3DPolyline_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcad3DPolyline_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcad3DPolyline_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcad3DPolyline_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcad3DPolyline_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcad3DPolyline_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcad3DPolyline_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcad3DPolyline_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcad3DPolyline_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcad3DPolyline_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcad3DPolyline_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcad3DPolyline_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcad3DPolyline_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcad3DPolyline_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcad3DPolyline_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcad3DPolyline_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcad3DPolyline_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcad3DPolyline_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcad3DPolyline_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcad3DPolyline_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcad3DPolyline_get_Coordinates(This,coordinates)	\
    ((This)->lpVtbl -> get_Coordinates(This,coordinates))

#define IZcad3DPolyline_put_Coordinates(This,coordinates)	\
    ((This)->lpVtbl -> put_Coordinates(This,coordinates))

#define IZcad3DPolyline_AppendVertex(This,Vertex)	\
    ((This)->lpVtbl -> AppendVertex(This,Vertex))

#define IZcad3DPolyline_Explode(This,pArrayObjs)	\
    ((This)->lpVtbl -> Explode(This,pArrayObjs))

#define IZcad3DPolyline_get_Coordinate(This,Index,pVal)	\
    ((This)->lpVtbl -> get_Coordinate(This,Index,pVal))

#define IZcad3DPolyline_put_Coordinate(This,Index,newVal)	\
    ((This)->lpVtbl -> put_Coordinate(This,Index,newVal))

#define IZcad3DPolyline_get_Type(This,type)	\
    ((This)->lpVtbl -> get_Type(This,type))

#define IZcad3DPolyline_put_Type(This,type)	\
    ((This)->lpVtbl -> put_Type(This,type))

#define IZcad3DPolyline_get_Closed(This,fClose)	\
    ((This)->lpVtbl -> get_Closed(This,fClose))

#define IZcad3DPolyline_put_Closed(This,fClose)	\
    ((This)->lpVtbl -> put_Closed(This,fClose))

#define IZcad3DPolyline_get_Length(This,length)	\
    ((This)->lpVtbl -> get_Length(This,length))

#endif
#endif


#endif

DEFINE_GUID(CLSID_Zcad3DPolyline,0xEC92304C,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC92304C-5A17-11E7-B72E-BC5FF42AC839")
Zcad3DPolyline;
#endif

#ifndef __IZcadRegion_INTERFACE_DEFINED__
#define __IZcadRegion_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadRegion,0xEC9231E9,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9231E9-5A17-11E7-B72E-BC5FF42AC839")
    IZcadRegion : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Area(
             double *area) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Centroid(
             VARIANT *centroid) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MomentOfInertia(
             VARIANT *momentInertia) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Normal(
             VARIANT *normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Perimeter(
             double *perimeter) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PrincipalDirections(
             VARIANT *prinDir) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PrincipalMoments(
             VARIANT *prinMoments) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ProductOfInertia(
             double *prodInertia) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_RadiiOfGyration(
             VARIANT *radiiGyration) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Boolean(
             ZcBooleanType Operation,
             IZcadRegion *Object) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Explode(
             VARIANT *pArrayObjs) = 0;

    };

#else

    typedef struct IZcadRegionVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadRegion * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadRegion * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadRegion * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadRegion * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadRegion * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadRegion * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadRegion * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadRegion * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadRegion * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadRegion * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadRegion * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadRegion * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadRegion * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadRegion * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadRegion * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadRegion * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadRegion * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadRegion * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadRegion * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadRegion * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadRegion * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadRegion * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadRegion * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadRegion * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadRegion * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadRegion * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadRegion * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadRegion * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadRegion * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadRegion * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadRegion * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadRegion * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadRegion * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadRegion * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadRegion * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadRegion * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadRegion * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadRegion * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadRegion * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadRegion * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadRegion * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadRegion * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadRegion * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadRegion * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadRegion * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadRegion * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadRegion * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadRegion * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadRegion * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadRegion * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadRegion * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadRegion * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadRegion * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadRegion * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadRegion * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadRegion * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadRegion * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Area )(
            IZcadRegion * This,
             double *area);

         HRESULT ( STDMETHODCALLTYPE *get_Centroid )(
            IZcadRegion * This,
             VARIANT *centroid);

         HRESULT ( STDMETHODCALLTYPE *get_MomentOfInertia )(
            IZcadRegion * This,
             VARIANT *momentInertia);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadRegion * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *get_Perimeter )(
            IZcadRegion * This,
             double *perimeter);

         HRESULT ( STDMETHODCALLTYPE *get_PrincipalDirections )(
            IZcadRegion * This,
             VARIANT *prinDir);

         HRESULT ( STDMETHODCALLTYPE *get_PrincipalMoments )(
            IZcadRegion * This,
             VARIANT *prinMoments);

         HRESULT ( STDMETHODCALLTYPE *get_ProductOfInertia )(
            IZcadRegion * This,
             double *prodInertia);

         HRESULT ( STDMETHODCALLTYPE *get_RadiiOfGyration )(
            IZcadRegion * This,
             VARIANT *radiiGyration);

         HRESULT ( STDMETHODCALLTYPE *Boolean )(
            IZcadRegion * This,
             ZcBooleanType Operation,
             IZcadRegion *Object);

         HRESULT ( STDMETHODCALLTYPE *Explode )(
            IZcadRegion * This,
             VARIANT *pArrayObjs);

        END_INTERFACE
    } IZcadRegionVtbl;

    interface IZcadRegion
    {
        CONST_VTBL struct IZcadRegionVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadRegion_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadRegion_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadRegion_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadRegion_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadRegion_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadRegion_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadRegion_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadRegion_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadRegion_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadRegion_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadRegion_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadRegion_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadRegion_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadRegion_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadRegion_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadRegion_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadRegion_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadRegion_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadRegion_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadRegion_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadRegion_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadRegion_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadRegion_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadRegion_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadRegion_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadRegion_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadRegion_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadRegion_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadRegion_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadRegion_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadRegion_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadRegion_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadRegion_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadRegion_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadRegion_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadRegion_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadRegion_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadRegion_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadRegion_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadRegion_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadRegion_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadRegion_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadRegion_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadRegion_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadRegion_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadRegion_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadRegion_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadRegion_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadRegion_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadRegion_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadRegion_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadRegion_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadRegion_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadRegion_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadRegion_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadRegion_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadRegion_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadRegion_get_Area(This,area)	\
    ((This)->lpVtbl -> get_Area(This,area))

#define IZcadRegion_get_Centroid(This,centroid)	\
    ((This)->lpVtbl -> get_Centroid(This,centroid))

#define IZcadRegion_get_MomentOfInertia(This,momentInertia)	\
    ((This)->lpVtbl -> get_MomentOfInertia(This,momentInertia))

#define IZcadRegion_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadRegion_get_Perimeter(This,perimeter)	\
    ((This)->lpVtbl -> get_Perimeter(This,perimeter))

#define IZcadRegion_get_PrincipalDirections(This,prinDir)	\
    ((This)->lpVtbl -> get_PrincipalDirections(This,prinDir))

#define IZcadRegion_get_PrincipalMoments(This,prinMoments)	\
    ((This)->lpVtbl -> get_PrincipalMoments(This,prinMoments))

#define IZcadRegion_get_ProductOfInertia(This,prodInertia)	\
    ((This)->lpVtbl -> get_ProductOfInertia(This,prodInertia))

#define IZcadRegion_get_RadiiOfGyration(This,radiiGyration)	\
    ((This)->lpVtbl -> get_RadiiOfGyration(This,radiiGyration))

#define IZcadRegion_Boolean(This,Operation,Object)	\
    ((This)->lpVtbl -> Boolean(This,Operation,Object))

#define IZcadRegion_Explode(This,pArrayObjs)	\
    ((This)->lpVtbl -> Explode(This,pArrayObjs))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadRegion,0xEC9231E7,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9231E7-5A17-11E7-B72E-BC5FF42AC839")
ZcadRegion;
#endif

#ifndef __IZcad3DSolid_INTERFACE_DEFINED__
#define __IZcad3DSolid_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcad3DSolid,0xEC92309B,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC92309B-5A17-11E7-B72E-BC5FF42AC839")
    IZcad3DSolid : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Centroid(
             VARIANT *centroid) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MomentOfInertia(
             VARIANT *momentInertia) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PrincipalDirections(
             VARIANT *prinDir) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PrincipalMoments(
             VARIANT *prinMoments) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ProductOfInertia(
             VARIANT *prodInertia) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_RadiiOfGyration(
             VARIANT *radiiGyration) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Volume(
             double *Volume) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Boolean(
             ZcBooleanType Operation,
             IZcad3DSolid *SolidObject) = 0;

        virtual  HRESULT STDMETHODCALLTYPE CheckInterference(
             IZcad3DSolid *Object,
             VARIANT_BOOL CreateInterferenceSolid,
             VARIANT_BOOL *SolidsInterfere,
             IZcad3DSolid **pIntSolid) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SectionSolid(
             VARIANT Point1,
             VARIANT Point2,
             VARIANT Point3,
             IZcadRegion **pRegion) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SliceSolid(
             VARIANT Point1,
             VARIANT Point2,
             VARIANT Point3,
             VARIANT_BOOL Negative,
             IZcad3DSolid **pNegSideSolid) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SolidType(
             BSTR *solidType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Position(
             VARIANT *position) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Position(
             VARIANT position) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_History(
             VARIANT_BOOL *bHistory) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_History(
             VARIANT_BOOL bHasHistory) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ShowHistory(
             VARIANT_BOOL *position) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ShowHistory(
             VARIANT_BOOL position) = 0;

    };

#else

    typedef struct IZcad3DSolidVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcad3DSolid * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcad3DSolid * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcad3DSolid * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcad3DSolid * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcad3DSolid * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcad3DSolid * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcad3DSolid * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcad3DSolid * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcad3DSolid * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcad3DSolid * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcad3DSolid * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcad3DSolid * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcad3DSolid * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcad3DSolid * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcad3DSolid * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcad3DSolid * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcad3DSolid * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcad3DSolid * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcad3DSolid * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcad3DSolid * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcad3DSolid * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcad3DSolid * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcad3DSolid * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcad3DSolid * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcad3DSolid * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcad3DSolid * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcad3DSolid * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcad3DSolid * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcad3DSolid * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcad3DSolid * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcad3DSolid * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcad3DSolid * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcad3DSolid * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcad3DSolid * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcad3DSolid * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcad3DSolid * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcad3DSolid * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcad3DSolid * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcad3DSolid * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcad3DSolid * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcad3DSolid * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcad3DSolid * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcad3DSolid * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcad3DSolid * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcad3DSolid * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcad3DSolid * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcad3DSolid * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcad3DSolid * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcad3DSolid * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcad3DSolid * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcad3DSolid * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcad3DSolid * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcad3DSolid * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcad3DSolid * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcad3DSolid * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcad3DSolid * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcad3DSolid * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Centroid )(
            IZcad3DSolid * This,
             VARIANT *centroid);

         HRESULT ( STDMETHODCALLTYPE *get_MomentOfInertia )(
            IZcad3DSolid * This,
             VARIANT *momentInertia);

         HRESULT ( STDMETHODCALLTYPE *get_PrincipalDirections )(
            IZcad3DSolid * This,
             VARIANT *prinDir);

         HRESULT ( STDMETHODCALLTYPE *get_PrincipalMoments )(
            IZcad3DSolid * This,
             VARIANT *prinMoments);

         HRESULT ( STDMETHODCALLTYPE *get_ProductOfInertia )(
            IZcad3DSolid * This,
             VARIANT *prodInertia);

         HRESULT ( STDMETHODCALLTYPE *get_RadiiOfGyration )(
            IZcad3DSolid * This,
             VARIANT *radiiGyration);

         HRESULT ( STDMETHODCALLTYPE *get_Volume )(
            IZcad3DSolid * This,
             double *Volume);

         HRESULT ( STDMETHODCALLTYPE *Boolean )(
            IZcad3DSolid * This,
             ZcBooleanType Operation,
             IZcad3DSolid *SolidObject);

         HRESULT ( STDMETHODCALLTYPE *CheckInterference )(
            IZcad3DSolid * This,
             IZcad3DSolid *Object,
             VARIANT_BOOL CreateInterferenceSolid,
             VARIANT_BOOL *SolidsInterfere,
             IZcad3DSolid **pIntSolid);

         HRESULT ( STDMETHODCALLTYPE *SectionSolid )(
            IZcad3DSolid * This,
             VARIANT Point1,
             VARIANT Point2,
             VARIANT Point3,
             IZcadRegion **pRegion);

         HRESULT ( STDMETHODCALLTYPE *SliceSolid )(
            IZcad3DSolid * This,
             VARIANT Point1,
             VARIANT Point2,
             VARIANT Point3,
             VARIANT_BOOL Negative,
             IZcad3DSolid **pNegSideSolid);

         HRESULT ( STDMETHODCALLTYPE *get_SolidType )(
            IZcad3DSolid * This,
             BSTR *solidType);

         HRESULT ( STDMETHODCALLTYPE *get_Position )(
            IZcad3DSolid * This,
             VARIANT *position);

         HRESULT ( STDMETHODCALLTYPE *put_Position )(
            IZcad3DSolid * This,
             VARIANT position);

         HRESULT ( STDMETHODCALLTYPE *get_History )(
            IZcad3DSolid * This,
             VARIANT_BOOL *bHistory);

         HRESULT ( STDMETHODCALLTYPE *put_History )(
            IZcad3DSolid * This,
             VARIANT_BOOL bHasHistory);

         HRESULT ( STDMETHODCALLTYPE *get_ShowHistory )(
            IZcad3DSolid * This,
             VARIANT_BOOL *position);

         HRESULT ( STDMETHODCALLTYPE *put_ShowHistory )(
            IZcad3DSolid * This,
             VARIANT_BOOL position);

        END_INTERFACE
    } IZcad3DSolidVtbl;

    interface IZcad3DSolid
    {
        CONST_VTBL struct IZcad3DSolidVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcad3DSolid_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcad3DSolid_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcad3DSolid_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcad3DSolid_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcad3DSolid_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcad3DSolid_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcad3DSolid_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcad3DSolid_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcad3DSolid_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcad3DSolid_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcad3DSolid_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcad3DSolid_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcad3DSolid_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcad3DSolid_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcad3DSolid_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcad3DSolid_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcad3DSolid_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcad3DSolid_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcad3DSolid_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcad3DSolid_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcad3DSolid_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcad3DSolid_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcad3DSolid_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcad3DSolid_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcad3DSolid_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcad3DSolid_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcad3DSolid_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcad3DSolid_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcad3DSolid_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcad3DSolid_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcad3DSolid_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcad3DSolid_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcad3DSolid_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcad3DSolid_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcad3DSolid_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcad3DSolid_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcad3DSolid_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcad3DSolid_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcad3DSolid_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcad3DSolid_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcad3DSolid_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcad3DSolid_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcad3DSolid_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcad3DSolid_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcad3DSolid_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcad3DSolid_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcad3DSolid_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcad3DSolid_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcad3DSolid_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcad3DSolid_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcad3DSolid_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcad3DSolid_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcad3DSolid_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcad3DSolid_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcad3DSolid_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcad3DSolid_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcad3DSolid_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcad3DSolid_get_Centroid(This,centroid)	\
    ((This)->lpVtbl -> get_Centroid(This,centroid))

#define IZcad3DSolid_get_MomentOfInertia(This,momentInertia)	\
    ((This)->lpVtbl -> get_MomentOfInertia(This,momentInertia))

#define IZcad3DSolid_get_PrincipalDirections(This,prinDir)	\
    ((This)->lpVtbl -> get_PrincipalDirections(This,prinDir))

#define IZcad3DSolid_get_PrincipalMoments(This,prinMoments)	\
    ((This)->lpVtbl -> get_PrincipalMoments(This,prinMoments))

#define IZcad3DSolid_get_ProductOfInertia(This,prodInertia)	\
    ((This)->lpVtbl -> get_ProductOfInertia(This,prodInertia))

#define IZcad3DSolid_get_RadiiOfGyration(This,radiiGyration)	\
    ((This)->lpVtbl -> get_RadiiOfGyration(This,radiiGyration))

#define IZcad3DSolid_get_Volume(This,Volume)	\
    ((This)->lpVtbl -> get_Volume(This,Volume))

#define IZcad3DSolid_Boolean(This,Operation,SolidObject)	\
    ((This)->lpVtbl -> Boolean(This,Operation,SolidObject))

#define IZcad3DSolid_CheckInterference(This,Object,CreateInterferenceSolid,SolidsInterfere,pIntSolid)	\
    ((This)->lpVtbl -> CheckInterference(This,Object,CreateInterferenceSolid,SolidsInterfere,pIntSolid))

#define IZcad3DSolid_SectionSolid(This,Point1,Point2,Point3,pRegion)	\
    ((This)->lpVtbl -> SectionSolid(This,Point1,Point2,Point3,pRegion))

#define IZcad3DSolid_SliceSolid(This,Point1,Point2,Point3,Negative,pNegSideSolid)	\
    ((This)->lpVtbl -> SliceSolid(This,Point1,Point2,Point3,Negative,pNegSideSolid))

#define IZcad3DSolid_get_SolidType(This,solidType)	\
    ((This)->lpVtbl -> get_SolidType(This,solidType))

#define IZcad3DSolid_get_Position(This,position)	\
    ((This)->lpVtbl -> get_Position(This,position))

#define IZcad3DSolid_put_Position(This,position)	\
    ((This)->lpVtbl -> put_Position(This,position))

#define IZcad3DSolid_get_History(This,bHistory)	\
    ((This)->lpVtbl -> get_History(This,bHistory))

#define IZcad3DSolid_put_History(This,bHasHistory)	\
    ((This)->lpVtbl -> put_History(This,bHasHistory))

#define IZcad3DSolid_get_ShowHistory(This,position)	\
    ((This)->lpVtbl -> get_ShowHistory(This,position))

#define IZcad3DSolid_put_ShowHistory(This,position)	\
    ((This)->lpVtbl -> put_ShowHistory(This,position))

#endif
#endif


#endif

DEFINE_GUID(CLSID_Zcad3DSolid,0xEC923173,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923173-5A17-11E7-B72E-BC5FF42AC839")
Zcad3DSolid;
#endif

#ifndef __IZcadArc_INTERFACE_DEFINED__
#define __IZcadArc_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadArc,0xEC923095,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923095-5A17-11E7-B72E-BC5FF42AC839")
    IZcadArc : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_StartPoint(
             VARIANT *startPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Center(
             VARIANT *centerPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Center(
             VARIANT centerPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EndPoint(
             VARIANT *endPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Radius(
             double *Radius) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Radius(
             double Radius) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_StartAngle(
             ZCAD_ANGLE *Angle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StartAngle(
             ZCAD_ANGLE Angle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EndAngle(
             ZCAD_ANGLE *Angle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_EndAngle(
             ZCAD_ANGLE Angle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TotalAngle(
             ZCAD_ANGLE *totalAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArcLength(
             ZCAD_DISTANCE *arcLength) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Thickness(
             double *thickness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Thickness(
             double thickness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Offset(
             double Distance,
             VARIANT *pOffsetCurves) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Area(
             double *area) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Normal(
             VARIANT *normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Normal(
             VARIANT normal) = 0;

    };

#else

    typedef struct IZcadArcVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadArc * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadArc * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadArc * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadArc * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadArc * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadArc * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadArc * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadArc * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadArc * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadArc * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadArc * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadArc * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadArc * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadArc * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadArc * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadArc * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadArc * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadArc * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadArc * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadArc * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadArc * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadArc * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadArc * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadArc * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadArc * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadArc * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadArc * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadArc * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadArc * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadArc * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadArc * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadArc * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadArc * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadArc * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadArc * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadArc * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadArc * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadArc * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadArc * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadArc * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadArc * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadArc * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadArc * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadArc * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadArc * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadArc * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadArc * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadArc * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadArc * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadArc * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadArc * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadArc * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadArc * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadArc * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadArc * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadArc * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadArc * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_StartPoint )(
            IZcadArc * This,
             VARIANT *startPoint);

         HRESULT ( STDMETHODCALLTYPE *get_Center )(
            IZcadArc * This,
             VARIANT *centerPoint);

         HRESULT ( STDMETHODCALLTYPE *put_Center )(
            IZcadArc * This,
             VARIANT centerPoint);

         HRESULT ( STDMETHODCALLTYPE *get_EndPoint )(
            IZcadArc * This,
             VARIANT *endPoint);

         HRESULT ( STDMETHODCALLTYPE *get_Radius )(
            IZcadArc * This,
             double *Radius);

         HRESULT ( STDMETHODCALLTYPE *put_Radius )(
            IZcadArc * This,
             double Radius);

         HRESULT ( STDMETHODCALLTYPE *get_StartAngle )(
            IZcadArc * This,
             ZCAD_ANGLE *Angle);

         HRESULT ( STDMETHODCALLTYPE *put_StartAngle )(
            IZcadArc * This,
             ZCAD_ANGLE Angle);

         HRESULT ( STDMETHODCALLTYPE *get_EndAngle )(
            IZcadArc * This,
             ZCAD_ANGLE *Angle);

         HRESULT ( STDMETHODCALLTYPE *put_EndAngle )(
            IZcadArc * This,
             ZCAD_ANGLE Angle);

         HRESULT ( STDMETHODCALLTYPE *get_TotalAngle )(
            IZcadArc * This,
             ZCAD_ANGLE *totalAngle);

         HRESULT ( STDMETHODCALLTYPE *get_ArcLength )(
            IZcadArc * This,
             ZCAD_DISTANCE *arcLength);

         HRESULT ( STDMETHODCALLTYPE *get_Thickness )(
            IZcadArc * This,
             double *thickness);

         HRESULT ( STDMETHODCALLTYPE *put_Thickness )(
            IZcadArc * This,
             double thickness);

         HRESULT ( STDMETHODCALLTYPE *Offset )(
            IZcadArc * This,
             double Distance,
             VARIANT *pOffsetCurves);

         HRESULT ( STDMETHODCALLTYPE *get_Area )(
            IZcadArc * This,
             double *area);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadArc * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadArc * This,
             VARIANT normal);

        END_INTERFACE
    } IZcadArcVtbl;

    interface IZcadArc
    {
        CONST_VTBL struct IZcadArcVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadArc_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadArc_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadArc_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadArc_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadArc_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadArc_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadArc_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadArc_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadArc_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadArc_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadArc_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadArc_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadArc_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadArc_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadArc_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadArc_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadArc_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadArc_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadArc_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadArc_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadArc_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadArc_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadArc_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadArc_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadArc_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadArc_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadArc_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadArc_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadArc_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadArc_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadArc_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadArc_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadArc_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadArc_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadArc_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadArc_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadArc_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadArc_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadArc_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadArc_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadArc_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadArc_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadArc_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadArc_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadArc_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadArc_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadArc_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadArc_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadArc_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadArc_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadArc_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadArc_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadArc_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadArc_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadArc_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadArc_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadArc_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadArc_get_StartPoint(This,startPoint)	\
    ((This)->lpVtbl -> get_StartPoint(This,startPoint))

#define IZcadArc_get_Center(This,centerPoint)	\
    ((This)->lpVtbl -> get_Center(This,centerPoint))

#define IZcadArc_put_Center(This,centerPoint)	\
    ((This)->lpVtbl -> put_Center(This,centerPoint))

#define IZcadArc_get_EndPoint(This,endPoint)	\
    ((This)->lpVtbl -> get_EndPoint(This,endPoint))

#define IZcadArc_get_Radius(This,Radius)	\
    ((This)->lpVtbl -> get_Radius(This,Radius))

#define IZcadArc_put_Radius(This,Radius)	\
    ((This)->lpVtbl -> put_Radius(This,Radius))

#define IZcadArc_get_StartAngle(This,Angle)	\
    ((This)->lpVtbl -> get_StartAngle(This,Angle))

#define IZcadArc_put_StartAngle(This,Angle)	\
    ((This)->lpVtbl -> put_StartAngle(This,Angle))

#define IZcadArc_get_EndAngle(This,Angle)	\
    ((This)->lpVtbl -> get_EndAngle(This,Angle))

#define IZcadArc_put_EndAngle(This,Angle)	\
    ((This)->lpVtbl -> put_EndAngle(This,Angle))

#define IZcadArc_get_TotalAngle(This,totalAngle)	\
    ((This)->lpVtbl -> get_TotalAngle(This,totalAngle))

#define IZcadArc_get_ArcLength(This,arcLength)	\
    ((This)->lpVtbl -> get_ArcLength(This,arcLength))

#define IZcadArc_get_Thickness(This,thickness)	\
    ((This)->lpVtbl -> get_Thickness(This,thickness))

#define IZcadArc_put_Thickness(This,thickness)	\
    ((This)->lpVtbl -> put_Thickness(This,thickness))

#define IZcadArc_Offset(This,Distance,pOffsetCurves)	\
    ((This)->lpVtbl -> Offset(This,Distance,pOffsetCurves))

#define IZcadArc_get_Area(This,area)	\
    ((This)->lpVtbl -> get_Area(This,area))

#define IZcadArc_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadArc_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadArc,0xEC9230B1,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9230B1-5A17-11E7-B72E-BC5FF42AC839")
ZcadArc;
#endif

#ifndef __IZcadAttribute_INTERFACE_DEFINED__
#define __IZcadAttribute_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadAttribute,0xEC923192,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923192-5A17-11E7-B72E-BC5FF42AC839")
    IZcadAttribute : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_FieldLength(
             long *fieldLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_FieldLength(
             long fieldLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TagString(
             BSTR *Tag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TagString(
             BSTR Tag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PromptString(
             BSTR *bstrPrompt) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PromptString(
             BSTR bstrPrompt) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextString(
             BSTR *bstrText) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextString(
             BSTR bstrText) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_StyleName(
             BSTR *Name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StyleName(
             BSTR Name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Alignment(
             ZcAlignment *align) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Alignment(
             ZcAlignment align) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_HorizontalAlignment(
             ZcHorizontalAlignment *horizAlign) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_HorizontalAlignment(
             ZcHorizontalAlignment horizAlign) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_VerticalAlignment(
             ZcVerticalAlignment *vertiAlign) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_VerticalAlignment(
             ZcVerticalAlignment vertiAlign) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Height(
             double *height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Height(
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Rotation(
             ZCAD_ANGLE *rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Rotation(
             ZCAD_ANGLE rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ScaleFactor(
             ZCAD_NOUNITS *scalFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ScaleFactor(
             ZCAD_NOUNITS scalFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ObliqueAngle(
             ZCAD_ANGLE *obliAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ObliqueAngle(
             ZCAD_ANGLE obliAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextAlignmentPoint(
             VARIANT *alignPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextAlignmentPoint(
             VARIANT alignPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_InsertionPoint(
             VARIANT *insPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_InsertionPoint(
             VARIANT insPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Normal(
             VARIANT *normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Normal(
             VARIANT normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextGenerationFlag(
             long *textGenFlag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextGenerationFlag(
             long textGenFlag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Thickness(
             double *thickness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Thickness(
             double thickness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Mode(
             long *mode) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Mode(
             long mode) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UpsideDown(
             VARIANT_BOOL *bUpsideDown) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_UpsideDown(
             VARIANT_BOOL bUpsideDown) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Backward(
             VARIANT_BOOL *bBackward) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Backward(
             VARIANT_BOOL bBackward) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Invisible(
             VARIANT_BOOL *bInvisible) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Invisible(
             VARIANT_BOOL bInvisible) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Constant(
             VARIANT_BOOL *bConstant) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Constant(
             VARIANT_BOOL bConstant) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Verify(
             VARIANT_BOOL *bVerify) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Verify(
             VARIANT_BOOL bVerify) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Preset(
             VARIANT_BOOL *bPreset) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Preset(
             VARIANT_BOOL bPreset) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LockPosition(
             VARIANT_BOOL *bLockPosition) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LockPosition(
             VARIANT_BOOL bLockPosition) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MTextAttribute(
             VARIANT_BOOL *bMTextAttribute) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_MTextAttribute(
             VARIANT_BOOL bMTextAttribute) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MTextAttributeContent(
             BSTR *content) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_MTextAttributeContent(
             BSTR content) = 0;

        virtual  HRESULT STDMETHODCALLTYPE UpdateMTextAttribute( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MTextBoundaryWidth(
             double *boundaryWidth) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_MTextBoundaryWidth(
            double boundaryWidth) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MTextDrawingDirection(
             ZcDrawingDirection *drawDir) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_MTextDrawingDirection(
             ZcDrawingDirection drawDir) = 0;

    };

#else

    typedef struct IZcadAttributeVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadAttribute * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadAttribute * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadAttribute * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadAttribute * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadAttribute * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadAttribute * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadAttribute * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadAttribute * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadAttribute * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadAttribute * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadAttribute * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadAttribute * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadAttribute * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadAttribute * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadAttribute * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadAttribute * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadAttribute * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadAttribute * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadAttribute * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadAttribute * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadAttribute * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadAttribute * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadAttribute * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadAttribute * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadAttribute * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadAttribute * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadAttribute * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadAttribute * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadAttribute * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadAttribute * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadAttribute * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadAttribute * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadAttribute * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadAttribute * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadAttribute * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadAttribute * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadAttribute * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadAttribute * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadAttribute * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadAttribute * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadAttribute * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadAttribute * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadAttribute * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadAttribute * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadAttribute * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadAttribute * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadAttribute * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadAttribute * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadAttribute * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadAttribute * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadAttribute * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadAttribute * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadAttribute * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadAttribute * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadAttribute * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadAttribute * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadAttribute * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_FieldLength )(
            IZcadAttribute * This,
             long *fieldLen);

         HRESULT ( STDMETHODCALLTYPE *put_FieldLength )(
            IZcadAttribute * This,
             long fieldLen);

         HRESULT ( STDMETHODCALLTYPE *get_TagString )(
            IZcadAttribute * This,
             BSTR *Tag);

         HRESULT ( STDMETHODCALLTYPE *put_TagString )(
            IZcadAttribute * This,
             BSTR Tag);

         HRESULT ( STDMETHODCALLTYPE *get_PromptString )(
            IZcadAttribute * This,
             BSTR *bstrPrompt);

         HRESULT ( STDMETHODCALLTYPE *put_PromptString )(
            IZcadAttribute * This,
             BSTR bstrPrompt);

         HRESULT ( STDMETHODCALLTYPE *get_TextString )(
            IZcadAttribute * This,
             BSTR *bstrText);

         HRESULT ( STDMETHODCALLTYPE *put_TextString )(
            IZcadAttribute * This,
             BSTR bstrText);

         HRESULT ( STDMETHODCALLTYPE *get_StyleName )(
            IZcadAttribute * This,
             BSTR *Name);

         HRESULT ( STDMETHODCALLTYPE *put_StyleName )(
            IZcadAttribute * This,
             BSTR Name);

         HRESULT ( STDMETHODCALLTYPE *get_Alignment )(
            IZcadAttribute * This,
             ZcAlignment *align);

         HRESULT ( STDMETHODCALLTYPE *put_Alignment )(
            IZcadAttribute * This,
             ZcAlignment align);

         HRESULT ( STDMETHODCALLTYPE *get_HorizontalAlignment )(
            IZcadAttribute * This,
             ZcHorizontalAlignment *horizAlign);

         HRESULT ( STDMETHODCALLTYPE *put_HorizontalAlignment )(
            IZcadAttribute * This,
             ZcHorizontalAlignment horizAlign);

         HRESULT ( STDMETHODCALLTYPE *get_VerticalAlignment )(
            IZcadAttribute * This,
             ZcVerticalAlignment *vertiAlign);

         HRESULT ( STDMETHODCALLTYPE *put_VerticalAlignment )(
            IZcadAttribute * This,
             ZcVerticalAlignment vertiAlign);

         HRESULT ( STDMETHODCALLTYPE *get_Height )(
            IZcadAttribute * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_Height )(
            IZcadAttribute * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_Rotation )(
            IZcadAttribute * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_Rotation )(
            IZcadAttribute * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )(
            IZcadAttribute * This,
             ZCAD_NOUNITS *scalFactor);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )(
            IZcadAttribute * This,
             ZCAD_NOUNITS scalFactor);

         HRESULT ( STDMETHODCALLTYPE *get_ObliqueAngle )(
            IZcadAttribute * This,
             ZCAD_ANGLE *obliAngle);

         HRESULT ( STDMETHODCALLTYPE *put_ObliqueAngle )(
            IZcadAttribute * This,
             ZCAD_ANGLE obliAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextAlignmentPoint )(
            IZcadAttribute * This,
             VARIANT *alignPoint);

         HRESULT ( STDMETHODCALLTYPE *put_TextAlignmentPoint )(
            IZcadAttribute * This,
             VARIANT alignPoint);

         HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )(
            IZcadAttribute * This,
             VARIANT *insPoint);

         HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )(
            IZcadAttribute * This,
             VARIANT insPoint);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadAttribute * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadAttribute * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_TextGenerationFlag )(
            IZcadAttribute * This,
             long *textGenFlag);

         HRESULT ( STDMETHODCALLTYPE *put_TextGenerationFlag )(
            IZcadAttribute * This,
             long textGenFlag);

         HRESULT ( STDMETHODCALLTYPE *get_Thickness )(
            IZcadAttribute * This,
             double *thickness);

         HRESULT ( STDMETHODCALLTYPE *put_Thickness )(
            IZcadAttribute * This,
             double thickness);

         HRESULT ( STDMETHODCALLTYPE *get_Mode )(
            IZcadAttribute * This,
             long *mode);

         HRESULT ( STDMETHODCALLTYPE *put_Mode )(
            IZcadAttribute * This,
             long mode);

         HRESULT ( STDMETHODCALLTYPE *get_UpsideDown )(
            IZcadAttribute * This,
             VARIANT_BOOL *bUpsideDown);

         HRESULT ( STDMETHODCALLTYPE *put_UpsideDown )(
            IZcadAttribute * This,
             VARIANT_BOOL bUpsideDown);

         HRESULT ( STDMETHODCALLTYPE *get_Backward )(
            IZcadAttribute * This,
             VARIANT_BOOL *bBackward);

         HRESULT ( STDMETHODCALLTYPE *put_Backward )(
            IZcadAttribute * This,
             VARIANT_BOOL bBackward);

         HRESULT ( STDMETHODCALLTYPE *get_Invisible )(
            IZcadAttribute * This,
             VARIANT_BOOL *bInvisible);

         HRESULT ( STDMETHODCALLTYPE *put_Invisible )(
            IZcadAttribute * This,
             VARIANT_BOOL bInvisible);

         HRESULT ( STDMETHODCALLTYPE *get_Constant )(
            IZcadAttribute * This,
             VARIANT_BOOL *bConstant);

         HRESULT ( STDMETHODCALLTYPE *put_Constant )(
            IZcadAttribute * This,
             VARIANT_BOOL bConstant);

         HRESULT ( STDMETHODCALLTYPE *get_Verify )(
            IZcadAttribute * This,
             VARIANT_BOOL *bVerify);

         HRESULT ( STDMETHODCALLTYPE *put_Verify )(
            IZcadAttribute * This,
             VARIANT_BOOL bVerify);

         HRESULT ( STDMETHODCALLTYPE *get_Preset )(
            IZcadAttribute * This,
             VARIANT_BOOL *bPreset);

         HRESULT ( STDMETHODCALLTYPE *put_Preset )(
            IZcadAttribute * This,
             VARIANT_BOOL bPreset);

         HRESULT ( STDMETHODCALLTYPE *get_LockPosition )(
            IZcadAttribute * This,
             VARIANT_BOOL *bLockPosition);

         HRESULT ( STDMETHODCALLTYPE *put_LockPosition )(
            IZcadAttribute * This,
             VARIANT_BOOL bLockPosition);

         HRESULT ( STDMETHODCALLTYPE *get_MTextAttribute )(
            IZcadAttribute * This,
             VARIANT_BOOL *bMTextAttribute);

         HRESULT ( STDMETHODCALLTYPE *put_MTextAttribute )(
            IZcadAttribute * This,
             VARIANT_BOOL bMTextAttribute);

         HRESULT ( STDMETHODCALLTYPE *get_MTextAttributeContent )(
            IZcadAttribute * This,
             BSTR *content);

         HRESULT ( STDMETHODCALLTYPE *put_MTextAttributeContent )(
            IZcadAttribute * This,
             BSTR content);

         HRESULT ( STDMETHODCALLTYPE *UpdateMTextAttribute )(
            IZcadAttribute * This);

         HRESULT ( STDMETHODCALLTYPE *get_MTextBoundaryWidth )(
            IZcadAttribute * This,
             double *boundaryWidth);

         HRESULT ( STDMETHODCALLTYPE *put_MTextBoundaryWidth )(
            IZcadAttribute * This,
            double boundaryWidth);

         HRESULT ( STDMETHODCALLTYPE *get_MTextDrawingDirection )(
            IZcadAttribute * This,
             ZcDrawingDirection *drawDir);

         HRESULT ( STDMETHODCALLTYPE *put_MTextDrawingDirection )(
            IZcadAttribute * This,
             ZcDrawingDirection drawDir);

        END_INTERFACE
    } IZcadAttributeVtbl;

    interface IZcadAttribute
    {
        CONST_VTBL struct IZcadAttributeVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadAttribute_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadAttribute_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadAttribute_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadAttribute_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadAttribute_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadAttribute_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadAttribute_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadAttribute_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadAttribute_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadAttribute_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadAttribute_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadAttribute_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadAttribute_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadAttribute_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadAttribute_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadAttribute_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadAttribute_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadAttribute_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadAttribute_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadAttribute_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadAttribute_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadAttribute_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadAttribute_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadAttribute_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadAttribute_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadAttribute_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadAttribute_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadAttribute_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadAttribute_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadAttribute_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadAttribute_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadAttribute_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadAttribute_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadAttribute_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadAttribute_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadAttribute_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadAttribute_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadAttribute_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadAttribute_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadAttribute_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadAttribute_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadAttribute_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadAttribute_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadAttribute_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadAttribute_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadAttribute_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadAttribute_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadAttribute_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadAttribute_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadAttribute_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadAttribute_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadAttribute_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadAttribute_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadAttribute_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadAttribute_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadAttribute_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadAttribute_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadAttribute_get_FieldLength(This,fieldLen)	\
    ((This)->lpVtbl -> get_FieldLength(This,fieldLen))

#define IZcadAttribute_put_FieldLength(This,fieldLen)	\
    ((This)->lpVtbl -> put_FieldLength(This,fieldLen))

#define IZcadAttribute_get_TagString(This,Tag)	\
    ((This)->lpVtbl -> get_TagString(This,Tag))

#define IZcadAttribute_put_TagString(This,Tag)	\
    ((This)->lpVtbl -> put_TagString(This,Tag))

#define IZcadAttribute_get_PromptString(This,bstrPrompt)	\
    ((This)->lpVtbl -> get_PromptString(This,bstrPrompt))

#define IZcadAttribute_put_PromptString(This,bstrPrompt)	\
    ((This)->lpVtbl -> put_PromptString(This,bstrPrompt))

#define IZcadAttribute_get_TextString(This,bstrText)	\
    ((This)->lpVtbl -> get_TextString(This,bstrText))

#define IZcadAttribute_put_TextString(This,bstrText)	\
    ((This)->lpVtbl -> put_TextString(This,bstrText))

#define IZcadAttribute_get_StyleName(This,Name)	\
    ((This)->lpVtbl -> get_StyleName(This,Name))

#define IZcadAttribute_put_StyleName(This,Name)	\
    ((This)->lpVtbl -> put_StyleName(This,Name))

#define IZcadAttribute_get_Alignment(This,align)	\
    ((This)->lpVtbl -> get_Alignment(This,align))

#define IZcadAttribute_put_Alignment(This,align)	\
    ((This)->lpVtbl -> put_Alignment(This,align))

#define IZcadAttribute_get_HorizontalAlignment(This,horizAlign)	\
    ((This)->lpVtbl -> get_HorizontalAlignment(This,horizAlign))

#define IZcadAttribute_put_HorizontalAlignment(This,horizAlign)	\
    ((This)->lpVtbl -> put_HorizontalAlignment(This,horizAlign))

#define IZcadAttribute_get_VerticalAlignment(This,vertiAlign)	\
    ((This)->lpVtbl -> get_VerticalAlignment(This,vertiAlign))

#define IZcadAttribute_put_VerticalAlignment(This,vertiAlign)	\
    ((This)->lpVtbl -> put_VerticalAlignment(This,vertiAlign))

#define IZcadAttribute_get_Height(This,height)	\
    ((This)->lpVtbl -> get_Height(This,height))

#define IZcadAttribute_put_Height(This,height)	\
    ((This)->lpVtbl -> put_Height(This,height))

#define IZcadAttribute_get_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_Rotation(This,rotAngle))

#define IZcadAttribute_put_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_Rotation(This,rotAngle))

#define IZcadAttribute_get_ScaleFactor(This,scalFactor)	\
    ((This)->lpVtbl -> get_ScaleFactor(This,scalFactor))

#define IZcadAttribute_put_ScaleFactor(This,scalFactor)	\
    ((This)->lpVtbl -> put_ScaleFactor(This,scalFactor))

#define IZcadAttribute_get_ObliqueAngle(This,obliAngle)	\
    ((This)->lpVtbl -> get_ObliqueAngle(This,obliAngle))

#define IZcadAttribute_put_ObliqueAngle(This,obliAngle)	\
    ((This)->lpVtbl -> put_ObliqueAngle(This,obliAngle))

#define IZcadAttribute_get_TextAlignmentPoint(This,alignPoint)	\
    ((This)->lpVtbl -> get_TextAlignmentPoint(This,alignPoint))

#define IZcadAttribute_put_TextAlignmentPoint(This,alignPoint)	\
    ((This)->lpVtbl -> put_TextAlignmentPoint(This,alignPoint))

#define IZcadAttribute_get_InsertionPoint(This,insPoint)	\
    ((This)->lpVtbl -> get_InsertionPoint(This,insPoint))

#define IZcadAttribute_put_InsertionPoint(This,insPoint)	\
    ((This)->lpVtbl -> put_InsertionPoint(This,insPoint))

#define IZcadAttribute_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadAttribute_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadAttribute_get_TextGenerationFlag(This,textGenFlag)	\
    ((This)->lpVtbl -> get_TextGenerationFlag(This,textGenFlag))

#define IZcadAttribute_put_TextGenerationFlag(This,textGenFlag)	\
    ((This)->lpVtbl -> put_TextGenerationFlag(This,textGenFlag))

#define IZcadAttribute_get_Thickness(This,thickness)	\
    ((This)->lpVtbl -> get_Thickness(This,thickness))

#define IZcadAttribute_put_Thickness(This,thickness)	\
    ((This)->lpVtbl -> put_Thickness(This,thickness))

#define IZcadAttribute_get_Mode(This,mode)	\
    ((This)->lpVtbl -> get_Mode(This,mode))

#define IZcadAttribute_put_Mode(This,mode)	\
    ((This)->lpVtbl -> put_Mode(This,mode))

#define IZcadAttribute_get_UpsideDown(This,bUpsideDown)	\
    ((This)->lpVtbl -> get_UpsideDown(This,bUpsideDown))

#define IZcadAttribute_put_UpsideDown(This,bUpsideDown)	\
    ((This)->lpVtbl -> put_UpsideDown(This,bUpsideDown))

#define IZcadAttribute_get_Backward(This,bBackward)	\
    ((This)->lpVtbl -> get_Backward(This,bBackward))

#define IZcadAttribute_put_Backward(This,bBackward)	\
    ((This)->lpVtbl -> put_Backward(This,bBackward))

#define IZcadAttribute_get_Invisible(This,bInvisible)	\
    ((This)->lpVtbl -> get_Invisible(This,bInvisible))

#define IZcadAttribute_put_Invisible(This,bInvisible)	\
    ((This)->lpVtbl -> put_Invisible(This,bInvisible))

#define IZcadAttribute_get_Constant(This,bConstant)	\
    ((This)->lpVtbl -> get_Constant(This,bConstant))

#define IZcadAttribute_put_Constant(This,bConstant)	\
    ((This)->lpVtbl -> put_Constant(This,bConstant))

#define IZcadAttribute_get_Verify(This,bVerify)	\
    ((This)->lpVtbl -> get_Verify(This,bVerify))

#define IZcadAttribute_put_Verify(This,bVerify)	\
    ((This)->lpVtbl -> put_Verify(This,bVerify))

#define IZcadAttribute_get_Preset(This,bPreset)	\
    ((This)->lpVtbl -> get_Preset(This,bPreset))

#define IZcadAttribute_put_Preset(This,bPreset)	\
    ((This)->lpVtbl -> put_Preset(This,bPreset))

#define IZcadAttribute_get_LockPosition(This,bLockPosition)	\
    ((This)->lpVtbl -> get_LockPosition(This,bLockPosition))

#define IZcadAttribute_put_LockPosition(This,bLockPosition)	\
    ((This)->lpVtbl -> put_LockPosition(This,bLockPosition))

#define IZcadAttribute_get_MTextAttribute(This,bMTextAttribute)	\
    ((This)->lpVtbl -> get_MTextAttribute(This,bMTextAttribute))

#define IZcadAttribute_put_MTextAttribute(This,bMTextAttribute)	\
    ((This)->lpVtbl -> put_MTextAttribute(This,bMTextAttribute))

#define IZcadAttribute_get_MTextAttributeContent(This,content)	\
    ((This)->lpVtbl -> get_MTextAttributeContent(This,content))

#define IZcadAttribute_put_MTextAttributeContent(This,content)	\
    ((This)->lpVtbl -> put_MTextAttributeContent(This,content))

#define IZcadAttribute_UpdateMTextAttribute(This)	\
    ((This)->lpVtbl -> UpdateMTextAttribute(This))

#define IZcadAttribute_get_MTextBoundaryWidth(This,boundaryWidth)	\
    ((This)->lpVtbl -> get_MTextBoundaryWidth(This,boundaryWidth))

#define IZcadAttribute_put_MTextBoundaryWidth(This,boundaryWidth)	\
    ((This)->lpVtbl -> put_MTextBoundaryWidth(This,boundaryWidth))

#define IZcadAttribute_get_MTextDrawingDirection(This,drawDir)	\
    ((This)->lpVtbl -> get_MTextDrawingDirection(This,drawDir))

#define IZcadAttribute_put_MTextDrawingDirection(This,drawDir)	\
    ((This)->lpVtbl -> put_MTextDrawingDirection(This,drawDir))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadAttribute,0xEC923182,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923182-5A17-11E7-B72E-BC5FF42AC839")
ZcadAttribute;
#endif

#ifndef __IZcadAttributeReference_INTERFACE_DEFINED__
#define __IZcadAttributeReference_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadAttributeReference,0xEC92304E,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC92304E-5A17-11E7-B72E-BC5FF42AC839")
    IZcadAttributeReference : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Height(
             double *height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Height(
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_HorizontalAlignment(
             ZcHorizontalAlignment *horizAlign) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_HorizontalAlignment(
             ZcHorizontalAlignment horizAlign) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_InsertionPoint(
             VARIANT *insPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_InsertionPoint(
             VARIANT insPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Normal(
             VARIANT *normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Normal(
             VARIANT normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ObliqueAngle(
             ZCAD_ANGLE *obliAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ObliqueAngle(
             ZCAD_ANGLE obliAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Rotation(
             ZCAD_ANGLE *rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Rotation(
             ZCAD_ANGLE rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ScaleFactor(
             ZCAD_NOUNITS *scalFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ScaleFactor(
             ZCAD_NOUNITS scalFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_StyleName(
             BSTR *Name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StyleName(
             BSTR Name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TagString(
             BSTR *bstrTag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TagString(
             BSTR bstrTag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextAlignmentPoint(
             VARIANT *alignPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextAlignmentPoint(
             VARIANT alignPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextGenerationFlag(
             long *textGenFlag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextGenerationFlag(
             long textGenFlag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextString(
             BSTR *bstrText) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextString(
             BSTR bstrText) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Thickness(
             double *thickness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Thickness(
             double thickness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_VerticalAlignment(
             ZcVerticalAlignment *vertiAlign) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_VerticalAlignment(
             ZcVerticalAlignment vertiAlign) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_FieldLength(
             long *fieldLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_FieldLength(
             long fieldLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Alignment(
             ZcAlignment *align) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Alignment(
             ZcAlignment align) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UpsideDown(
             VARIANT_BOOL *bUpsideDown) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_UpsideDown(
             VARIANT_BOOL bUpsideDown) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Backward(
             VARIANT_BOOL *bBackward) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Backward(
             VARIANT_BOOL bBackward) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Invisible(
             VARIANT_BOOL *bInvisible) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Invisible(
             VARIANT_BOOL bInvisible) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Constant(
             VARIANT_BOOL *bConstant) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LockPosition(
             VARIANT_BOOL *bLockPosition) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MTextAttribute(
             VARIANT_BOOL *bMTextAttribute) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_MTextAttribute(
             VARIANT_BOOL bMTextAttribute) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MTextAttributeContent(
             BSTR *content) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_MTextAttributeContent(
             BSTR content) = 0;

        virtual  HRESULT STDMETHODCALLTYPE UpdateMTextAttribute( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MTextBoundaryWidth(
             double *boundaryWidth) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_MTextBoundaryWidth(
            double boundaryWidth) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MTextDrawingDirection(
             ZcDrawingDirection *drawDir) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_MTextDrawingDirection(
             ZcDrawingDirection drawDir) = 0;

    };

#else

    typedef struct IZcadAttributeReferenceVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadAttributeReference * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadAttributeReference * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadAttributeReference * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadAttributeReference * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadAttributeReference * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadAttributeReference * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadAttributeReference * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadAttributeReference * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadAttributeReference * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadAttributeReference * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadAttributeReference * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadAttributeReference * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadAttributeReference * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadAttributeReference * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadAttributeReference * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadAttributeReference * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadAttributeReference * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadAttributeReference * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadAttributeReference * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadAttributeReference * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadAttributeReference * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadAttributeReference * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadAttributeReference * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadAttributeReference * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadAttributeReference * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadAttributeReference * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadAttributeReference * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadAttributeReference * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadAttributeReference * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadAttributeReference * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadAttributeReference * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadAttributeReference * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadAttributeReference * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadAttributeReference * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadAttributeReference * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadAttributeReference * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadAttributeReference * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadAttributeReference * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadAttributeReference * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadAttributeReference * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadAttributeReference * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadAttributeReference * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadAttributeReference * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadAttributeReference * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadAttributeReference * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadAttributeReference * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadAttributeReference * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadAttributeReference * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadAttributeReference * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadAttributeReference * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadAttributeReference * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadAttributeReference * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadAttributeReference * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadAttributeReference * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadAttributeReference * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadAttributeReference * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadAttributeReference * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Height )(
            IZcadAttributeReference * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_Height )(
            IZcadAttributeReference * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_HorizontalAlignment )(
            IZcadAttributeReference * This,
             ZcHorizontalAlignment *horizAlign);

         HRESULT ( STDMETHODCALLTYPE *put_HorizontalAlignment )(
            IZcadAttributeReference * This,
             ZcHorizontalAlignment horizAlign);

         HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )(
            IZcadAttributeReference * This,
             VARIANT *insPoint);

         HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )(
            IZcadAttributeReference * This,
             VARIANT insPoint);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadAttributeReference * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadAttributeReference * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_ObliqueAngle )(
            IZcadAttributeReference * This,
             ZCAD_ANGLE *obliAngle);

         HRESULT ( STDMETHODCALLTYPE *put_ObliqueAngle )(
            IZcadAttributeReference * This,
             ZCAD_ANGLE obliAngle);

         HRESULT ( STDMETHODCALLTYPE *get_Rotation )(
            IZcadAttributeReference * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_Rotation )(
            IZcadAttributeReference * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )(
            IZcadAttributeReference * This,
             ZCAD_NOUNITS *scalFactor);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )(
            IZcadAttributeReference * This,
             ZCAD_NOUNITS scalFactor);

         HRESULT ( STDMETHODCALLTYPE *get_StyleName )(
            IZcadAttributeReference * This,
             BSTR *Name);

         HRESULT ( STDMETHODCALLTYPE *put_StyleName )(
            IZcadAttributeReference * This,
             BSTR Name);

         HRESULT ( STDMETHODCALLTYPE *get_TagString )(
            IZcadAttributeReference * This,
             BSTR *bstrTag);

         HRESULT ( STDMETHODCALLTYPE *put_TagString )(
            IZcadAttributeReference * This,
             BSTR bstrTag);

         HRESULT ( STDMETHODCALLTYPE *get_TextAlignmentPoint )(
            IZcadAttributeReference * This,
             VARIANT *alignPoint);

         HRESULT ( STDMETHODCALLTYPE *put_TextAlignmentPoint )(
            IZcadAttributeReference * This,
             VARIANT alignPoint);

         HRESULT ( STDMETHODCALLTYPE *get_TextGenerationFlag )(
            IZcadAttributeReference * This,
             long *textGenFlag);

         HRESULT ( STDMETHODCALLTYPE *put_TextGenerationFlag )(
            IZcadAttributeReference * This,
             long textGenFlag);

         HRESULT ( STDMETHODCALLTYPE *get_TextString )(
            IZcadAttributeReference * This,
             BSTR *bstrText);

         HRESULT ( STDMETHODCALLTYPE *put_TextString )(
            IZcadAttributeReference * This,
             BSTR bstrText);

         HRESULT ( STDMETHODCALLTYPE *get_Thickness )(
            IZcadAttributeReference * This,
             double *thickness);

         HRESULT ( STDMETHODCALLTYPE *put_Thickness )(
            IZcadAttributeReference * This,
             double thickness);

         HRESULT ( STDMETHODCALLTYPE *get_VerticalAlignment )(
            IZcadAttributeReference * This,
             ZcVerticalAlignment *vertiAlign);

         HRESULT ( STDMETHODCALLTYPE *put_VerticalAlignment )(
            IZcadAttributeReference * This,
             ZcVerticalAlignment vertiAlign);

         HRESULT ( STDMETHODCALLTYPE *get_FieldLength )(
            IZcadAttributeReference * This,
             long *fieldLen);

         HRESULT ( STDMETHODCALLTYPE *put_FieldLength )(
            IZcadAttributeReference * This,
             long fieldLen);

         HRESULT ( STDMETHODCALLTYPE *get_Alignment )(
            IZcadAttributeReference * This,
             ZcAlignment *align);

         HRESULT ( STDMETHODCALLTYPE *put_Alignment )(
            IZcadAttributeReference * This,
             ZcAlignment align);

         HRESULT ( STDMETHODCALLTYPE *get_UpsideDown )(
            IZcadAttributeReference * This,
             VARIANT_BOOL *bUpsideDown);

         HRESULT ( STDMETHODCALLTYPE *put_UpsideDown )(
            IZcadAttributeReference * This,
             VARIANT_BOOL bUpsideDown);

         HRESULT ( STDMETHODCALLTYPE *get_Backward )(
            IZcadAttributeReference * This,
             VARIANT_BOOL *bBackward);

         HRESULT ( STDMETHODCALLTYPE *put_Backward )(
            IZcadAttributeReference * This,
             VARIANT_BOOL bBackward);

         HRESULT ( STDMETHODCALLTYPE *get_Invisible )(
            IZcadAttributeReference * This,
             VARIANT_BOOL *bInvisible);

         HRESULT ( STDMETHODCALLTYPE *put_Invisible )(
            IZcadAttributeReference * This,
             VARIANT_BOOL bInvisible);

         HRESULT ( STDMETHODCALLTYPE *get_Constant )(
            IZcadAttributeReference * This,
             VARIANT_BOOL *bConstant);

         HRESULT ( STDMETHODCALLTYPE *get_LockPosition )(
            IZcadAttributeReference * This,
             VARIANT_BOOL *bLockPosition);

         HRESULT ( STDMETHODCALLTYPE *get_MTextAttribute )(
            IZcadAttributeReference * This,
             VARIANT_BOOL *bMTextAttribute);

         HRESULT ( STDMETHODCALLTYPE *put_MTextAttribute )(
            IZcadAttributeReference * This,
             VARIANT_BOOL bMTextAttribute);

         HRESULT ( STDMETHODCALLTYPE *get_MTextAttributeContent )(
            IZcadAttributeReference * This,
             BSTR *content);

         HRESULT ( STDMETHODCALLTYPE *put_MTextAttributeContent )(
            IZcadAttributeReference * This,
             BSTR content);

         HRESULT ( STDMETHODCALLTYPE *UpdateMTextAttribute )(
            IZcadAttributeReference * This);

         HRESULT ( STDMETHODCALLTYPE *get_MTextBoundaryWidth )(
            IZcadAttributeReference * This,
             double *boundaryWidth);

         HRESULT ( STDMETHODCALLTYPE *put_MTextBoundaryWidth )(
            IZcadAttributeReference * This,
            double boundaryWidth);

         HRESULT ( STDMETHODCALLTYPE *get_MTextDrawingDirection )(
            IZcadAttributeReference * This,
             ZcDrawingDirection *drawDir);

         HRESULT ( STDMETHODCALLTYPE *put_MTextDrawingDirection )(
            IZcadAttributeReference * This,
             ZcDrawingDirection drawDir);

        END_INTERFACE
    } IZcadAttributeReferenceVtbl;

    interface IZcadAttributeReference
    {
        CONST_VTBL struct IZcadAttributeReferenceVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadAttributeReference_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadAttributeReference_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadAttributeReference_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadAttributeReference_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadAttributeReference_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadAttributeReference_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadAttributeReference_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadAttributeReference_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadAttributeReference_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadAttributeReference_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadAttributeReference_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadAttributeReference_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadAttributeReference_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadAttributeReference_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadAttributeReference_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadAttributeReference_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadAttributeReference_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadAttributeReference_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadAttributeReference_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadAttributeReference_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadAttributeReference_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadAttributeReference_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadAttributeReference_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadAttributeReference_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadAttributeReference_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadAttributeReference_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadAttributeReference_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadAttributeReference_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadAttributeReference_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadAttributeReference_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadAttributeReference_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadAttributeReference_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadAttributeReference_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadAttributeReference_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadAttributeReference_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadAttributeReference_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadAttributeReference_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadAttributeReference_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadAttributeReference_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadAttributeReference_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadAttributeReference_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadAttributeReference_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadAttributeReference_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadAttributeReference_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadAttributeReference_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadAttributeReference_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadAttributeReference_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadAttributeReference_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadAttributeReference_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadAttributeReference_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadAttributeReference_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadAttributeReference_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadAttributeReference_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadAttributeReference_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadAttributeReference_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadAttributeReference_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadAttributeReference_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadAttributeReference_get_Height(This,height)	\
    ((This)->lpVtbl -> get_Height(This,height))

#define IZcadAttributeReference_put_Height(This,height)	\
    ((This)->lpVtbl -> put_Height(This,height))

#define IZcadAttributeReference_get_HorizontalAlignment(This,horizAlign)	\
    ((This)->lpVtbl -> get_HorizontalAlignment(This,horizAlign))

#define IZcadAttributeReference_put_HorizontalAlignment(This,horizAlign)	\
    ((This)->lpVtbl -> put_HorizontalAlignment(This,horizAlign))

#define IZcadAttributeReference_get_InsertionPoint(This,insPoint)	\
    ((This)->lpVtbl -> get_InsertionPoint(This,insPoint))

#define IZcadAttributeReference_put_InsertionPoint(This,insPoint)	\
    ((This)->lpVtbl -> put_InsertionPoint(This,insPoint))

#define IZcadAttributeReference_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadAttributeReference_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadAttributeReference_get_ObliqueAngle(This,obliAngle)	\
    ((This)->lpVtbl -> get_ObliqueAngle(This,obliAngle))

#define IZcadAttributeReference_put_ObliqueAngle(This,obliAngle)	\
    ((This)->lpVtbl -> put_ObliqueAngle(This,obliAngle))

#define IZcadAttributeReference_get_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_Rotation(This,rotAngle))

#define IZcadAttributeReference_put_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_Rotation(This,rotAngle))

#define IZcadAttributeReference_get_ScaleFactor(This,scalFactor)	\
    ((This)->lpVtbl -> get_ScaleFactor(This,scalFactor))

#define IZcadAttributeReference_put_ScaleFactor(This,scalFactor)	\
    ((This)->lpVtbl -> put_ScaleFactor(This,scalFactor))

#define IZcadAttributeReference_get_StyleName(This,Name)	\
    ((This)->lpVtbl -> get_StyleName(This,Name))

#define IZcadAttributeReference_put_StyleName(This,Name)	\
    ((This)->lpVtbl -> put_StyleName(This,Name))

#define IZcadAttributeReference_get_TagString(This,bstrTag)	\
    ((This)->lpVtbl -> get_TagString(This,bstrTag))

#define IZcadAttributeReference_put_TagString(This,bstrTag)	\
    ((This)->lpVtbl -> put_TagString(This,bstrTag))

#define IZcadAttributeReference_get_TextAlignmentPoint(This,alignPoint)	\
    ((This)->lpVtbl -> get_TextAlignmentPoint(This,alignPoint))

#define IZcadAttributeReference_put_TextAlignmentPoint(This,alignPoint)	\
    ((This)->lpVtbl -> put_TextAlignmentPoint(This,alignPoint))

#define IZcadAttributeReference_get_TextGenerationFlag(This,textGenFlag)	\
    ((This)->lpVtbl -> get_TextGenerationFlag(This,textGenFlag))

#define IZcadAttributeReference_put_TextGenerationFlag(This,textGenFlag)	\
    ((This)->lpVtbl -> put_TextGenerationFlag(This,textGenFlag))

#define IZcadAttributeReference_get_TextString(This,bstrText)	\
    ((This)->lpVtbl -> get_TextString(This,bstrText))

#define IZcadAttributeReference_put_TextString(This,bstrText)	\
    ((This)->lpVtbl -> put_TextString(This,bstrText))

#define IZcadAttributeReference_get_Thickness(This,thickness)	\
    ((This)->lpVtbl -> get_Thickness(This,thickness))

#define IZcadAttributeReference_put_Thickness(This,thickness)	\
    ((This)->lpVtbl -> put_Thickness(This,thickness))

#define IZcadAttributeReference_get_VerticalAlignment(This,vertiAlign)	\
    ((This)->lpVtbl -> get_VerticalAlignment(This,vertiAlign))

#define IZcadAttributeReference_put_VerticalAlignment(This,vertiAlign)	\
    ((This)->lpVtbl -> put_VerticalAlignment(This,vertiAlign))

#define IZcadAttributeReference_get_FieldLength(This,fieldLen)	\
    ((This)->lpVtbl -> get_FieldLength(This,fieldLen))

#define IZcadAttributeReference_put_FieldLength(This,fieldLen)	\
    ((This)->lpVtbl -> put_FieldLength(This,fieldLen))

#define IZcadAttributeReference_get_Alignment(This,align)	\
    ((This)->lpVtbl -> get_Alignment(This,align))

#define IZcadAttributeReference_put_Alignment(This,align)	\
    ((This)->lpVtbl -> put_Alignment(This,align))

#define IZcadAttributeReference_get_UpsideDown(This,bUpsideDown)	\
    ((This)->lpVtbl -> get_UpsideDown(This,bUpsideDown))

#define IZcadAttributeReference_put_UpsideDown(This,bUpsideDown)	\
    ((This)->lpVtbl -> put_UpsideDown(This,bUpsideDown))

#define IZcadAttributeReference_get_Backward(This,bBackward)	\
    ((This)->lpVtbl -> get_Backward(This,bBackward))

#define IZcadAttributeReference_put_Backward(This,bBackward)	\
    ((This)->lpVtbl -> put_Backward(This,bBackward))

#define IZcadAttributeReference_get_Invisible(This,bInvisible)	\
    ((This)->lpVtbl -> get_Invisible(This,bInvisible))

#define IZcadAttributeReference_put_Invisible(This,bInvisible)	\
    ((This)->lpVtbl -> put_Invisible(This,bInvisible))

#define IZcadAttributeReference_get_Constant(This,bConstant)	\
    ((This)->lpVtbl -> get_Constant(This,bConstant))

#define IZcadAttributeReference_get_LockPosition(This,bLockPosition)	\
    ((This)->lpVtbl -> get_LockPosition(This,bLockPosition))

#define IZcadAttributeReference_get_MTextAttribute(This,bMTextAttribute)	\
    ((This)->lpVtbl -> get_MTextAttribute(This,bMTextAttribute))

#define IZcadAttributeReference_put_MTextAttribute(This,bMTextAttribute)	\
    ((This)->lpVtbl -> put_MTextAttribute(This,bMTextAttribute))

#define IZcadAttributeReference_get_MTextAttributeContent(This,content)	\
    ((This)->lpVtbl -> get_MTextAttributeContent(This,content))

#define IZcadAttributeReference_put_MTextAttributeContent(This,content)	\
    ((This)->lpVtbl -> put_MTextAttributeContent(This,content))

#define IZcadAttributeReference_UpdateMTextAttribute(This)	\
    ((This)->lpVtbl -> UpdateMTextAttribute(This))

#define IZcadAttributeReference_get_MTextBoundaryWidth(This,boundaryWidth)	\
    ((This)->lpVtbl -> get_MTextBoundaryWidth(This,boundaryWidth))

#define IZcadAttributeReference_put_MTextBoundaryWidth(This,boundaryWidth)	\
    ((This)->lpVtbl -> put_MTextBoundaryWidth(This,boundaryWidth))

#define IZcadAttributeReference_get_MTextDrawingDirection(This,drawDir)	\
    ((This)->lpVtbl -> get_MTextDrawingDirection(This,drawDir))

#define IZcadAttributeReference_put_MTextDrawingDirection(This,drawDir)	\
    ((This)->lpVtbl -> put_MTextDrawingDirection(This,drawDir))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadAttributeReference,0xEC9231A3,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9231A3-5A17-11E7-B72E-BC5FF42AC839")
ZcadAttributeReference;
#endif

#ifndef __IZcadBlockReference_INTERFACE_DEFINED__
#define __IZcadBlockReference_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadBlockReference,0xEC9230D5,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9230D5-5A17-11E7-B72E-BC5FF42AC839")
    IZcadBlockReference : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_InsertionPoint(
             VARIANT *insPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_InsertionPoint(
             VARIANT insPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Name(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Name(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Normal(
             VARIANT *normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Normal(
             VARIANT normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Rotation(
             ZCAD_ANGLE *rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Rotation(
             ZCAD_ANGLE rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_XScaleFactor(
             ZCAD_NOUNITS *scaleFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_XScaleFactor(
             ZCAD_NOUNITS scaleFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_YScaleFactor(
             ZCAD_NOUNITS *scaleFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_YScaleFactor(
             ZCAD_NOUNITS scaleFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ZScaleFactor(
             ZCAD_NOUNITS *scaleFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ZScaleFactor(
             ZCAD_NOUNITS scaleFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Explode(
             VARIANT *pArrayObjs) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetAttributes(
             VARIANT *pAttrObjs) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetConstantAttributes(
             VARIANT *pAttrObjs) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_HasAttributes(
             VARIANT_BOOL *bHas) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EffectiveName(
             BSTR *effectiveName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IsDynamicBlock(
             VARIANT_BOOL *pDynamicBlock) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetDynamicBlockProperties(
             VARIANT *dynamicPropertyArray) = 0;

        virtual  HRESULT STDMETHODCALLTYPE ResetBlock( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE ConvertToAnonymousBlock( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE ConvertToStaticBlock(
             BSTR newBlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_XEffectiveScaleFactor(
             ZCAD_NOUNITS *scaleFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_XEffectiveScaleFactor(
             ZCAD_NOUNITS scaleFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_YEffectiveScaleFactor(
             ZCAD_NOUNITS *scaleFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_YEffectiveScaleFactor(
             ZCAD_NOUNITS scaleFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ZEffectiveScaleFactor(
             ZCAD_NOUNITS *scaleFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ZEffectiveScaleFactor(
             ZCAD_NOUNITS scaleFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_InsUnits(
             BSTR *units) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_InsUnitsFactor(
             double *factor) = 0;

    };

#else

    typedef struct IZcadBlockReferenceVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadBlockReference * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadBlockReference * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadBlockReference * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadBlockReference * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadBlockReference * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadBlockReference * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadBlockReference * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadBlockReference * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadBlockReference * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadBlockReference * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadBlockReference * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadBlockReference * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadBlockReference * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadBlockReference * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadBlockReference * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadBlockReference * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadBlockReference * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadBlockReference * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadBlockReference * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadBlockReference * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadBlockReference * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadBlockReference * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadBlockReference * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadBlockReference * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadBlockReference * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadBlockReference * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadBlockReference * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadBlockReference * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadBlockReference * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadBlockReference * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadBlockReference * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadBlockReference * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadBlockReference * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadBlockReference * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadBlockReference * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadBlockReference * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadBlockReference * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadBlockReference * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadBlockReference * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadBlockReference * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadBlockReference * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadBlockReference * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadBlockReference * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadBlockReference * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadBlockReference * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadBlockReference * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadBlockReference * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadBlockReference * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadBlockReference * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadBlockReference * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadBlockReference * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadBlockReference * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadBlockReference * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadBlockReference * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadBlockReference * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadBlockReference * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadBlockReference * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )(
            IZcadBlockReference * This,
             VARIANT *insPoint);

         HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )(
            IZcadBlockReference * This,
             VARIANT insPoint);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadBlockReference * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadBlockReference * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadBlockReference * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadBlockReference * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_Rotation )(
            IZcadBlockReference * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_Rotation )(
            IZcadBlockReference * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_XScaleFactor )(
            IZcadBlockReference * This,
             ZCAD_NOUNITS *scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *put_XScaleFactor )(
            IZcadBlockReference * This,
             ZCAD_NOUNITS scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *get_YScaleFactor )(
            IZcadBlockReference * This,
             ZCAD_NOUNITS *scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *put_YScaleFactor )(
            IZcadBlockReference * This,
             ZCAD_NOUNITS scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *get_ZScaleFactor )(
            IZcadBlockReference * This,
             ZCAD_NOUNITS *scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *put_ZScaleFactor )(
            IZcadBlockReference * This,
             ZCAD_NOUNITS scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *Explode )(
            IZcadBlockReference * This,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *GetAttributes )(
            IZcadBlockReference * This,
             VARIANT *pAttrObjs);

         HRESULT ( STDMETHODCALLTYPE *GetConstantAttributes )(
            IZcadBlockReference * This,
             VARIANT *pAttrObjs);

         HRESULT ( STDMETHODCALLTYPE *get_HasAttributes )(
            IZcadBlockReference * This,
             VARIANT_BOOL *bHas);

         HRESULT ( STDMETHODCALLTYPE *get_EffectiveName )(
            IZcadBlockReference * This,
             BSTR *effectiveName);

         HRESULT ( STDMETHODCALLTYPE *get_IsDynamicBlock )(
            IZcadBlockReference * This,
             VARIANT_BOOL *pDynamicBlock);

         HRESULT ( STDMETHODCALLTYPE *GetDynamicBlockProperties )(
            IZcadBlockReference * This,
             VARIANT *dynamicPropertyArray);

         HRESULT ( STDMETHODCALLTYPE *ResetBlock )(
            IZcadBlockReference * This);

         HRESULT ( STDMETHODCALLTYPE *ConvertToAnonymousBlock )(
            IZcadBlockReference * This);

         HRESULT ( STDMETHODCALLTYPE *ConvertToStaticBlock )(
            IZcadBlockReference * This,
             BSTR newBlockName);

         HRESULT ( STDMETHODCALLTYPE *get_XEffectiveScaleFactor )(
            IZcadBlockReference * This,
             ZCAD_NOUNITS *scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *put_XEffectiveScaleFactor )(
            IZcadBlockReference * This,
             ZCAD_NOUNITS scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *get_YEffectiveScaleFactor )(
            IZcadBlockReference * This,
             ZCAD_NOUNITS *scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *put_YEffectiveScaleFactor )(
            IZcadBlockReference * This,
             ZCAD_NOUNITS scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *get_ZEffectiveScaleFactor )(
            IZcadBlockReference * This,
             ZCAD_NOUNITS *scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *put_ZEffectiveScaleFactor )(
            IZcadBlockReference * This,
             ZCAD_NOUNITS scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *get_InsUnits )(
            IZcadBlockReference * This,
             BSTR *units);

         HRESULT ( STDMETHODCALLTYPE *get_InsUnitsFactor )(
            IZcadBlockReference * This,
             double *factor);

        END_INTERFACE
    } IZcadBlockReferenceVtbl;

    interface IZcadBlockReference
    {
        CONST_VTBL struct IZcadBlockReferenceVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadBlockReference_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadBlockReference_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadBlockReference_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadBlockReference_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadBlockReference_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadBlockReference_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadBlockReference_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadBlockReference_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadBlockReference_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadBlockReference_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadBlockReference_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadBlockReference_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadBlockReference_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadBlockReference_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadBlockReference_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadBlockReference_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadBlockReference_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadBlockReference_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadBlockReference_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadBlockReference_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadBlockReference_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadBlockReference_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadBlockReference_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadBlockReference_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadBlockReference_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadBlockReference_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadBlockReference_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadBlockReference_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadBlockReference_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadBlockReference_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadBlockReference_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadBlockReference_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadBlockReference_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadBlockReference_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadBlockReference_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadBlockReference_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadBlockReference_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadBlockReference_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadBlockReference_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadBlockReference_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadBlockReference_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadBlockReference_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadBlockReference_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadBlockReference_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadBlockReference_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadBlockReference_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadBlockReference_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadBlockReference_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadBlockReference_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadBlockReference_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadBlockReference_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadBlockReference_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadBlockReference_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadBlockReference_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadBlockReference_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadBlockReference_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadBlockReference_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadBlockReference_get_InsertionPoint(This,insPoint)	\
    ((This)->lpVtbl -> get_InsertionPoint(This,insPoint))

#define IZcadBlockReference_put_InsertionPoint(This,insPoint)	\
    ((This)->lpVtbl -> put_InsertionPoint(This,insPoint))

#define IZcadBlockReference_get_Name(This,bstrName)	\
    ((This)->lpVtbl -> get_Name(This,bstrName))

#define IZcadBlockReference_put_Name(This,bstrName)	\
    ((This)->lpVtbl -> put_Name(This,bstrName))

#define IZcadBlockReference_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadBlockReference_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadBlockReference_get_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_Rotation(This,rotAngle))

#define IZcadBlockReference_put_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_Rotation(This,rotAngle))

#define IZcadBlockReference_get_XScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> get_XScaleFactor(This,scaleFactor))

#define IZcadBlockReference_put_XScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> put_XScaleFactor(This,scaleFactor))

#define IZcadBlockReference_get_YScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> get_YScaleFactor(This,scaleFactor))

#define IZcadBlockReference_put_YScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> put_YScaleFactor(This,scaleFactor))

#define IZcadBlockReference_get_ZScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> get_ZScaleFactor(This,scaleFactor))

#define IZcadBlockReference_put_ZScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> put_ZScaleFactor(This,scaleFactor))

#define IZcadBlockReference_Explode(This,pArrayObjs)	\
    ((This)->lpVtbl -> Explode(This,pArrayObjs))

#define IZcadBlockReference_GetAttributes(This,pAttrObjs)	\
    ((This)->lpVtbl -> GetAttributes(This,pAttrObjs))

#define IZcadBlockReference_GetConstantAttributes(This,pAttrObjs)	\
    ((This)->lpVtbl -> GetConstantAttributes(This,pAttrObjs))

#define IZcadBlockReference_get_HasAttributes(This,bHas)	\
    ((This)->lpVtbl -> get_HasAttributes(This,bHas))

#define IZcadBlockReference_get_EffectiveName(This,effectiveName)	\
    ((This)->lpVtbl -> get_EffectiveName(This,effectiveName))

#define IZcadBlockReference_get_IsDynamicBlock(This,pDynamicBlock)	\
    ((This)->lpVtbl -> get_IsDynamicBlock(This,pDynamicBlock))

#define IZcadBlockReference_GetDynamicBlockProperties(This,dynamicPropertyArray)	\
    ((This)->lpVtbl -> GetDynamicBlockProperties(This,dynamicPropertyArray))

#define IZcadBlockReference_ResetBlock(This)	\
    ((This)->lpVtbl -> ResetBlock(This))

#define IZcadBlockReference_ConvertToAnonymousBlock(This)	\
    ((This)->lpVtbl -> ConvertToAnonymousBlock(This))

#define IZcadBlockReference_ConvertToStaticBlock(This,newBlockName)	\
    ((This)->lpVtbl -> ConvertToStaticBlock(This,newBlockName))

#define IZcadBlockReference_get_XEffectiveScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> get_XEffectiveScaleFactor(This,scaleFactor))

#define IZcadBlockReference_put_XEffectiveScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> put_XEffectiveScaleFactor(This,scaleFactor))

#define IZcadBlockReference_get_YEffectiveScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> get_YEffectiveScaleFactor(This,scaleFactor))

#define IZcadBlockReference_put_YEffectiveScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> put_YEffectiveScaleFactor(This,scaleFactor))

#define IZcadBlockReference_get_ZEffectiveScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> get_ZEffectiveScaleFactor(This,scaleFactor))

#define IZcadBlockReference_put_ZEffectiveScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> put_ZEffectiveScaleFactor(This,scaleFactor))

#define IZcadBlockReference_get_InsUnits(This,units)	\
    ((This)->lpVtbl -> get_InsUnits(This,units))

#define IZcadBlockReference_get_InsUnitsFactor(This,factor)	\
    ((This)->lpVtbl -> get_InsUnitsFactor(This,factor))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadBlockReference,0xEC92315A,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC92315A-5A17-11E7-B72E-BC5FF42AC839")
ZcadBlockReference;
#endif

#ifndef __IZcadCircle_INTERFACE_DEFINED__
#define __IZcadCircle_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadCircle,0xEC923048,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923048-5A17-11E7-B72E-BC5FF42AC839")
    IZcadCircle : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Center(
             VARIANT *centerPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Center(
             VARIANT centerPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Radius(
             double *radius) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Radius(
             double radius) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Diameter(
             double *diameter) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Diameter(
             double diameter) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Circumference(
             double *circumference) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Circumference(
             double circumference) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Area(
             double *area) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Area(
             double area) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Normal(
             VARIANT *normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Normal(
             VARIANT normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Thickness(
             double *thickness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Thickness(
             double thickness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Offset(
             double Distance,
             VARIANT *pOffsetCurves) = 0;

    };

#else

    typedef struct IZcadCircleVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadCircle * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadCircle * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadCircle * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadCircle * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadCircle * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadCircle * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadCircle * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadCircle * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadCircle * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadCircle * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadCircle * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadCircle * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadCircle * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadCircle * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadCircle * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadCircle * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadCircle * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadCircle * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadCircle * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadCircle * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadCircle * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadCircle * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadCircle * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadCircle * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadCircle * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadCircle * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadCircle * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadCircle * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadCircle * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadCircle * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadCircle * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadCircle * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadCircle * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadCircle * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadCircle * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadCircle * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadCircle * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadCircle * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadCircle * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadCircle * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadCircle * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadCircle * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadCircle * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadCircle * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadCircle * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadCircle * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadCircle * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadCircle * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadCircle * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadCircle * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadCircle * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadCircle * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadCircle * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadCircle * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadCircle * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadCircle * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadCircle * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Center )(
            IZcadCircle * This,
             VARIANT *centerPoint);

         HRESULT ( STDMETHODCALLTYPE *put_Center )(
            IZcadCircle * This,
             VARIANT centerPoint);

         HRESULT ( STDMETHODCALLTYPE *get_Radius )(
            IZcadCircle * This,
             double *radius);

         HRESULT ( STDMETHODCALLTYPE *put_Radius )(
            IZcadCircle * This,
             double radius);

         HRESULT ( STDMETHODCALLTYPE *get_Diameter )(
            IZcadCircle * This,
             double *diameter);

         HRESULT ( STDMETHODCALLTYPE *put_Diameter )(
            IZcadCircle * This,
             double diameter);

         HRESULT ( STDMETHODCALLTYPE *get_Circumference )(
            IZcadCircle * This,
             double *circumference);

         HRESULT ( STDMETHODCALLTYPE *put_Circumference )(
            IZcadCircle * This,
             double circumference);

         HRESULT ( STDMETHODCALLTYPE *get_Area )(
            IZcadCircle * This,
             double *area);

         HRESULT ( STDMETHODCALLTYPE *put_Area )(
            IZcadCircle * This,
             double area);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadCircle * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadCircle * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_Thickness )(
            IZcadCircle * This,
             double *thickness);

         HRESULT ( STDMETHODCALLTYPE *put_Thickness )(
            IZcadCircle * This,
             double thickness);

         HRESULT ( STDMETHODCALLTYPE *Offset )(
            IZcadCircle * This,
             double Distance,
             VARIANT *pOffsetCurves);

        END_INTERFACE
    } IZcadCircleVtbl;

    interface IZcadCircle
    {
        CONST_VTBL struct IZcadCircleVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadCircle_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadCircle_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadCircle_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadCircle_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadCircle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadCircle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadCircle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadCircle_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadCircle_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadCircle_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadCircle_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadCircle_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadCircle_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadCircle_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadCircle_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadCircle_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadCircle_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadCircle_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadCircle_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadCircle_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadCircle_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadCircle_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadCircle_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadCircle_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadCircle_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadCircle_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadCircle_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadCircle_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadCircle_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadCircle_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadCircle_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadCircle_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadCircle_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadCircle_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadCircle_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadCircle_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadCircle_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadCircle_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadCircle_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadCircle_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadCircle_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadCircle_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadCircle_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadCircle_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadCircle_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadCircle_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadCircle_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadCircle_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadCircle_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadCircle_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadCircle_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadCircle_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadCircle_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadCircle_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadCircle_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadCircle_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadCircle_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadCircle_get_Center(This,centerPoint)	\
    ((This)->lpVtbl -> get_Center(This,centerPoint))

#define IZcadCircle_put_Center(This,centerPoint)	\
    ((This)->lpVtbl -> put_Center(This,centerPoint))

#define IZcadCircle_get_Radius(This,radius)	\
    ((This)->lpVtbl -> get_Radius(This,radius))

#define IZcadCircle_put_Radius(This,radius)	\
    ((This)->lpVtbl -> put_Radius(This,radius))

#define IZcadCircle_get_Diameter(This,diameter)	\
    ((This)->lpVtbl -> get_Diameter(This,diameter))

#define IZcadCircle_put_Diameter(This,diameter)	\
    ((This)->lpVtbl -> put_Diameter(This,diameter))

#define IZcadCircle_get_Circumference(This,circumference)	\
    ((This)->lpVtbl -> get_Circumference(This,circumference))

#define IZcadCircle_put_Circumference(This,circumference)	\
    ((This)->lpVtbl -> put_Circumference(This,circumference))

#define IZcadCircle_get_Area(This,area)	\
    ((This)->lpVtbl -> get_Area(This,area))

#define IZcadCircle_put_Area(This,area)	\
    ((This)->lpVtbl -> put_Area(This,area))

#define IZcadCircle_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadCircle_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadCircle_get_Thickness(This,thickness)	\
    ((This)->lpVtbl -> get_Thickness(This,thickness))

#define IZcadCircle_put_Thickness(This,thickness)	\
    ((This)->lpVtbl -> put_Thickness(This,thickness))

#define IZcadCircle_Offset(This,Distance,pOffsetCurves)	\
    ((This)->lpVtbl -> Offset(This,Distance,pOffsetCurves))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadCircle,0xEC92303A,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC92303A-5A17-11E7-B72E-BC5FF42AC839")
ZcadCircle;
#endif

#ifndef __IZcadEllipse_INTERFACE_DEFINED__
#define __IZcadEllipse_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadEllipse,0xEC9230CA,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9230CA-5A17-11E7-B72E-BC5FF42AC839")
    IZcadEllipse : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_StartPoint(
             VARIANT *startPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Center(
             VARIANT *center) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Center(
             VARIANT center) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EndPoint(
             VARIANT *endPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MajorRadius(
             double *majorRadius) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_MajorRadius(
             double majorRadius) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MinorRadius(
             double *minorRadius) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_MinorRadius(
             double minorRadius) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_RadiusRatio(
             double *radiusRatio) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_RadiusRatio(
             double radiusRatio) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_StartAngle(
             ZCAD_ANGLE *startAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StartAngle(
             ZCAD_ANGLE startAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EndAngle(
             ZCAD_ANGLE *endAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_EndAngle(
             ZCAD_ANGLE endAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_StartParameter(
             double *startParameter) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StartParameter(
             double startParameter) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EndParameter(
             double *endParameter) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_EndParameter(
             double endParameter) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MajorAxis(
             VARIANT *majorAxis) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_MajorAxis(
             VARIANT majorAxis) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MinorAxis(
             VARIANT *minorAxis) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Normal(
             VARIANT *normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Normal(
             VARIANT normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Area(
             double *area) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Offset(
             double distance,
             VARIANT *pOffsetCurves) = 0;

    };

#else

    typedef struct IZcadEllipseVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadEllipse * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadEllipse * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadEllipse * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadEllipse * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadEllipse * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadEllipse * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadEllipse * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadEllipse * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadEllipse * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadEllipse * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadEllipse * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadEllipse * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadEllipse * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadEllipse * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadEllipse * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadEllipse * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadEllipse * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadEllipse * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadEllipse * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadEllipse * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadEllipse * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadEllipse * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadEllipse * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadEllipse * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadEllipse * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadEllipse * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadEllipse * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadEllipse * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadEllipse * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadEllipse * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadEllipse * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadEllipse * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadEllipse * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadEllipse * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadEllipse * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadEllipse * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadEllipse * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadEllipse * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadEllipse * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadEllipse * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadEllipse * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadEllipse * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadEllipse * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadEllipse * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadEllipse * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadEllipse * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadEllipse * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadEllipse * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadEllipse * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadEllipse * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadEllipse * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadEllipse * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadEllipse * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadEllipse * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadEllipse * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadEllipse * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadEllipse * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_StartPoint )(
            IZcadEllipse * This,
             VARIANT *startPoint);

         HRESULT ( STDMETHODCALLTYPE *get_Center )(
            IZcadEllipse * This,
             VARIANT *center);

         HRESULT ( STDMETHODCALLTYPE *put_Center )(
            IZcadEllipse * This,
             VARIANT center);

         HRESULT ( STDMETHODCALLTYPE *get_EndPoint )(
            IZcadEllipse * This,
             VARIANT *endPoint);

         HRESULT ( STDMETHODCALLTYPE *get_MajorRadius )(
            IZcadEllipse * This,
             double *majorRadius);

         HRESULT ( STDMETHODCALLTYPE *put_MajorRadius )(
            IZcadEllipse * This,
             double majorRadius);

         HRESULT ( STDMETHODCALLTYPE *get_MinorRadius )(
            IZcadEllipse * This,
             double *minorRadius);

         HRESULT ( STDMETHODCALLTYPE *put_MinorRadius )(
            IZcadEllipse * This,
             double minorRadius);

         HRESULT ( STDMETHODCALLTYPE *get_RadiusRatio )(
            IZcadEllipse * This,
             double *radiusRatio);

         HRESULT ( STDMETHODCALLTYPE *put_RadiusRatio )(
            IZcadEllipse * This,
             double radiusRatio);

         HRESULT ( STDMETHODCALLTYPE *get_StartAngle )(
            IZcadEllipse * This,
             ZCAD_ANGLE *startAngle);

         HRESULT ( STDMETHODCALLTYPE *put_StartAngle )(
            IZcadEllipse * This,
             ZCAD_ANGLE startAngle);

         HRESULT ( STDMETHODCALLTYPE *get_EndAngle )(
            IZcadEllipse * This,
             ZCAD_ANGLE *endAngle);

         HRESULT ( STDMETHODCALLTYPE *put_EndAngle )(
            IZcadEllipse * This,
             ZCAD_ANGLE endAngle);

         HRESULT ( STDMETHODCALLTYPE *get_StartParameter )(
            IZcadEllipse * This,
             double *startParameter);

         HRESULT ( STDMETHODCALLTYPE *put_StartParameter )(
            IZcadEllipse * This,
             double startParameter);

         HRESULT ( STDMETHODCALLTYPE *get_EndParameter )(
            IZcadEllipse * This,
             double *endParameter);

         HRESULT ( STDMETHODCALLTYPE *put_EndParameter )(
            IZcadEllipse * This,
             double endParameter);

         HRESULT ( STDMETHODCALLTYPE *get_MajorAxis )(
            IZcadEllipse * This,
             VARIANT *majorAxis);

         HRESULT ( STDMETHODCALLTYPE *put_MajorAxis )(
            IZcadEllipse * This,
             VARIANT majorAxis);

         HRESULT ( STDMETHODCALLTYPE *get_MinorAxis )(
            IZcadEllipse * This,
             VARIANT *minorAxis);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadEllipse * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadEllipse * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_Area )(
            IZcadEllipse * This,
             double *area);

         HRESULT ( STDMETHODCALLTYPE *Offset )(
            IZcadEllipse * This,
             double distance,
             VARIANT *pOffsetCurves);

        END_INTERFACE
    } IZcadEllipseVtbl;

    interface IZcadEllipse
    {
        CONST_VTBL struct IZcadEllipseVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadEllipse_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadEllipse_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadEllipse_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadEllipse_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadEllipse_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadEllipse_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadEllipse_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadEllipse_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadEllipse_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadEllipse_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadEllipse_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadEllipse_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadEllipse_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadEllipse_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadEllipse_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadEllipse_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadEllipse_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadEllipse_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadEllipse_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadEllipse_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadEllipse_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadEllipse_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadEllipse_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadEllipse_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadEllipse_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadEllipse_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadEllipse_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadEllipse_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadEllipse_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadEllipse_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadEllipse_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadEllipse_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadEllipse_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadEllipse_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadEllipse_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadEllipse_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadEllipse_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadEllipse_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadEllipse_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadEllipse_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadEllipse_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadEllipse_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadEllipse_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadEllipse_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadEllipse_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadEllipse_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadEllipse_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadEllipse_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadEllipse_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadEllipse_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadEllipse_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadEllipse_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadEllipse_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadEllipse_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadEllipse_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadEllipse_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadEllipse_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadEllipse_get_StartPoint(This,startPoint)	\
    ((This)->lpVtbl -> get_StartPoint(This,startPoint))

#define IZcadEllipse_get_Center(This,center)	\
    ((This)->lpVtbl -> get_Center(This,center))

#define IZcadEllipse_put_Center(This,center)	\
    ((This)->lpVtbl -> put_Center(This,center))

#define IZcadEllipse_get_EndPoint(This,endPoint)	\
    ((This)->lpVtbl -> get_EndPoint(This,endPoint))

#define IZcadEllipse_get_MajorRadius(This,majorRadius)	\
    ((This)->lpVtbl -> get_MajorRadius(This,majorRadius))

#define IZcadEllipse_put_MajorRadius(This,majorRadius)	\
    ((This)->lpVtbl -> put_MajorRadius(This,majorRadius))

#define IZcadEllipse_get_MinorRadius(This,minorRadius)	\
    ((This)->lpVtbl -> get_MinorRadius(This,minorRadius))

#define IZcadEllipse_put_MinorRadius(This,minorRadius)	\
    ((This)->lpVtbl -> put_MinorRadius(This,minorRadius))

#define IZcadEllipse_get_RadiusRatio(This,radiusRatio)	\
    ((This)->lpVtbl -> get_RadiusRatio(This,radiusRatio))

#define IZcadEllipse_put_RadiusRatio(This,radiusRatio)	\
    ((This)->lpVtbl -> put_RadiusRatio(This,radiusRatio))

#define IZcadEllipse_get_StartAngle(This,startAngle)	\
    ((This)->lpVtbl -> get_StartAngle(This,startAngle))

#define IZcadEllipse_put_StartAngle(This,startAngle)	\
    ((This)->lpVtbl -> put_StartAngle(This,startAngle))

#define IZcadEllipse_get_EndAngle(This,endAngle)	\
    ((This)->lpVtbl -> get_EndAngle(This,endAngle))

#define IZcadEllipse_put_EndAngle(This,endAngle)	\
    ((This)->lpVtbl -> put_EndAngle(This,endAngle))

#define IZcadEllipse_get_StartParameter(This,startParameter)	\
    ((This)->lpVtbl -> get_StartParameter(This,startParameter))

#define IZcadEllipse_put_StartParameter(This,startParameter)	\
    ((This)->lpVtbl -> put_StartParameter(This,startParameter))

#define IZcadEllipse_get_EndParameter(This,endParameter)	\
    ((This)->lpVtbl -> get_EndParameter(This,endParameter))

#define IZcadEllipse_put_EndParameter(This,endParameter)	\
    ((This)->lpVtbl -> put_EndParameter(This,endParameter))

#define IZcadEllipse_get_MajorAxis(This,majorAxis)	\
    ((This)->lpVtbl -> get_MajorAxis(This,majorAxis))

#define IZcadEllipse_put_MajorAxis(This,majorAxis)	\
    ((This)->lpVtbl -> put_MajorAxis(This,majorAxis))

#define IZcadEllipse_get_MinorAxis(This,minorAxis)	\
    ((This)->lpVtbl -> get_MinorAxis(This,minorAxis))

#define IZcadEllipse_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadEllipse_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadEllipse_get_Area(This,area)	\
    ((This)->lpVtbl -> get_Area(This,area))

#define IZcadEllipse_Offset(This,distance,pOffsetCurves)	\
    ((This)->lpVtbl -> Offset(This,distance,pOffsetCurves))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadEllipse,0xEC9231C5,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9231C5-5A17-11E7-B72E-BC5FF42AC839")
ZcadEllipse;
#endif

#ifndef __IZcadHatch_INTERFACE_DEFINED__
#define __IZcadHatch_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadHatch,0xEC92319B,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC92319B-5A17-11E7-B72E-BC5FF42AC839")
    IZcadHatch : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Normal(
             VARIANT *normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Normal(
             VARIANT normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_NumberOfLoops(
             long *numLoops) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PatternType(
             ZcPatternType *PatternType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PatternName(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PatternAngle(
             ZCAD_ANGLE *patternAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PatternAngle(
             ZCAD_ANGLE patternAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PatternScale(
             ZCAD_NOUNITS *patternScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PatternScale(
             ZCAD_NOUNITS patternScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PatternSpace(
             double *PatternSpace) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PatternSpace(
             double PatternSpace) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ISOPenWidth(
             ZcISOPenWidth *penWidth) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ISOPenWidth(
             ZcISOPenWidth penWidth) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PatternDouble(
             VARIANT_BOOL *bDouble) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PatternDouble(
             VARIANT_BOOL bDouble) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Elevation(
             double *elevation) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Elevation(
             double elevation) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AssociativeHatch(
             VARIANT_BOOL *fAssoc) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AssociativeHatch(
             VARIANT_BOOL fAssoc) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_HatchStyle(
             ZcHatchStyle *hatchStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_HatchStyle(
             ZcHatchStyle hatchStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetPattern(
             int PatternType,
             BSTR PatternName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AppendOuterLoop(
             VARIANT ObjectArray) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AppendInnerLoop(
             VARIANT ObjectArray) = 0;

        virtual  HRESULT STDMETHODCALLTYPE InsertLoopAt(
             int Index,
             ZcLoopType LoopType,
             VARIANT ObjectArray) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetLoopAt(
             int Index,
             VARIANT *ObjectArray) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Evaluate( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_GradientColor1(
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_GradientColor1(
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_GradientColor2(
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_GradientColor2(
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_GradientAngle(
             ZCAD_ANGLE *gradientAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_GradientAngle(
             ZCAD_ANGLE gradientAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_GradientCentered(
             VARIANT_BOOL *fCentered) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_GradientCentered(
             VARIANT_BOOL fCentered) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_GradientName(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_GradientName(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_HatchObjectType(
             ZcHatchObjectType *hatchType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_HatchObjectType(
             ZcHatchObjectType hatchType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Area(
             double *area) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Origin(
             VARIANT *origin) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Origin(
             VARIANT origin) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BackgroundColor(
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BackgroundColor(
             IZcadZcCmColor *pColor) = 0;

    };

#else

    typedef struct IZcadHatchVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadHatch * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadHatch * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadHatch * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadHatch * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadHatch * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadHatch * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadHatch * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadHatch * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadHatch * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadHatch * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadHatch * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadHatch * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadHatch * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadHatch * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadHatch * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadHatch * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadHatch * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadHatch * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadHatch * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadHatch * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadHatch * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadHatch * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadHatch * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadHatch * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadHatch * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadHatch * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadHatch * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadHatch * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadHatch * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadHatch * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadHatch * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadHatch * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadHatch * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadHatch * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadHatch * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadHatch * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadHatch * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadHatch * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadHatch * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadHatch * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadHatch * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadHatch * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadHatch * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadHatch * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadHatch * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadHatch * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadHatch * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadHatch * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadHatch * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadHatch * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadHatch * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadHatch * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadHatch * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadHatch * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadHatch * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadHatch * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadHatch * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadHatch * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadHatch * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_NumberOfLoops )(
            IZcadHatch * This,
             long *numLoops);

         HRESULT ( STDMETHODCALLTYPE *get_PatternType )(
            IZcadHatch * This,
             ZcPatternType *PatternType);

         HRESULT ( STDMETHODCALLTYPE *get_PatternName )(
            IZcadHatch * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_PatternAngle )(
            IZcadHatch * This,
             ZCAD_ANGLE *patternAngle);

         HRESULT ( STDMETHODCALLTYPE *put_PatternAngle )(
            IZcadHatch * This,
             ZCAD_ANGLE patternAngle);

         HRESULT ( STDMETHODCALLTYPE *get_PatternScale )(
            IZcadHatch * This,
             ZCAD_NOUNITS *patternScale);

         HRESULT ( STDMETHODCALLTYPE *put_PatternScale )(
            IZcadHatch * This,
             ZCAD_NOUNITS patternScale);

         HRESULT ( STDMETHODCALLTYPE *get_PatternSpace )(
            IZcadHatch * This,
             double *PatternSpace);

         HRESULT ( STDMETHODCALLTYPE *put_PatternSpace )(
            IZcadHatch * This,
             double PatternSpace);

         HRESULT ( STDMETHODCALLTYPE *get_ISOPenWidth )(
            IZcadHatch * This,
             ZcISOPenWidth *penWidth);

         HRESULT ( STDMETHODCALLTYPE *put_ISOPenWidth )(
            IZcadHatch * This,
             ZcISOPenWidth penWidth);

         HRESULT ( STDMETHODCALLTYPE *get_PatternDouble )(
            IZcadHatch * This,
             VARIANT_BOOL *bDouble);

         HRESULT ( STDMETHODCALLTYPE *put_PatternDouble )(
            IZcadHatch * This,
             VARIANT_BOOL bDouble);

         HRESULT ( STDMETHODCALLTYPE *get_Elevation )(
            IZcadHatch * This,
             double *elevation);

         HRESULT ( STDMETHODCALLTYPE *put_Elevation )(
            IZcadHatch * This,
             double elevation);

         HRESULT ( STDMETHODCALLTYPE *get_AssociativeHatch )(
            IZcadHatch * This,
             VARIANT_BOOL *fAssoc);

         HRESULT ( STDMETHODCALLTYPE *put_AssociativeHatch )(
            IZcadHatch * This,
             VARIANT_BOOL fAssoc);

         HRESULT ( STDMETHODCALLTYPE *get_HatchStyle )(
            IZcadHatch * This,
             ZcHatchStyle *hatchStyle);

         HRESULT ( STDMETHODCALLTYPE *put_HatchStyle )(
            IZcadHatch * This,
             ZcHatchStyle hatchStyle);

         HRESULT ( STDMETHODCALLTYPE *SetPattern )(
            IZcadHatch * This,
             int PatternType,
             BSTR PatternName);

         HRESULT ( STDMETHODCALLTYPE *AppendOuterLoop )(
            IZcadHatch * This,
             VARIANT ObjectArray);

         HRESULT ( STDMETHODCALLTYPE *AppendInnerLoop )(
            IZcadHatch * This,
             VARIANT ObjectArray);

         HRESULT ( STDMETHODCALLTYPE *InsertLoopAt )(
            IZcadHatch * This,
             int Index,
             ZcLoopType LoopType,
             VARIANT ObjectArray);

         HRESULT ( STDMETHODCALLTYPE *GetLoopAt )(
            IZcadHatch * This,
             int Index,
             VARIANT *ObjectArray);

         HRESULT ( STDMETHODCALLTYPE *Evaluate )(
            IZcadHatch * This);

         HRESULT ( STDMETHODCALLTYPE *get_GradientColor1 )(
            IZcadHatch * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_GradientColor1 )(
            IZcadHatch * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_GradientColor2 )(
            IZcadHatch * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_GradientColor2 )(
            IZcadHatch * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_GradientAngle )(
            IZcadHatch * This,
             ZCAD_ANGLE *gradientAngle);

         HRESULT ( STDMETHODCALLTYPE *put_GradientAngle )(
            IZcadHatch * This,
             ZCAD_ANGLE gradientAngle);

         HRESULT ( STDMETHODCALLTYPE *get_GradientCentered )(
            IZcadHatch * This,
             VARIANT_BOOL *fCentered);

         HRESULT ( STDMETHODCALLTYPE *put_GradientCentered )(
            IZcadHatch * This,
             VARIANT_BOOL fCentered);

         HRESULT ( STDMETHODCALLTYPE *get_GradientName )(
            IZcadHatch * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_GradientName )(
            IZcadHatch * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_HatchObjectType )(
            IZcadHatch * This,
             ZcHatchObjectType *hatchType);

         HRESULT ( STDMETHODCALLTYPE *put_HatchObjectType )(
            IZcadHatch * This,
             ZcHatchObjectType hatchType);

         HRESULT ( STDMETHODCALLTYPE *get_Area )(
            IZcadHatch * This,
             double *area);

         HRESULT ( STDMETHODCALLTYPE *get_Origin )(
            IZcadHatch * This,
             VARIANT *origin);

         HRESULT ( STDMETHODCALLTYPE *put_Origin )(
            IZcadHatch * This,
             VARIANT origin);

         HRESULT ( STDMETHODCALLTYPE *get_BackgroundColor )(
            IZcadHatch * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_BackgroundColor )(
            IZcadHatch * This,
             IZcadZcCmColor *pColor);

        END_INTERFACE
    } IZcadHatchVtbl;

    interface IZcadHatch
    {
        CONST_VTBL struct IZcadHatchVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadHatch_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadHatch_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadHatch_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadHatch_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadHatch_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadHatch_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadHatch_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadHatch_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadHatch_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadHatch_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadHatch_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadHatch_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadHatch_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadHatch_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadHatch_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadHatch_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadHatch_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadHatch_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadHatch_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadHatch_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadHatch_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadHatch_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadHatch_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadHatch_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadHatch_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadHatch_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadHatch_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadHatch_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadHatch_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadHatch_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadHatch_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadHatch_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadHatch_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadHatch_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadHatch_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadHatch_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadHatch_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadHatch_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadHatch_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadHatch_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadHatch_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadHatch_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadHatch_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadHatch_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadHatch_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadHatch_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadHatch_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadHatch_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadHatch_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadHatch_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadHatch_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadHatch_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadHatch_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadHatch_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadHatch_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadHatch_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadHatch_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadHatch_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadHatch_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadHatch_get_NumberOfLoops(This,numLoops)	\
    ((This)->lpVtbl -> get_NumberOfLoops(This,numLoops))

#define IZcadHatch_get_PatternType(This,PatternType)	\
    ((This)->lpVtbl -> get_PatternType(This,PatternType))

#define IZcadHatch_get_PatternName(This,bstrName)	\
    ((This)->lpVtbl -> get_PatternName(This,bstrName))

#define IZcadHatch_get_PatternAngle(This,patternAngle)	\
    ((This)->lpVtbl -> get_PatternAngle(This,patternAngle))

#define IZcadHatch_put_PatternAngle(This,patternAngle)	\
    ((This)->lpVtbl -> put_PatternAngle(This,patternAngle))

#define IZcadHatch_get_PatternScale(This,patternScale)	\
    ((This)->lpVtbl -> get_PatternScale(This,patternScale))

#define IZcadHatch_put_PatternScale(This,patternScale)	\
    ((This)->lpVtbl -> put_PatternScale(This,patternScale))

#define IZcadHatch_get_PatternSpace(This,PatternSpace)	\
    ((This)->lpVtbl -> get_PatternSpace(This,PatternSpace))

#define IZcadHatch_put_PatternSpace(This,PatternSpace)	\
    ((This)->lpVtbl -> put_PatternSpace(This,PatternSpace))

#define IZcadHatch_get_ISOPenWidth(This,penWidth)	\
    ((This)->lpVtbl -> get_ISOPenWidth(This,penWidth))

#define IZcadHatch_put_ISOPenWidth(This,penWidth)	\
    ((This)->lpVtbl -> put_ISOPenWidth(This,penWidth))

#define IZcadHatch_get_PatternDouble(This,bDouble)	\
    ((This)->lpVtbl -> get_PatternDouble(This,bDouble))

#define IZcadHatch_put_PatternDouble(This,bDouble)	\
    ((This)->lpVtbl -> put_PatternDouble(This,bDouble))

#define IZcadHatch_get_Elevation(This,elevation)	\
    ((This)->lpVtbl -> get_Elevation(This,elevation))

#define IZcadHatch_put_Elevation(This,elevation)	\
    ((This)->lpVtbl -> put_Elevation(This,elevation))

#define IZcadHatch_get_AssociativeHatch(This,fAssoc)	\
    ((This)->lpVtbl -> get_AssociativeHatch(This,fAssoc))

#define IZcadHatch_put_AssociativeHatch(This,fAssoc)	\
    ((This)->lpVtbl -> put_AssociativeHatch(This,fAssoc))

#define IZcadHatch_get_HatchStyle(This,hatchStyle)	\
    ((This)->lpVtbl -> get_HatchStyle(This,hatchStyle))

#define IZcadHatch_put_HatchStyle(This,hatchStyle)	\
    ((This)->lpVtbl -> put_HatchStyle(This,hatchStyle))

#define IZcadHatch_SetPattern(This,PatternType,PatternName)	\
    ((This)->lpVtbl -> SetPattern(This,PatternType,PatternName))

#define IZcadHatch_AppendOuterLoop(This,ObjectArray)	\
    ((This)->lpVtbl -> AppendOuterLoop(This,ObjectArray))

#define IZcadHatch_AppendInnerLoop(This,ObjectArray)	\
    ((This)->lpVtbl -> AppendInnerLoop(This,ObjectArray))

#define IZcadHatch_InsertLoopAt(This,Index,LoopType,ObjectArray)	\
    ((This)->lpVtbl -> InsertLoopAt(This,Index,LoopType,ObjectArray))

#define IZcadHatch_GetLoopAt(This,Index,ObjectArray)	\
    ((This)->lpVtbl -> GetLoopAt(This,Index,ObjectArray))

#define IZcadHatch_Evaluate(This)	\
    ((This)->lpVtbl -> Evaluate(This))

#define IZcadHatch_get_GradientColor1(This,pColor)	\
    ((This)->lpVtbl -> get_GradientColor1(This,pColor))

#define IZcadHatch_put_GradientColor1(This,pColor)	\
    ((This)->lpVtbl -> put_GradientColor1(This,pColor))

#define IZcadHatch_get_GradientColor2(This,pColor)	\
    ((This)->lpVtbl -> get_GradientColor2(This,pColor))

#define IZcadHatch_put_GradientColor2(This,pColor)	\
    ((This)->lpVtbl -> put_GradientColor2(This,pColor))

#define IZcadHatch_get_GradientAngle(This,gradientAngle)	\
    ((This)->lpVtbl -> get_GradientAngle(This,gradientAngle))

#define IZcadHatch_put_GradientAngle(This,gradientAngle)	\
    ((This)->lpVtbl -> put_GradientAngle(This,gradientAngle))

#define IZcadHatch_get_GradientCentered(This,fCentered)	\
    ((This)->lpVtbl -> get_GradientCentered(This,fCentered))

#define IZcadHatch_put_GradientCentered(This,fCentered)	\
    ((This)->lpVtbl -> put_GradientCentered(This,fCentered))

#define IZcadHatch_get_GradientName(This,bstrName)	\
    ((This)->lpVtbl -> get_GradientName(This,bstrName))

#define IZcadHatch_put_GradientName(This,bstrName)	\
    ((This)->lpVtbl -> put_GradientName(This,bstrName))

#define IZcadHatch_get_HatchObjectType(This,hatchType)	\
    ((This)->lpVtbl -> get_HatchObjectType(This,hatchType))

#define IZcadHatch_put_HatchObjectType(This,hatchType)	\
    ((This)->lpVtbl -> put_HatchObjectType(This,hatchType))

#define IZcadHatch_get_Area(This,area)	\
    ((This)->lpVtbl -> get_Area(This,area))

#define IZcadHatch_get_Origin(This,origin)	\
    ((This)->lpVtbl -> get_Origin(This,origin))

#define IZcadHatch_put_Origin(This,origin)	\
    ((This)->lpVtbl -> put_Origin(This,origin))

#define IZcadHatch_get_BackgroundColor(This,pColor)	\
    ((This)->lpVtbl -> get_BackgroundColor(This,pColor))

#define IZcadHatch_put_BackgroundColor(This,pColor)	\
    ((This)->lpVtbl -> put_BackgroundColor(This,pColor))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadHatch,0xEC923120,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923120-5A17-11E7-B72E-BC5FF42AC839")
ZcadHatch;
#endif

#ifndef __IZcadLeader_INTERFACE_DEFINED__
#define __IZcadLeader_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadLeader,0xEC92308B,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC92308B-5A17-11E7-B72E-BC5FF42AC839")
    IZcadLeader : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Coordinates(
             VARIANT *coordinates) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Coordinates(
             VARIANT coordinates) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Normal(
             VARIANT *normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_StyleName(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StyleName(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Type(
             ZcLeaderType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Type(
             ZcLeaderType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Evaluate( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Coordinate(
             int Index,
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Coordinate(
             int Index,
             VARIANT newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Annotation(
             IZcadEntity **pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Annotation(
             IZcadEntity *newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArrowheadSize(
             double *size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArrowheadSize(
             double size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArrowheadType(
             ZcDimArrowheadType *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArrowheadType(
             ZcDimArrowheadType Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLineColor(
             ZCAD_COLOR *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLineColor(
             ZCAD_COLOR Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLineWeight(
             ZCAD_LWEIGHT *weight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLineWeight(
             ZCAD_LWEIGHT weight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ScaleFactor(
             ZCAD_NOUNITS *factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ScaleFactor(
             ZCAD_NOUNITS factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_VerticalTextPosition(
             ZcDimVerticalJustification *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_VerticalTextPosition(
             ZcDimVerticalJustification type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextGap(
             double *offset) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextGap(
             double offset) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArrowheadBlock(
             BSTR *BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArrowheadBlock(
             BSTR BlockName) = 0;

    };

#else

    typedef struct IZcadLeaderVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadLeader * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadLeader * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadLeader * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadLeader * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadLeader * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadLeader * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadLeader * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadLeader * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadLeader * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadLeader * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadLeader * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadLeader * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadLeader * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadLeader * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadLeader * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadLeader * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadLeader * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadLeader * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadLeader * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadLeader * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadLeader * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadLeader * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadLeader * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadLeader * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadLeader * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadLeader * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadLeader * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadLeader * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadLeader * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadLeader * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadLeader * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadLeader * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadLeader * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadLeader * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadLeader * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadLeader * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadLeader * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadLeader * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadLeader * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadLeader * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadLeader * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadLeader * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadLeader * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadLeader * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadLeader * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadLeader * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadLeader * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadLeader * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadLeader * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadLeader * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadLeader * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadLeader * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadLeader * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadLeader * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadLeader * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadLeader * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadLeader * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Coordinates )(
            IZcadLeader * This,
             VARIANT *coordinates);

         HRESULT ( STDMETHODCALLTYPE *put_Coordinates )(
            IZcadLeader * This,
             VARIANT coordinates);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadLeader * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *get_StyleName )(
            IZcadLeader * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_StyleName )(
            IZcadLeader * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_Type )(
            IZcadLeader * This,
             ZcLeaderType *type);

         HRESULT ( STDMETHODCALLTYPE *put_Type )(
            IZcadLeader * This,
             ZcLeaderType type);

         HRESULT ( STDMETHODCALLTYPE *Evaluate )(
            IZcadLeader * This);

         HRESULT ( STDMETHODCALLTYPE *get_Coordinate )(
            IZcadLeader * This,
             int Index,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_Coordinate )(
            IZcadLeader * This,
             int Index,
             VARIANT newVal);

         HRESULT ( STDMETHODCALLTYPE *get_Annotation )(
            IZcadLeader * This,
             IZcadEntity **pVal);

         HRESULT ( STDMETHODCALLTYPE *put_Annotation )(
            IZcadLeader * This,
             IZcadEntity *newVal);

         HRESULT ( STDMETHODCALLTYPE *get_ArrowheadSize )(
            IZcadLeader * This,
             double *size);

         HRESULT ( STDMETHODCALLTYPE *put_ArrowheadSize )(
            IZcadLeader * This,
             double size);

         HRESULT ( STDMETHODCALLTYPE *get_ArrowheadType )(
            IZcadLeader * This,
             ZcDimArrowheadType *Type);

         HRESULT ( STDMETHODCALLTYPE *put_ArrowheadType )(
            IZcadLeader * This,
             ZcDimArrowheadType Type);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLineColor )(
            IZcadLeader * This,
             ZCAD_COLOR *Type);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLineColor )(
            IZcadLeader * This,
             ZCAD_COLOR Type);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLineWeight )(
            IZcadLeader * This,
             ZCAD_LWEIGHT *weight);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLineWeight )(
            IZcadLeader * This,
             ZCAD_LWEIGHT weight);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )(
            IZcadLeader * This,
             ZCAD_NOUNITS *factor);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )(
            IZcadLeader * This,
             ZCAD_NOUNITS factor);

         HRESULT ( STDMETHODCALLTYPE *get_VerticalTextPosition )(
            IZcadLeader * This,
             ZcDimVerticalJustification *type);

         HRESULT ( STDMETHODCALLTYPE *put_VerticalTextPosition )(
            IZcadLeader * This,
             ZcDimVerticalJustification type);

         HRESULT ( STDMETHODCALLTYPE *get_TextGap )(
            IZcadLeader * This,
             double *offset);

         HRESULT ( STDMETHODCALLTYPE *put_TextGap )(
            IZcadLeader * This,
             double offset);

         HRESULT ( STDMETHODCALLTYPE *get_ArrowheadBlock )(
            IZcadLeader * This,
             BSTR *BlockName);

         HRESULT ( STDMETHODCALLTYPE *put_ArrowheadBlock )(
            IZcadLeader * This,
             BSTR BlockName);

        END_INTERFACE
    } IZcadLeaderVtbl;

    interface IZcadLeader
    {
        CONST_VTBL struct IZcadLeaderVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadLeader_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadLeader_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadLeader_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadLeader_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadLeader_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadLeader_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadLeader_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadLeader_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadLeader_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadLeader_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadLeader_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadLeader_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadLeader_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadLeader_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadLeader_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadLeader_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadLeader_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadLeader_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadLeader_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadLeader_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadLeader_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadLeader_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadLeader_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadLeader_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadLeader_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadLeader_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadLeader_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadLeader_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadLeader_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadLeader_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadLeader_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadLeader_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadLeader_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadLeader_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadLeader_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadLeader_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadLeader_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadLeader_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadLeader_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadLeader_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadLeader_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadLeader_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadLeader_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadLeader_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadLeader_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadLeader_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadLeader_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadLeader_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadLeader_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadLeader_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadLeader_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadLeader_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadLeader_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadLeader_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadLeader_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadLeader_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadLeader_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadLeader_get_Coordinates(This,coordinates)	\
    ((This)->lpVtbl -> get_Coordinates(This,coordinates))

#define IZcadLeader_put_Coordinates(This,coordinates)	\
    ((This)->lpVtbl -> put_Coordinates(This,coordinates))

#define IZcadLeader_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadLeader_get_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> get_StyleName(This,bstrName))

#define IZcadLeader_put_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> put_StyleName(This,bstrName))

#define IZcadLeader_get_Type(This,type)	\
    ((This)->lpVtbl -> get_Type(This,type))

#define IZcadLeader_put_Type(This,type)	\
    ((This)->lpVtbl -> put_Type(This,type))

#define IZcadLeader_Evaluate(This)	\
    ((This)->lpVtbl -> Evaluate(This))

#define IZcadLeader_get_Coordinate(This,Index,pVal)	\
    ((This)->lpVtbl -> get_Coordinate(This,Index,pVal))

#define IZcadLeader_put_Coordinate(This,Index,newVal)	\
    ((This)->lpVtbl -> put_Coordinate(This,Index,newVal))

#define IZcadLeader_get_Annotation(This,pVal)	\
    ((This)->lpVtbl -> get_Annotation(This,pVal))

#define IZcadLeader_put_Annotation(This,newVal)	\
    ((This)->lpVtbl -> put_Annotation(This,newVal))

#define IZcadLeader_get_ArrowheadSize(This,size)	\
    ((This)->lpVtbl -> get_ArrowheadSize(This,size))

#define IZcadLeader_put_ArrowheadSize(This,size)	\
    ((This)->lpVtbl -> put_ArrowheadSize(This,size))

#define IZcadLeader_get_ArrowheadType(This,Type)	\
    ((This)->lpVtbl -> get_ArrowheadType(This,Type))

#define IZcadLeader_put_ArrowheadType(This,Type)	\
    ((This)->lpVtbl -> put_ArrowheadType(This,Type))

#define IZcadLeader_get_DimensionLineColor(This,Type)	\
    ((This)->lpVtbl -> get_DimensionLineColor(This,Type))

#define IZcadLeader_put_DimensionLineColor(This,Type)	\
    ((This)->lpVtbl -> put_DimensionLineColor(This,Type))

#define IZcadLeader_get_DimensionLineWeight(This,weight)	\
    ((This)->lpVtbl -> get_DimensionLineWeight(This,weight))

#define IZcadLeader_put_DimensionLineWeight(This,weight)	\
    ((This)->lpVtbl -> put_DimensionLineWeight(This,weight))

#define IZcadLeader_get_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> get_ScaleFactor(This,factor))

#define IZcadLeader_put_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> put_ScaleFactor(This,factor))

#define IZcadLeader_get_VerticalTextPosition(This,type)	\
    ((This)->lpVtbl -> get_VerticalTextPosition(This,type))

#define IZcadLeader_put_VerticalTextPosition(This,type)	\
    ((This)->lpVtbl -> put_VerticalTextPosition(This,type))

#define IZcadLeader_get_TextGap(This,offset)	\
    ((This)->lpVtbl -> get_TextGap(This,offset))

#define IZcadLeader_put_TextGap(This,offset)	\
    ((This)->lpVtbl -> put_TextGap(This,offset))

#define IZcadLeader_get_ArrowheadBlock(This,BlockName)	\
    ((This)->lpVtbl -> get_ArrowheadBlock(This,BlockName))

#define IZcadLeader_put_ArrowheadBlock(This,BlockName)	\
    ((This)->lpVtbl -> put_ArrowheadBlock(This,BlockName))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadLeader,0xEC922FD3,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC922FD3-5A17-11E7-B72E-BC5FF42AC839")
ZcadLeader;
#endif

#ifndef __IZcadMLeader_INTERFACE_DEFINED__
#define __IZcadMLeader_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadMLeader,0xB125D293,0xE039,0x4D19,0xB9,0x75,0x1C,0x4A,0x88,0x41,0xC5,0xAB);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC922FC2-5A17-11E7-B72E-BC5FF42AC839")
    IZcadMLeader : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_ScaleFactor(
             double *scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ScaleFactor(
             double scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LeaderType(
             ZcMLeaderType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LeaderType(
             ZcMLeaderType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LeaderLineColor(
             IZcadZcCmColor **Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LeaderLineColor(
             IZcadZcCmColor *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LeaderLinetype(
             ZCAD_LTYPE *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LeaderLinetype(
             ZCAD_LTYPE Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LeaderLineWeight(
             ZCAD_LWEIGHT *lineWeight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LeaderLineWeight(
             ZCAD_LWEIGHT lineWeight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArrowheadType(
             ZcDimArrowheadType *BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArrowheadType(
             ZcDimArrowheadType BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArrowheadSize(
             double *size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArrowheadSize(
             double size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DogLegged(
             VARIANT_BOOL *val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DogLegged(
             VARIANT_BOOL newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DoglegLength(
             double *doglegLength) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DoglegLength(
             double doglegLength) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ContentBlockName(
             BSTR *BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ContentBlockName(
             BSTR BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BlockConnectionType(
             ZcBlockConnectionType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BlockConnectionType(
             ZcBlockConnectionType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BlockScale(
             ZCAD_NOUNITS *factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BlockScale(
             ZCAD_NOUNITS factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextString(
             BSTR *bstrText) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextString(
             BSTR bstrText) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextStyleName(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextStyleName(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextJustify(
             ZcAttachmentPoint *attPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextJustify(
             ZcAttachmentPoint attPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextDirection(
             ZcDrawingDirection *drawDir) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextDirection(
             ZcDrawingDirection drawDir) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextWidth(
             double *width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextWidth(
             double width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextHeight(
             double *height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextHeight(
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextRotation(
             ZCAD_ANGLE *rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextRotation(
             ZCAD_ANGLE rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextLineSpacingFactor(
             double *Factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextLineSpacingFactor(
             double Factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextLineSpacingDistance(
             double *Value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextLineSpacingDistance(
             double Value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextLineSpacingStyle(
             ZcLineSpacingStyle *Style) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextLineSpacingStyle(
             ZcLineSpacingStyle Style) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextBackgroundFill(
             VARIANT_BOOL *bUseBackgroundFill) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextBackgroundFill(
             VARIANT_BOOL bUseBackgroundFill) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextAttachmentDirection(
             ZcTextAttachmentDirection *dir) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextAttachmentDirection(
             ZcTextAttachmentDirection dir) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextLeftAttachmentType(
             ZcTextAttachmentType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextLeftAttachmentType(
             ZcTextAttachmentType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextRightAttachmentType(
             ZcTextAttachmentType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextRightAttachmentType(
             ZcTextAttachmentType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextTopAttachmentType(
             ZcVerticalTextAttachmentType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextTopAttachmentType(
             ZcVerticalTextAttachmentType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextBottomAttachmentType(
             ZcVerticalTextAttachmentType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextBottomAttachmentType(
             ZcVerticalTextAttachmentType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LandingGap(
             double *gap) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LandingGap(
             double gap) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArrowheadBlock(
             BSTR *BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArrowheadBlock(
             BSTR BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ContentBlockType(
             ZcPredefBlockType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ContentBlockType(
             ZcPredefBlockType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LeaderCount(
             int *number) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddLeader(
             int *leaderIndex) = 0;

        virtual  HRESULT STDMETHODCALLTYPE RemoveLeader(
             int leaderIndex) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddLeaderLine(
             int leaderIndex,
             VARIANT pointArray,
             int *leaderLineIndex) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddLeaderLineEx(
             VARIANT pointArray,
             int *leaderLineIndex) = 0;

        virtual  HRESULT STDMETHODCALLTYPE RemoveLeaderLine(
             int leaderLineIndex) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetLeaderLineVertices(
             int leaderLineIndex,
             VARIANT pointArray) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetLeaderLineVertices(
             int leaderLineIndex,
             VARIANT *pointArray) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ContentType(
             ZcMLeaderContentType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ContentType(
             ZcMLeaderContentType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetLeaderIndex(
             int leaderLineIndex,
             int *leaderIndex) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetLeaderLineIndexes(
             int leaderIndex,
             VARIANT *leaderLineIndexes) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetVertexCount(
             int leaderLineIndex,
             int *number) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextFrameDisplay(
             VARIANT_BOOL *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextFrameDisplay(
             VARIANT_BOOL newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_StyleName(
             BSTR *name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StyleName(
             BSTR name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetDoglegDirection(
             int leaderIndex,
             VARIANT *dirVec) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetDoglegDirection(
             int leaderIndex,
             VARIANT dirVec) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetBlockAttributeValue(
             LONG_PTR attdefId,
             BSTR *value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetBlockAttributeValue(
             LONG_PTR attdefId,
             BSTR value) = 0;

    };

#else

    typedef struct IZcadMLeaderVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadMLeader * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadMLeader * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadMLeader * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadMLeader * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadMLeader * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadMLeader * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadMLeader * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadMLeader * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadMLeader * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadMLeader * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadMLeader * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadMLeader * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadMLeader * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadMLeader * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadMLeader * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadMLeader * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadMLeader * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadMLeader * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadMLeader * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadMLeader * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadMLeader * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadMLeader * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadMLeader * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadMLeader * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadMLeader * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadMLeader * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadMLeader * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadMLeader * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadMLeader * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadMLeader * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadMLeader * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadMLeader * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadMLeader * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadMLeader * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadMLeader * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadMLeader * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadMLeader * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadMLeader * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadMLeader * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadMLeader * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadMLeader * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadMLeader * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadMLeader * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadMLeader * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadMLeader * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadMLeader * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadMLeader * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadMLeader * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadMLeader * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadMLeader * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadMLeader * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadMLeader * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadMLeader * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadMLeader * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadMLeader * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadMLeader * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadMLeader * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )(
            IZcadMLeader * This,
             double *scale);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )(
            IZcadMLeader * This,
             double scale);

         HRESULT ( STDMETHODCALLTYPE *get_LeaderType )(
            IZcadMLeader * This,
             ZcMLeaderType *type);

         HRESULT ( STDMETHODCALLTYPE *put_LeaderType )(
            IZcadMLeader * This,
             ZcMLeaderType type);

         HRESULT ( STDMETHODCALLTYPE *get_LeaderLineColor )(
            IZcadMLeader * This,
             IZcadZcCmColor **Type);

         HRESULT ( STDMETHODCALLTYPE *put_LeaderLineColor )(
            IZcadMLeader * This,
             IZcadZcCmColor *Type);

         HRESULT ( STDMETHODCALLTYPE *get_LeaderLinetype )(
            IZcadMLeader * This,
             ZCAD_LTYPE *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_LeaderLinetype )(
            IZcadMLeader * This,
             ZCAD_LTYPE Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LeaderLineWeight )(
            IZcadMLeader * This,
             ZCAD_LWEIGHT *lineWeight);

         HRESULT ( STDMETHODCALLTYPE *put_LeaderLineWeight )(
            IZcadMLeader * This,
             ZCAD_LWEIGHT lineWeight);

         HRESULT ( STDMETHODCALLTYPE *get_ArrowheadType )(
            IZcadMLeader * This,
             ZcDimArrowheadType *BlockName);

         HRESULT ( STDMETHODCALLTYPE *put_ArrowheadType )(
            IZcadMLeader * This,
             ZcDimArrowheadType BlockName);

         HRESULT ( STDMETHODCALLTYPE *get_ArrowheadSize )(
            IZcadMLeader * This,
             double *size);

         HRESULT ( STDMETHODCALLTYPE *put_ArrowheadSize )(
            IZcadMLeader * This,
             double size);

         HRESULT ( STDMETHODCALLTYPE *get_DogLegged )(
            IZcadMLeader * This,
             VARIANT_BOOL *val);

         HRESULT ( STDMETHODCALLTYPE *put_DogLegged )(
            IZcadMLeader * This,
             VARIANT_BOOL newVal);

         HRESULT ( STDMETHODCALLTYPE *get_DoglegLength )(
            IZcadMLeader * This,
             double *doglegLength);

         HRESULT ( STDMETHODCALLTYPE *put_DoglegLength )(
            IZcadMLeader * This,
             double doglegLength);

         HRESULT ( STDMETHODCALLTYPE *get_ContentBlockName )(
            IZcadMLeader * This,
             BSTR *BlockName);

         HRESULT ( STDMETHODCALLTYPE *put_ContentBlockName )(
            IZcadMLeader * This,
             BSTR BlockName);

         HRESULT ( STDMETHODCALLTYPE *get_BlockConnectionType )(
            IZcadMLeader * This,
             ZcBlockConnectionType *type);

         HRESULT ( STDMETHODCALLTYPE *put_BlockConnectionType )(
            IZcadMLeader * This,
             ZcBlockConnectionType type);

         HRESULT ( STDMETHODCALLTYPE *get_BlockScale )(
            IZcadMLeader * This,
             ZCAD_NOUNITS *factor);

         HRESULT ( STDMETHODCALLTYPE *put_BlockScale )(
            IZcadMLeader * This,
             ZCAD_NOUNITS factor);

         HRESULT ( STDMETHODCALLTYPE *get_TextString )(
            IZcadMLeader * This,
             BSTR *bstrText);

         HRESULT ( STDMETHODCALLTYPE *put_TextString )(
            IZcadMLeader * This,
             BSTR bstrText);

         HRESULT ( STDMETHODCALLTYPE *get_TextStyleName )(
            IZcadMLeader * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_TextStyleName )(
            IZcadMLeader * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_TextJustify )(
            IZcadMLeader * This,
             ZcAttachmentPoint *attPoint);

         HRESULT ( STDMETHODCALLTYPE *put_TextJustify )(
            IZcadMLeader * This,
             ZcAttachmentPoint attPoint);

         HRESULT ( STDMETHODCALLTYPE *get_TextDirection )(
            IZcadMLeader * This,
             ZcDrawingDirection *drawDir);

         HRESULT ( STDMETHODCALLTYPE *put_TextDirection )(
            IZcadMLeader * This,
             ZcDrawingDirection drawDir);

         HRESULT ( STDMETHODCALLTYPE *get_TextWidth )(
            IZcadMLeader * This,
             double *width);

         HRESULT ( STDMETHODCALLTYPE *put_TextWidth )(
            IZcadMLeader * This,
             double width);

         HRESULT ( STDMETHODCALLTYPE *get_TextHeight )(
            IZcadMLeader * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_TextHeight )(
            IZcadMLeader * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_TextRotation )(
            IZcadMLeader * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_TextRotation )(
            IZcadMLeader * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextLineSpacingFactor )(
            IZcadMLeader * This,
             double *Factor);

         HRESULT ( STDMETHODCALLTYPE *put_TextLineSpacingFactor )(
            IZcadMLeader * This,
             double Factor);

         HRESULT ( STDMETHODCALLTYPE *get_TextLineSpacingDistance )(
            IZcadMLeader * This,
             double *Value);

         HRESULT ( STDMETHODCALLTYPE *put_TextLineSpacingDistance )(
            IZcadMLeader * This,
             double Value);

         HRESULT ( STDMETHODCALLTYPE *get_TextLineSpacingStyle )(
            IZcadMLeader * This,
             ZcLineSpacingStyle *Style);

         HRESULT ( STDMETHODCALLTYPE *put_TextLineSpacingStyle )(
            IZcadMLeader * This,
             ZcLineSpacingStyle Style);

         HRESULT ( STDMETHODCALLTYPE *get_TextBackgroundFill )(
            IZcadMLeader * This,
             VARIANT_BOOL *bUseBackgroundFill);

         HRESULT ( STDMETHODCALLTYPE *put_TextBackgroundFill )(
            IZcadMLeader * This,
             VARIANT_BOOL bUseBackgroundFill);

         HRESULT ( STDMETHODCALLTYPE *get_TextAttachmentDirection )(
            IZcadMLeader * This,
             ZcTextAttachmentDirection *dir);

         HRESULT ( STDMETHODCALLTYPE *put_TextAttachmentDirection )(
            IZcadMLeader * This,
             ZcTextAttachmentDirection dir);

         HRESULT ( STDMETHODCALLTYPE *get_TextLeftAttachmentType )(
            IZcadMLeader * This,
             ZcTextAttachmentType *type);

         HRESULT ( STDMETHODCALLTYPE *put_TextLeftAttachmentType )(
            IZcadMLeader * This,
             ZcTextAttachmentType type);

         HRESULT ( STDMETHODCALLTYPE *get_TextRightAttachmentType )(
            IZcadMLeader * This,
             ZcTextAttachmentType *type);

         HRESULT ( STDMETHODCALLTYPE *put_TextRightAttachmentType )(
            IZcadMLeader * This,
             ZcTextAttachmentType type);

         HRESULT ( STDMETHODCALLTYPE *get_TextTopAttachmentType )(
            IZcadMLeader * This,
             ZcVerticalTextAttachmentType *type);

         HRESULT ( STDMETHODCALLTYPE *put_TextTopAttachmentType )(
            IZcadMLeader * This,
             ZcVerticalTextAttachmentType type);

         HRESULT ( STDMETHODCALLTYPE *get_TextBottomAttachmentType )(
            IZcadMLeader * This,
             ZcVerticalTextAttachmentType *type);

         HRESULT ( STDMETHODCALLTYPE *put_TextBottomAttachmentType )(
            IZcadMLeader * This,
             ZcVerticalTextAttachmentType type);

         HRESULT ( STDMETHODCALLTYPE *get_LandingGap )(
            IZcadMLeader * This,
             double *gap);

         HRESULT ( STDMETHODCALLTYPE *put_LandingGap )(
            IZcadMLeader * This,
             double gap);

         HRESULT ( STDMETHODCALLTYPE *get_ArrowheadBlock )(
            IZcadMLeader * This,
             BSTR *BlockName);

         HRESULT ( STDMETHODCALLTYPE *put_ArrowheadBlock )(
            IZcadMLeader * This,
             BSTR BlockName);

         HRESULT ( STDMETHODCALLTYPE *get_ContentBlockType )(
            IZcadMLeader * This,
             ZcPredefBlockType *type);

         HRESULT ( STDMETHODCALLTYPE *put_ContentBlockType )(
            IZcadMLeader * This,
             ZcPredefBlockType type);

         HRESULT ( STDMETHODCALLTYPE *get_LeaderCount )(
            IZcadMLeader * This,
             int *number);

         HRESULT ( STDMETHODCALLTYPE *AddLeader )(
            IZcadMLeader * This,
             int *leaderIndex);

         HRESULT ( STDMETHODCALLTYPE *RemoveLeader )(
            IZcadMLeader * This,
             int leaderIndex);

         HRESULT ( STDMETHODCALLTYPE *AddLeaderLine )(
            IZcadMLeader * This,
             int leaderIndex,
             VARIANT pointArray,
             int *leaderLineIndex);

         HRESULT ( STDMETHODCALLTYPE *AddLeaderLineEx )(
            IZcadMLeader * This,
             VARIANT pointArray,
             int *leaderLineIndex);

         HRESULT ( STDMETHODCALLTYPE *RemoveLeaderLine )(
            IZcadMLeader * This,
             int leaderLineIndex);

         HRESULT ( STDMETHODCALLTYPE *SetLeaderLineVertices )(
            IZcadMLeader * This,
             int leaderLineIndex,
             VARIANT pointArray);

         HRESULT ( STDMETHODCALLTYPE *GetLeaderLineVertices )(
            IZcadMLeader * This,
             int leaderLineIndex,
             VARIANT *pointArray);

         HRESULT ( STDMETHODCALLTYPE *put_ContentType )(
            IZcadMLeader * This,
             ZcMLeaderContentType type);

         HRESULT ( STDMETHODCALLTYPE *get_ContentType )(
            IZcadMLeader * This,
             ZcMLeaderContentType *type);

         HRESULT ( STDMETHODCALLTYPE *GetLeaderIndex )(
            IZcadMLeader * This,
             int leaderLineIndex,
             int *leaderIndex);

         HRESULT ( STDMETHODCALLTYPE *GetLeaderLineIndexes )(
            IZcadMLeader * This,
             int leaderIndex,
             VARIANT *leaderLineIndexes);

         HRESULT ( STDMETHODCALLTYPE *GetVertexCount )(
            IZcadMLeader * This,
             int leaderLineIndex,
             int *number);

         HRESULT ( STDMETHODCALLTYPE *get_TextFrameDisplay )(
            IZcadMLeader * This,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_TextFrameDisplay )(
            IZcadMLeader * This,
             VARIANT_BOOL newVal);

         HRESULT ( STDMETHODCALLTYPE *get_StyleName )(
            IZcadMLeader * This,
             BSTR *name);

         HRESULT ( STDMETHODCALLTYPE *put_StyleName )(
            IZcadMLeader * This,
             BSTR name);

         HRESULT ( STDMETHODCALLTYPE *GetDoglegDirection )(
            IZcadMLeader * This,
             int leaderIndex,
             VARIANT *dirVec);

         HRESULT ( STDMETHODCALLTYPE *SetDoglegDirection )(
            IZcadMLeader * This,
             int leaderIndex,
             VARIANT dirVec);

         HRESULT ( STDMETHODCALLTYPE *GetBlockAttributeValue )(
            IZcadMLeader * This,
             LONG_PTR attdefId,
             BSTR *value);

         HRESULT ( STDMETHODCALLTYPE *SetBlockAttributeValue )(
            IZcadMLeader * This,
             LONG_PTR attdefId,
             BSTR value);

        END_INTERFACE
    } IZcadMLeaderVtbl;

    interface IZcadMLeader
    {
        CONST_VTBL struct IZcadMLeaderVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadMLeader_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadMLeader_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadMLeader_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadMLeader_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadMLeader_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadMLeader_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadMLeader_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadMLeader_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadMLeader_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadMLeader_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadMLeader_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadMLeader_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadMLeader_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadMLeader_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadMLeader_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadMLeader_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadMLeader_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadMLeader_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadMLeader_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadMLeader_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadMLeader_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadMLeader_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadMLeader_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadMLeader_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadMLeader_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadMLeader_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadMLeader_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadMLeader_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadMLeader_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadMLeader_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadMLeader_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadMLeader_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadMLeader_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadMLeader_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadMLeader_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadMLeader_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadMLeader_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadMLeader_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadMLeader_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadMLeader_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadMLeader_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadMLeader_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadMLeader_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadMLeader_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadMLeader_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadMLeader_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadMLeader_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadMLeader_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadMLeader_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadMLeader_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadMLeader_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadMLeader_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadMLeader_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadMLeader_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadMLeader_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadMLeader_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadMLeader_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadMLeader_get_ScaleFactor(This,scale)	\
    ((This)->lpVtbl -> get_ScaleFactor(This,scale))

#define IZcadMLeader_put_ScaleFactor(This,scale)	\
    ((This)->lpVtbl -> put_ScaleFactor(This,scale))

#define IZcadMLeader_get_LeaderType(This,type)	\
    ((This)->lpVtbl -> get_LeaderType(This,type))

#define IZcadMLeader_put_LeaderType(This,type)	\
    ((This)->lpVtbl -> put_LeaderType(This,type))

#define IZcadMLeader_get_LeaderLineColor(This,Type)	\
    ((This)->lpVtbl -> get_LeaderLineColor(This,Type))

#define IZcadMLeader_put_LeaderLineColor(This,Type)	\
    ((This)->lpVtbl -> put_LeaderLineColor(This,Type))

#define IZcadMLeader_get_LeaderLinetype(This,Linetype)	\
    ((This)->lpVtbl -> get_LeaderLinetype(This,Linetype))

#define IZcadMLeader_put_LeaderLinetype(This,Linetype)	\
    ((This)->lpVtbl -> put_LeaderLinetype(This,Linetype))

#define IZcadMLeader_get_LeaderLineWeight(This,lineWeight)	\
    ((This)->lpVtbl -> get_LeaderLineWeight(This,lineWeight))

#define IZcadMLeader_put_LeaderLineWeight(This,lineWeight)	\
    ((This)->lpVtbl -> put_LeaderLineWeight(This,lineWeight))

#define IZcadMLeader_get_ArrowheadType(This,BlockName)	\
    ((This)->lpVtbl -> get_ArrowheadType(This,BlockName))

#define IZcadMLeader_put_ArrowheadType(This,BlockName)	\
    ((This)->lpVtbl -> put_ArrowheadType(This,BlockName))

#define IZcadMLeader_get_ArrowheadSize(This,size)	\
    ((This)->lpVtbl -> get_ArrowheadSize(This,size))

#define IZcadMLeader_put_ArrowheadSize(This,size)	\
    ((This)->lpVtbl -> put_ArrowheadSize(This,size))

#define IZcadMLeader_get_DogLegged(This,val)	\
    ((This)->lpVtbl -> get_DogLegged(This,val))

#define IZcadMLeader_put_DogLegged(This,newVal)	\
    ((This)->lpVtbl -> put_DogLegged(This,newVal))

#define IZcadMLeader_get_DoglegLength(This,doglegLength)	\
    ((This)->lpVtbl -> get_DoglegLength(This,doglegLength))

#define IZcadMLeader_put_DoglegLength(This,doglegLength)	\
    ((This)->lpVtbl -> put_DoglegLength(This,doglegLength))

#define IZcadMLeader_get_ContentBlockName(This,BlockName)	\
    ((This)->lpVtbl -> get_ContentBlockName(This,BlockName))

#define IZcadMLeader_put_ContentBlockName(This,BlockName)	\
    ((This)->lpVtbl -> put_ContentBlockName(This,BlockName))

#define IZcadMLeader_get_BlockConnectionType(This,type)	\
    ((This)->lpVtbl -> get_BlockConnectionType(This,type))

#define IZcadMLeader_put_BlockConnectionType(This,type)	\
    ((This)->lpVtbl -> put_BlockConnectionType(This,type))

#define IZcadMLeader_get_BlockScale(This,factor)	\
    ((This)->lpVtbl -> get_BlockScale(This,factor))

#define IZcadMLeader_put_BlockScale(This,factor)	\
    ((This)->lpVtbl -> put_BlockScale(This,factor))

#define IZcadMLeader_get_TextString(This,bstrText)	\
    ((This)->lpVtbl -> get_TextString(This,bstrText))

#define IZcadMLeader_put_TextString(This,bstrText)	\
    ((This)->lpVtbl -> put_TextString(This,bstrText))

#define IZcadMLeader_get_TextStyleName(This,bstrName)	\
    ((This)->lpVtbl -> get_TextStyleName(This,bstrName))

#define IZcadMLeader_put_TextStyleName(This,bstrName)	\
    ((This)->lpVtbl -> put_TextStyleName(This,bstrName))

#define IZcadMLeader_get_TextJustify(This,attPoint)	\
    ((This)->lpVtbl -> get_TextJustify(This,attPoint))

#define IZcadMLeader_put_TextJustify(This,attPoint)	\
    ((This)->lpVtbl -> put_TextJustify(This,attPoint))

#define IZcadMLeader_get_TextDirection(This,drawDir)	\
    ((This)->lpVtbl -> get_TextDirection(This,drawDir))

#define IZcadMLeader_put_TextDirection(This,drawDir)	\
    ((This)->lpVtbl -> put_TextDirection(This,drawDir))

#define IZcadMLeader_get_TextWidth(This,width)	\
    ((This)->lpVtbl -> get_TextWidth(This,width))

#define IZcadMLeader_put_TextWidth(This,width)	\
    ((This)->lpVtbl -> put_TextWidth(This,width))

#define IZcadMLeader_get_TextHeight(This,height)	\
    ((This)->lpVtbl -> get_TextHeight(This,height))

#define IZcadMLeader_put_TextHeight(This,height)	\
    ((This)->lpVtbl -> put_TextHeight(This,height))

#define IZcadMLeader_get_TextRotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_TextRotation(This,rotAngle))

#define IZcadMLeader_put_TextRotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_TextRotation(This,rotAngle))

#define IZcadMLeader_get_TextLineSpacingFactor(This,Factor)	\
    ((This)->lpVtbl -> get_TextLineSpacingFactor(This,Factor))

#define IZcadMLeader_put_TextLineSpacingFactor(This,Factor)	\
    ((This)->lpVtbl -> put_TextLineSpacingFactor(This,Factor))

#define IZcadMLeader_get_TextLineSpacingDistance(This,Value)	\
    ((This)->lpVtbl -> get_TextLineSpacingDistance(This,Value))

#define IZcadMLeader_put_TextLineSpacingDistance(This,Value)	\
    ((This)->lpVtbl -> put_TextLineSpacingDistance(This,Value))

#define IZcadMLeader_get_TextLineSpacingStyle(This,Style)	\
    ((This)->lpVtbl -> get_TextLineSpacingStyle(This,Style))

#define IZcadMLeader_put_TextLineSpacingStyle(This,Style)	\
    ((This)->lpVtbl -> put_TextLineSpacingStyle(This,Style))

#define IZcadMLeader_get_TextBackgroundFill(This,bUseBackgroundFill)	\
    ((This)->lpVtbl -> get_TextBackgroundFill(This,bUseBackgroundFill))

#define IZcadMLeader_put_TextBackgroundFill(This,bUseBackgroundFill)	\
    ((This)->lpVtbl -> put_TextBackgroundFill(This,bUseBackgroundFill))

#define IZcadMLeader_get_TextAttachmentDirection(This,dir)	\
    ((This)->lpVtbl -> get_TextAttachmentDirection(This,dir))

#define IZcadMLeader_put_TextAttachmentDirection(This,dir)	\
    ((This)->lpVtbl -> put_TextAttachmentDirection(This,dir))

#define IZcadMLeader_get_TextLeftAttachmentType(This,type)	\
    ((This)->lpVtbl -> get_TextLeftAttachmentType(This,type))

#define IZcadMLeader_put_TextLeftAttachmentType(This,type)	\
    ((This)->lpVtbl -> put_TextLeftAttachmentType(This,type))

#define IZcadMLeader_get_TextRightAttachmentType(This,type)	\
    ((This)->lpVtbl -> get_TextRightAttachmentType(This,type))

#define IZcadMLeader_put_TextRightAttachmentType(This,type)	\
    ((This)->lpVtbl -> put_TextRightAttachmentType(This,type))

#define IZcadMLeader_get_TextTopAttachmentType(This,type)	\
    ((This)->lpVtbl -> get_TextTopAttachmentType(This,type))

#define IZcadMLeader_put_TextTopAttachmentType(This,type)	\
    ((This)->lpVtbl -> put_TextTopAttachmentType(This,type))

#define IZcadMLeader_get_TextBottomAttachmentType(This,type)	\
    ((This)->lpVtbl -> get_TextBottomAttachmentType(This,type))

#define IZcadMLeader_put_TextBottomAttachmentType(This,type)	\
    ((This)->lpVtbl -> put_TextBottomAttachmentType(This,type))

#define IZcadMLeader_get_LandingGap(This,gap)	\
    ((This)->lpVtbl -> get_LandingGap(This,gap))

#define IZcadMLeader_put_LandingGap(This,gap)	\
    ((This)->lpVtbl -> put_LandingGap(This,gap))

#define IZcadMLeader_get_ArrowheadBlock(This,BlockName)	\
    ((This)->lpVtbl -> get_ArrowheadBlock(This,BlockName))

#define IZcadMLeader_put_ArrowheadBlock(This,BlockName)	\
    ((This)->lpVtbl -> put_ArrowheadBlock(This,BlockName))

#define IZcadMLeader_get_ContentBlockType(This,type)	\
    ((This)->lpVtbl -> get_ContentBlockType(This,type))

#define IZcadMLeader_put_ContentBlockType(This,type)	\
    ((This)->lpVtbl -> put_ContentBlockType(This,type))

#define IZcadMLeader_get_LeaderCount(This,number)	\
    ((This)->lpVtbl -> get_LeaderCount(This,number))

#define IZcadMLeader_AddLeader(This,leaderIndex)	\
    ((This)->lpVtbl -> AddLeader(This,leaderIndex))

#define IZcadMLeader_RemoveLeader(This,leaderIndex)	\
    ((This)->lpVtbl -> RemoveLeader(This,leaderIndex))

#define IZcadMLeader_AddLeaderLine(This,leaderIndex,pointArray,leaderLineIndex)	\
    ((This)->lpVtbl -> AddLeaderLine(This,leaderIndex,pointArray,leaderLineIndex))

#define IZcadMLeader_AddLeaderLineEx(This,pointArray,leaderLineIndex)	\
    ((This)->lpVtbl -> AddLeaderLineEx(This,pointArray,leaderLineIndex))

#define IZcadMLeader_RemoveLeaderLine(This,leaderLineIndex)	\
    ((This)->lpVtbl -> RemoveLeaderLine(This,leaderLineIndex))

#define IZcadMLeader_SetLeaderLineVertices(This,leaderLineIndex,pointArray)	\
    ((This)->lpVtbl -> SetLeaderLineVertices(This,leaderLineIndex,pointArray))

#define IZcadMLeader_GetLeaderLineVertices(This,leaderLineIndex,pointArray)	\
    ((This)->lpVtbl -> GetLeaderLineVertices(This,leaderLineIndex,pointArray))

#define IZcadMLeader_put_ContentType(This,type)	\
    ((This)->lpVtbl -> put_ContentType(This,type))

#define IZcadMLeader_get_ContentType(This,type)	\
    ((This)->lpVtbl -> get_ContentType(This,type))

#define IZcadMLeader_GetLeaderIndex(This,leaderLineIndex,leaderIndex)	\
    ((This)->lpVtbl -> GetLeaderIndex(This,leaderLineIndex,leaderIndex))

#define IZcadMLeader_GetLeaderLineIndexes(This,leaderIndex,leaderLineIndexes)	\
    ((This)->lpVtbl -> GetLeaderLineIndexes(This,leaderIndex,leaderLineIndexes))

#define IZcadMLeader_GetVertexCount(This,leaderLineIndex,number)	\
    ((This)->lpVtbl -> GetVertexCount(This,leaderLineIndex,number))

#define IZcadMLeader_get_TextFrameDisplay(This,pVal)	\
    ((This)->lpVtbl -> get_TextFrameDisplay(This,pVal))

#define IZcadMLeader_put_TextFrameDisplay(This,newVal)	\
    ((This)->lpVtbl -> put_TextFrameDisplay(This,newVal))

#define IZcadMLeader_get_StyleName(This,name)	\
    ((This)->lpVtbl -> get_StyleName(This,name))

#define IZcadMLeader_put_StyleName(This,name)	\
    ((This)->lpVtbl -> put_StyleName(This,name))

#define IZcadMLeader_GetDoglegDirection(This,leaderIndex,dirVec)	\
    ((This)->lpVtbl -> GetDoglegDirection(This,leaderIndex,dirVec))

#define IZcadMLeader_SetDoglegDirection(This,leaderIndex,dirVec)	\
    ((This)->lpVtbl -> SetDoglegDirection(This,leaderIndex,dirVec))

#define IZcadMLeader_GetBlockAttributeValue(This,attdefId,value)	\
    ((This)->lpVtbl -> GetBlockAttributeValue(This,attdefId,value))

#define IZcadMLeader_SetBlockAttributeValue(This,attdefId,value)	\
    ((This)->lpVtbl -> SetBlockAttributeValue(This,attdefId,value))

#endif
#endif


 HRESULT STDMETHODCALLTYPE IZcadMLeader_get_ContentType_Proxy(
    IZcadMLeader * This,
     ZcMLeaderContentType *type);

void __RPC_STUB IZcadMLeader_get_ContentType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadMLeader_GetLeaderIndex_Proxy(
    IZcadMLeader * This,
     int leaderLineIndex,
     int *leaderIndex);

void __RPC_STUB IZcadMLeader_GetLeaderIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadMLeader_GetLeaderLineIndexes_Proxy(
    IZcadMLeader * This,
     int leaderIndex,
     VARIANT *leaderLineIndexes);

void __RPC_STUB IZcadMLeader_GetLeaderLineIndexes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadMLeader_GetVertexCount_Proxy(
    IZcadMLeader * This,
     int leaderLineIndex,
     int *number);

void __RPC_STUB IZcadMLeader_GetVertexCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadMLeader_get_TextFrameDisplay_Proxy(
    IZcadMLeader * This,
     VARIANT_BOOL *pVal);

void __RPC_STUB IZcadMLeader_get_TextFrameDisplay_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadMLeader_put_TextFrameDisplay_Proxy(
    IZcadMLeader * This,
     VARIANT_BOOL newVal);

void __RPC_STUB IZcadMLeader_put_TextFrameDisplay_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadMLeader_get_StyleName_Proxy(
    IZcadMLeader * This,
     BSTR *name);

void __RPC_STUB IZcadMLeader_get_StyleName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadMLeader_put_StyleName_Proxy(
    IZcadMLeader * This,
     BSTR name);

void __RPC_STUB IZcadMLeader_put_StyleName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadMLeader_GetDoglegDirection_Proxy(
    IZcadMLeader * This,
     int leaderIndex,
     VARIANT *dirVec);

void __RPC_STUB IZcadMLeader_GetDoglegDirection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadMLeader_SetDoglegDirection_Proxy(
    IZcadMLeader * This,
     int leaderIndex,
     VARIANT dirVec);

void __RPC_STUB IZcadMLeader_SetDoglegDirection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadMLeader_GetBlockAttributeValue_Proxy(
    IZcadMLeader * This,
     LONG_PTR attdefId,
     BSTR *value);

void __RPC_STUB IZcadMLeader_GetBlockAttributeValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadMLeader_SetBlockAttributeValue_Proxy(
    IZcadMLeader * This,
     LONG_PTR attdefId,
     BSTR value);

void __RPC_STUB IZcadMLeader_SetBlockAttributeValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


#endif

DEFINE_GUID(CLSID_ZcadMLeader,0xEC923004,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923004-5A17-11E7-B72E-BC5FF42AC839")
ZcadMLeader;
#endif

#ifndef __IZcadLWPolyline_INTERFACE_DEFINED__
#define __IZcadLWPolyline_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadLWPolyline,0xEC92311E,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC92311E-5A17-11E7-B72E-BC5FF42AC839")
    IZcadLWPolyline : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Coordinates(
             VARIANT *coordinates) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Coordinates(
             VARIANT coordinates) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Normal(
             VARIANT *normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Normal(
             VARIANT normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Thickness(
             double *thickness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Thickness(
             double thickness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddVertex(
             int Index,
             VARIANT Vertex) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Explode(
             VARIANT *pArrayObjs) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetBulge(
             int index,
             double *bulge) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetBulge(
             int index,
             double bulge) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetWidth(
             int index,
             double *StartWidth,
             double *EndWidth) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetWidth(
             int index,
             double StartWidth,
             double EndWidth) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ConstantWidth(
             double *width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ConstantWidth(
             double width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Offset(
             double distance,
             VARIANT *pOffsetCurves) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Elevation(
             double *elevation) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Elevation(
             double elevation) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Area(
             double *area) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Coordinate(
             int Index,
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Coordinate(
             int Index,
             VARIANT newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Closed(
             VARIANT_BOOL *fClose) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Closed(
             VARIANT_BOOL fClose) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LinetypeGeneration(
             VARIANT_BOOL *bLinetypeGen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LinetypeGeneration(
             VARIANT_BOOL bLinetypeGen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Length(
             double *length) = 0;

    };

#else

    typedef struct IZcadLWPolylineVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadLWPolyline * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadLWPolyline * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadLWPolyline * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadLWPolyline * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadLWPolyline * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadLWPolyline * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadLWPolyline * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadLWPolyline * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadLWPolyline * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadLWPolyline * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadLWPolyline * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadLWPolyline * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadLWPolyline * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadLWPolyline * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadLWPolyline * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadLWPolyline * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadLWPolyline * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadLWPolyline * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadLWPolyline * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadLWPolyline * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadLWPolyline * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadLWPolyline * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadLWPolyline * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadLWPolyline * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadLWPolyline * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadLWPolyline * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadLWPolyline * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadLWPolyline * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadLWPolyline * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadLWPolyline * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadLWPolyline * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadLWPolyline * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadLWPolyline * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadLWPolyline * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadLWPolyline * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadLWPolyline * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadLWPolyline * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadLWPolyline * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadLWPolyline * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadLWPolyline * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadLWPolyline * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadLWPolyline * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadLWPolyline * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadLWPolyline * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadLWPolyline * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadLWPolyline * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadLWPolyline * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadLWPolyline * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadLWPolyline * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadLWPolyline * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadLWPolyline * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadLWPolyline * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadLWPolyline * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadLWPolyline * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadLWPolyline * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadLWPolyline * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadLWPolyline * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Coordinates )(
            IZcadLWPolyline * This,
             VARIANT *coordinates);

         HRESULT ( STDMETHODCALLTYPE *put_Coordinates )(
            IZcadLWPolyline * This,
             VARIANT coordinates);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadLWPolyline * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadLWPolyline * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_Thickness )(
            IZcadLWPolyline * This,
             double *thickness);

         HRESULT ( STDMETHODCALLTYPE *put_Thickness )(
            IZcadLWPolyline * This,
             double thickness);

         HRESULT ( STDMETHODCALLTYPE *AddVertex )(
            IZcadLWPolyline * This,
             int Index,
             VARIANT Vertex);

         HRESULT ( STDMETHODCALLTYPE *Explode )(
            IZcadLWPolyline * This,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *GetBulge )(
            IZcadLWPolyline * This,
             int index,
             double *bulge);

         HRESULT ( STDMETHODCALLTYPE *SetBulge )(
            IZcadLWPolyline * This,
             int index,
             double bulge);

         HRESULT ( STDMETHODCALLTYPE *GetWidth )(
            IZcadLWPolyline * This,
             int index,
             double *StartWidth,
             double *EndWidth);

         HRESULT ( STDMETHODCALLTYPE *SetWidth )(
            IZcadLWPolyline * This,
             int index,
             double StartWidth,
             double EndWidth);

         HRESULT ( STDMETHODCALLTYPE *get_ConstantWidth )(
            IZcadLWPolyline * This,
             double *width);

         HRESULT ( STDMETHODCALLTYPE *put_ConstantWidth )(
            IZcadLWPolyline * This,
             double width);

         HRESULT ( STDMETHODCALLTYPE *Offset )(
            IZcadLWPolyline * This,
             double distance,
             VARIANT *pOffsetCurves);

         HRESULT ( STDMETHODCALLTYPE *get_Elevation )(
            IZcadLWPolyline * This,
             double *elevation);

         HRESULT ( STDMETHODCALLTYPE *put_Elevation )(
            IZcadLWPolyline * This,
             double elevation);

         HRESULT ( STDMETHODCALLTYPE *get_Area )(
            IZcadLWPolyline * This,
             double *area);

         HRESULT ( STDMETHODCALLTYPE *get_Coordinate )(
            IZcadLWPolyline * This,
             int Index,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_Coordinate )(
            IZcadLWPolyline * This,
             int Index,
             VARIANT newVal);

         HRESULT ( STDMETHODCALLTYPE *get_Closed )(
            IZcadLWPolyline * This,
             VARIANT_BOOL *fClose);

         HRESULT ( STDMETHODCALLTYPE *put_Closed )(
            IZcadLWPolyline * This,
             VARIANT_BOOL fClose);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeGeneration )(
            IZcadLWPolyline * This,
             VARIANT_BOOL *bLinetypeGen);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeGeneration )(
            IZcadLWPolyline * This,
             VARIANT_BOOL bLinetypeGen);

         HRESULT ( STDMETHODCALLTYPE *get_Length )(
            IZcadLWPolyline * This,
             double *length);

        END_INTERFACE
    } IZcadLWPolylineVtbl;

    interface IZcadLWPolyline
    {
        CONST_VTBL struct IZcadLWPolylineVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadLWPolyline_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadLWPolyline_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadLWPolyline_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadLWPolyline_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadLWPolyline_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadLWPolyline_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadLWPolyline_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadLWPolyline_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadLWPolyline_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadLWPolyline_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadLWPolyline_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadLWPolyline_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadLWPolyline_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadLWPolyline_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadLWPolyline_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadLWPolyline_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadLWPolyline_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadLWPolyline_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadLWPolyline_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadLWPolyline_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadLWPolyline_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadLWPolyline_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadLWPolyline_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadLWPolyline_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadLWPolyline_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadLWPolyline_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadLWPolyline_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadLWPolyline_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadLWPolyline_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadLWPolyline_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadLWPolyline_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadLWPolyline_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadLWPolyline_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadLWPolyline_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadLWPolyline_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadLWPolyline_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadLWPolyline_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadLWPolyline_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadLWPolyline_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadLWPolyline_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadLWPolyline_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadLWPolyline_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadLWPolyline_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadLWPolyline_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadLWPolyline_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadLWPolyline_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadLWPolyline_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadLWPolyline_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadLWPolyline_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadLWPolyline_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadLWPolyline_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadLWPolyline_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadLWPolyline_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadLWPolyline_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadLWPolyline_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadLWPolyline_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadLWPolyline_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadLWPolyline_get_Coordinates(This,coordinates)	\
    ((This)->lpVtbl -> get_Coordinates(This,coordinates))

#define IZcadLWPolyline_put_Coordinates(This,coordinates)	\
    ((This)->lpVtbl -> put_Coordinates(This,coordinates))

#define IZcadLWPolyline_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadLWPolyline_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadLWPolyline_get_Thickness(This,thickness)	\
    ((This)->lpVtbl -> get_Thickness(This,thickness))

#define IZcadLWPolyline_put_Thickness(This,thickness)	\
    ((This)->lpVtbl -> put_Thickness(This,thickness))

#define IZcadLWPolyline_AddVertex(This,Index,Vertex)	\
    ((This)->lpVtbl -> AddVertex(This,Index,Vertex))

#define IZcadLWPolyline_Explode(This,pArrayObjs)	\
    ((This)->lpVtbl -> Explode(This,pArrayObjs))

#define IZcadLWPolyline_GetBulge(This,index,bulge)	\
    ((This)->lpVtbl -> GetBulge(This,index,bulge))

#define IZcadLWPolyline_SetBulge(This,index,bulge)	\
    ((This)->lpVtbl -> SetBulge(This,index,bulge))

#define IZcadLWPolyline_GetWidth(This,index,StartWidth,EndWidth)	\
    ((This)->lpVtbl -> GetWidth(This,index,StartWidth,EndWidth))

#define IZcadLWPolyline_SetWidth(This,index,StartWidth,EndWidth)	\
    ((This)->lpVtbl -> SetWidth(This,index,StartWidth,EndWidth))

#define IZcadLWPolyline_get_ConstantWidth(This,width)	\
    ((This)->lpVtbl -> get_ConstantWidth(This,width))

#define IZcadLWPolyline_put_ConstantWidth(This,width)	\
    ((This)->lpVtbl -> put_ConstantWidth(This,width))

#define IZcadLWPolyline_Offset(This,distance,pOffsetCurves)	\
    ((This)->lpVtbl -> Offset(This,distance,pOffsetCurves))

#define IZcadLWPolyline_get_Elevation(This,elevation)	\
    ((This)->lpVtbl -> get_Elevation(This,elevation))

#define IZcadLWPolyline_put_Elevation(This,elevation)	\
    ((This)->lpVtbl -> put_Elevation(This,elevation))

#define IZcadLWPolyline_get_Area(This,area)	\
    ((This)->lpVtbl -> get_Area(This,area))

#define IZcadLWPolyline_get_Coordinate(This,Index,pVal)	\
    ((This)->lpVtbl -> get_Coordinate(This,Index,pVal))

#define IZcadLWPolyline_put_Coordinate(This,Index,newVal)	\
    ((This)->lpVtbl -> put_Coordinate(This,Index,newVal))

#define IZcadLWPolyline_get_Closed(This,fClose)	\
    ((This)->lpVtbl -> get_Closed(This,fClose))

#define IZcadLWPolyline_put_Closed(This,fClose)	\
    ((This)->lpVtbl -> put_Closed(This,fClose))

#define IZcadLWPolyline_get_LinetypeGeneration(This,bLinetypeGen)	\
    ((This)->lpVtbl -> get_LinetypeGeneration(This,bLinetypeGen))

#define IZcadLWPolyline_put_LinetypeGeneration(This,bLinetypeGen)	\
    ((This)->lpVtbl -> put_LinetypeGeneration(This,bLinetypeGen))

#define IZcadLWPolyline_get_Length(This,length)	\
    ((This)->lpVtbl -> get_Length(This,length))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadLWPolyline,0xEC92307B,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC92307B-5A17-11E7-B72E-BC5FF42AC839")
ZcadLWPolyline;
#endif

#ifndef __IZcadLine_INTERFACE_DEFINED__
#define __IZcadLine_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadLine,0xEC9230FB,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9230FB-5A17-11E7-B72E-BC5FF42AC839")
    IZcadLine : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_StartPoint(
             VARIANT *startPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StartPoint(
             VARIANT startPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EndPoint(
             VARIANT *endPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_EndPoint(
             VARIANT endPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Normal(
             VARIANT *normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Normal(
             VARIANT normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Thickness(
             double *thickness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Thickness(
             double thickness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Offset(
             double distance,
             VARIANT *pOffsetCurves) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Delta(
             VARIANT *delta) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Length(
             double *length) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Angle(
             ZCAD_ANGLE *angle) = 0;

    };

#else

    typedef struct IZcadLineVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadLine * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadLine * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadLine * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadLine * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadLine * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadLine * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadLine * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadLine * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadLine * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadLine * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadLine * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadLine * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadLine * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadLine * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadLine * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadLine * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadLine * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadLine * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadLine * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadLine * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadLine * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadLine * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadLine * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadLine * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadLine * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadLine * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadLine * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadLine * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadLine * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadLine * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadLine * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadLine * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadLine * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadLine * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadLine * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadLine * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadLine * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadLine * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadLine * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadLine * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadLine * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadLine * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadLine * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadLine * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadLine * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadLine * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadLine * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadLine * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadLine * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadLine * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadLine * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadLine * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadLine * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadLine * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadLine * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadLine * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadLine * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_StartPoint )(
            IZcadLine * This,
             VARIANT *startPoint);

         HRESULT ( STDMETHODCALLTYPE *put_StartPoint )(
            IZcadLine * This,
             VARIANT startPoint);

         HRESULT ( STDMETHODCALLTYPE *get_EndPoint )(
            IZcadLine * This,
             VARIANT *endPoint);

         HRESULT ( STDMETHODCALLTYPE *put_EndPoint )(
            IZcadLine * This,
             VARIANT endPoint);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadLine * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadLine * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_Thickness )(
            IZcadLine * This,
             double *thickness);

         HRESULT ( STDMETHODCALLTYPE *put_Thickness )(
            IZcadLine * This,
             double thickness);

         HRESULT ( STDMETHODCALLTYPE *Offset )(
            IZcadLine * This,
             double distance,
             VARIANT *pOffsetCurves);

         HRESULT ( STDMETHODCALLTYPE *get_Delta )(
            IZcadLine * This,
             VARIANT *delta);

         HRESULT ( STDMETHODCALLTYPE *get_Length )(
            IZcadLine * This,
             double *length);

         HRESULT ( STDMETHODCALLTYPE *get_Angle )(
            IZcadLine * This,
             ZCAD_ANGLE *angle);

        END_INTERFACE
    } IZcadLineVtbl;

    interface IZcadLine
    {
        CONST_VTBL struct IZcadLineVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadLine_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadLine_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadLine_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadLine_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadLine_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadLine_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadLine_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadLine_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadLine_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadLine_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadLine_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadLine_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadLine_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadLine_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadLine_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadLine_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadLine_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadLine_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadLine_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadLine_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadLine_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadLine_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadLine_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadLine_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadLine_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadLine_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadLine_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadLine_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadLine_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadLine_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadLine_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadLine_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadLine_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadLine_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadLine_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadLine_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadLine_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadLine_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadLine_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadLine_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadLine_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadLine_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadLine_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadLine_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadLine_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadLine_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadLine_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadLine_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadLine_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadLine_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadLine_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadLine_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadLine_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadLine_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadLine_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadLine_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadLine_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadLine_get_StartPoint(This,startPoint)	\
    ((This)->lpVtbl -> get_StartPoint(This,startPoint))

#define IZcadLine_put_StartPoint(This,startPoint)	\
    ((This)->lpVtbl -> put_StartPoint(This,startPoint))

#define IZcadLine_get_EndPoint(This,endPoint)	\
    ((This)->lpVtbl -> get_EndPoint(This,endPoint))

#define IZcadLine_put_EndPoint(This,endPoint)	\
    ((This)->lpVtbl -> put_EndPoint(This,endPoint))

#define IZcadLine_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadLine_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadLine_get_Thickness(This,thickness)	\
    ((This)->lpVtbl -> get_Thickness(This,thickness))

#define IZcadLine_put_Thickness(This,thickness)	\
    ((This)->lpVtbl -> put_Thickness(This,thickness))

#define IZcadLine_Offset(This,distance,pOffsetCurves)	\
    ((This)->lpVtbl -> Offset(This,distance,pOffsetCurves))

#define IZcadLine_get_Delta(This,delta)	\
    ((This)->lpVtbl -> get_Delta(This,delta))

#define IZcadLine_get_Length(This,length)	\
    ((This)->lpVtbl -> get_Length(This,length))

#define IZcadLine_get_Angle(This,angle)	\
    ((This)->lpVtbl -> get_Angle(This,angle))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadLine,0xEC923177,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923177-5A17-11E7-B72E-BC5FF42AC839")
ZcadLine;
#endif

#ifndef __IZcadMText_INTERFACE_DEFINED__
#define __IZcadMText_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadMText,0xEC922FE1,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC922FE1-5A17-11E7-B72E-BC5FF42AC839")
    IZcadMText : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_TextString(
             BSTR *bstrText) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextString(
             BSTR bstrText) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_StyleName(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StyleName(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AttachmentPoint(
             ZcAttachmentPoint *attPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AttachmentPoint(
             ZcAttachmentPoint attPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DrawingDirection(
             ZcDrawingDirection *drawDir) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DrawingDirection(
             ZcDrawingDirection drawDir) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Width(
             double *width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Width(
             double width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Height(
             double *height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Height(
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Rotation(
             ZCAD_ANGLE *rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Rotation(
             ZCAD_ANGLE rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_InsertionPoint(
             VARIANT *insPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_InsertionPoint(
             VARIANT insPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Normal(
             VARIANT *normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Normal(
             VARIANT normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LineSpacingFactor(
             double *Factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LineSpacingFactor(
             double Factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LineSpacingStyle(
             ZcLineSpacingStyle *Style) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LineSpacingStyle(
             ZcLineSpacingStyle Style) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LineSpacingDistance(
             double *Value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LineSpacingDistance(
             double Value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BackgroundFill(
             VARIANT_BOOL *bUseBackgroundFill) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BackgroundFill(
             VARIANT_BOOL bUseBackgroundFill) = 0;

        virtual  HRESULT STDMETHODCALLTYPE FieldCode(
             BSTR *bstrText) = 0;

    };

#else

    typedef struct IZcadMTextVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadMText * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadMText * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadMText * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadMText * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadMText * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadMText * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadMText * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadMText * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadMText * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadMText * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadMText * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadMText * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadMText * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadMText * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadMText * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadMText * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadMText * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadMText * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadMText * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadMText * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadMText * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadMText * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadMText * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadMText * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadMText * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadMText * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadMText * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadMText * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadMText * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadMText * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadMText * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadMText * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadMText * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadMText * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadMText * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadMText * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadMText * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadMText * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadMText * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadMText * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadMText * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadMText * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadMText * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadMText * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadMText * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadMText * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadMText * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadMText * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadMText * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadMText * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadMText * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadMText * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadMText * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadMText * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadMText * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadMText * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadMText * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_TextString )(
            IZcadMText * This,
             BSTR *bstrText);

         HRESULT ( STDMETHODCALLTYPE *put_TextString )(
            IZcadMText * This,
             BSTR bstrText);

         HRESULT ( STDMETHODCALLTYPE *get_StyleName )(
            IZcadMText * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_StyleName )(
            IZcadMText * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_AttachmentPoint )(
            IZcadMText * This,
             ZcAttachmentPoint *attPoint);

         HRESULT ( STDMETHODCALLTYPE *put_AttachmentPoint )(
            IZcadMText * This,
             ZcAttachmentPoint attPoint);

         HRESULT ( STDMETHODCALLTYPE *get_DrawingDirection )(
            IZcadMText * This,
             ZcDrawingDirection *drawDir);

         HRESULT ( STDMETHODCALLTYPE *put_DrawingDirection )(
            IZcadMText * This,
             ZcDrawingDirection drawDir);

         HRESULT ( STDMETHODCALLTYPE *get_Width )(
            IZcadMText * This,
             double *width);

         HRESULT ( STDMETHODCALLTYPE *put_Width )(
            IZcadMText * This,
             double width);

         HRESULT ( STDMETHODCALLTYPE *get_Height )(
            IZcadMText * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_Height )(
            IZcadMText * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_Rotation )(
            IZcadMText * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_Rotation )(
            IZcadMText * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )(
            IZcadMText * This,
             VARIANT *insPoint);

         HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )(
            IZcadMText * This,
             VARIANT insPoint);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadMText * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadMText * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_LineSpacingFactor )(
            IZcadMText * This,
             double *Factor);

         HRESULT ( STDMETHODCALLTYPE *put_LineSpacingFactor )(
            IZcadMText * This,
             double Factor);

         HRESULT ( STDMETHODCALLTYPE *get_LineSpacingStyle )(
            IZcadMText * This,
             ZcLineSpacingStyle *Style);

         HRESULT ( STDMETHODCALLTYPE *put_LineSpacingStyle )(
            IZcadMText * This,
             ZcLineSpacingStyle Style);

         HRESULT ( STDMETHODCALLTYPE *get_LineSpacingDistance )(
            IZcadMText * This,
             double *Value);

         HRESULT ( STDMETHODCALLTYPE *put_LineSpacingDistance )(
            IZcadMText * This,
             double Value);

         HRESULT ( STDMETHODCALLTYPE *get_BackgroundFill )(
            IZcadMText * This,
             VARIANT_BOOL *bUseBackgroundFill);

         HRESULT ( STDMETHODCALLTYPE *put_BackgroundFill )(
            IZcadMText * This,
             VARIANT_BOOL bUseBackgroundFill);

         HRESULT ( STDMETHODCALLTYPE *FieldCode )(
            IZcadMText * This,
             BSTR *bstrText);

        END_INTERFACE
    } IZcadMTextVtbl;

    interface IZcadMText
    {
        CONST_VTBL struct IZcadMTextVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadMText_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadMText_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadMText_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadMText_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadMText_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadMText_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadMText_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadMText_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadMText_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadMText_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadMText_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadMText_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadMText_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadMText_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadMText_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadMText_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadMText_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadMText_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadMText_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadMText_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadMText_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadMText_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadMText_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadMText_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadMText_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadMText_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadMText_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadMText_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadMText_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadMText_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadMText_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadMText_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadMText_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadMText_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadMText_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadMText_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadMText_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadMText_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadMText_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadMText_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadMText_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadMText_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadMText_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadMText_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadMText_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadMText_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadMText_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadMText_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadMText_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadMText_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadMText_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadMText_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadMText_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadMText_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadMText_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadMText_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadMText_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadMText_get_TextString(This,bstrText)	\
    ((This)->lpVtbl -> get_TextString(This,bstrText))

#define IZcadMText_put_TextString(This,bstrText)	\
    ((This)->lpVtbl -> put_TextString(This,bstrText))

#define IZcadMText_get_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> get_StyleName(This,bstrName))

#define IZcadMText_put_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> put_StyleName(This,bstrName))

#define IZcadMText_get_AttachmentPoint(This,attPoint)	\
    ((This)->lpVtbl -> get_AttachmentPoint(This,attPoint))

#define IZcadMText_put_AttachmentPoint(This,attPoint)	\
    ((This)->lpVtbl -> put_AttachmentPoint(This,attPoint))

#define IZcadMText_get_DrawingDirection(This,drawDir)	\
    ((This)->lpVtbl -> get_DrawingDirection(This,drawDir))

#define IZcadMText_put_DrawingDirection(This,drawDir)	\
    ((This)->lpVtbl -> put_DrawingDirection(This,drawDir))

#define IZcadMText_get_Width(This,width)	\
    ((This)->lpVtbl -> get_Width(This,width))

#define IZcadMText_put_Width(This,width)	\
    ((This)->lpVtbl -> put_Width(This,width))

#define IZcadMText_get_Height(This,height)	\
    ((This)->lpVtbl -> get_Height(This,height))

#define IZcadMText_put_Height(This,height)	\
    ((This)->lpVtbl -> put_Height(This,height))

#define IZcadMText_get_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_Rotation(This,rotAngle))

#define IZcadMText_put_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_Rotation(This,rotAngle))

#define IZcadMText_get_InsertionPoint(This,insPoint)	\
    ((This)->lpVtbl -> get_InsertionPoint(This,insPoint))

#define IZcadMText_put_InsertionPoint(This,insPoint)	\
    ((This)->lpVtbl -> put_InsertionPoint(This,insPoint))

#define IZcadMText_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadMText_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadMText_get_LineSpacingFactor(This,Factor)	\
    ((This)->lpVtbl -> get_LineSpacingFactor(This,Factor))

#define IZcadMText_put_LineSpacingFactor(This,Factor)	\
    ((This)->lpVtbl -> put_LineSpacingFactor(This,Factor))

#define IZcadMText_get_LineSpacingStyle(This,Style)	\
    ((This)->lpVtbl -> get_LineSpacingStyle(This,Style))

#define IZcadMText_put_LineSpacingStyle(This,Style)	\
    ((This)->lpVtbl -> put_LineSpacingStyle(This,Style))

#define IZcadMText_get_LineSpacingDistance(This,Value)	\
    ((This)->lpVtbl -> get_LineSpacingDistance(This,Value))

#define IZcadMText_put_LineSpacingDistance(This,Value)	\
    ((This)->lpVtbl -> put_LineSpacingDistance(This,Value))

#define IZcadMText_get_BackgroundFill(This,bUseBackgroundFill)	\
    ((This)->lpVtbl -> get_BackgroundFill(This,bUseBackgroundFill))

#define IZcadMText_put_BackgroundFill(This,bUseBackgroundFill)	\
    ((This)->lpVtbl -> put_BackgroundFill(This,bUseBackgroundFill))

#define IZcadMText_FieldCode(This,bstrText)	\
    ((This)->lpVtbl -> FieldCode(This,bstrText))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadMText,0xEC92302D,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC92302D-5A17-11E7-B72E-BC5FF42AC839")
ZcadMText;
#endif

#ifndef __IZcadPoint_INTERFACE_DEFINED__
#define __IZcadPoint_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadPoint,0xEC92315D,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC92315D-5A17-11E7-B72E-BC5FF42AC839")
    IZcadPoint : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Coordinates(
             VARIANT *coordinates) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Coordinates(
             VARIANT coordinates) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Normal(
             VARIANT *normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Normal(
             VARIANT normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Thickness(
             double *thickness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Thickness(
             double thickness) = 0;

    };

#else

    typedef struct IZcadPointVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadPoint * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadPoint * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadPoint * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadPoint * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadPoint * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadPoint * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadPoint * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadPoint * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadPoint * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadPoint * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadPoint * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadPoint * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadPoint * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadPoint * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadPoint * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadPoint * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadPoint * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadPoint * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadPoint * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadPoint * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadPoint * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadPoint * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadPoint * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadPoint * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadPoint * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadPoint * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadPoint * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadPoint * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadPoint * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadPoint * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadPoint * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadPoint * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadPoint * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadPoint * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadPoint * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadPoint * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadPoint * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadPoint * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadPoint * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadPoint * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadPoint * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadPoint * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadPoint * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadPoint * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadPoint * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadPoint * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadPoint * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadPoint * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadPoint * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadPoint * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadPoint * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadPoint * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadPoint * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadPoint * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadPoint * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadPoint * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadPoint * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Coordinates )(
            IZcadPoint * This,
             VARIANT *coordinates);

         HRESULT ( STDMETHODCALLTYPE *put_Coordinates )(
            IZcadPoint * This,
             VARIANT coordinates);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadPoint * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadPoint * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_Thickness )(
            IZcadPoint * This,
             double *thickness);

         HRESULT ( STDMETHODCALLTYPE *put_Thickness )(
            IZcadPoint * This,
             double thickness);

        END_INTERFACE
    } IZcadPointVtbl;

    interface IZcadPoint
    {
        CONST_VTBL struct IZcadPointVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadPoint_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadPoint_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadPoint_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadPoint_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadPoint_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadPoint_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadPoint_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadPoint_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadPoint_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadPoint_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadPoint_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadPoint_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadPoint_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadPoint_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadPoint_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadPoint_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadPoint_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadPoint_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadPoint_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadPoint_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadPoint_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadPoint_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadPoint_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadPoint_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadPoint_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadPoint_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadPoint_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadPoint_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadPoint_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadPoint_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadPoint_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadPoint_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadPoint_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadPoint_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadPoint_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadPoint_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadPoint_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadPoint_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadPoint_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadPoint_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadPoint_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadPoint_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadPoint_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadPoint_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadPoint_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadPoint_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadPoint_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadPoint_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadPoint_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadPoint_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadPoint_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadPoint_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadPoint_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadPoint_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadPoint_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadPoint_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadPoint_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadPoint_get_Coordinates(This,coordinates)	\
    ((This)->lpVtbl -> get_Coordinates(This,coordinates))

#define IZcadPoint_put_Coordinates(This,coordinates)	\
    ((This)->lpVtbl -> put_Coordinates(This,coordinates))

#define IZcadPoint_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadPoint_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadPoint_get_Thickness(This,thickness)	\
    ((This)->lpVtbl -> get_Thickness(This,thickness))

#define IZcadPoint_put_Thickness(This,thickness)	\
    ((This)->lpVtbl -> put_Thickness(This,thickness))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadPoint,0xEC92314D,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC92314D-5A17-11E7-B72E-BC5FF42AC839")
ZcadPoint;
#endif

#ifndef __IZcadPolyline_INTERFACE_DEFINED__
#define __IZcadPolyline_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadPolyline,0xEC9230F2,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9230F2-5A17-11E7-B72E-BC5FF42AC839")
    IZcadPolyline : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Coordinates(
             VARIANT *coordinates) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Coordinates(
             VARIANT coordinates) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Normal(
             VARIANT *normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Normal(
             VARIANT normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Thickness(
             double *thickness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Thickness(
             double thickness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AppendVertex(
             VARIANT vertex) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Explode(
             VARIANT *pArrayObjs) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetBulge(
             int index,
             double *bulge) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetBulge(
             int index,
             double bulge) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetWidth(
             int Index,
             double *StartWidth,
            double *EndWidth) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetWidth(
             int Index,
             double StartWidth,
            double EndWidth) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ConstantWidth(
             double *width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ConstantWidth(
             double width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Offset(
             double Distance,
             VARIANT *pOffsetCurves) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Elevation(
             double *elevation) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Elevation(
             double elevation) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Type(
             ZcPolylineType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Type(
             ZcPolylineType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Closed(
             VARIANT_BOOL *fClose) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Closed(
             VARIANT_BOOL fClose) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LinetypeGeneration(
             VARIANT_BOOL *bLinetypeGen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LinetypeGeneration(
             VARIANT_BOOL bLinetypeGen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Area(
             double *area) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Coordinate(
             int Index,
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Coordinate(
             int Index,
             VARIANT newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Length(
             double *length) = 0;

    };

#else

    typedef struct IZcadPolylineVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadPolyline * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadPolyline * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadPolyline * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadPolyline * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadPolyline * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadPolyline * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadPolyline * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadPolyline * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadPolyline * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadPolyline * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadPolyline * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadPolyline * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadPolyline * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadPolyline * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadPolyline * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadPolyline * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadPolyline * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadPolyline * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadPolyline * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadPolyline * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadPolyline * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadPolyline * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadPolyline * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadPolyline * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadPolyline * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadPolyline * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadPolyline * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadPolyline * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadPolyline * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadPolyline * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadPolyline * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadPolyline * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadPolyline * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadPolyline * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadPolyline * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadPolyline * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadPolyline * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadPolyline * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadPolyline * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadPolyline * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadPolyline * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadPolyline * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadPolyline * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadPolyline * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadPolyline * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadPolyline * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadPolyline * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadPolyline * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadPolyline * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadPolyline * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadPolyline * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadPolyline * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadPolyline * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadPolyline * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadPolyline * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadPolyline * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadPolyline * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Coordinates )(
            IZcadPolyline * This,
             VARIANT *coordinates);

         HRESULT ( STDMETHODCALLTYPE *put_Coordinates )(
            IZcadPolyline * This,
             VARIANT coordinates);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadPolyline * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadPolyline * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_Thickness )(
            IZcadPolyline * This,
             double *thickness);

         HRESULT ( STDMETHODCALLTYPE *put_Thickness )(
            IZcadPolyline * This,
             double thickness);

         HRESULT ( STDMETHODCALLTYPE *AppendVertex )(
            IZcadPolyline * This,
             VARIANT vertex);

         HRESULT ( STDMETHODCALLTYPE *Explode )(
            IZcadPolyline * This,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *GetBulge )(
            IZcadPolyline * This,
             int index,
             double *bulge);

         HRESULT ( STDMETHODCALLTYPE *SetBulge )(
            IZcadPolyline * This,
             int index,
             double bulge);

         HRESULT ( STDMETHODCALLTYPE *GetWidth )(
            IZcadPolyline * This,
             int Index,
             double *StartWidth,
            double *EndWidth);

         HRESULT ( STDMETHODCALLTYPE *SetWidth )(
            IZcadPolyline * This,
             int Index,
             double StartWidth,
            double EndWidth);

         HRESULT ( STDMETHODCALLTYPE *get_ConstantWidth )(
            IZcadPolyline * This,
             double *width);

         HRESULT ( STDMETHODCALLTYPE *put_ConstantWidth )(
            IZcadPolyline * This,
             double width);

         HRESULT ( STDMETHODCALLTYPE *Offset )(
            IZcadPolyline * This,
             double Distance,
             VARIANT *pOffsetCurves);

         HRESULT ( STDMETHODCALLTYPE *get_Elevation )(
            IZcadPolyline * This,
             double *elevation);

         HRESULT ( STDMETHODCALLTYPE *put_Elevation )(
            IZcadPolyline * This,
             double elevation);

         HRESULT ( STDMETHODCALLTYPE *get_Type )(
            IZcadPolyline * This,
             ZcPolylineType *type);

         HRESULT ( STDMETHODCALLTYPE *put_Type )(
            IZcadPolyline * This,
             ZcPolylineType type);

         HRESULT ( STDMETHODCALLTYPE *get_Closed )(
            IZcadPolyline * This,
             VARIANT_BOOL *fClose);

         HRESULT ( STDMETHODCALLTYPE *put_Closed )(
            IZcadPolyline * This,
             VARIANT_BOOL fClose);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeGeneration )(
            IZcadPolyline * This,
             VARIANT_BOOL *bLinetypeGen);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeGeneration )(
            IZcadPolyline * This,
             VARIANT_BOOL bLinetypeGen);

         HRESULT ( STDMETHODCALLTYPE *get_Area )(
            IZcadPolyline * This,
             double *area);

         HRESULT ( STDMETHODCALLTYPE *get_Coordinate )(
            IZcadPolyline * This,
             int Index,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_Coordinate )(
            IZcadPolyline * This,
             int Index,
             VARIANT newVal);

         HRESULT ( STDMETHODCALLTYPE *get_Length )(
            IZcadPolyline * This,
             double *length);

        END_INTERFACE
    } IZcadPolylineVtbl;

    interface IZcadPolyline
    {
        CONST_VTBL struct IZcadPolylineVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadPolyline_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadPolyline_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadPolyline_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadPolyline_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadPolyline_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadPolyline_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadPolyline_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadPolyline_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadPolyline_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadPolyline_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadPolyline_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadPolyline_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadPolyline_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadPolyline_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadPolyline_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadPolyline_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadPolyline_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadPolyline_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadPolyline_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadPolyline_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadPolyline_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadPolyline_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadPolyline_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadPolyline_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadPolyline_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadPolyline_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadPolyline_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadPolyline_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadPolyline_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadPolyline_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadPolyline_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadPolyline_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadPolyline_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadPolyline_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadPolyline_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadPolyline_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadPolyline_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadPolyline_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadPolyline_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadPolyline_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadPolyline_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadPolyline_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadPolyline_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadPolyline_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadPolyline_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadPolyline_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadPolyline_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadPolyline_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadPolyline_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadPolyline_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadPolyline_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadPolyline_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadPolyline_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadPolyline_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadPolyline_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadPolyline_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadPolyline_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadPolyline_get_Coordinates(This,coordinates)	\
    ((This)->lpVtbl -> get_Coordinates(This,coordinates))

#define IZcadPolyline_put_Coordinates(This,coordinates)	\
    ((This)->lpVtbl -> put_Coordinates(This,coordinates))

#define IZcadPolyline_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadPolyline_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadPolyline_get_Thickness(This,thickness)	\
    ((This)->lpVtbl -> get_Thickness(This,thickness))

#define IZcadPolyline_put_Thickness(This,thickness)	\
    ((This)->lpVtbl -> put_Thickness(This,thickness))

#define IZcadPolyline_AppendVertex(This,vertex)	\
    ((This)->lpVtbl -> AppendVertex(This,vertex))

#define IZcadPolyline_Explode(This,pArrayObjs)	\
    ((This)->lpVtbl -> Explode(This,pArrayObjs))

#define IZcadPolyline_GetBulge(This,index,bulge)	\
    ((This)->lpVtbl -> GetBulge(This,index,bulge))

#define IZcadPolyline_SetBulge(This,index,bulge)	\
    ((This)->lpVtbl -> SetBulge(This,index,bulge))

#define IZcadPolyline_GetWidth(This,Index,StartWidth,EndWidth)	\
    ((This)->lpVtbl -> GetWidth(This,Index,StartWidth,EndWidth))

#define IZcadPolyline_SetWidth(This,Index,StartWidth,EndWidth)	\
    ((This)->lpVtbl -> SetWidth(This,Index,StartWidth,EndWidth))

#define IZcadPolyline_get_ConstantWidth(This,width)	\
    ((This)->lpVtbl -> get_ConstantWidth(This,width))

#define IZcadPolyline_put_ConstantWidth(This,width)	\
    ((This)->lpVtbl -> put_ConstantWidth(This,width))

#define IZcadPolyline_Offset(This,Distance,pOffsetCurves)	\
    ((This)->lpVtbl -> Offset(This,Distance,pOffsetCurves))

#define IZcadPolyline_get_Elevation(This,elevation)	\
    ((This)->lpVtbl -> get_Elevation(This,elevation))

#define IZcadPolyline_put_Elevation(This,elevation)	\
    ((This)->lpVtbl -> put_Elevation(This,elevation))

#define IZcadPolyline_get_Type(This,type)	\
    ((This)->lpVtbl -> get_Type(This,type))

#define IZcadPolyline_put_Type(This,type)	\
    ((This)->lpVtbl -> put_Type(This,type))

#define IZcadPolyline_get_Closed(This,fClose)	\
    ((This)->lpVtbl -> get_Closed(This,fClose))

#define IZcadPolyline_put_Closed(This,fClose)	\
    ((This)->lpVtbl -> put_Closed(This,fClose))

#define IZcadPolyline_get_LinetypeGeneration(This,bLinetypeGen)	\
    ((This)->lpVtbl -> get_LinetypeGeneration(This,bLinetypeGen))

#define IZcadPolyline_put_LinetypeGeneration(This,bLinetypeGen)	\
    ((This)->lpVtbl -> put_LinetypeGeneration(This,bLinetypeGen))

#define IZcadPolyline_get_Area(This,area)	\
    ((This)->lpVtbl -> get_Area(This,area))

#define IZcadPolyline_get_Coordinate(This,Index,pVal)	\
    ((This)->lpVtbl -> get_Coordinate(This,Index,pVal))

#define IZcadPolyline_put_Coordinate(This,Index,newVal)	\
    ((This)->lpVtbl -> put_Coordinate(This,Index,newVal))

#define IZcadPolyline_get_Length(This,length)	\
    ((This)->lpVtbl -> get_Length(This,length))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadPolyline,0xEC92305E,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC92305E-5A17-11E7-B72E-BC5FF42AC839")
ZcadPolyline;
#endif

#ifndef __IZcadPolygonMesh_INTERFACE_DEFINED__
#define __IZcadPolygonMesh_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadPolygonMesh,0xEC923073,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923073-5A17-11E7-B72E-BC5FF42AC839")
    IZcadPolygonMesh : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Coordinates(
             VARIANT *coordinates) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Coordinates(
             VARIANT coordinates) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MClose(
             VARIANT_BOOL *bClose) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_MClose(
             VARIANT_BOOL bClose) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_NClose(
             VARIANT_BOOL *bClose) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_NClose(
             VARIANT_BOOL bClose) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MDensity(
             long *density) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_MDensity(
             long density) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_NDensity(
             long *density) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_NDensity(
             long density) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MVertexCount(
             long *Count) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_NVertexCount(
             long *Count) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Type(
             ZcPolymeshType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Type(
             ZcPolymeshType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AppendVertex(
             VARIANT vertex) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Explode(
             VARIANT *pArrayObjs) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Coordinate(
             int Index,
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Coordinate(
             int Index,
             VARIANT newVal) = 0;

    };

#else

    typedef struct IZcadPolygonMeshVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadPolygonMesh * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadPolygonMesh * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadPolygonMesh * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadPolygonMesh * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadPolygonMesh * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadPolygonMesh * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadPolygonMesh * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadPolygonMesh * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadPolygonMesh * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadPolygonMesh * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadPolygonMesh * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadPolygonMesh * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadPolygonMesh * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadPolygonMesh * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadPolygonMesh * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadPolygonMesh * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadPolygonMesh * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadPolygonMesh * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadPolygonMesh * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadPolygonMesh * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadPolygonMesh * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadPolygonMesh * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadPolygonMesh * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadPolygonMesh * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadPolygonMesh * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadPolygonMesh * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadPolygonMesh * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadPolygonMesh * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadPolygonMesh * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadPolygonMesh * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadPolygonMesh * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadPolygonMesh * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadPolygonMesh * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadPolygonMesh * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadPolygonMesh * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadPolygonMesh * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadPolygonMesh * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadPolygonMesh * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadPolygonMesh * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadPolygonMesh * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadPolygonMesh * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadPolygonMesh * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadPolygonMesh * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadPolygonMesh * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadPolygonMesh * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadPolygonMesh * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadPolygonMesh * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadPolygonMesh * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadPolygonMesh * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadPolygonMesh * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadPolygonMesh * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadPolygonMesh * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadPolygonMesh * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadPolygonMesh * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadPolygonMesh * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadPolygonMesh * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadPolygonMesh * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Coordinates )(
            IZcadPolygonMesh * This,
             VARIANT *coordinates);

         HRESULT ( STDMETHODCALLTYPE *put_Coordinates )(
            IZcadPolygonMesh * This,
             VARIANT coordinates);

         HRESULT ( STDMETHODCALLTYPE *get_MClose )(
            IZcadPolygonMesh * This,
             VARIANT_BOOL *bClose);

         HRESULT ( STDMETHODCALLTYPE *put_MClose )(
            IZcadPolygonMesh * This,
             VARIANT_BOOL bClose);

         HRESULT ( STDMETHODCALLTYPE *get_NClose )(
            IZcadPolygonMesh * This,
             VARIANT_BOOL *bClose);

         HRESULT ( STDMETHODCALLTYPE *put_NClose )(
            IZcadPolygonMesh * This,
             VARIANT_BOOL bClose);

         HRESULT ( STDMETHODCALLTYPE *get_MDensity )(
            IZcadPolygonMesh * This,
             long *density);

         HRESULT ( STDMETHODCALLTYPE *put_MDensity )(
            IZcadPolygonMesh * This,
             long density);

         HRESULT ( STDMETHODCALLTYPE *get_NDensity )(
            IZcadPolygonMesh * This,
             long *density);

         HRESULT ( STDMETHODCALLTYPE *put_NDensity )(
            IZcadPolygonMesh * This,
             long density);

         HRESULT ( STDMETHODCALLTYPE *get_MVertexCount )(
            IZcadPolygonMesh * This,
             long *Count);

         HRESULT ( STDMETHODCALLTYPE *get_NVertexCount )(
            IZcadPolygonMesh * This,
             long *Count);

         HRESULT ( STDMETHODCALLTYPE *get_Type )(
            IZcadPolygonMesh * This,
             ZcPolymeshType *type);

         HRESULT ( STDMETHODCALLTYPE *put_Type )(
            IZcadPolygonMesh * This,
             ZcPolymeshType type);

         HRESULT ( STDMETHODCALLTYPE *AppendVertex )(
            IZcadPolygonMesh * This,
             VARIANT vertex);

         HRESULT ( STDMETHODCALLTYPE *Explode )(
            IZcadPolygonMesh * This,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *get_Coordinate )(
            IZcadPolygonMesh * This,
             int Index,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_Coordinate )(
            IZcadPolygonMesh * This,
             int Index,
             VARIANT newVal);

        END_INTERFACE
    } IZcadPolygonMeshVtbl;

    interface IZcadPolygonMesh
    {
        CONST_VTBL struct IZcadPolygonMeshVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadPolygonMesh_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadPolygonMesh_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadPolygonMesh_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadPolygonMesh_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadPolygonMesh_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadPolygonMesh_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadPolygonMesh_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadPolygonMesh_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadPolygonMesh_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadPolygonMesh_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadPolygonMesh_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadPolygonMesh_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadPolygonMesh_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadPolygonMesh_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadPolygonMesh_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadPolygonMesh_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadPolygonMesh_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadPolygonMesh_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadPolygonMesh_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadPolygonMesh_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadPolygonMesh_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadPolygonMesh_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadPolygonMesh_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadPolygonMesh_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadPolygonMesh_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadPolygonMesh_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadPolygonMesh_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadPolygonMesh_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadPolygonMesh_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadPolygonMesh_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadPolygonMesh_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadPolygonMesh_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadPolygonMesh_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadPolygonMesh_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadPolygonMesh_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadPolygonMesh_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadPolygonMesh_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadPolygonMesh_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadPolygonMesh_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadPolygonMesh_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadPolygonMesh_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadPolygonMesh_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadPolygonMesh_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadPolygonMesh_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadPolygonMesh_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadPolygonMesh_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadPolygonMesh_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadPolygonMesh_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadPolygonMesh_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadPolygonMesh_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadPolygonMesh_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadPolygonMesh_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadPolygonMesh_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadPolygonMesh_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadPolygonMesh_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadPolygonMesh_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadPolygonMesh_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadPolygonMesh_get_Coordinates(This,coordinates)	\
    ((This)->lpVtbl -> get_Coordinates(This,coordinates))

#define IZcadPolygonMesh_put_Coordinates(This,coordinates)	\
    ((This)->lpVtbl -> put_Coordinates(This,coordinates))

#define IZcadPolygonMesh_get_MClose(This,bClose)	\
    ((This)->lpVtbl -> get_MClose(This,bClose))

#define IZcadPolygonMesh_put_MClose(This,bClose)	\
    ((This)->lpVtbl -> put_MClose(This,bClose))

#define IZcadPolygonMesh_get_NClose(This,bClose)	\
    ((This)->lpVtbl -> get_NClose(This,bClose))

#define IZcadPolygonMesh_put_NClose(This,bClose)	\
    ((This)->lpVtbl -> put_NClose(This,bClose))

#define IZcadPolygonMesh_get_MDensity(This,density)	\
    ((This)->lpVtbl -> get_MDensity(This,density))

#define IZcadPolygonMesh_put_MDensity(This,density)	\
    ((This)->lpVtbl -> put_MDensity(This,density))

#define IZcadPolygonMesh_get_NDensity(This,density)	\
    ((This)->lpVtbl -> get_NDensity(This,density))

#define IZcadPolygonMesh_put_NDensity(This,density)	\
    ((This)->lpVtbl -> put_NDensity(This,density))

#define IZcadPolygonMesh_get_MVertexCount(This,Count)	\
    ((This)->lpVtbl -> get_MVertexCount(This,Count))

#define IZcadPolygonMesh_get_NVertexCount(This,Count)	\
    ((This)->lpVtbl -> get_NVertexCount(This,Count))

#define IZcadPolygonMesh_get_Type(This,type)	\
    ((This)->lpVtbl -> get_Type(This,type))

#define IZcadPolygonMesh_put_Type(This,type)	\
    ((This)->lpVtbl -> put_Type(This,type))

#define IZcadPolygonMesh_AppendVertex(This,vertex)	\
    ((This)->lpVtbl -> AppendVertex(This,vertex))

#define IZcadPolygonMesh_Explode(This,pArrayObjs)	\
    ((This)->lpVtbl -> Explode(This,pArrayObjs))

#define IZcadPolygonMesh_get_Coordinate(This,Index,pVal)	\
    ((This)->lpVtbl -> get_Coordinate(This,Index,pVal))

#define IZcadPolygonMesh_put_Coordinate(This,Index,newVal)	\
    ((This)->lpVtbl -> put_Coordinate(This,Index,newVal))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadPolygonMesh,0xEC923017,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923017-5A17-11E7-B72E-BC5FF42AC839")
ZcadPolygonMesh;
#endif

#ifndef __IZcadRay_INTERFACE_DEFINED__
#define __IZcadRay_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadRay,0xEC92300F,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC92300F-5A17-11E7-B72E-BC5FF42AC839")
    IZcadRay : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_BasePoint(
             VARIANT *basePoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BasePoint(
             VARIANT basePoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SecondPoint(
             VARIANT *secondPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SecondPoint(
             VARIANT secondPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DirectionVector(
             VARIANT *dirVector) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DirectionVector(
             VARIANT dirVector) = 0;

    };

#else

    typedef struct IZcadRayVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadRay * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadRay * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadRay * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadRay * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadRay * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadRay * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadRay * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadRay * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadRay * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadRay * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadRay * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadRay * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadRay * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadRay * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadRay * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadRay * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadRay * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadRay * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadRay * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadRay * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadRay * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadRay * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadRay * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadRay * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadRay * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadRay * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadRay * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadRay * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadRay * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadRay * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadRay * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadRay * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadRay * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadRay * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadRay * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadRay * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadRay * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadRay * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadRay * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadRay * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadRay * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadRay * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadRay * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadRay * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadRay * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadRay * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadRay * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadRay * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadRay * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadRay * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadRay * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadRay * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadRay * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadRay * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadRay * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadRay * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadRay * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_BasePoint )(
            IZcadRay * This,
             VARIANT *basePoint);

         HRESULT ( STDMETHODCALLTYPE *put_BasePoint )(
            IZcadRay * This,
             VARIANT basePoint);

         HRESULT ( STDMETHODCALLTYPE *get_SecondPoint )(
            IZcadRay * This,
             VARIANT *secondPoint);

         HRESULT ( STDMETHODCALLTYPE *put_SecondPoint )(
            IZcadRay * This,
             VARIANT secondPoint);

         HRESULT ( STDMETHODCALLTYPE *get_DirectionVector )(
            IZcadRay * This,
             VARIANT *dirVector);

         HRESULT ( STDMETHODCALLTYPE *put_DirectionVector )(
            IZcadRay * This,
             VARIANT dirVector);

        END_INTERFACE
    } IZcadRayVtbl;

    interface IZcadRay
    {
        CONST_VTBL struct IZcadRayVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadRay_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadRay_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadRay_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadRay_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadRay_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadRay_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadRay_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadRay_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadRay_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadRay_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadRay_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadRay_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadRay_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadRay_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadRay_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadRay_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadRay_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadRay_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadRay_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadRay_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadRay_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadRay_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadRay_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadRay_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadRay_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadRay_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadRay_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadRay_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadRay_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadRay_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadRay_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadRay_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadRay_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadRay_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadRay_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadRay_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadRay_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadRay_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadRay_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadRay_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadRay_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadRay_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadRay_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadRay_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadRay_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadRay_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadRay_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadRay_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadRay_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadRay_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadRay_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadRay_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadRay_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadRay_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadRay_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadRay_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadRay_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadRay_get_BasePoint(This,basePoint)	\
    ((This)->lpVtbl -> get_BasePoint(This,basePoint))

#define IZcadRay_put_BasePoint(This,basePoint)	\
    ((This)->lpVtbl -> put_BasePoint(This,basePoint))

#define IZcadRay_get_SecondPoint(This,secondPoint)	\
    ((This)->lpVtbl -> get_SecondPoint(This,secondPoint))

#define IZcadRay_put_SecondPoint(This,secondPoint)	\
    ((This)->lpVtbl -> put_SecondPoint(This,secondPoint))

#define IZcadRay_get_DirectionVector(This,dirVector)	\
    ((This)->lpVtbl -> get_DirectionVector(This,dirVector))

#define IZcadRay_put_DirectionVector(This,dirVector)	\
    ((This)->lpVtbl -> put_DirectionVector(This,dirVector))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadRay,0xEC9231F2,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9231F2-5A17-11E7-B72E-BC5FF42AC839")
ZcadRay;
#endif

#ifndef __IZcadShape_INTERFACE_DEFINED__
#define __IZcadShape_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadShape,0xEC92301C,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC92301C-5A17-11E7-B72E-BC5FF42AC839")
    IZcadShape : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_InsertionPoint(
             VARIANT *insPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_InsertionPoint(
             VARIANT insPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Name(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Name(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Height(
             double *height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Height(
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Rotation(
             ZCAD_ANGLE *rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Rotation(
             ZCAD_ANGLE rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ScaleFactor(
             ZCAD_NOUNITS *scalFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ScaleFactor(
             ZCAD_NOUNITS scalFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ObliqueAngle(
             ZCAD_ANGLE *obliAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ObliqueAngle(
             ZCAD_ANGLE obliAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Normal(
             VARIANT *normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Normal(
             VARIANT normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Thickness(
             double *thickness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Thickness(
             double thickness) = 0;

    };

#else

    typedef struct IZcadShapeVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadShape * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadShape * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadShape * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadShape * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadShape * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadShape * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadShape * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadShape * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadShape * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadShape * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadShape * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadShape * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadShape * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadShape * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadShape * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadShape * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadShape * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadShape * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadShape * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadShape * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadShape * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadShape * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadShape * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadShape * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadShape * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadShape * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadShape * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadShape * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadShape * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadShape * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadShape * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadShape * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadShape * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadShape * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadShape * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadShape * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadShape * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadShape * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadShape * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadShape * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadShape * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadShape * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadShape * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadShape * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadShape * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadShape * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadShape * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadShape * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadShape * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadShape * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadShape * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadShape * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadShape * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadShape * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadShape * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadShape * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadShape * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )(
            IZcadShape * This,
             VARIANT *insPoint);

         HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )(
            IZcadShape * This,
             VARIANT insPoint);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadShape * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadShape * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_Height )(
            IZcadShape * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_Height )(
            IZcadShape * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_Rotation )(
            IZcadShape * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_Rotation )(
            IZcadShape * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )(
            IZcadShape * This,
             ZCAD_NOUNITS *scalFactor);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )(
            IZcadShape * This,
             ZCAD_NOUNITS scalFactor);

         HRESULT ( STDMETHODCALLTYPE *get_ObliqueAngle )(
            IZcadShape * This,
             ZCAD_ANGLE *obliAngle);

         HRESULT ( STDMETHODCALLTYPE *put_ObliqueAngle )(
            IZcadShape * This,
             ZCAD_ANGLE obliAngle);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadShape * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadShape * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_Thickness )(
            IZcadShape * This,
             double *thickness);

         HRESULT ( STDMETHODCALLTYPE *put_Thickness )(
            IZcadShape * This,
             double thickness);

        END_INTERFACE
    } IZcadShapeVtbl;

    interface IZcadShape
    {
        CONST_VTBL struct IZcadShapeVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadShape_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadShape_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadShape_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadShape_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadShape_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadShape_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadShape_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadShape_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadShape_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadShape_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadShape_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadShape_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadShape_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadShape_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadShape_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadShape_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadShape_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadShape_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadShape_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadShape_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadShape_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadShape_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadShape_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadShape_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadShape_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadShape_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadShape_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadShape_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadShape_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadShape_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadShape_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadShape_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadShape_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadShape_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadShape_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadShape_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadShape_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadShape_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadShape_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadShape_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadShape_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadShape_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadShape_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadShape_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadShape_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadShape_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadShape_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadShape_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadShape_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadShape_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadShape_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadShape_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadShape_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadShape_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadShape_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadShape_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadShape_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadShape_get_InsertionPoint(This,insPoint)	\
    ((This)->lpVtbl -> get_InsertionPoint(This,insPoint))

#define IZcadShape_put_InsertionPoint(This,insPoint)	\
    ((This)->lpVtbl -> put_InsertionPoint(This,insPoint))

#define IZcadShape_get_Name(This,bstrName)	\
    ((This)->lpVtbl -> get_Name(This,bstrName))

#define IZcadShape_put_Name(This,bstrName)	\
    ((This)->lpVtbl -> put_Name(This,bstrName))

#define IZcadShape_get_Height(This,height)	\
    ((This)->lpVtbl -> get_Height(This,height))

#define IZcadShape_put_Height(This,height)	\
    ((This)->lpVtbl -> put_Height(This,height))

#define IZcadShape_get_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_Rotation(This,rotAngle))

#define IZcadShape_put_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_Rotation(This,rotAngle))

#define IZcadShape_get_ScaleFactor(This,scalFactor)	\
    ((This)->lpVtbl -> get_ScaleFactor(This,scalFactor))

#define IZcadShape_put_ScaleFactor(This,scalFactor)	\
    ((This)->lpVtbl -> put_ScaleFactor(This,scalFactor))

#define IZcadShape_get_ObliqueAngle(This,obliAngle)	\
    ((This)->lpVtbl -> get_ObliqueAngle(This,obliAngle))

#define IZcadShape_put_ObliqueAngle(This,obliAngle)	\
    ((This)->lpVtbl -> put_ObliqueAngle(This,obliAngle))

#define IZcadShape_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadShape_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadShape_get_Thickness(This,thickness)	\
    ((This)->lpVtbl -> get_Thickness(This,thickness))

#define IZcadShape_put_Thickness(This,thickness)	\
    ((This)->lpVtbl -> put_Thickness(This,thickness))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadShape,0xAC5CECFA,0xF03A,0x41D2,0xA8,0x9C,0x70,0x4C,0x44,0x93,0x59,0x41);

#ifdef __cplusplus

class DECLSPEC_UUID("EC92304F-5A17-11E7-B72E-BC5FF42AC839")
ZcadShape;
#endif

#ifndef __IZcadSolid_INTERFACE_DEFINED__
#define __IZcadSolid_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadSolid,0xEC9230E8,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9230E8-5A17-11E7-B72E-BC5FF42AC839")
    IZcadSolid : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Coordinates(
             VARIANT *corners) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Coordinates(
             VARIANT corners) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Normal(
             VARIANT *normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Normal(
             VARIANT normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Thickness(
             double *thickness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Thickness(
             double thickness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Coordinate(
             int Index,
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Coordinate(
             int Index,
             VARIANT newVal) = 0;

    };

#else

    typedef struct IZcadSolidVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadSolid * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadSolid * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadSolid * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadSolid * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadSolid * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadSolid * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadSolid * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadSolid * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadSolid * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadSolid * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadSolid * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadSolid * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadSolid * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadSolid * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadSolid * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadSolid * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadSolid * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadSolid * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadSolid * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadSolid * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadSolid * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadSolid * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadSolid * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadSolid * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadSolid * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadSolid * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadSolid * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadSolid * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadSolid * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadSolid * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadSolid * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadSolid * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadSolid * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadSolid * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadSolid * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadSolid * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadSolid * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadSolid * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadSolid * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadSolid * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadSolid * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadSolid * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadSolid * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadSolid * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadSolid * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadSolid * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadSolid * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadSolid * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadSolid * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadSolid * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadSolid * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadSolid * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadSolid * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadSolid * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadSolid * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadSolid * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadSolid * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Coordinates )(
            IZcadSolid * This,
             VARIANT *corners);

         HRESULT ( STDMETHODCALLTYPE *put_Coordinates )(
            IZcadSolid * This,
             VARIANT corners);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadSolid * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadSolid * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_Thickness )(
            IZcadSolid * This,
             double *thickness);

         HRESULT ( STDMETHODCALLTYPE *put_Thickness )(
            IZcadSolid * This,
             double thickness);

         HRESULT ( STDMETHODCALLTYPE *get_Coordinate )(
            IZcadSolid * This,
             int Index,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_Coordinate )(
            IZcadSolid * This,
             int Index,
             VARIANT newVal);

        END_INTERFACE
    } IZcadSolidVtbl;

    interface IZcadSolid
    {
        CONST_VTBL struct IZcadSolidVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadSolid_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadSolid_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadSolid_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadSolid_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadSolid_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadSolid_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadSolid_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadSolid_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadSolid_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadSolid_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadSolid_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadSolid_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadSolid_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadSolid_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadSolid_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadSolid_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadSolid_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadSolid_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadSolid_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadSolid_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadSolid_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadSolid_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadSolid_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadSolid_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadSolid_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadSolid_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadSolid_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadSolid_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadSolid_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadSolid_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadSolid_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadSolid_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadSolid_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadSolid_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadSolid_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadSolid_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadSolid_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadSolid_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadSolid_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadSolid_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadSolid_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadSolid_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadSolid_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadSolid_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadSolid_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadSolid_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadSolid_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadSolid_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadSolid_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadSolid_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadSolid_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadSolid_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadSolid_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadSolid_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadSolid_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadSolid_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadSolid_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadSolid_get_Coordinates(This,corners)	\
    ((This)->lpVtbl -> get_Coordinates(This,corners))

#define IZcadSolid_put_Coordinates(This,corners)	\
    ((This)->lpVtbl -> put_Coordinates(This,corners))

#define IZcadSolid_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadSolid_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadSolid_get_Thickness(This,thickness)	\
    ((This)->lpVtbl -> get_Thickness(This,thickness))

#define IZcadSolid_put_Thickness(This,thickness)	\
    ((This)->lpVtbl -> put_Thickness(This,thickness))

#define IZcadSolid_get_Coordinate(This,Index,pVal)	\
    ((This)->lpVtbl -> get_Coordinate(This,Index,pVal))

#define IZcadSolid_put_Coordinate(This,Index,newVal)	\
    ((This)->lpVtbl -> put_Coordinate(This,Index,newVal))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadSolid,0xEC92312B,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC92312B-5A17-11E7-B72E-BC5FF42AC839")
ZcadSolid;
#endif

#ifndef __IZcadSpline_INTERFACE_DEFINED__
#define __IZcadSpline_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadSpline,0xEC92319E,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC92319E-5A17-11E7-B72E-BC5FF42AC839")
    IZcadSpline : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_NumberOfControlPoints(
             long *numCtrlPoints) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ControlPoints(
             VARIANT *controlPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ControlPoints(
             VARIANT controlPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_NumberOfFitPoints(
             long *numFitPoints) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_FitPoints(
             VARIANT *fitPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_FitPoints(
             VARIANT fitPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Degree(
             long *degree) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Closed(
             VARIANT_BOOL *fClose) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IsPlanar(
             VARIANT_BOOL *fPlanar) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IsRational(
             VARIANT_BOOL *fRational) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IsPeriodic(
             VARIANT_BOOL *fPeriodic) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_StartTangent(
             VARIANT *startTangent) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StartTangent(
             VARIANT startTangent) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EndTangent(
             VARIANT *endTangent) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_EndTangent(
             VARIANT endTangent) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_FitTolerance(
             double *fitTol) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_FitTolerance(
             double fitTol) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Area(
             double *area) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetControlPoint(
             int Index,
             VARIANT ControlPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetControlPoint(
             int Index,
             VARIANT *ControlPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetFitPoint(
             int Index,
             VARIANT FitPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetFitPoint(
             int Index,
             VARIANT *FitPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetWeight(
             int Index,
             double Weight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetWeight(
             int Index,
             double *Weight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddFitPoint(
             int Index,
             VARIANT FitPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE DeleteFitPoint(
             int Index) = 0;

        virtual  HRESULT STDMETHODCALLTYPE ElevateOrder(
             int Order) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Offset(
             double Distance,
             VARIANT *pOffsetCurves) = 0;

        virtual  HRESULT STDMETHODCALLTYPE PurgeFitData( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Reverse( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Knots(
             VARIANT *KnotValues) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Knots(
             VARIANT KnotValues) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Weights(
             VARIANT *WeightValues) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Weights(
             VARIANT WeightValues) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_KnotParameterization(
             ZcSplineKnotParameterizationType *knotParamVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_KnotParameterization(
             ZcSplineKnotParameterizationType knotParamVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SplineFrame(
             ZcSplineFrameType *show) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SplineFrame(
             ZcSplineFrameType showFrame) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SplineMethod(
             ZcSplineMethodType *method) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SplineMethod(
             ZcSplineMethodType method) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Degree2(
             long degree) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Degree2(
             long *degree) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Closed2(
             VARIANT_BOOL fClose) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Closed2(
             VARIANT_BOOL *fClose) = 0;

    };

#else

    typedef struct IZcadSplineVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadSpline * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadSpline * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadSpline * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadSpline * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadSpline * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadSpline * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadSpline * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadSpline * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadSpline * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadSpline * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadSpline * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadSpline * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadSpline * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadSpline * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadSpline * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadSpline * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadSpline * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadSpline * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadSpline * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadSpline * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadSpline * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadSpline * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadSpline * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadSpline * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadSpline * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadSpline * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadSpline * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadSpline * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadSpline * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadSpline * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadSpline * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadSpline * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadSpline * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadSpline * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadSpline * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadSpline * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadSpline * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadSpline * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadSpline * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadSpline * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadSpline * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadSpline * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadSpline * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadSpline * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadSpline * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadSpline * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadSpline * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadSpline * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadSpline * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadSpline * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadSpline * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadSpline * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadSpline * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadSpline * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadSpline * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadSpline * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadSpline * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_NumberOfControlPoints )(
            IZcadSpline * This,
             long *numCtrlPoints);

         HRESULT ( STDMETHODCALLTYPE *get_ControlPoints )(
            IZcadSpline * This,
             VARIANT *controlPoint);

         HRESULT ( STDMETHODCALLTYPE *put_ControlPoints )(
            IZcadSpline * This,
             VARIANT controlPoint);

         HRESULT ( STDMETHODCALLTYPE *get_NumberOfFitPoints )(
            IZcadSpline * This,
             long *numFitPoints);

         HRESULT ( STDMETHODCALLTYPE *get_FitPoints )(
            IZcadSpline * This,
             VARIANT *fitPoint);

         HRESULT ( STDMETHODCALLTYPE *put_FitPoints )(
            IZcadSpline * This,
             VARIANT fitPoint);

         HRESULT ( STDMETHODCALLTYPE *get_Degree )(
            IZcadSpline * This,
             long *degree);

         HRESULT ( STDMETHODCALLTYPE *get_Closed )(
            IZcadSpline * This,
             VARIANT_BOOL *fClose);

         HRESULT ( STDMETHODCALLTYPE *get_IsPlanar )(
            IZcadSpline * This,
             VARIANT_BOOL *fPlanar);

         HRESULT ( STDMETHODCALLTYPE *get_IsRational )(
            IZcadSpline * This,
             VARIANT_BOOL *fRational);

         HRESULT ( STDMETHODCALLTYPE *get_IsPeriodic )(
            IZcadSpline * This,
             VARIANT_BOOL *fPeriodic);

         HRESULT ( STDMETHODCALLTYPE *get_StartTangent )(
            IZcadSpline * This,
             VARIANT *startTangent);

         HRESULT ( STDMETHODCALLTYPE *put_StartTangent )(
            IZcadSpline * This,
             VARIANT startTangent);

         HRESULT ( STDMETHODCALLTYPE *get_EndTangent )(
            IZcadSpline * This,
             VARIANT *endTangent);

         HRESULT ( STDMETHODCALLTYPE *put_EndTangent )(
            IZcadSpline * This,
             VARIANT endTangent);

         HRESULT ( STDMETHODCALLTYPE *get_FitTolerance )(
            IZcadSpline * This,
             double *fitTol);

         HRESULT ( STDMETHODCALLTYPE *put_FitTolerance )(
            IZcadSpline * This,
             double fitTol);

         HRESULT ( STDMETHODCALLTYPE *get_Area )(
            IZcadSpline * This,
             double *area);

         HRESULT ( STDMETHODCALLTYPE *SetControlPoint )(
            IZcadSpline * This,
             int Index,
             VARIANT ControlPoint);

         HRESULT ( STDMETHODCALLTYPE *GetControlPoint )(
            IZcadSpline * This,
             int Index,
             VARIANT *ControlPoint);

         HRESULT ( STDMETHODCALLTYPE *SetFitPoint )(
            IZcadSpline * This,
             int Index,
             VARIANT FitPoint);

         HRESULT ( STDMETHODCALLTYPE *GetFitPoint )(
            IZcadSpline * This,
             int Index,
             VARIANT *FitPoint);

         HRESULT ( STDMETHODCALLTYPE *SetWeight )(
            IZcadSpline * This,
             int Index,
             double Weight);

         HRESULT ( STDMETHODCALLTYPE *GetWeight )(
            IZcadSpline * This,
             int Index,
             double *Weight);

         HRESULT ( STDMETHODCALLTYPE *AddFitPoint )(
            IZcadSpline * This,
             int Index,
             VARIANT FitPoint);

         HRESULT ( STDMETHODCALLTYPE *DeleteFitPoint )(
            IZcadSpline * This,
             int Index);

         HRESULT ( STDMETHODCALLTYPE *ElevateOrder )(
            IZcadSpline * This,
             int Order);

         HRESULT ( STDMETHODCALLTYPE *Offset )(
            IZcadSpline * This,
             double Distance,
             VARIANT *pOffsetCurves);

         HRESULT ( STDMETHODCALLTYPE *PurgeFitData )(
            IZcadSpline * This);

         HRESULT ( STDMETHODCALLTYPE *Reverse )(
            IZcadSpline * This);

         HRESULT ( STDMETHODCALLTYPE *get_Knots )(
            IZcadSpline * This,
             VARIANT *KnotValues);

         HRESULT ( STDMETHODCALLTYPE *put_Knots )(
            IZcadSpline * This,
             VARIANT KnotValues);

         HRESULT ( STDMETHODCALLTYPE *get_Weights )(
            IZcadSpline * This,
             VARIANT *WeightValues);

         HRESULT ( STDMETHODCALLTYPE *put_Weights )(
            IZcadSpline * This,
             VARIANT WeightValues);

         HRESULT ( STDMETHODCALLTYPE *get_KnotParameterization )(
            IZcadSpline * This,
             ZcSplineKnotParameterizationType *knotParamVal);

         HRESULT ( STDMETHODCALLTYPE *put_KnotParameterization )(
            IZcadSpline * This,
             ZcSplineKnotParameterizationType knotParamVal);

         HRESULT ( STDMETHODCALLTYPE *get_SplineFrame )(
            IZcadSpline * This,
             ZcSplineFrameType *show);

         HRESULT ( STDMETHODCALLTYPE *put_SplineFrame )(
            IZcadSpline * This,
             ZcSplineFrameType showFrame);

         HRESULT ( STDMETHODCALLTYPE *get_SplineMethod )(
            IZcadSpline * This,
             ZcSplineMethodType *method);

         HRESULT ( STDMETHODCALLTYPE *put_SplineMethod )(
            IZcadSpline * This,
             ZcSplineMethodType method);

         HRESULT ( STDMETHODCALLTYPE *put_Degree2 )(
            IZcadSpline * This,
             long degree);

         HRESULT ( STDMETHODCALLTYPE *get_Degree2 )(
            IZcadSpline * This,
             long *degree);

         HRESULT ( STDMETHODCALLTYPE *put_Closed2 )(
            IZcadSpline * This,
             VARIANT_BOOL fClose);

         HRESULT ( STDMETHODCALLTYPE *get_Closed2 )(
            IZcadSpline * This,
             VARIANT_BOOL *fClose);

        END_INTERFACE
    } IZcadSplineVtbl;

    interface IZcadSpline
    {
        CONST_VTBL struct IZcadSplineVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadSpline_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadSpline_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadSpline_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadSpline_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadSpline_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadSpline_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadSpline_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadSpline_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadSpline_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadSpline_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadSpline_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadSpline_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadSpline_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadSpline_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadSpline_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadSpline_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadSpline_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadSpline_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadSpline_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadSpline_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadSpline_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadSpline_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadSpline_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadSpline_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadSpline_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadSpline_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadSpline_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadSpline_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadSpline_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadSpline_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadSpline_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadSpline_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadSpline_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadSpline_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadSpline_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadSpline_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadSpline_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadSpline_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadSpline_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadSpline_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadSpline_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadSpline_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadSpline_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadSpline_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadSpline_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadSpline_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadSpline_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadSpline_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadSpline_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadSpline_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadSpline_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadSpline_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadSpline_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadSpline_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadSpline_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadSpline_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadSpline_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadSpline_get_NumberOfControlPoints(This,numCtrlPoints)	\
    ((This)->lpVtbl -> get_NumberOfControlPoints(This,numCtrlPoints))

#define IZcadSpline_get_ControlPoints(This,controlPoint)	\
    ((This)->lpVtbl -> get_ControlPoints(This,controlPoint))

#define IZcadSpline_put_ControlPoints(This,controlPoint)	\
    ((This)->lpVtbl -> put_ControlPoints(This,controlPoint))

#define IZcadSpline_get_NumberOfFitPoints(This,numFitPoints)	\
    ((This)->lpVtbl -> get_NumberOfFitPoints(This,numFitPoints))

#define IZcadSpline_get_FitPoints(This,fitPoint)	\
    ((This)->lpVtbl -> get_FitPoints(This,fitPoint))

#define IZcadSpline_put_FitPoints(This,fitPoint)	\
    ((This)->lpVtbl -> put_FitPoints(This,fitPoint))

#define IZcadSpline_get_Degree(This,degree)	\
    ((This)->lpVtbl -> get_Degree(This,degree))

#define IZcadSpline_get_Closed(This,fClose)	\
    ((This)->lpVtbl -> get_Closed(This,fClose))

#define IZcadSpline_get_IsPlanar(This,fPlanar)	\
    ((This)->lpVtbl -> get_IsPlanar(This,fPlanar))

#define IZcadSpline_get_IsRational(This,fRational)	\
    ((This)->lpVtbl -> get_IsRational(This,fRational))

#define IZcadSpline_get_IsPeriodic(This,fPeriodic)	\
    ((This)->lpVtbl -> get_IsPeriodic(This,fPeriodic))

#define IZcadSpline_get_StartTangent(This,startTangent)	\
    ((This)->lpVtbl -> get_StartTangent(This,startTangent))

#define IZcadSpline_put_StartTangent(This,startTangent)	\
    ((This)->lpVtbl -> put_StartTangent(This,startTangent))

#define IZcadSpline_get_EndTangent(This,endTangent)	\
    ((This)->lpVtbl -> get_EndTangent(This,endTangent))

#define IZcadSpline_put_EndTangent(This,endTangent)	\
    ((This)->lpVtbl -> put_EndTangent(This,endTangent))

#define IZcadSpline_get_FitTolerance(This,fitTol)	\
    ((This)->lpVtbl -> get_FitTolerance(This,fitTol))

#define IZcadSpline_put_FitTolerance(This,fitTol)	\
    ((This)->lpVtbl -> put_FitTolerance(This,fitTol))

#define IZcadSpline_get_Area(This,area)	\
    ((This)->lpVtbl -> get_Area(This,area))

#define IZcadSpline_SetControlPoint(This,Index,ControlPoint)	\
    ((This)->lpVtbl -> SetControlPoint(This,Index,ControlPoint))

#define IZcadSpline_GetControlPoint(This,Index,ControlPoint)	\
    ((This)->lpVtbl -> GetControlPoint(This,Index,ControlPoint))

#define IZcadSpline_SetFitPoint(This,Index,FitPoint)	\
    ((This)->lpVtbl -> SetFitPoint(This,Index,FitPoint))

#define IZcadSpline_GetFitPoint(This,Index,FitPoint)	\
    ((This)->lpVtbl -> GetFitPoint(This,Index,FitPoint))

#define IZcadSpline_SetWeight(This,Index,Weight)	\
    ((This)->lpVtbl -> SetWeight(This,Index,Weight))

#define IZcadSpline_GetWeight(This,Index,Weight)	\
    ((This)->lpVtbl -> GetWeight(This,Index,Weight))

#define IZcadSpline_AddFitPoint(This,Index,FitPoint)	\
    ((This)->lpVtbl -> AddFitPoint(This,Index,FitPoint))

#define IZcadSpline_DeleteFitPoint(This,Index)	\
    ((This)->lpVtbl -> DeleteFitPoint(This,Index))

#define IZcadSpline_ElevateOrder(This,Order)	\
    ((This)->lpVtbl -> ElevateOrder(This,Order))

#define IZcadSpline_Offset(This,Distance,pOffsetCurves)	\
    ((This)->lpVtbl -> Offset(This,Distance,pOffsetCurves))

#define IZcadSpline_PurgeFitData(This)	\
    ((This)->lpVtbl -> PurgeFitData(This))

#define IZcadSpline_Reverse(This)	\
    ((This)->lpVtbl -> Reverse(This))

#define IZcadSpline_get_Knots(This,KnotValues)	\
    ((This)->lpVtbl -> get_Knots(This,KnotValues))

#define IZcadSpline_put_Knots(This,KnotValues)	\
    ((This)->lpVtbl -> put_Knots(This,KnotValues))

#define IZcadSpline_get_Weights(This,WeightValues)	\
    ((This)->lpVtbl -> get_Weights(This,WeightValues))

#define IZcadSpline_put_Weights(This,WeightValues)	\
    ((This)->lpVtbl -> put_Weights(This,WeightValues))

#define IZcadSpline_get_KnotParameterization(This,knotParamVal)	\
    ((This)->lpVtbl -> get_KnotParameterization(This,knotParamVal))

#define IZcadSpline_put_KnotParameterization(This,knotParamVal)	\
    ((This)->lpVtbl -> put_KnotParameterization(This,knotParamVal))

#define IZcadSpline_get_SplineFrame(This,show)	\
    ((This)->lpVtbl -> get_SplineFrame(This,show))

#define IZcadSpline_put_SplineFrame(This,showFrame)	\
    ((This)->lpVtbl -> put_SplineFrame(This,showFrame))

#define IZcadSpline_get_SplineMethod(This,method)	\
    ((This)->lpVtbl -> get_SplineMethod(This,method))

#define IZcadSpline_put_SplineMethod(This,method)	\
    ((This)->lpVtbl -> put_SplineMethod(This,method))

#define IZcadSpline_put_Degree2(This,degree)	\
    ((This)->lpVtbl -> put_Degree2(This,degree))

#define IZcadSpline_get_Degree2(This,degree)	\
    ((This)->lpVtbl -> get_Degree2(This,degree))

#define IZcadSpline_put_Closed2(This,fClose)	\
    ((This)->lpVtbl -> put_Closed2(This,fClose))

#define IZcadSpline_get_Closed2(This,fClose)	\
    ((This)->lpVtbl -> get_Closed2(This,fClose))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadSpline,0xEC923158,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923158-5A17-11E7-B72E-BC5FF42AC839")
ZcadSpline;
#endif

#ifndef __IZcadText_INTERFACE_DEFINED__
#define __IZcadText_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadText,0xEC9230C3,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9230C3-5A17-11E7-B72E-BC5FF42AC839")
    IZcadText : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_TextString(
             BSTR *bstrText) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextString(
             BSTR bstrText) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_StyleName(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StyleName(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Alignment(
             ZcAlignment *align) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Alignment(
             ZcAlignment align) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_HorizontalAlignment(
             ZcHorizontalAlignment *horizAlign) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_HorizontalAlignment(
             ZcHorizontalAlignment horizAlign) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_VerticalAlignment(
             ZcVerticalAlignment *vertiAlign) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_VerticalAlignment(
             ZcVerticalAlignment vertiAlign) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Height(
             double *height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Height(
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Rotation(
             ZCAD_ANGLE *rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Rotation(
             ZCAD_ANGLE rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ScaleFactor(
             ZCAD_NOUNITS *scalFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ScaleFactor(
             ZCAD_NOUNITS scalFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ObliqueAngle(
             ZCAD_ANGLE *obliAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ObliqueAngle(
             ZCAD_ANGLE obliAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextAlignmentPoint(
             VARIANT *alignPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextAlignmentPoint(
             VARIANT alignPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_InsertionPoint(
             VARIANT *insPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_InsertionPoint(
             VARIANT insPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Normal(
             VARIANT *normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Normal(
             VARIANT normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextGenerationFlag(
             long *textGenFlag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextGenerationFlag(
             long textGenFlag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Thickness(
             double *thickness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Thickness(
             double thickness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UpsideDown(
             VARIANT_BOOL *upsideDown) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_UpsideDown(
             VARIANT_BOOL upsideDown) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Backward(
             VARIANT_BOOL *backward) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Backward(
             VARIANT_BOOL backward) = 0;

        virtual  HRESULT STDMETHODCALLTYPE FieldCode(
             BSTR *bstrText) = 0;

    };

#else

    typedef struct IZcadTextVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadText * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadText * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadText * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadText * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadText * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadText * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadText * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadText * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadText * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadText * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadText * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadText * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadText * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadText * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadText * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadText * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadText * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadText * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadText * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadText * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadText * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadText * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadText * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadText * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadText * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadText * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadText * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadText * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadText * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadText * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadText * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadText * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadText * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadText * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadText * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadText * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadText * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadText * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadText * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadText * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadText * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadText * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadText * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadText * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadText * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadText * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadText * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadText * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadText * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadText * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadText * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadText * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadText * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadText * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadText * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadText * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadText * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_TextString )(
            IZcadText * This,
             BSTR *bstrText);

         HRESULT ( STDMETHODCALLTYPE *put_TextString )(
            IZcadText * This,
             BSTR bstrText);

         HRESULT ( STDMETHODCALLTYPE *get_StyleName )(
            IZcadText * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_StyleName )(
            IZcadText * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_Alignment )(
            IZcadText * This,
             ZcAlignment *align);

         HRESULT ( STDMETHODCALLTYPE *put_Alignment )(
            IZcadText * This,
             ZcAlignment align);

         HRESULT ( STDMETHODCALLTYPE *get_HorizontalAlignment )(
            IZcadText * This,
             ZcHorizontalAlignment *horizAlign);

         HRESULT ( STDMETHODCALLTYPE *put_HorizontalAlignment )(
            IZcadText * This,
             ZcHorizontalAlignment horizAlign);

         HRESULT ( STDMETHODCALLTYPE *get_VerticalAlignment )(
            IZcadText * This,
             ZcVerticalAlignment *vertiAlign);

         HRESULT ( STDMETHODCALLTYPE *put_VerticalAlignment )(
            IZcadText * This,
             ZcVerticalAlignment vertiAlign);

         HRESULT ( STDMETHODCALLTYPE *get_Height )(
            IZcadText * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_Height )(
            IZcadText * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_Rotation )(
            IZcadText * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_Rotation )(
            IZcadText * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )(
            IZcadText * This,
             ZCAD_NOUNITS *scalFactor);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )(
            IZcadText * This,
             ZCAD_NOUNITS scalFactor);

         HRESULT ( STDMETHODCALLTYPE *get_ObliqueAngle )(
            IZcadText * This,
             ZCAD_ANGLE *obliAngle);

         HRESULT ( STDMETHODCALLTYPE *put_ObliqueAngle )(
            IZcadText * This,
             ZCAD_ANGLE obliAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextAlignmentPoint )(
            IZcadText * This,
             VARIANT *alignPoint);

         HRESULT ( STDMETHODCALLTYPE *put_TextAlignmentPoint )(
            IZcadText * This,
             VARIANT alignPoint);

         HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )(
            IZcadText * This,
             VARIANT *insPoint);

         HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )(
            IZcadText * This,
             VARIANT insPoint);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadText * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadText * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_TextGenerationFlag )(
            IZcadText * This,
             long *textGenFlag);

         HRESULT ( STDMETHODCALLTYPE *put_TextGenerationFlag )(
            IZcadText * This,
             long textGenFlag);

         HRESULT ( STDMETHODCALLTYPE *get_Thickness )(
            IZcadText * This,
             double *thickness);

         HRESULT ( STDMETHODCALLTYPE *put_Thickness )(
            IZcadText * This,
             double thickness);

         HRESULT ( STDMETHODCALLTYPE *get_UpsideDown )(
            IZcadText * This,
             VARIANT_BOOL *upsideDown);

         HRESULT ( STDMETHODCALLTYPE *put_UpsideDown )(
            IZcadText * This,
             VARIANT_BOOL upsideDown);

         HRESULT ( STDMETHODCALLTYPE *get_Backward )(
            IZcadText * This,
             VARIANT_BOOL *backward);

         HRESULT ( STDMETHODCALLTYPE *put_Backward )(
            IZcadText * This,
             VARIANT_BOOL backward);

         HRESULT ( STDMETHODCALLTYPE *FieldCode )(
            IZcadText * This,
             BSTR *bstrText);

        END_INTERFACE
    } IZcadTextVtbl;

    interface IZcadText
    {
        CONST_VTBL struct IZcadTextVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadText_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadText_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadText_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadText_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadText_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadText_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadText_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadText_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadText_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadText_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadText_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadText_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadText_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadText_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadText_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadText_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadText_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadText_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadText_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadText_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadText_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadText_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadText_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadText_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadText_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadText_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadText_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadText_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadText_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadText_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadText_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadText_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadText_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadText_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadText_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadText_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadText_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadText_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadText_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadText_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadText_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadText_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadText_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadText_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadText_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadText_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadText_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadText_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadText_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadText_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadText_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadText_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadText_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadText_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadText_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadText_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadText_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadText_get_TextString(This,bstrText)	\
    ((This)->lpVtbl -> get_TextString(This,bstrText))

#define IZcadText_put_TextString(This,bstrText)	\
    ((This)->lpVtbl -> put_TextString(This,bstrText))

#define IZcadText_get_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> get_StyleName(This,bstrName))

#define IZcadText_put_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> put_StyleName(This,bstrName))

#define IZcadText_get_Alignment(This,align)	\
    ((This)->lpVtbl -> get_Alignment(This,align))

#define IZcadText_put_Alignment(This,align)	\
    ((This)->lpVtbl -> put_Alignment(This,align))

#define IZcadText_get_HorizontalAlignment(This,horizAlign)	\
    ((This)->lpVtbl -> get_HorizontalAlignment(This,horizAlign))

#define IZcadText_put_HorizontalAlignment(This,horizAlign)	\
    ((This)->lpVtbl -> put_HorizontalAlignment(This,horizAlign))

#define IZcadText_get_VerticalAlignment(This,vertiAlign)	\
    ((This)->lpVtbl -> get_VerticalAlignment(This,vertiAlign))

#define IZcadText_put_VerticalAlignment(This,vertiAlign)	\
    ((This)->lpVtbl -> put_VerticalAlignment(This,vertiAlign))

#define IZcadText_get_Height(This,height)	\
    ((This)->lpVtbl -> get_Height(This,height))

#define IZcadText_put_Height(This,height)	\
    ((This)->lpVtbl -> put_Height(This,height))

#define IZcadText_get_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_Rotation(This,rotAngle))

#define IZcadText_put_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_Rotation(This,rotAngle))

#define IZcadText_get_ScaleFactor(This,scalFactor)	\
    ((This)->lpVtbl -> get_ScaleFactor(This,scalFactor))

#define IZcadText_put_ScaleFactor(This,scalFactor)	\
    ((This)->lpVtbl -> put_ScaleFactor(This,scalFactor))

#define IZcadText_get_ObliqueAngle(This,obliAngle)	\
    ((This)->lpVtbl -> get_ObliqueAngle(This,obliAngle))

#define IZcadText_put_ObliqueAngle(This,obliAngle)	\
    ((This)->lpVtbl -> put_ObliqueAngle(This,obliAngle))

#define IZcadText_get_TextAlignmentPoint(This,alignPoint)	\
    ((This)->lpVtbl -> get_TextAlignmentPoint(This,alignPoint))

#define IZcadText_put_TextAlignmentPoint(This,alignPoint)	\
    ((This)->lpVtbl -> put_TextAlignmentPoint(This,alignPoint))

#define IZcadText_get_InsertionPoint(This,insPoint)	\
    ((This)->lpVtbl -> get_InsertionPoint(This,insPoint))

#define IZcadText_put_InsertionPoint(This,insPoint)	\
    ((This)->lpVtbl -> put_InsertionPoint(This,insPoint))

#define IZcadText_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadText_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadText_get_TextGenerationFlag(This,textGenFlag)	\
    ((This)->lpVtbl -> get_TextGenerationFlag(This,textGenFlag))

#define IZcadText_put_TextGenerationFlag(This,textGenFlag)	\
    ((This)->lpVtbl -> put_TextGenerationFlag(This,textGenFlag))

#define IZcadText_get_Thickness(This,thickness)	\
    ((This)->lpVtbl -> get_Thickness(This,thickness))

#define IZcadText_put_Thickness(This,thickness)	\
    ((This)->lpVtbl -> put_Thickness(This,thickness))

#define IZcadText_get_UpsideDown(This,upsideDown)	\
    ((This)->lpVtbl -> get_UpsideDown(This,upsideDown))

#define IZcadText_put_UpsideDown(This,upsideDown)	\
    ((This)->lpVtbl -> put_UpsideDown(This,upsideDown))

#define IZcadText_get_Backward(This,backward)	\
    ((This)->lpVtbl -> get_Backward(This,backward))

#define IZcadText_put_Backward(This,backward)	\
    ((This)->lpVtbl -> put_Backward(This,backward))

#define IZcadText_FieldCode(This,bstrText)	\
    ((This)->lpVtbl -> FieldCode(This,bstrText))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadText,0xEC923067,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923067-5A17-11E7-B72E-BC5FF42AC839")
ZcadText;
#endif

#ifndef __IZcadTolerance_INTERFACE_DEFINED__
#define __IZcadTolerance_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadTolerance,0xEC923101,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923101-5A17-11E7-B72E-BC5FF42AC839")
    IZcadTolerance : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_DirectionVector(
             VARIANT *dirVector) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DirectionVector(
             VARIANT dirVector) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_InsertionPoint(
             VARIANT *insPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_InsertionPoint(
             VARIANT insPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Normal(
             VARIANT *normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Normal(
             VARIANT normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_StyleName(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StyleName(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextColor(
             ZCAD_COLOR *Color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextColor(
             ZCAD_COLOR Color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextString(
             BSTR *bstrText) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextString(
             BSTR bstrText) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextStyle(
             BSTR *style) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextStyle(
             BSTR style) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextHeight(
             double *height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextHeight(
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ScaleFactor(
             ZCAD_NOUNITS *factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ScaleFactor(
             ZCAD_NOUNITS factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLineColor(
             ZCAD_COLOR *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLineColor(
             ZCAD_COLOR Type) = 0;

    };

#else

    typedef struct IZcadToleranceVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadTolerance * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadTolerance * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadTolerance * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadTolerance * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadTolerance * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadTolerance * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadTolerance * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadTolerance * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadTolerance * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadTolerance * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadTolerance * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadTolerance * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadTolerance * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadTolerance * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadTolerance * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadTolerance * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadTolerance * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadTolerance * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadTolerance * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadTolerance * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadTolerance * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadTolerance * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadTolerance * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadTolerance * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadTolerance * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadTolerance * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadTolerance * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadTolerance * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadTolerance * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadTolerance * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadTolerance * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadTolerance * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadTolerance * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadTolerance * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadTolerance * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadTolerance * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadTolerance * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadTolerance * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadTolerance * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadTolerance * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadTolerance * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadTolerance * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadTolerance * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadTolerance * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadTolerance * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadTolerance * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadTolerance * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadTolerance * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadTolerance * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadTolerance * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadTolerance * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadTolerance * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadTolerance * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadTolerance * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadTolerance * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadTolerance * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadTolerance * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_DirectionVector )(
            IZcadTolerance * This,
             VARIANT *dirVector);

         HRESULT ( STDMETHODCALLTYPE *put_DirectionVector )(
            IZcadTolerance * This,
             VARIANT dirVector);

         HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )(
            IZcadTolerance * This,
             VARIANT *insPoint);

         HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )(
            IZcadTolerance * This,
             VARIANT insPoint);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadTolerance * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadTolerance * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_StyleName )(
            IZcadTolerance * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_StyleName )(
            IZcadTolerance * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_TextColor )(
            IZcadTolerance * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_TextColor )(
            IZcadTolerance * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_TextString )(
            IZcadTolerance * This,
             BSTR *bstrText);

         HRESULT ( STDMETHODCALLTYPE *put_TextString )(
            IZcadTolerance * This,
             BSTR bstrText);

         HRESULT ( STDMETHODCALLTYPE *get_TextStyle )(
            IZcadTolerance * This,
             BSTR *style);

         HRESULT ( STDMETHODCALLTYPE *put_TextStyle )(
            IZcadTolerance * This,
             BSTR style);

         HRESULT ( STDMETHODCALLTYPE *get_TextHeight )(
            IZcadTolerance * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_TextHeight )(
            IZcadTolerance * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )(
            IZcadTolerance * This,
             ZCAD_NOUNITS *factor);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )(
            IZcadTolerance * This,
             ZCAD_NOUNITS factor);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLineColor )(
            IZcadTolerance * This,
             ZCAD_COLOR *Type);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLineColor )(
            IZcadTolerance * This,
             ZCAD_COLOR Type);

        END_INTERFACE
    } IZcadToleranceVtbl;

    interface IZcadTolerance
    {
        CONST_VTBL struct IZcadToleranceVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadTolerance_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadTolerance_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadTolerance_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadTolerance_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadTolerance_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadTolerance_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadTolerance_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadTolerance_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadTolerance_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadTolerance_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadTolerance_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadTolerance_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadTolerance_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadTolerance_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadTolerance_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadTolerance_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadTolerance_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadTolerance_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadTolerance_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadTolerance_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadTolerance_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadTolerance_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadTolerance_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadTolerance_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadTolerance_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadTolerance_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadTolerance_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadTolerance_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadTolerance_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadTolerance_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadTolerance_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadTolerance_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadTolerance_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadTolerance_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadTolerance_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadTolerance_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadTolerance_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadTolerance_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadTolerance_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadTolerance_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadTolerance_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadTolerance_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadTolerance_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadTolerance_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadTolerance_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadTolerance_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadTolerance_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadTolerance_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadTolerance_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadTolerance_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadTolerance_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadTolerance_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadTolerance_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadTolerance_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadTolerance_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadTolerance_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadTolerance_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadTolerance_get_DirectionVector(This,dirVector)	\
    ((This)->lpVtbl -> get_DirectionVector(This,dirVector))

#define IZcadTolerance_put_DirectionVector(This,dirVector)	\
    ((This)->lpVtbl -> put_DirectionVector(This,dirVector))

#define IZcadTolerance_get_InsertionPoint(This,insPoint)	\
    ((This)->lpVtbl -> get_InsertionPoint(This,insPoint))

#define IZcadTolerance_put_InsertionPoint(This,insPoint)	\
    ((This)->lpVtbl -> put_InsertionPoint(This,insPoint))

#define IZcadTolerance_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadTolerance_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadTolerance_get_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> get_StyleName(This,bstrName))

#define IZcadTolerance_put_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> put_StyleName(This,bstrName))

#define IZcadTolerance_get_TextColor(This,Color)	\
    ((This)->lpVtbl -> get_TextColor(This,Color))

#define IZcadTolerance_put_TextColor(This,Color)	\
    ((This)->lpVtbl -> put_TextColor(This,Color))

#define IZcadTolerance_get_TextString(This,bstrText)	\
    ((This)->lpVtbl -> get_TextString(This,bstrText))

#define IZcadTolerance_put_TextString(This,bstrText)	\
    ((This)->lpVtbl -> put_TextString(This,bstrText))

#define IZcadTolerance_get_TextStyle(This,style)	\
    ((This)->lpVtbl -> get_TextStyle(This,style))

#define IZcadTolerance_put_TextStyle(This,style)	\
    ((This)->lpVtbl -> put_TextStyle(This,style))

#define IZcadTolerance_get_TextHeight(This,height)	\
    ((This)->lpVtbl -> get_TextHeight(This,height))

#define IZcadTolerance_put_TextHeight(This,height)	\
    ((This)->lpVtbl -> put_TextHeight(This,height))

#define IZcadTolerance_get_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> get_ScaleFactor(This,factor))

#define IZcadTolerance_put_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> put_ScaleFactor(This,factor))

#define IZcadTolerance_get_DimensionLineColor(This,Type)	\
    ((This)->lpVtbl -> get_DimensionLineColor(This,Type))

#define IZcadTolerance_put_DimensionLineColor(This,Type)	\
    ((This)->lpVtbl -> put_DimensionLineColor(This,Type))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadTolerance,0xEC9230D2,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9230D2-5A17-11E7-B72E-BC5FF42AC839")
ZcadTolerance;
#endif

#ifndef __IZcadTrace_INTERFACE_DEFINED__
#define __IZcadTrace_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadTrace,0xEC9231B0,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9231B0-5A17-11E7-B72E-BC5FF42AC839")
    IZcadTrace : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Coordinates(
             VARIANT *corners) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Coordinates(
             VARIANT corners) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Normal(
             VARIANT *normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Normal(
             VARIANT normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Thickness(
             double *thickness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Thickness(
             double thickness) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Coordinate(
             int Index,
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Coordinate(
             int Index,
             VARIANT newVal) = 0;

    };

#else

    typedef struct IZcadTraceVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadTrace * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadTrace * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadTrace * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadTrace * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadTrace * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadTrace * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadTrace * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadTrace * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadTrace * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadTrace * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadTrace * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadTrace * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadTrace * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadTrace * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadTrace * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadTrace * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadTrace * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadTrace * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadTrace * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadTrace * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadTrace * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadTrace * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadTrace * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadTrace * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadTrace * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadTrace * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadTrace * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadTrace * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadTrace * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadTrace * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadTrace * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadTrace * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadTrace * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadTrace * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadTrace * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadTrace * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadTrace * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadTrace * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadTrace * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadTrace * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadTrace * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadTrace * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadTrace * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadTrace * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadTrace * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadTrace * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadTrace * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadTrace * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadTrace * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadTrace * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadTrace * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadTrace * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadTrace * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadTrace * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadTrace * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadTrace * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadTrace * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Coordinates )(
            IZcadTrace * This,
             VARIANT *corners);

         HRESULT ( STDMETHODCALLTYPE *put_Coordinates )(
            IZcadTrace * This,
             VARIANT corners);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadTrace * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadTrace * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_Thickness )(
            IZcadTrace * This,
             double *thickness);

         HRESULT ( STDMETHODCALLTYPE *put_Thickness )(
            IZcadTrace * This,
             double thickness);

         HRESULT ( STDMETHODCALLTYPE *get_Coordinate )(
            IZcadTrace * This,
             int Index,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_Coordinate )(
            IZcadTrace * This,
             int Index,
             VARIANT newVal);

        END_INTERFACE
    } IZcadTraceVtbl;

    interface IZcadTrace
    {
        CONST_VTBL struct IZcadTraceVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadTrace_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadTrace_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadTrace_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadTrace_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadTrace_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadTrace_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadTrace_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadTrace_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadTrace_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadTrace_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadTrace_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadTrace_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadTrace_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadTrace_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadTrace_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadTrace_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadTrace_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadTrace_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadTrace_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadTrace_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadTrace_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadTrace_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadTrace_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadTrace_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadTrace_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadTrace_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadTrace_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadTrace_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadTrace_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadTrace_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadTrace_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadTrace_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadTrace_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadTrace_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadTrace_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadTrace_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadTrace_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadTrace_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadTrace_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadTrace_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadTrace_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadTrace_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadTrace_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadTrace_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadTrace_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadTrace_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadTrace_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadTrace_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadTrace_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadTrace_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadTrace_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadTrace_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadTrace_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadTrace_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadTrace_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadTrace_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadTrace_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadTrace_get_Coordinates(This,corners)	\
    ((This)->lpVtbl -> get_Coordinates(This,corners))

#define IZcadTrace_put_Coordinates(This,corners)	\
    ((This)->lpVtbl -> put_Coordinates(This,corners))

#define IZcadTrace_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadTrace_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadTrace_get_Thickness(This,thickness)	\
    ((This)->lpVtbl -> get_Thickness(This,thickness))

#define IZcadTrace_put_Thickness(This,thickness)	\
    ((This)->lpVtbl -> put_Thickness(This,thickness))

#define IZcadTrace_get_Coordinate(This,Index,pVal)	\
    ((This)->lpVtbl -> get_Coordinate(This,Index,pVal))

#define IZcadTrace_put_Coordinate(This,Index,newVal)	\
    ((This)->lpVtbl -> put_Coordinate(This,Index,newVal))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadTrace,0xEC923159,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923159-5A17-11E7-B72E-BC5FF42AC839")
ZcadTrace;
#endif

#ifndef __IZcadXline_INTERFACE_DEFINED__
#define __IZcadXline_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadXline,0xEC923055,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923055-5A17-11E7-B72E-BC5FF42AC839")
    IZcadXline : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_BasePoint(
             VARIANT *basePoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BasePoint(
             VARIANT basePoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SecondPoint(
             VARIANT *secondPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SecondPoint(
             VARIANT secondPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DirectionVector(
             VARIANT *dirVector) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DirectionVector(
             VARIANT dirVector) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Offset(
             double distance,
             VARIANT *pOffsetCurves) = 0;

    };

#else

    typedef struct IZcadXlineVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadXline * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadXline * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadXline * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadXline * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadXline * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadXline * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadXline * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadXline * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadXline * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadXline * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadXline * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadXline * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadXline * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadXline * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadXline * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadXline * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadXline * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadXline * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadXline * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadXline * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadXline * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadXline * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadXline * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadXline * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadXline * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadXline * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadXline * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadXline * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadXline * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadXline * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadXline * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadXline * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadXline * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadXline * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadXline * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadXline * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadXline * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadXline * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadXline * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadXline * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadXline * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadXline * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadXline * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadXline * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadXline * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadXline * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadXline * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadXline * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadXline * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadXline * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadXline * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadXline * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadXline * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadXline * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadXline * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadXline * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadXline * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_BasePoint )(
            IZcadXline * This,
             VARIANT *basePoint);

         HRESULT ( STDMETHODCALLTYPE *put_BasePoint )(
            IZcadXline * This,
             VARIANT basePoint);

         HRESULT ( STDMETHODCALLTYPE *get_SecondPoint )(
            IZcadXline * This,
             VARIANT *secondPoint);

         HRESULT ( STDMETHODCALLTYPE *put_SecondPoint )(
            IZcadXline * This,
             VARIANT secondPoint);

         HRESULT ( STDMETHODCALLTYPE *get_DirectionVector )(
            IZcadXline * This,
             VARIANT *dirVector);

         HRESULT ( STDMETHODCALLTYPE *put_DirectionVector )(
            IZcadXline * This,
             VARIANT dirVector);

         HRESULT ( STDMETHODCALLTYPE *Offset )(
            IZcadXline * This,
             double distance,
             VARIANT *pOffsetCurves);

        END_INTERFACE
    } IZcadXlineVtbl;

    interface IZcadXline
    {
        CONST_VTBL struct IZcadXlineVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadXline_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadXline_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadXline_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadXline_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadXline_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadXline_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadXline_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadXline_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadXline_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadXline_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadXline_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadXline_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadXline_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadXline_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadXline_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadXline_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadXline_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadXline_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadXline_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadXline_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadXline_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadXline_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadXline_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadXline_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadXline_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadXline_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadXline_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadXline_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadXline_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadXline_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadXline_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadXline_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadXline_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadXline_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadXline_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadXline_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadXline_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadXline_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadXline_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadXline_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadXline_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadXline_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadXline_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadXline_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadXline_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadXline_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadXline_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadXline_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadXline_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadXline_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadXline_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadXline_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadXline_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadXline_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadXline_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadXline_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadXline_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadXline_get_BasePoint(This,basePoint)	\
    ((This)->lpVtbl -> get_BasePoint(This,basePoint))

#define IZcadXline_put_BasePoint(This,basePoint)	\
    ((This)->lpVtbl -> put_BasePoint(This,basePoint))

#define IZcadXline_get_SecondPoint(This,secondPoint)	\
    ((This)->lpVtbl -> get_SecondPoint(This,secondPoint))

#define IZcadXline_put_SecondPoint(This,secondPoint)	\
    ((This)->lpVtbl -> put_SecondPoint(This,secondPoint))

#define IZcadXline_get_DirectionVector(This,dirVector)	\
    ((This)->lpVtbl -> get_DirectionVector(This,dirVector))

#define IZcadXline_put_DirectionVector(This,dirVector)	\
    ((This)->lpVtbl -> put_DirectionVector(This,dirVector))

#define IZcadXline_Offset(This,distance,pOffsetCurves)	\
    ((This)->lpVtbl -> Offset(This,distance,pOffsetCurves))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadXline,0xEC9231CE,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9231CE-5A17-11E7-B72E-BC5FF42AC839")
ZcadXline;
#endif

#ifndef __IZcadPViewport_INTERFACE_DEFINED__
#define __IZcadPViewport_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadPViewport,0xEC923139,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923139-5A17-11E7-B72E-BC5FF42AC839")
    IZcadPViewport : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Center(
             VARIANT *centerPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Center(
             VARIANT centerPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Direction(
             VARIANT *dirVector) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Direction(
             VARIANT dirVector) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_GridOn(
             VARIANT_BOOL *bGridOn) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_GridOn(
             VARIANT_BOOL bGridOn) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Height(
             double *height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Height(
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Width(
             double *width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Width(
             double width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ViewportOn(
             VARIANT_BOOL *bOn) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ViewportOn(
             VARIANT_BOOL bOn) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Clipped(
             VARIANT_BOOL *bClipped) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DisplayLocked(
             VARIANT_BOOL *bLocked) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DisplayLocked(
             VARIANT_BOOL bLocked) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_StandardScale(
             ZcViewportScale *scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StandardScale(
             ZcViewportScale scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_CustomScale(
             double *Scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_CustomScale(
             double Scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_StyleSheet(
             BSTR *pName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StyleSheet(
             BSTR pName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UCSPerViewport(
             VARIANT_BOOL *UCSSaved) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_UCSPerViewport(
             VARIANT_BOOL UCSSaved) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SnapBasePoint(
             VARIANT *lowLeft) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SnapBasePoint(
             VARIANT lowLeft) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SnapOn(
             VARIANT_BOOL *bSnapOn) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SnapOn(
             VARIANT_BOOL bSnapOn) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SnapRotationAngle(
             double *angle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SnapRotationAngle(
             double angle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UCSIconOn(
             VARIANT_BOOL *bIconOn) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_UCSIconOn(
             VARIANT_BOOL bIconOn) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UCSIconAtOrigin(
             VARIANT_BOOL *bIconAtOrigin) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_UCSIconAtOrigin(
             VARIANT_BOOL bIconAtOrigin) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetGridSpacing(
             double *XSpacing,
             double *YSpacing) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetGridSpacing(
             double XSpacing,
             double YSpacing) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetSnapSpacing(
             double *XSpacing,
             double *YSpacing) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetSnapSpacing(
             double XSpacing,
             double YSpacing) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Display(
             VARIANT_BOOL bStatus) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TwistAngle(
             ZCAD_ANGLE *angle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TwistAngle(
             ZCAD_ANGLE angle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LensLength(
             double *Length) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LensLength(
             double Length) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_RemoveHiddenLines(
             VARIANT_BOOL *bRemoval) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_RemoveHiddenLines(
             VARIANT_BOOL bRemoval) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Target(
             VARIANT *targetPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Target(
             VARIANT targetPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArcSmoothness(
             long *arcSmooth) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArcSmoothness(
             long arcSmooth) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_VisualStyle(
             int *pVisualStyleIndex) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_VisualStyle(
             int visualStyleIndex) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ShadePlot(
             int *pShadePlotIndex) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ShadePlot(
             int shadePlotIndex) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ModelView(
             IZcadView **View) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ModelView(
             IZcadView *View) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SheetView(
             IZcadView **View) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SheetView(
             IZcadView *View) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LabelBlockId(
             LONG_PTR *ObjectID) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LabelBlockId(
             LONG_PTR *ObjectID) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_HasSheetView(
             VARIANT_BOOL *bSheetView) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SyncModelView( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_StandardScale2(
             int *scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StandardScale2(
             int scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LayerPropertyOverrides(
             VARIANT_BOOL *bOverrides) = 0;

    };

#else

    typedef struct IZcadPViewportVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadPViewport * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadPViewport * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadPViewport * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadPViewport * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadPViewport * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadPViewport * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadPViewport * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadPViewport * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadPViewport * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadPViewport * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadPViewport * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadPViewport * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadPViewport * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadPViewport * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadPViewport * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadPViewport * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadPViewport * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadPViewport * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadPViewport * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadPViewport * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadPViewport * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadPViewport * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadPViewport * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadPViewport * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadPViewport * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadPViewport * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadPViewport * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadPViewport * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadPViewport * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadPViewport * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadPViewport * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadPViewport * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadPViewport * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadPViewport * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadPViewport * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadPViewport * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadPViewport * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadPViewport * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadPViewport * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadPViewport * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadPViewport * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadPViewport * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadPViewport * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadPViewport * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadPViewport * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadPViewport * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadPViewport * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadPViewport * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadPViewport * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadPViewport * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadPViewport * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadPViewport * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadPViewport * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadPViewport * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadPViewport * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadPViewport * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadPViewport * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Center )(
            IZcadPViewport * This,
             VARIANT *centerPoint);

         HRESULT ( STDMETHODCALLTYPE *put_Center )(
            IZcadPViewport * This,
             VARIANT centerPoint);

         HRESULT ( STDMETHODCALLTYPE *get_Direction )(
            IZcadPViewport * This,
             VARIANT *dirVector);

         HRESULT ( STDMETHODCALLTYPE *put_Direction )(
            IZcadPViewport * This,
             VARIANT dirVector);

         HRESULT ( STDMETHODCALLTYPE *get_GridOn )(
            IZcadPViewport * This,
             VARIANT_BOOL *bGridOn);

         HRESULT ( STDMETHODCALLTYPE *put_GridOn )(
            IZcadPViewport * This,
             VARIANT_BOOL bGridOn);

         HRESULT ( STDMETHODCALLTYPE *get_Height )(
            IZcadPViewport * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_Height )(
            IZcadPViewport * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_Width )(
            IZcadPViewport * This,
             double *width);

         HRESULT ( STDMETHODCALLTYPE *put_Width )(
            IZcadPViewport * This,
             double width);

         HRESULT ( STDMETHODCALLTYPE *get_ViewportOn )(
            IZcadPViewport * This,
             VARIANT_BOOL *bOn);

         HRESULT ( STDMETHODCALLTYPE *put_ViewportOn )(
            IZcadPViewport * This,
             VARIANT_BOOL bOn);

         HRESULT ( STDMETHODCALLTYPE *get_Clipped )(
            IZcadPViewport * This,
             VARIANT_BOOL *bClipped);

         HRESULT ( STDMETHODCALLTYPE *get_DisplayLocked )(
            IZcadPViewport * This,
             VARIANT_BOOL *bLocked);

         HRESULT ( STDMETHODCALLTYPE *put_DisplayLocked )(
            IZcadPViewport * This,
             VARIANT_BOOL bLocked);

         HRESULT ( STDMETHODCALLTYPE *get_StandardScale )(
            IZcadPViewport * This,
             ZcViewportScale *scale);

         HRESULT ( STDMETHODCALLTYPE *put_StandardScale )(
            IZcadPViewport * This,
             ZcViewportScale scale);

         HRESULT ( STDMETHODCALLTYPE *get_CustomScale )(
            IZcadPViewport * This,
             double *Scale);

         HRESULT ( STDMETHODCALLTYPE *put_CustomScale )(
            IZcadPViewport * This,
             double Scale);

         HRESULT ( STDMETHODCALLTYPE *get_StyleSheet )(
            IZcadPViewport * This,
             BSTR *pName);

         HRESULT ( STDMETHODCALLTYPE *put_StyleSheet )(
            IZcadPViewport * This,
             BSTR pName);

         HRESULT ( STDMETHODCALLTYPE *get_UCSPerViewport )(
            IZcadPViewport * This,
             VARIANT_BOOL *UCSSaved);

         HRESULT ( STDMETHODCALLTYPE *put_UCSPerViewport )(
            IZcadPViewport * This,
             VARIANT_BOOL UCSSaved);

         HRESULT ( STDMETHODCALLTYPE *get_SnapBasePoint )(
            IZcadPViewport * This,
             VARIANT *lowLeft);

         HRESULT ( STDMETHODCALLTYPE *put_SnapBasePoint )(
            IZcadPViewport * This,
             VARIANT lowLeft);

         HRESULT ( STDMETHODCALLTYPE *get_SnapOn )(
            IZcadPViewport * This,
             VARIANT_BOOL *bSnapOn);

         HRESULT ( STDMETHODCALLTYPE *put_SnapOn )(
            IZcadPViewport * This,
             VARIANT_BOOL bSnapOn);

         HRESULT ( STDMETHODCALLTYPE *get_SnapRotationAngle )(
            IZcadPViewport * This,
             double *angle);

         HRESULT ( STDMETHODCALLTYPE *put_SnapRotationAngle )(
            IZcadPViewport * This,
             double angle);

         HRESULT ( STDMETHODCALLTYPE *get_UCSIconOn )(
            IZcadPViewport * This,
             VARIANT_BOOL *bIconOn);

         HRESULT ( STDMETHODCALLTYPE *put_UCSIconOn )(
            IZcadPViewport * This,
             VARIANT_BOOL bIconOn);

         HRESULT ( STDMETHODCALLTYPE *get_UCSIconAtOrigin )(
            IZcadPViewport * This,
             VARIANT_BOOL *bIconAtOrigin);

         HRESULT ( STDMETHODCALLTYPE *put_UCSIconAtOrigin )(
            IZcadPViewport * This,
             VARIANT_BOOL bIconAtOrigin);

         HRESULT ( STDMETHODCALLTYPE *GetGridSpacing )(
            IZcadPViewport * This,
             double *XSpacing,
             double *YSpacing);

         HRESULT ( STDMETHODCALLTYPE *SetGridSpacing )(
            IZcadPViewport * This,
             double XSpacing,
             double YSpacing);

         HRESULT ( STDMETHODCALLTYPE *GetSnapSpacing )(
            IZcadPViewport * This,
             double *XSpacing,
             double *YSpacing);

         HRESULT ( STDMETHODCALLTYPE *SetSnapSpacing )(
            IZcadPViewport * This,
             double XSpacing,
             double YSpacing);

         HRESULT ( STDMETHODCALLTYPE *Display )(
            IZcadPViewport * This,
             VARIANT_BOOL bStatus);

         HRESULT ( STDMETHODCALLTYPE *get_TwistAngle )(
            IZcadPViewport * This,
             ZCAD_ANGLE *angle);

         HRESULT ( STDMETHODCALLTYPE *put_TwistAngle )(
            IZcadPViewport * This,
             ZCAD_ANGLE angle);

         HRESULT ( STDMETHODCALLTYPE *get_LensLength )(
            IZcadPViewport * This,
             double *Length);

         HRESULT ( STDMETHODCALLTYPE *put_LensLength )(
            IZcadPViewport * This,
             double Length);

         HRESULT ( STDMETHODCALLTYPE *get_RemoveHiddenLines )(
            IZcadPViewport * This,
             VARIANT_BOOL *bRemoval);

         HRESULT ( STDMETHODCALLTYPE *put_RemoveHiddenLines )(
            IZcadPViewport * This,
             VARIANT_BOOL bRemoval);

         HRESULT ( STDMETHODCALLTYPE *get_Target )(
            IZcadPViewport * This,
             VARIANT *targetPoint);

         HRESULT ( STDMETHODCALLTYPE *put_Target )(
            IZcadPViewport * This,
             VARIANT targetPoint);

         HRESULT ( STDMETHODCALLTYPE *get_ArcSmoothness )(
            IZcadPViewport * This,
             long *arcSmooth);

         HRESULT ( STDMETHODCALLTYPE *put_ArcSmoothness )(
            IZcadPViewport * This,
             long arcSmooth);

         HRESULT ( STDMETHODCALLTYPE *get_VisualStyle )(
            IZcadPViewport * This,
             int *pVisualStyleIndex);

         HRESULT ( STDMETHODCALLTYPE *put_VisualStyle )(
            IZcadPViewport * This,
             int visualStyleIndex);

         HRESULT ( STDMETHODCALLTYPE *get_ShadePlot )(
            IZcadPViewport * This,
             int *pShadePlotIndex);

         HRESULT ( STDMETHODCALLTYPE *put_ShadePlot )(
            IZcadPViewport * This,
             int shadePlotIndex);

         HRESULT ( STDMETHODCALLTYPE *get_ModelView )(
            IZcadPViewport * This,
             IZcadView **View);

         HRESULT ( STDMETHODCALLTYPE *put_ModelView )(
            IZcadPViewport * This,
             IZcadView *View);

         HRESULT ( STDMETHODCALLTYPE *get_SheetView )(
            IZcadPViewport * This,
             IZcadView **View);

         HRESULT ( STDMETHODCALLTYPE *put_SheetView )(
            IZcadPViewport * This,
             IZcadView *View);

         HRESULT ( STDMETHODCALLTYPE *get_LabelBlockId )(
            IZcadPViewport * This,
             LONG_PTR *ObjectID);

         HRESULT ( STDMETHODCALLTYPE *put_LabelBlockId )(
            IZcadPViewport * This,
             LONG_PTR *ObjectID);

         HRESULT ( STDMETHODCALLTYPE *get_HasSheetView )(
            IZcadPViewport * This,
             VARIANT_BOOL *bSheetView);

         HRESULT ( STDMETHODCALLTYPE *SyncModelView )(
            IZcadPViewport * This);

         HRESULT ( STDMETHODCALLTYPE *get_StandardScale2 )(
            IZcadPViewport * This,
             int *scale);

         HRESULT ( STDMETHODCALLTYPE *put_StandardScale2 )(
            IZcadPViewport * This,
             int scale);

         HRESULT ( STDMETHODCALLTYPE *get_LayerPropertyOverrides )(
            IZcadPViewport * This,
             VARIANT_BOOL *bOverrides);

        END_INTERFACE
    } IZcadPViewportVtbl;

    interface IZcadPViewport
    {
        CONST_VTBL struct IZcadPViewportVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadPViewport_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadPViewport_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadPViewport_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadPViewport_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadPViewport_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadPViewport_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadPViewport_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadPViewport_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadPViewport_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadPViewport_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadPViewport_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadPViewport_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadPViewport_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadPViewport_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadPViewport_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadPViewport_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadPViewport_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadPViewport_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadPViewport_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadPViewport_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadPViewport_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadPViewport_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadPViewport_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadPViewport_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadPViewport_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadPViewport_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadPViewport_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadPViewport_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadPViewport_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadPViewport_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadPViewport_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadPViewport_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadPViewport_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadPViewport_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadPViewport_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadPViewport_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadPViewport_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadPViewport_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadPViewport_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadPViewport_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadPViewport_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadPViewport_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadPViewport_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadPViewport_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadPViewport_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadPViewport_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadPViewport_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadPViewport_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadPViewport_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadPViewport_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadPViewport_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadPViewport_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadPViewport_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadPViewport_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadPViewport_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadPViewport_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadPViewport_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadPViewport_get_Center(This,centerPoint)	\
    ((This)->lpVtbl -> get_Center(This,centerPoint))

#define IZcadPViewport_put_Center(This,centerPoint)	\
    ((This)->lpVtbl -> put_Center(This,centerPoint))

#define IZcadPViewport_get_Direction(This,dirVector)	\
    ((This)->lpVtbl -> get_Direction(This,dirVector))

#define IZcadPViewport_put_Direction(This,dirVector)	\
    ((This)->lpVtbl -> put_Direction(This,dirVector))

#define IZcadPViewport_get_GridOn(This,bGridOn)	\
    ((This)->lpVtbl -> get_GridOn(This,bGridOn))

#define IZcadPViewport_put_GridOn(This,bGridOn)	\
    ((This)->lpVtbl -> put_GridOn(This,bGridOn))

#define IZcadPViewport_get_Height(This,height)	\
    ((This)->lpVtbl -> get_Height(This,height))

#define IZcadPViewport_put_Height(This,height)	\
    ((This)->lpVtbl -> put_Height(This,height))

#define IZcadPViewport_get_Width(This,width)	\
    ((This)->lpVtbl -> get_Width(This,width))

#define IZcadPViewport_put_Width(This,width)	\
    ((This)->lpVtbl -> put_Width(This,width))

#define IZcadPViewport_get_ViewportOn(This,bOn)	\
    ((This)->lpVtbl -> get_ViewportOn(This,bOn))

#define IZcadPViewport_put_ViewportOn(This,bOn)	\
    ((This)->lpVtbl -> put_ViewportOn(This,bOn))

#define IZcadPViewport_get_Clipped(This,bClipped)	\
    ((This)->lpVtbl -> get_Clipped(This,bClipped))

#define IZcadPViewport_get_DisplayLocked(This,bLocked)	\
    ((This)->lpVtbl -> get_DisplayLocked(This,bLocked))

#define IZcadPViewport_put_DisplayLocked(This,bLocked)	\
    ((This)->lpVtbl -> put_DisplayLocked(This,bLocked))

#define IZcadPViewport_get_StandardScale(This,scale)	\
    ((This)->lpVtbl -> get_StandardScale(This,scale))

#define IZcadPViewport_put_StandardScale(This,scale)	\
    ((This)->lpVtbl -> put_StandardScale(This,scale))

#define IZcadPViewport_get_CustomScale(This,Scale)	\
    ((This)->lpVtbl -> get_CustomScale(This,Scale))

#define IZcadPViewport_put_CustomScale(This,Scale)	\
    ((This)->lpVtbl -> put_CustomScale(This,Scale))

#define IZcadPViewport_get_StyleSheet(This,pName)	\
    ((This)->lpVtbl -> get_StyleSheet(This,pName))

#define IZcadPViewport_put_StyleSheet(This,pName)	\
    ((This)->lpVtbl -> put_StyleSheet(This,pName))

#define IZcadPViewport_get_UCSPerViewport(This,UCSSaved)	\
    ((This)->lpVtbl -> get_UCSPerViewport(This,UCSSaved))

#define IZcadPViewport_put_UCSPerViewport(This,UCSSaved)	\
    ((This)->lpVtbl -> put_UCSPerViewport(This,UCSSaved))

#define IZcadPViewport_get_SnapBasePoint(This,lowLeft)	\
    ((This)->lpVtbl -> get_SnapBasePoint(This,lowLeft))

#define IZcadPViewport_put_SnapBasePoint(This,lowLeft)	\
    ((This)->lpVtbl -> put_SnapBasePoint(This,lowLeft))

#define IZcadPViewport_get_SnapOn(This,bSnapOn)	\
    ((This)->lpVtbl -> get_SnapOn(This,bSnapOn))

#define IZcadPViewport_put_SnapOn(This,bSnapOn)	\
    ((This)->lpVtbl -> put_SnapOn(This,bSnapOn))

#define IZcadPViewport_get_SnapRotationAngle(This,angle)	\
    ((This)->lpVtbl -> get_SnapRotationAngle(This,angle))

#define IZcadPViewport_put_SnapRotationAngle(This,angle)	\
    ((This)->lpVtbl -> put_SnapRotationAngle(This,angle))

#define IZcadPViewport_get_UCSIconOn(This,bIconOn)	\
    ((This)->lpVtbl -> get_UCSIconOn(This,bIconOn))

#define IZcadPViewport_put_UCSIconOn(This,bIconOn)	\
    ((This)->lpVtbl -> put_UCSIconOn(This,bIconOn))

#define IZcadPViewport_get_UCSIconAtOrigin(This,bIconAtOrigin)	\
    ((This)->lpVtbl -> get_UCSIconAtOrigin(This,bIconAtOrigin))

#define IZcadPViewport_put_UCSIconAtOrigin(This,bIconAtOrigin)	\
    ((This)->lpVtbl -> put_UCSIconAtOrigin(This,bIconAtOrigin))

#define IZcadPViewport_GetGridSpacing(This,XSpacing,YSpacing)	\
    ((This)->lpVtbl -> GetGridSpacing(This,XSpacing,YSpacing))

#define IZcadPViewport_SetGridSpacing(This,XSpacing,YSpacing)	\
    ((This)->lpVtbl -> SetGridSpacing(This,XSpacing,YSpacing))

#define IZcadPViewport_GetSnapSpacing(This,XSpacing,YSpacing)	\
    ((This)->lpVtbl -> GetSnapSpacing(This,XSpacing,YSpacing))

#define IZcadPViewport_SetSnapSpacing(This,XSpacing,YSpacing)	\
    ((This)->lpVtbl -> SetSnapSpacing(This,XSpacing,YSpacing))

#define IZcadPViewport_Display(This,bStatus)	\
    ((This)->lpVtbl -> Display(This,bStatus))

#define IZcadPViewport_get_TwistAngle(This,angle)	\
    ((This)->lpVtbl -> get_TwistAngle(This,angle))

#define IZcadPViewport_put_TwistAngle(This,angle)	\
    ((This)->lpVtbl -> put_TwistAngle(This,angle))

#define IZcadPViewport_get_LensLength(This,Length)	\
    ((This)->lpVtbl -> get_LensLength(This,Length))

#define IZcadPViewport_put_LensLength(This,Length)	\
    ((This)->lpVtbl -> put_LensLength(This,Length))

#define IZcadPViewport_get_RemoveHiddenLines(This,bRemoval)	\
    ((This)->lpVtbl -> get_RemoveHiddenLines(This,bRemoval))

#define IZcadPViewport_put_RemoveHiddenLines(This,bRemoval)	\
    ((This)->lpVtbl -> put_RemoveHiddenLines(This,bRemoval))

#define IZcadPViewport_get_Target(This,targetPoint)	\
    ((This)->lpVtbl -> get_Target(This,targetPoint))

#define IZcadPViewport_put_Target(This,targetPoint)	\
    ((This)->lpVtbl -> put_Target(This,targetPoint))

#define IZcadPViewport_get_ArcSmoothness(This,arcSmooth)	\
    ((This)->lpVtbl -> get_ArcSmoothness(This,arcSmooth))

#define IZcadPViewport_put_ArcSmoothness(This,arcSmooth)	\
    ((This)->lpVtbl -> put_ArcSmoothness(This,arcSmooth))

#define IZcadPViewport_get_VisualStyle(This,pVisualStyleIndex)	\
    ((This)->lpVtbl -> get_VisualStyle(This,pVisualStyleIndex))

#define IZcadPViewport_put_VisualStyle(This,visualStyleIndex)	\
    ((This)->lpVtbl -> put_VisualStyle(This,visualStyleIndex))

#define IZcadPViewport_get_ShadePlot(This,pShadePlotIndex)	\
    ((This)->lpVtbl -> get_ShadePlot(This,pShadePlotIndex))

#define IZcadPViewport_put_ShadePlot(This,shadePlotIndex)	\
    ((This)->lpVtbl -> put_ShadePlot(This,shadePlotIndex))

#define IZcadPViewport_get_ModelView(This,View)	\
    ((This)->lpVtbl -> get_ModelView(This,View))

#define IZcadPViewport_put_ModelView(This,View)	\
    ((This)->lpVtbl -> put_ModelView(This,View))

#define IZcadPViewport_get_SheetView(This,View)	\
    ((This)->lpVtbl -> get_SheetView(This,View))

#define IZcadPViewport_put_SheetView(This,View)	\
    ((This)->lpVtbl -> put_SheetView(This,View))

#define IZcadPViewport_get_LabelBlockId(This,ObjectID)	\
    ((This)->lpVtbl -> get_LabelBlockId(This,ObjectID))

#define IZcadPViewport_put_LabelBlockId(This,ObjectID)	\
    ((This)->lpVtbl -> put_LabelBlockId(This,ObjectID))

#define IZcadPViewport_get_HasSheetView(This,bSheetView)	\
    ((This)->lpVtbl -> get_HasSheetView(This,bSheetView))

#define IZcadPViewport_SyncModelView(This)	\
    ((This)->lpVtbl -> SyncModelView(This))

#define IZcadPViewport_get_StandardScale2(This,scale)	\
    ((This)->lpVtbl -> get_StandardScale2(This,scale))

#define IZcadPViewport_put_StandardScale2(This,scale)	\
    ((This)->lpVtbl -> put_StandardScale2(This,scale))

#define IZcadPViewport_get_LayerPropertyOverrides(This,bOverrides)	\
    ((This)->lpVtbl -> get_LayerPropertyOverrides(This,bOverrides))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadPViewport,0xEC923088,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923088-5A17-11E7-B72E-BC5FF42AC839")
ZcadPViewport;
#endif

#ifndef __IZcadMInsertBlock_INTERFACE_DEFINED__
#define __IZcadMInsertBlock_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadMInsertBlock,0xEC922FC1,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC922FC1-5A17-11E7-B72E-BC5FF42AC839")
    IZcadMInsertBlock : public IZcadBlockReference
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE put_Columns(
             long NumColumns) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Columns(
             long *NumColumns) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ColumnSpacing(
             double Spacing) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ColumnSpacing(
             double *Spacing) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Rows(
             long NumRows) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Rows(
             long *NumRows) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_RowSpacing(
             double Spacing) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_RowSpacing(
             double *Spacing) = 0;

    };

#else

    typedef struct IZcadMInsertBlockVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadMInsertBlock * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadMInsertBlock * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadMInsertBlock * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadMInsertBlock * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadMInsertBlock * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadMInsertBlock * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadMInsertBlock * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadMInsertBlock * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadMInsertBlock * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadMInsertBlock * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadMInsertBlock * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadMInsertBlock * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadMInsertBlock * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadMInsertBlock * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadMInsertBlock * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadMInsertBlock * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadMInsertBlock * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadMInsertBlock * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadMInsertBlock * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadMInsertBlock * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadMInsertBlock * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadMInsertBlock * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadMInsertBlock * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadMInsertBlock * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadMInsertBlock * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadMInsertBlock * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadMInsertBlock * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadMInsertBlock * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadMInsertBlock * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadMInsertBlock * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadMInsertBlock * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadMInsertBlock * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadMInsertBlock * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadMInsertBlock * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadMInsertBlock * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadMInsertBlock * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadMInsertBlock * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadMInsertBlock * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadMInsertBlock * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadMInsertBlock * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadMInsertBlock * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadMInsertBlock * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadMInsertBlock * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadMInsertBlock * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadMInsertBlock * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadMInsertBlock * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadMInsertBlock * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadMInsertBlock * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadMInsertBlock * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadMInsertBlock * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadMInsertBlock * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadMInsertBlock * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadMInsertBlock * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadMInsertBlock * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadMInsertBlock * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadMInsertBlock * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadMInsertBlock * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )(
            IZcadMInsertBlock * This,
             VARIANT *insPoint);

         HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )(
            IZcadMInsertBlock * This,
             VARIANT insPoint);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadMInsertBlock * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadMInsertBlock * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadMInsertBlock * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadMInsertBlock * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_Rotation )(
            IZcadMInsertBlock * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_Rotation )(
            IZcadMInsertBlock * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_XScaleFactor )(
            IZcadMInsertBlock * This,
             ZCAD_NOUNITS *scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *put_XScaleFactor )(
            IZcadMInsertBlock * This,
             ZCAD_NOUNITS scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *get_YScaleFactor )(
            IZcadMInsertBlock * This,
             ZCAD_NOUNITS *scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *put_YScaleFactor )(
            IZcadMInsertBlock * This,
             ZCAD_NOUNITS scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *get_ZScaleFactor )(
            IZcadMInsertBlock * This,
             ZCAD_NOUNITS *scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *put_ZScaleFactor )(
            IZcadMInsertBlock * This,
             ZCAD_NOUNITS scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *Explode )(
            IZcadMInsertBlock * This,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *GetAttributes )(
            IZcadMInsertBlock * This,
             VARIANT *pAttrObjs);

         HRESULT ( STDMETHODCALLTYPE *GetConstantAttributes )(
            IZcadMInsertBlock * This,
             VARIANT *pAttrObjs);

         HRESULT ( STDMETHODCALLTYPE *get_HasAttributes )(
            IZcadMInsertBlock * This,
             VARIANT_BOOL *bHas);

         HRESULT ( STDMETHODCALLTYPE *get_EffectiveName )(
            IZcadMInsertBlock * This,
             BSTR *effectiveName);

         HRESULT ( STDMETHODCALLTYPE *get_IsDynamicBlock )(
            IZcadMInsertBlock * This,
             VARIANT_BOOL *pDynamicBlock);

         HRESULT ( STDMETHODCALLTYPE *GetDynamicBlockProperties )(
            IZcadMInsertBlock * This,
             VARIANT *dynamicPropertyArray);

         HRESULT ( STDMETHODCALLTYPE *ResetBlock )(
            IZcadMInsertBlock * This);

         HRESULT ( STDMETHODCALLTYPE *ConvertToAnonymousBlock )(
            IZcadMInsertBlock * This);

         HRESULT ( STDMETHODCALLTYPE *ConvertToStaticBlock )(
            IZcadMInsertBlock * This,
             BSTR newBlockName);

         HRESULT ( STDMETHODCALLTYPE *get_XEffectiveScaleFactor )(
            IZcadMInsertBlock * This,
             ZCAD_NOUNITS *scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *put_XEffectiveScaleFactor )(
            IZcadMInsertBlock * This,
             ZCAD_NOUNITS scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *get_YEffectiveScaleFactor )(
            IZcadMInsertBlock * This,
             ZCAD_NOUNITS *scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *put_YEffectiveScaleFactor )(
            IZcadMInsertBlock * This,
             ZCAD_NOUNITS scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *get_ZEffectiveScaleFactor )(
            IZcadMInsertBlock * This,
             ZCAD_NOUNITS *scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *put_ZEffectiveScaleFactor )(
            IZcadMInsertBlock * This,
             ZCAD_NOUNITS scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *get_InsUnits )(
            IZcadMInsertBlock * This,
             BSTR *units);

         HRESULT ( STDMETHODCALLTYPE *get_InsUnitsFactor )(
            IZcadMInsertBlock * This,
             double *factor);

         HRESULT ( STDMETHODCALLTYPE *put_Columns )(
            IZcadMInsertBlock * This,
             long NumColumns);

         HRESULT ( STDMETHODCALLTYPE *get_Columns )(
            IZcadMInsertBlock * This,
             long *NumColumns);

         HRESULT ( STDMETHODCALLTYPE *put_ColumnSpacing )(
            IZcadMInsertBlock * This,
             double Spacing);

         HRESULT ( STDMETHODCALLTYPE *get_ColumnSpacing )(
            IZcadMInsertBlock * This,
             double *Spacing);

         HRESULT ( STDMETHODCALLTYPE *put_Rows )(
            IZcadMInsertBlock * This,
             long NumRows);

         HRESULT ( STDMETHODCALLTYPE *get_Rows )(
            IZcadMInsertBlock * This,
             long *NumRows);

         HRESULT ( STDMETHODCALLTYPE *put_RowSpacing )(
            IZcadMInsertBlock * This,
             double Spacing);

         HRESULT ( STDMETHODCALLTYPE *get_RowSpacing )(
            IZcadMInsertBlock * This,
             double *Spacing);

        END_INTERFACE
    } IZcadMInsertBlockVtbl;

    interface IZcadMInsertBlock
    {
        CONST_VTBL struct IZcadMInsertBlockVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadMInsertBlock_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadMInsertBlock_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadMInsertBlock_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadMInsertBlock_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadMInsertBlock_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadMInsertBlock_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadMInsertBlock_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadMInsertBlock_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadMInsertBlock_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadMInsertBlock_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadMInsertBlock_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadMInsertBlock_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadMInsertBlock_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadMInsertBlock_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadMInsertBlock_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadMInsertBlock_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadMInsertBlock_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadMInsertBlock_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadMInsertBlock_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadMInsertBlock_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadMInsertBlock_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadMInsertBlock_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadMInsertBlock_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadMInsertBlock_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadMInsertBlock_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadMInsertBlock_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadMInsertBlock_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadMInsertBlock_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadMInsertBlock_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadMInsertBlock_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadMInsertBlock_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadMInsertBlock_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadMInsertBlock_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadMInsertBlock_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadMInsertBlock_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadMInsertBlock_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadMInsertBlock_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadMInsertBlock_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadMInsertBlock_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadMInsertBlock_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadMInsertBlock_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadMInsertBlock_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadMInsertBlock_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadMInsertBlock_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadMInsertBlock_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadMInsertBlock_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadMInsertBlock_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadMInsertBlock_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadMInsertBlock_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadMInsertBlock_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadMInsertBlock_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadMInsertBlock_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadMInsertBlock_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadMInsertBlock_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadMInsertBlock_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadMInsertBlock_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadMInsertBlock_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadMInsertBlock_get_InsertionPoint(This,insPoint)	\
    ((This)->lpVtbl -> get_InsertionPoint(This,insPoint))

#define IZcadMInsertBlock_put_InsertionPoint(This,insPoint)	\
    ((This)->lpVtbl -> put_InsertionPoint(This,insPoint))

#define IZcadMInsertBlock_get_Name(This,bstrName)	\
    ((This)->lpVtbl -> get_Name(This,bstrName))

#define IZcadMInsertBlock_put_Name(This,bstrName)	\
    ((This)->lpVtbl -> put_Name(This,bstrName))

#define IZcadMInsertBlock_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadMInsertBlock_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadMInsertBlock_get_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_Rotation(This,rotAngle))

#define IZcadMInsertBlock_put_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_Rotation(This,rotAngle))

#define IZcadMInsertBlock_get_XScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> get_XScaleFactor(This,scaleFactor))

#define IZcadMInsertBlock_put_XScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> put_XScaleFactor(This,scaleFactor))

#define IZcadMInsertBlock_get_YScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> get_YScaleFactor(This,scaleFactor))

#define IZcadMInsertBlock_put_YScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> put_YScaleFactor(This,scaleFactor))

#define IZcadMInsertBlock_get_ZScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> get_ZScaleFactor(This,scaleFactor))

#define IZcadMInsertBlock_put_ZScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> put_ZScaleFactor(This,scaleFactor))

#define IZcadMInsertBlock_Explode(This,pArrayObjs)	\
    ((This)->lpVtbl -> Explode(This,pArrayObjs))

#define IZcadMInsertBlock_GetAttributes(This,pAttrObjs)	\
    ((This)->lpVtbl -> GetAttributes(This,pAttrObjs))

#define IZcadMInsertBlock_GetConstantAttributes(This,pAttrObjs)	\
    ((This)->lpVtbl -> GetConstantAttributes(This,pAttrObjs))

#define IZcadMInsertBlock_get_HasAttributes(This,bHas)	\
    ((This)->lpVtbl -> get_HasAttributes(This,bHas))

#define IZcadMInsertBlock_get_EffectiveName(This,effectiveName)	\
    ((This)->lpVtbl -> get_EffectiveName(This,effectiveName))

#define IZcadMInsertBlock_get_IsDynamicBlock(This,pDynamicBlock)	\
    ((This)->lpVtbl -> get_IsDynamicBlock(This,pDynamicBlock))

#define IZcadMInsertBlock_GetDynamicBlockProperties(This,dynamicPropertyArray)	\
    ((This)->lpVtbl -> GetDynamicBlockProperties(This,dynamicPropertyArray))

#define IZcadMInsertBlock_ResetBlock(This)	\
    ((This)->lpVtbl -> ResetBlock(This))

#define IZcadMInsertBlock_ConvertToAnonymousBlock(This)	\
    ((This)->lpVtbl -> ConvertToAnonymousBlock(This))

#define IZcadMInsertBlock_ConvertToStaticBlock(This,newBlockName)	\
    ((This)->lpVtbl -> ConvertToStaticBlock(This,newBlockName))

#define IZcadMInsertBlock_get_XEffectiveScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> get_XEffectiveScaleFactor(This,scaleFactor))

#define IZcadMInsertBlock_put_XEffectiveScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> put_XEffectiveScaleFactor(This,scaleFactor))

#define IZcadMInsertBlock_get_YEffectiveScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> get_YEffectiveScaleFactor(This,scaleFactor))

#define IZcadMInsertBlock_put_YEffectiveScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> put_YEffectiveScaleFactor(This,scaleFactor))

#define IZcadMInsertBlock_get_ZEffectiveScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> get_ZEffectiveScaleFactor(This,scaleFactor))

#define IZcadMInsertBlock_put_ZEffectiveScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> put_ZEffectiveScaleFactor(This,scaleFactor))

#define IZcadMInsertBlock_get_InsUnits(This,units)	\
    ((This)->lpVtbl -> get_InsUnits(This,units))

#define IZcadMInsertBlock_get_InsUnitsFactor(This,factor)	\
    ((This)->lpVtbl -> get_InsUnitsFactor(This,factor))


#define IZcadMInsertBlock_put_Columns(This,NumColumns)	\
    ((This)->lpVtbl -> put_Columns(This,NumColumns))

#define IZcadMInsertBlock_get_Columns(This,NumColumns)	\
    ((This)->lpVtbl -> get_Columns(This,NumColumns))

#define IZcadMInsertBlock_put_ColumnSpacing(This,Spacing)	\
    ((This)->lpVtbl -> put_ColumnSpacing(This,Spacing))

#define IZcadMInsertBlock_get_ColumnSpacing(This,Spacing)	\
    ((This)->lpVtbl -> get_ColumnSpacing(This,Spacing))

#define IZcadMInsertBlock_put_Rows(This,NumRows)	\
    ((This)->lpVtbl -> put_Rows(This,NumRows))

#define IZcadMInsertBlock_get_Rows(This,NumRows)	\
    ((This)->lpVtbl -> get_Rows(This,NumRows))

#define IZcadMInsertBlock_put_RowSpacing(This,Spacing)	\
    ((This)->lpVtbl -> put_RowSpacing(This,Spacing))

#define IZcadMInsertBlock_get_RowSpacing(This,Spacing)	\
    ((This)->lpVtbl -> get_RowSpacing(This,Spacing))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadMInsertBlock,0xEC9230F1,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9230F1-5A17-11E7-B72E-BC5FF42AC839")
ZcadMInsertBlock;
#endif

#ifndef __IZcadPolyfaceMesh_INTERFACE_DEFINED__
#define __IZcadPolyfaceMesh_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadPolyfaceMesh,0xEC923114,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923114-5A17-11E7-B72E-BC5FF42AC839")
    IZcadPolyfaceMesh : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE put_Coordinates(
             VARIANT Vertices) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Coordinates(
             VARIANT *Vertices) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Coordinate(
             int Index,
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Coordinate(
             int Index,
             VARIANT newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_NumberOfVertices(
             long *NumVertices) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_NumberOfFaces(
             long *NumFaces) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Faces(
             VARIANT Faces) = 0;

    };

#else

    typedef struct IZcadPolyfaceMeshVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadPolyfaceMesh * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadPolyfaceMesh * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadPolyfaceMesh * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadPolyfaceMesh * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadPolyfaceMesh * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadPolyfaceMesh * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadPolyfaceMesh * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadPolyfaceMesh * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadPolyfaceMesh * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadPolyfaceMesh * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadPolyfaceMesh * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadPolyfaceMesh * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadPolyfaceMesh * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadPolyfaceMesh * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadPolyfaceMesh * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadPolyfaceMesh * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadPolyfaceMesh * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadPolyfaceMesh * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadPolyfaceMesh * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadPolyfaceMesh * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadPolyfaceMesh * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadPolyfaceMesh * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadPolyfaceMesh * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadPolyfaceMesh * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadPolyfaceMesh * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadPolyfaceMesh * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadPolyfaceMesh * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadPolyfaceMesh * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadPolyfaceMesh * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadPolyfaceMesh * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadPolyfaceMesh * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadPolyfaceMesh * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadPolyfaceMesh * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadPolyfaceMesh * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadPolyfaceMesh * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadPolyfaceMesh * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadPolyfaceMesh * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadPolyfaceMesh * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadPolyfaceMesh * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadPolyfaceMesh * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadPolyfaceMesh * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadPolyfaceMesh * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadPolyfaceMesh * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadPolyfaceMesh * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadPolyfaceMesh * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadPolyfaceMesh * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadPolyfaceMesh * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadPolyfaceMesh * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadPolyfaceMesh * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadPolyfaceMesh * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadPolyfaceMesh * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadPolyfaceMesh * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadPolyfaceMesh * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadPolyfaceMesh * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadPolyfaceMesh * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadPolyfaceMesh * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadPolyfaceMesh * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *put_Coordinates )(
            IZcadPolyfaceMesh * This,
             VARIANT Vertices);

         HRESULT ( STDMETHODCALLTYPE *get_Coordinates )(
            IZcadPolyfaceMesh * This,
             VARIANT *Vertices);

         HRESULT ( STDMETHODCALLTYPE *get_Coordinate )(
            IZcadPolyfaceMesh * This,
             int Index,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_Coordinate )(
            IZcadPolyfaceMesh * This,
             int Index,
             VARIANT newVal);

         HRESULT ( STDMETHODCALLTYPE *get_NumberOfVertices )(
            IZcadPolyfaceMesh * This,
             long *NumVertices);

         HRESULT ( STDMETHODCALLTYPE *get_NumberOfFaces )(
            IZcadPolyfaceMesh * This,
             long *NumFaces);

         HRESULT ( STDMETHODCALLTYPE *put_Faces )(
            IZcadPolyfaceMesh * This,
             VARIANT Faces);

        END_INTERFACE
    } IZcadPolyfaceMeshVtbl;

    interface IZcadPolyfaceMesh
    {
        CONST_VTBL struct IZcadPolyfaceMeshVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadPolyfaceMesh_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadPolyfaceMesh_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadPolyfaceMesh_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadPolyfaceMesh_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadPolyfaceMesh_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadPolyfaceMesh_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadPolyfaceMesh_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadPolyfaceMesh_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadPolyfaceMesh_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadPolyfaceMesh_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadPolyfaceMesh_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadPolyfaceMesh_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadPolyfaceMesh_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadPolyfaceMesh_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadPolyfaceMesh_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadPolyfaceMesh_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadPolyfaceMesh_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadPolyfaceMesh_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadPolyfaceMesh_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadPolyfaceMesh_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadPolyfaceMesh_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadPolyfaceMesh_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadPolyfaceMesh_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadPolyfaceMesh_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadPolyfaceMesh_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadPolyfaceMesh_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadPolyfaceMesh_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadPolyfaceMesh_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadPolyfaceMesh_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadPolyfaceMesh_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadPolyfaceMesh_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadPolyfaceMesh_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadPolyfaceMesh_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadPolyfaceMesh_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadPolyfaceMesh_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadPolyfaceMesh_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadPolyfaceMesh_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadPolyfaceMesh_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadPolyfaceMesh_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadPolyfaceMesh_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadPolyfaceMesh_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadPolyfaceMesh_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadPolyfaceMesh_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadPolyfaceMesh_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadPolyfaceMesh_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadPolyfaceMesh_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadPolyfaceMesh_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadPolyfaceMesh_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadPolyfaceMesh_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadPolyfaceMesh_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadPolyfaceMesh_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadPolyfaceMesh_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadPolyfaceMesh_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadPolyfaceMesh_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadPolyfaceMesh_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadPolyfaceMesh_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadPolyfaceMesh_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadPolyfaceMesh_put_Coordinates(This,Vertices)	\
    ((This)->lpVtbl -> put_Coordinates(This,Vertices))

#define IZcadPolyfaceMesh_get_Coordinates(This,Vertices)	\
    ((This)->lpVtbl -> get_Coordinates(This,Vertices))

#define IZcadPolyfaceMesh_get_Coordinate(This,Index,pVal)	\
    ((This)->lpVtbl -> get_Coordinate(This,Index,pVal))

#define IZcadPolyfaceMesh_put_Coordinate(This,Index,newVal)	\
    ((This)->lpVtbl -> put_Coordinate(This,Index,newVal))

#define IZcadPolyfaceMesh_get_NumberOfVertices(This,NumVertices)	\
    ((This)->lpVtbl -> get_NumberOfVertices(This,NumVertices))

#define IZcadPolyfaceMesh_get_NumberOfFaces(This,NumFaces)	\
    ((This)->lpVtbl -> get_NumberOfFaces(This,NumFaces))

#define IZcadPolyfaceMesh_put_Faces(This,Faces)	\
    ((This)->lpVtbl -> put_Faces(This,Faces))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadPolyfaceMesh,0xEC9231F8,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9231F8-5A17-11E7-B72E-BC5FF42AC839")
ZcadPolyfaceMesh;
#endif

#ifndef __IZcadMLine_INTERFACE_DEFINED__
#define __IZcadMLine_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadMLine,0xEC9231D9,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9231D9-5A17-11E7-B72E-BC5FF42AC839")
    IZcadMLine : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_StyleName(
             BSTR *Name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Coordinates(
             VARIANT *vertices) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Coordinates(
             VARIANT vertices) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Justification(
             ZcMLineJustification *justification) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Justification(
             ZcMLineJustification justification) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MLineScale(
             double *scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_MLineScale(
             double scale) = 0;

    };

#else

    typedef struct IZcadMLineVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadMLine * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadMLine * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadMLine * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadMLine * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadMLine * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadMLine * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadMLine * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadMLine * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadMLine * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadMLine * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadMLine * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadMLine * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadMLine * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadMLine * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadMLine * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadMLine * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadMLine * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadMLine * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadMLine * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadMLine * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadMLine * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadMLine * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadMLine * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadMLine * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadMLine * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadMLine * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadMLine * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadMLine * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadMLine * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadMLine * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadMLine * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadMLine * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadMLine * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadMLine * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadMLine * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadMLine * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadMLine * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadMLine * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadMLine * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadMLine * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadMLine * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadMLine * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadMLine * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadMLine * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadMLine * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadMLine * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadMLine * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadMLine * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadMLine * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadMLine * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadMLine * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadMLine * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadMLine * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadMLine * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadMLine * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadMLine * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadMLine * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_StyleName )(
            IZcadMLine * This,
             BSTR *Name);

         HRESULT ( STDMETHODCALLTYPE *get_Coordinates )(
            IZcadMLine * This,
             VARIANT *vertices);

         HRESULT ( STDMETHODCALLTYPE *put_Coordinates )(
            IZcadMLine * This,
             VARIANT vertices);

         HRESULT ( STDMETHODCALLTYPE *get_Justification )(
            IZcadMLine * This,
             ZcMLineJustification *justification);

         HRESULT ( STDMETHODCALLTYPE *put_Justification )(
            IZcadMLine * This,
             ZcMLineJustification justification);

         HRESULT ( STDMETHODCALLTYPE *get_MLineScale )(
            IZcadMLine * This,
             double *scale);

         HRESULT ( STDMETHODCALLTYPE *put_MLineScale )(
            IZcadMLine * This,
             double scale);

        END_INTERFACE
    } IZcadMLineVtbl;

    interface IZcadMLine
    {
        CONST_VTBL struct IZcadMLineVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadMLine_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadMLine_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadMLine_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadMLine_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadMLine_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadMLine_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadMLine_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadMLine_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadMLine_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadMLine_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadMLine_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadMLine_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadMLine_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadMLine_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadMLine_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadMLine_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadMLine_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadMLine_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadMLine_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadMLine_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadMLine_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadMLine_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadMLine_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadMLine_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadMLine_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadMLine_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadMLine_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadMLine_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadMLine_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadMLine_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadMLine_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadMLine_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadMLine_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadMLine_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadMLine_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadMLine_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadMLine_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadMLine_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadMLine_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadMLine_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadMLine_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadMLine_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadMLine_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadMLine_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadMLine_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadMLine_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadMLine_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadMLine_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadMLine_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadMLine_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadMLine_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadMLine_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadMLine_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadMLine_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadMLine_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadMLine_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadMLine_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadMLine_get_StyleName(This,Name)	\
    ((This)->lpVtbl -> get_StyleName(This,Name))

#define IZcadMLine_get_Coordinates(This,vertices)	\
    ((This)->lpVtbl -> get_Coordinates(This,vertices))

#define IZcadMLine_put_Coordinates(This,vertices)	\
    ((This)->lpVtbl -> put_Coordinates(This,vertices))

#define IZcadMLine_get_Justification(This,justification)	\
    ((This)->lpVtbl -> get_Justification(This,justification))

#define IZcadMLine_put_Justification(This,justification)	\
    ((This)->lpVtbl -> put_Justification(This,justification))

#define IZcadMLine_get_MLineScale(This,scale)	\
    ((This)->lpVtbl -> get_MLineScale(This,scale))

#define IZcadMLine_put_MLineScale(This,scale)	\
    ((This)->lpVtbl -> put_MLineScale(This,scale))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadMLine,0xEC9230C1,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9230C1-5A17-11E7-B72E-BC5FF42AC839")
ZcadMLine;
#endif

#ifndef __IZcadExternalReference_INTERFACE_DEFINED__
#define __IZcadExternalReference_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadExternalReference,0xEC923029,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923029-5A17-11E7-B72E-BC5FF42AC839")
    IZcadExternalReference : public IZcadBlockReference
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Path(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Path(
             BSTR bstrName) = 0;

    };

#else

    typedef struct IZcadExternalReferenceVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadExternalReference * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadExternalReference * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadExternalReference * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadExternalReference * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadExternalReference * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadExternalReference * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadExternalReference * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadExternalReference * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadExternalReference * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadExternalReference * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadExternalReference * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadExternalReference * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadExternalReference * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadExternalReference * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadExternalReference * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadExternalReference * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadExternalReference * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadExternalReference * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadExternalReference * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadExternalReference * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadExternalReference * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadExternalReference * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadExternalReference * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadExternalReference * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadExternalReference * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadExternalReference * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadExternalReference * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadExternalReference * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadExternalReference * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadExternalReference * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadExternalReference * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadExternalReference * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadExternalReference * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadExternalReference * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadExternalReference * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadExternalReference * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadExternalReference * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadExternalReference * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadExternalReference * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadExternalReference * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadExternalReference * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadExternalReference * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadExternalReference * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadExternalReference * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadExternalReference * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadExternalReference * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadExternalReference * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadExternalReference * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadExternalReference * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadExternalReference * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadExternalReference * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadExternalReference * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadExternalReference * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadExternalReference * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadExternalReference * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadExternalReference * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadExternalReference * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )(
            IZcadExternalReference * This,
             VARIANT *insPoint);

         HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )(
            IZcadExternalReference * This,
             VARIANT insPoint);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadExternalReference * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadExternalReference * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadExternalReference * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadExternalReference * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_Rotation )(
            IZcadExternalReference * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_Rotation )(
            IZcadExternalReference * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_XScaleFactor )(
            IZcadExternalReference * This,
             ZCAD_NOUNITS *scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *put_XScaleFactor )(
            IZcadExternalReference * This,
             ZCAD_NOUNITS scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *get_YScaleFactor )(
            IZcadExternalReference * This,
             ZCAD_NOUNITS *scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *put_YScaleFactor )(
            IZcadExternalReference * This,
             ZCAD_NOUNITS scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *get_ZScaleFactor )(
            IZcadExternalReference * This,
             ZCAD_NOUNITS *scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *put_ZScaleFactor )(
            IZcadExternalReference * This,
             ZCAD_NOUNITS scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *Explode )(
            IZcadExternalReference * This,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *GetAttributes )(
            IZcadExternalReference * This,
             VARIANT *pAttrObjs);

         HRESULT ( STDMETHODCALLTYPE *GetConstantAttributes )(
            IZcadExternalReference * This,
             VARIANT *pAttrObjs);

         HRESULT ( STDMETHODCALLTYPE *get_HasAttributes )(
            IZcadExternalReference * This,
             VARIANT_BOOL *bHas);

         HRESULT ( STDMETHODCALLTYPE *get_EffectiveName )(
            IZcadExternalReference * This,
             BSTR *effectiveName);

         HRESULT ( STDMETHODCALLTYPE *get_IsDynamicBlock )(
            IZcadExternalReference * This,
             VARIANT_BOOL *pDynamicBlock);

         HRESULT ( STDMETHODCALLTYPE *GetDynamicBlockProperties )(
            IZcadExternalReference * This,
             VARIANT *dynamicPropertyArray);

         HRESULT ( STDMETHODCALLTYPE *ResetBlock )(
            IZcadExternalReference * This);

         HRESULT ( STDMETHODCALLTYPE *ConvertToAnonymousBlock )(
            IZcadExternalReference * This);

         HRESULT ( STDMETHODCALLTYPE *ConvertToStaticBlock )(
            IZcadExternalReference * This,
             BSTR newBlockName);

         HRESULT ( STDMETHODCALLTYPE *get_XEffectiveScaleFactor )(
            IZcadExternalReference * This,
             ZCAD_NOUNITS *scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *put_XEffectiveScaleFactor )(
            IZcadExternalReference * This,
             ZCAD_NOUNITS scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *get_YEffectiveScaleFactor )(
            IZcadExternalReference * This,
             ZCAD_NOUNITS *scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *put_YEffectiveScaleFactor )(
            IZcadExternalReference * This,
             ZCAD_NOUNITS scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *get_ZEffectiveScaleFactor )(
            IZcadExternalReference * This,
             ZCAD_NOUNITS *scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *put_ZEffectiveScaleFactor )(
            IZcadExternalReference * This,
             ZCAD_NOUNITS scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *get_InsUnits )(
            IZcadExternalReference * This,
             BSTR *units);

         HRESULT ( STDMETHODCALLTYPE *get_InsUnitsFactor )(
            IZcadExternalReference * This,
             double *factor);

         HRESULT ( STDMETHODCALLTYPE *get_Path )(
            IZcadExternalReference * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Path )(
            IZcadExternalReference * This,
             BSTR bstrName);

        END_INTERFACE
    } IZcadExternalReferenceVtbl;

    interface IZcadExternalReference
    {
        CONST_VTBL struct IZcadExternalReferenceVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadExternalReference_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadExternalReference_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadExternalReference_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadExternalReference_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadExternalReference_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadExternalReference_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadExternalReference_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadExternalReference_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadExternalReference_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadExternalReference_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadExternalReference_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadExternalReference_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadExternalReference_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadExternalReference_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadExternalReference_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadExternalReference_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadExternalReference_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadExternalReference_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadExternalReference_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadExternalReference_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadExternalReference_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadExternalReference_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadExternalReference_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadExternalReference_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadExternalReference_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadExternalReference_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadExternalReference_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadExternalReference_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadExternalReference_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadExternalReference_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadExternalReference_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadExternalReference_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadExternalReference_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadExternalReference_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadExternalReference_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadExternalReference_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadExternalReference_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadExternalReference_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadExternalReference_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadExternalReference_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadExternalReference_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadExternalReference_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadExternalReference_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadExternalReference_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadExternalReference_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadExternalReference_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadExternalReference_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadExternalReference_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadExternalReference_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadExternalReference_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadExternalReference_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadExternalReference_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadExternalReference_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadExternalReference_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadExternalReference_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadExternalReference_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadExternalReference_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadExternalReference_get_InsertionPoint(This,insPoint)	\
    ((This)->lpVtbl -> get_InsertionPoint(This,insPoint))

#define IZcadExternalReference_put_InsertionPoint(This,insPoint)	\
    ((This)->lpVtbl -> put_InsertionPoint(This,insPoint))

#define IZcadExternalReference_get_Name(This,bstrName)	\
    ((This)->lpVtbl -> get_Name(This,bstrName))

#define IZcadExternalReference_put_Name(This,bstrName)	\
    ((This)->lpVtbl -> put_Name(This,bstrName))

#define IZcadExternalReference_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadExternalReference_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadExternalReference_get_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_Rotation(This,rotAngle))

#define IZcadExternalReference_put_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_Rotation(This,rotAngle))

#define IZcadExternalReference_get_XScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> get_XScaleFactor(This,scaleFactor))

#define IZcadExternalReference_put_XScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> put_XScaleFactor(This,scaleFactor))

#define IZcadExternalReference_get_YScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> get_YScaleFactor(This,scaleFactor))

#define IZcadExternalReference_put_YScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> put_YScaleFactor(This,scaleFactor))

#define IZcadExternalReference_get_ZScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> get_ZScaleFactor(This,scaleFactor))

#define IZcadExternalReference_put_ZScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> put_ZScaleFactor(This,scaleFactor))

#define IZcadExternalReference_Explode(This,pArrayObjs)	\
    ((This)->lpVtbl -> Explode(This,pArrayObjs))

#define IZcadExternalReference_GetAttributes(This,pAttrObjs)	\
    ((This)->lpVtbl -> GetAttributes(This,pAttrObjs))

#define IZcadExternalReference_GetConstantAttributes(This,pAttrObjs)	\
    ((This)->lpVtbl -> GetConstantAttributes(This,pAttrObjs))

#define IZcadExternalReference_get_HasAttributes(This,bHas)	\
    ((This)->lpVtbl -> get_HasAttributes(This,bHas))

#define IZcadExternalReference_get_EffectiveName(This,effectiveName)	\
    ((This)->lpVtbl -> get_EffectiveName(This,effectiveName))

#define IZcadExternalReference_get_IsDynamicBlock(This,pDynamicBlock)	\
    ((This)->lpVtbl -> get_IsDynamicBlock(This,pDynamicBlock))

#define IZcadExternalReference_GetDynamicBlockProperties(This,dynamicPropertyArray)	\
    ((This)->lpVtbl -> GetDynamicBlockProperties(This,dynamicPropertyArray))

#define IZcadExternalReference_ResetBlock(This)	\
    ((This)->lpVtbl -> ResetBlock(This))

#define IZcadExternalReference_ConvertToAnonymousBlock(This)	\
    ((This)->lpVtbl -> ConvertToAnonymousBlock(This))

#define IZcadExternalReference_ConvertToStaticBlock(This,newBlockName)	\
    ((This)->lpVtbl -> ConvertToStaticBlock(This,newBlockName))

#define IZcadExternalReference_get_XEffectiveScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> get_XEffectiveScaleFactor(This,scaleFactor))

#define IZcadExternalReference_put_XEffectiveScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> put_XEffectiveScaleFactor(This,scaleFactor))

#define IZcadExternalReference_get_YEffectiveScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> get_YEffectiveScaleFactor(This,scaleFactor))

#define IZcadExternalReference_put_YEffectiveScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> put_YEffectiveScaleFactor(This,scaleFactor))

#define IZcadExternalReference_get_ZEffectiveScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> get_ZEffectiveScaleFactor(This,scaleFactor))

#define IZcadExternalReference_put_ZEffectiveScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> put_ZEffectiveScaleFactor(This,scaleFactor))

#define IZcadExternalReference_get_InsUnits(This,units)	\
    ((This)->lpVtbl -> get_InsUnits(This,units))

#define IZcadExternalReference_get_InsUnitsFactor(This,factor)	\
    ((This)->lpVtbl -> get_InsUnitsFactor(This,factor))


#define IZcadExternalReference_get_Path(This,bstrName)	\
    ((This)->lpVtbl -> get_Path(This,bstrName))

#define IZcadExternalReference_put_Path(This,bstrName)	\
    ((This)->lpVtbl -> put_Path(This,bstrName))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadExternalReference,0xEC923009,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923009-5A17-11E7-B72E-BC5FF42AC839")
ZcadExternalReference;
#endif

#ifndef __IZcadTable_INTERFACE_DEFINED__
#define __IZcadTable_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadTable,0xEC9231D2,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9231D2-5A17-11E7-B72E-BC5FF42AC839")
    IZcadTable : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_StyleName(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StyleName(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Rows(
             int *pRows) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Rows(
             int nRows) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Columns(
             int *pColumns) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Columns(
             int nColumns) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_FlowDirection(
             ZcTableDirection *pFlow) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_FlowDirection(
             ZcTableDirection flow) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Width(
             double *pWidth) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Width(
             double fWidth) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Height(
             double *pHeight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Height(
             double fRowHeight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_VertCellMargin(
             double *pGap) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_VertCellMargin(
             double gap) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_HorzCellMargin(
             double *pGap) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_HorzCellMargin(
             double gap) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_InsertionPoint(
             VARIANT *insPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_InsertionPoint(
             VARIANT insPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetColumnWidth(
             int col,
             double *pWidth) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetColumnWidth(
             int col,
             double width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ColumnWidth(
             double width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetRowHeight(
             int row,
             double *pheight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetRowHeight(
             int row,
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_RowHeight(
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetMinimumColumnWidth(
             int col,
             double *pWidth) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetMinimumRowHeight(
             int row,
             double *pHeight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MinimumTableWidth(
             double *pWidth) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MinimumTableHeight(
             double *pHeight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Direction(
             VARIANT *directionVector) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Direction(
             VARIANT directionVector) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TitleSuppressed(
             VARIANT_BOOL *bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TitleSuppressed(
             VARIANT_BOOL bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_HeaderSuppressed(
             VARIANT_BOOL *bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_HeaderSuppressed(
             VARIANT_BOOL bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetAlignment(
             ZcRowType rowType,
             ZcCellAlignment *pCellAlignment) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetAlignment(
             int rowTypes,
             ZcCellAlignment cellAlignment) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetBackgroundColorNone(
             ZcRowType rowType,
             VARIANT_BOOL *bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetBackgroundColorNone(
             int rowTypes,
             VARIANT_BOOL *bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetBackgroundColor(
             ZcRowType rowType,
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetBackgroundColor(
             int rowTypes,
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetContentColor(
             ZcRowType rowType,
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetContentColor(
             int rowTypes,
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetTextStyle(
             ZcRowType rowType,
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetTextStyle(
             int rowTypes,
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetTextHeight(
             ZcRowType rowType,
             double *pTextHeight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetTextHeight(
             int rowTypes,
             double textHeight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetGridLineWeight(
             ZcGridLineType gridLineType,
             ZcRowType rowType,
             ZCAD_LWEIGHT *lineweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetGridLineWeight(
             int gridLineTypes,
             int rowTypes,
             ZCAD_LWEIGHT lineweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetGridColor(
             ZcGridLineType gridLineType,
             ZcRowType rowType,
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetGridColor(
             int gridLineTypes,
             int rowTypes,
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetGridVisibility(
             ZcGridLineType gridLineType,
             ZcRowType rowType,
             VARIANT_BOOL *bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetGridVisibility(
             int gridLineTypes,
             int rowTypes,
             VARIANT_BOOL bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TableStyleOverrides(
             VARIANT *pIntArray) = 0;

        virtual  HRESULT STDMETHODCALLTYPE ClearTableStyleOverrides(
             int flag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCellType(
             int row,
             int col,
             ZcCellType *pCellType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetCellType(
             int row,
             int col,
             ZcCellType CellType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCellExtents(
             int row,
             int col,
             VARIANT_BOOL bOuterCell,
             VARIANT *pPts) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetAttachmentPoint(
             int row,
             int col,
             VARIANT *pAttachmentPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCellAlignment(
             int row,
             int col,
             ZcCellAlignment *pCellAlignment) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetCellAlignment(
             int row,
             int col,
             ZcCellAlignment cellAlignment) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCellBackgroundColorNone(
             int row,
             int col,
             VARIANT_BOOL *bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetCellBackgroundColorNone(
             int row,
             int col,
             VARIANT_BOOL *bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCellBackgroundColor(
             int row,
             int col,
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetCellBackgroundColor(
             int row,
             int col,
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCellContentColor(
             int row,
             int col,
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetCellContentColor(
             int row,
             int col,
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCellStyleOverrides(
             int row,
             int col,
             VARIANT *pIntArray) = 0;

        virtual  HRESULT STDMETHODCALLTYPE DeleteCellContent(
             int row,
             int col) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetRowType(
             int row,
             ZcRowType *pRowType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetText(
             int row,
             int col,
             BSTR *pStr) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetText(
             int row,
             int col,
             BSTR pStr) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCellTextStyle(
             int row,
             int col,
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetCellTextStyle(
             int row,
             int col,
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCellTextHeight(
             int row,
             int col,
             double *pTextHeight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetCellTextHeight(
             int row,
             int col,
             double textHeight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetTextRotation(
             int row,
             int col,
             ZcRotationAngle *textRotation) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetTextRotation(
             int row,
             int col,
             ZcRotationAngle textRotation) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetAutoScale(
             int row,
             int col,
             VARIANT_BOOL *bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetAutoScale(
             int row,
             int col,
             VARIANT_BOOL *bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetBlockTableRecordId(
             int row,
             int col,
             LONG_PTR *blkId) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetBlockTableRecordId(
             int row,
             int col,
             LONG_PTR blkId,
             VARIANT_BOOL bAutoFit) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetBlockScale(
             int row,
             int col,
             double *blkScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetBlockScale(
             int row,
             int col,
             double blkScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetBlockRotation(
             int row,
             int col,
             double *blkRotation) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetBlockRotation(
             int row,
             int col,
             double blkRotation) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetBlockAttributeValue(
             int row,
             int col,
             LONG_PTR attdefId,
             BSTR *bstrValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetBlockAttributeValue(
             int row,
             int col,
             LONG_PTR attdefId,
             BSTR bstrValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCellGridLineWeight(
             int row,
             int col,
             ZcCellEdgeMask edge,
             ZCAD_LWEIGHT *plineweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetCellGridLineWeight(
             int row,
             int col,
             int edges,
             ZCAD_LWEIGHT lineweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCellGridColor(
             int row,
             int col,
             ZcCellEdgeMask edge,
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetCellGridColor(
             int row,
             int col,
             int edges,
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCellGridVisibility(
             int row,
             int col,
             ZcCellEdgeMask edge,
             VARIANT_BOOL *bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetCellGridVisibility(
             int row,
             int col,
             int edges,
             VARIANT_BOOL bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE InsertColumns(
             int col,
             double width,
             int cols) = 0;

        virtual  HRESULT STDMETHODCALLTYPE DeleteColumns(
             int col,
             int cols) = 0;

        virtual  HRESULT STDMETHODCALLTYPE InsertRows(
             int row,
             double height,
             int rows) = 0;

        virtual  HRESULT STDMETHODCALLTYPE DeleteRows(
             int row,
             int rows) = 0;

        virtual  HRESULT STDMETHODCALLTYPE MergeCells(
             int minRow,
             int maxRow,
             int minCol,
             int maxCol) = 0;

        virtual  HRESULT STDMETHODCALLTYPE UnmergeCells(
             int minRow,
             int maxRow,
             int minCol,
             int maxCol) = 0;

        virtual  HRESULT STDMETHODCALLTYPE IsMergedCell(
             int row,
             int col,
             int *minRow,
             int *maxRow,
             int *minCol,
             int *maxCol,
             VARIANT_BOOL *pbValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetFieldId(
             int row,
             int col,
             LONG_PTR *fieldId) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetFieldId(
             int row,
             int col,
             LONG_PTR fieldId) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GenerateLayout( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE RecomputeTableBlock(
             VARIANT_BOOL bForceUpdate) = 0;

        virtual  HRESULT STDMETHODCALLTYPE HitTest(
             VARIANT wpt,
             VARIANT wviewVec,
             int *resultRowIndex,
             int *resultColumnIndex,
             VARIANT_BOOL *bReturn) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Select(
             VARIANT wpt,
             VARIANT wvwVec,
             VARIANT wvwxVec,
             double wxaper,
             double wyaper,
             VARIANT_BOOL allowOutside,
             int *resultRowIndex,
             int *resultColumnIndex) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SelectSubRegion(
             VARIANT wpt1,
             VARIANT wpt2,
             VARIANT wvwVec,
             VARIANT wvwxVec,
             ZcSelectType seltype,
             VARIANT_BOOL bIncludeCurrentSelection,
             int *rowMin,
             int *rowMax,
             int *colMin,
             int *colMax) = 0;

        virtual  HRESULT STDMETHODCALLTYPE ReselectSubRegion( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetSubSelection(
             int *rowMin,
             int *rowMax,
             int *colMin,
             int *colMax) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetSubSelection(
             int rowMin,
             int rowMax,
             int colMin,
             int colMax) = 0;

        virtual  HRESULT STDMETHODCALLTYPE ClearSubSelection( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_HasSubSelection(
             VARIANT_BOOL *pbValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_RegenerateTableSuppressed(
             VARIANT_BOOL *bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_RegenerateTableSuppressed(
             VARIANT_BOOL bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetDataType(
             ZcRowType rowType,
             ZcValueDataType *pDataType,
             ZcValueUnitType *pUnitType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetDataType(
             int rowTypes,
             ZcValueDataType dataType,
             ZcValueUnitType unitType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetFormat(
             ZcRowType rowType,
             BSTR *pFormat) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetFormat(
             int rowTypes,
            BSTR pFormat) = 0;

        virtual  HRESULT STDMETHODCALLTYPE FormatValue(
             int row,
             int col,
            ZcFormatOption nOption,
            BSTR *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCellDataType(
             int row,
             int col,
             ZcValueDataType *pDataType,
             ZcValueUnitType *pUnitType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetCellDataType(
             int row,
             int col,
            ZcValueDataType dataType,
            ZcValueUnitType unitType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCellFormat(
             int row,
             int col,
             BSTR *pFormat) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetCellFormat(
             int row,
             int col,
            BSTR pFormat) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCellValue(
             int row,
             int col,
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetCellValue(
             int row,
             int col,
            VARIANT val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetCellValueFromText(
             int row,
             int col,
             BSTR val,
             ZcParseOption nOption) = 0;

        virtual  HRESULT STDMETHODCALLTYPE ResetCellValue(
             int row,
             int col) = 0;

        virtual  HRESULT STDMETHODCALLTYPE IsEmpty(
             int nRow,
             int nCol,
             VARIANT_BOOL *bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE CreateContent(
             int nRow,
             int nCol,
             int nIndex,
             int *pInt) = 0;

        virtual  HRESULT STDMETHODCALLTYPE MoveContent(
             int nRow,
             int nCol,
             int nFromIndex,
             int nToIndex) = 0;

        virtual  HRESULT STDMETHODCALLTYPE DeleteContent(
             int nRow,
             int nCol) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetValue(
             int nRow,
             int nCol,
             int nContent,
             VARIANT *pZcValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetValue(
             int nRow,
             int nCol,
             int nContent,
             VARIANT acValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetValueFromText(
             int nRow,
             int nCol,
             int nContent,
             BSTR szText,
             ZcParseOption nOption) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetDataFormat(
             int nRow,
             int nCol,
             int nContent,
             BSTR *pValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetDataFormat(
             int nRow,
             int nCol,
             int nContent,
             BSTR szFormat) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetTextString(
             int nRow,
             int nCol,
             int nContent,
             BSTR *pTextString) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetTextString(
             int nRow,
             int nCol,
             int nContent,
             BSTR text) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetFieldId2(
             int nRow,
             int nCol,
             int nContent,
             LONG_PTR *pZcDbObjectId) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetFieldId2(
             int nRow,
             int nCol,
             int nContent,
             LONG_PTR zcDbObjectId,
             ZcCellOption nflag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetBlockTableRecordId2(
             int nRow,
             int nCol,
             int nContent,
             LONG_PTR *pZcDbObjectId) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetBlockTableRecordId2(
             int nRow,
             int nCol,
             int nContent,
             LONG_PTR blkId,
             VARIANT_BOOL autoFit) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetBlockAttributeValue2(
             int nRow,
             int nCol,
             int nContent,
             LONG_PTR blkId,
             BSTR *value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetBlockAttributeValue2(
             int nRow,
             int nCol,
             int nContent,
             LONG_PTR blkId,
             BSTR value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCustomData(
             int nRow,
             int nCol,
             BSTR szKey,
             VARIANT *pData) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetCustomData(
             int nRow,
             int nCol,
             BSTR szKey,
             VARIANT data) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCellStyle(
             int nRow,
             int nCol,
             BSTR *pCellStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetCellStyle(
             int nRow,
             int nCol,
             BSTR szCellStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetContentColor2(
             int nRow,
             int nCol,
             int nContent,
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetContentColor2(
             int nRow,
             int nCol,
             int nContent,
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetDataType2(
             int nRow,
             int nCol,
             int nContent,
             ZcValueDataType *pDataType,
             ZcValueUnitType *pUnitType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetDataType2(
             int nRow,
             int nCol,
             int nContent,
             ZcValueDataType dataType,
             ZcValueUnitType unitType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetTextStyle2(
             int nRow,
             int nCol,
             int nContent,
             BSTR *pbstrStyleName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetTextStyle2(
             int nRow,
             int nCol,
             int nContent,
             BSTR bstrStyleName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetTextHeight2(
             int nRow,
             int nCol,
             int nContent,
             double *pHeight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetTextHeight2(
             int nRow,
             int nCol,
             int nContent,
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetRotation(
             int nRow,
             int nCol,
             int nContent,
             double *pValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetRotation(
             int nRow,
             int nCol,
             int nContent,
             double value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetAutoScale2(
             int nRow,
             int nCol,
             int nContent,
             VARIANT_BOOL *bAutoScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetAutoScale2(
             int nRow,
             int nCol,
             int nContent,
             VARIANT_BOOL bAutoFit) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetScale(
             int nRow,
             int nCol,
             int nContent,
             double *pScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetScale(
             int nRow,
             int nCol,
             int nContent,
             double scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE RemoveAllOverrides(
             int nRow,
             int nCol) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetGridLineWeight2(
             int nRow,
             int nCol,
             ZcGridLineType nGridLineType,
             ZCAD_LWEIGHT *pLineWeight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetGridLineWeight2(
             int nRow,
             int nCol,
             ZcGridLineType nGridLineType,
             ZCAD_LWEIGHT lineWeight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetGridLinetype(
             int nRow,
             int nCol,
             ZcGridLineType nGridLineType,
             LONG_PTR *pacDbObjId) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetGridLinetype(
             int nRow,
             int nCol,
             ZcGridLineType nGridLineType,
             LONG_PTR idLinetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetGridColor2(
             int nRow,
             int nCol,
             ZcGridLineType nGridLineType,
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetGridColor2(
             int nRow,
             int nCol,
             ZcGridLineType nGridLineType,
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetGridVisibility2(
             int nRow,
             int nCol,
             ZcGridLineType nGridLineType,
             VARIANT_BOOL *bVisible) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetGridVisibility2(
             int nRow,
             int nCol,
             ZcGridLineType nGridLineType,
             VARIANT_BOOL bVisible) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetGridDoubleLineSpacing(
             int nRow,
             int nCol,
             ZcGridLineType nGridLineType,
             double *pValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetGridDoubleLineSpacing(
             int nRow,
             int nCol,
             ZcGridLineType nGridLineType,
             double fSpacing) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_EnableBreak(
             VARIANT_BOOL bEnable) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetBreakHeight(
             int nIndex,
             double *pHeight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetBreakHeight(
             int nIndex,
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetContentType(
             int nRow,
             int nCol,
             ZcCellContentType *pType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetMargin(
             int nRow,
             int nCol,
             ZcCellMargin nMargin,
             double *pValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetMargin(
             int nRow,
             int nCol,
             ZcCellMargin nMargins,
             double fMargin) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetContentLayout(
             int row,
             int col,
             ZcCellContentLayout *pLayout) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetContentLayout(
             int row,
             int col,
             ZcCellContentLayout nLayout) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetOverride(
             int nRow,
             int nCol,
             int nContent,
             ZcCellProperty *pValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetOverride(
             int nRow,
             int nCol,
             int nContent,
             ZcCellProperty nProp) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetGridLineStyle(
             int nRow,
             int nCol,
             ZcGridLineType nGridLineType,
             ZcGridLineStyle *pStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetGridLineStyle(
             int nRow,
             int nCol,
             ZcGridLineType nGridLineTypes,
             ZcGridLineStyle nLineStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE InsertRowsAndInherit(
             int nIndex,
             int nInheritFrom,
             int nNumRows) = 0;

        virtual  HRESULT STDMETHODCALLTYPE InsertColumnsAndInherit(
             int col,
             int nInheritFrom,
             int nNumCols) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetHasFormula(
             int nRow,
             int nCol,
             int nContent,
             VARIANT_BOOL *bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetFormula(
             int nRow,
             int nCol,
             int nContent,
             BSTR *pszFormula) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetFormula(
             int nRow,
             int nCol,
             int nContent,
             BSTR pszFormula) = 0;

        virtual  HRESULT STDMETHODCALLTYPE IsContentEditable(
             int nRow,
             int nCol,
             VARIANT_BOOL *bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE IsFormatEditable(
             int nRow,
             int nCol,
             VARIANT_BOOL *bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCellState(
             int nRow,
             int nCol,
             ZcCellState *pCellState) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetCellState(
             int nRow,
             int nCol,
             ZcCellState nLock) = 0;

        virtual  HRESULT STDMETHODCALLTYPE EnableMergeAll(
             int nRow,
             int nCol,
             VARIANT_BOOL bEnable) = 0;

        virtual  HRESULT STDMETHODCALLTYPE IsMergeAllEnabled(
             int nRow,
             int nCol,
             VARIANT_BOOL *bValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BreaksEnabled(
             VARIANT_BOOL *bEnabled) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BreaksEnabled(
             VARIANT_BOOL bEnabled) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_RepeatTopLabels(
             VARIANT_BOOL *bEnabled) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_RepeatTopLabels(
             VARIANT_BOOL bEnabled) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_RepeatBottomLabels(
             VARIANT_BOOL *bEnabled) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_RepeatBottomLabels(
             VARIANT_BOOL bEnabled) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TableBreakFlowDirection(
             ZcTableFlowDirection *pDir) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TableBreakFlowDirection(
             ZcTableFlowDirection dir) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AllowManualPositions(
             VARIANT_BOOL *bEnabled) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AllowManualPositions(
             VARIANT_BOOL bEnabled) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AllowManualHeights(
             VARIANT_BOOL *bEnabled) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AllowManualHeights(
             VARIANT_BOOL bEnabled) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TableBreakHeight(
             double *pHeight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TableBreakHeight(
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BreakSpacing(
             double *pSpacing) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BreakSpacing(
             double spacing) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetColumnName(
             int nIndex,
             BSTR *name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetColumnName(
             int nIndex,
             BSTR name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetToolTip(
             int nRow,
             int nCol,
             BSTR tip) = 0;

    };

#else

    typedef struct IZcadTableVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadTable * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadTable * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadTable * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadTable * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadTable * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadTable * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadTable * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadTable * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadTable * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadTable * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadTable * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadTable * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadTable * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadTable * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadTable * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadTable * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadTable * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadTable * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadTable * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadTable * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadTable * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadTable * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadTable * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadTable * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadTable * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadTable * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadTable * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadTable * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadTable * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadTable * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadTable * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadTable * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadTable * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadTable * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadTable * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadTable * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadTable * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadTable * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadTable * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadTable * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadTable * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadTable * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadTable * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadTable * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadTable * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadTable * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadTable * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadTable * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadTable * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadTable * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadTable * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadTable * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadTable * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadTable * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadTable * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadTable * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadTable * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_StyleName )(
            IZcadTable * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_StyleName )(
            IZcadTable * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_Rows )(
            IZcadTable * This,
             int *pRows);

         HRESULT ( STDMETHODCALLTYPE *put_Rows )(
            IZcadTable * This,
             int nRows);

         HRESULT ( STDMETHODCALLTYPE *get_Columns )(
            IZcadTable * This,
             int *pColumns);

         HRESULT ( STDMETHODCALLTYPE *put_Columns )(
            IZcadTable * This,
             int nColumns);

         HRESULT ( STDMETHODCALLTYPE *get_FlowDirection )(
            IZcadTable * This,
             ZcTableDirection *pFlow);

         HRESULT ( STDMETHODCALLTYPE *put_FlowDirection )(
            IZcadTable * This,
             ZcTableDirection flow);

         HRESULT ( STDMETHODCALLTYPE *get_Width )(
            IZcadTable * This,
             double *pWidth);

         HRESULT ( STDMETHODCALLTYPE *put_Width )(
            IZcadTable * This,
             double fWidth);

         HRESULT ( STDMETHODCALLTYPE *get_Height )(
            IZcadTable * This,
             double *pHeight);

         HRESULT ( STDMETHODCALLTYPE *put_Height )(
            IZcadTable * This,
             double fRowHeight);

         HRESULT ( STDMETHODCALLTYPE *get_VertCellMargin )(
            IZcadTable * This,
             double *pGap);

         HRESULT ( STDMETHODCALLTYPE *put_VertCellMargin )(
            IZcadTable * This,
             double gap);

         HRESULT ( STDMETHODCALLTYPE *get_HorzCellMargin )(
            IZcadTable * This,
             double *pGap);

         HRESULT ( STDMETHODCALLTYPE *put_HorzCellMargin )(
            IZcadTable * This,
             double gap);

         HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )(
            IZcadTable * This,
             VARIANT *insPoint);

         HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )(
            IZcadTable * This,
             VARIANT insPoint);

         HRESULT ( STDMETHODCALLTYPE *GetColumnWidth )(
            IZcadTable * This,
             int col,
             double *pWidth);

         HRESULT ( STDMETHODCALLTYPE *SetColumnWidth )(
            IZcadTable * This,
             int col,
             double width);

         HRESULT ( STDMETHODCALLTYPE *put_ColumnWidth )(
            IZcadTable * This,
             double width);

         HRESULT ( STDMETHODCALLTYPE *GetRowHeight )(
            IZcadTable * This,
             int row,
             double *pheight);

         HRESULT ( STDMETHODCALLTYPE *SetRowHeight )(
            IZcadTable * This,
             int row,
             double height);

         HRESULT ( STDMETHODCALLTYPE *put_RowHeight )(
            IZcadTable * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *GetMinimumColumnWidth )(
            IZcadTable * This,
             int col,
             double *pWidth);

         HRESULT ( STDMETHODCALLTYPE *GetMinimumRowHeight )(
            IZcadTable * This,
             int row,
             double *pHeight);

         HRESULT ( STDMETHODCALLTYPE *get_MinimumTableWidth )(
            IZcadTable * This,
             double *pWidth);

         HRESULT ( STDMETHODCALLTYPE *get_MinimumTableHeight )(
            IZcadTable * This,
             double *pHeight);

         HRESULT ( STDMETHODCALLTYPE *get_Direction )(
            IZcadTable * This,
             VARIANT *directionVector);

         HRESULT ( STDMETHODCALLTYPE *put_Direction )(
            IZcadTable * This,
             VARIANT directionVector);

         HRESULT ( STDMETHODCALLTYPE *get_TitleSuppressed )(
            IZcadTable * This,
             VARIANT_BOOL *bValue);

         HRESULT ( STDMETHODCALLTYPE *put_TitleSuppressed )(
            IZcadTable * This,
             VARIANT_BOOL bValue);

         HRESULT ( STDMETHODCALLTYPE *get_HeaderSuppressed )(
            IZcadTable * This,
             VARIANT_BOOL *bValue);

         HRESULT ( STDMETHODCALLTYPE *put_HeaderSuppressed )(
            IZcadTable * This,
             VARIANT_BOOL bValue);

         HRESULT ( STDMETHODCALLTYPE *GetAlignment )(
            IZcadTable * This,
             ZcRowType rowType,
             ZcCellAlignment *pCellAlignment);

         HRESULT ( STDMETHODCALLTYPE *SetAlignment )(
            IZcadTable * This,
             int rowTypes,
             ZcCellAlignment cellAlignment);

         HRESULT ( STDMETHODCALLTYPE *GetBackgroundColorNone )(
            IZcadTable * This,
             ZcRowType rowType,
             VARIANT_BOOL *bValue);

         HRESULT ( STDMETHODCALLTYPE *SetBackgroundColorNone )(
            IZcadTable * This,
             int rowTypes,
             VARIANT_BOOL *bValue);

         HRESULT ( STDMETHODCALLTYPE *GetBackgroundColor )(
            IZcadTable * This,
             ZcRowType rowType,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *SetBackgroundColor )(
            IZcadTable * This,
             int rowTypes,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *GetContentColor )(
            IZcadTable * This,
             ZcRowType rowType,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *SetContentColor )(
            IZcadTable * This,
             int rowTypes,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *GetTextStyle )(
            IZcadTable * This,
             ZcRowType rowType,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *SetTextStyle )(
            IZcadTable * This,
             int rowTypes,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *GetTextHeight )(
            IZcadTable * This,
             ZcRowType rowType,
             double *pTextHeight);

         HRESULT ( STDMETHODCALLTYPE *SetTextHeight )(
            IZcadTable * This,
             int rowTypes,
             double textHeight);

         HRESULT ( STDMETHODCALLTYPE *GetGridLineWeight )(
            IZcadTable * This,
             ZcGridLineType gridLineType,
             ZcRowType rowType,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *SetGridLineWeight )(
            IZcadTable * This,
             int gridLineTypes,
             int rowTypes,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *GetGridColor )(
            IZcadTable * This,
             ZcGridLineType gridLineType,
             ZcRowType rowType,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *SetGridColor )(
            IZcadTable * This,
             int gridLineTypes,
             int rowTypes,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *GetGridVisibility )(
            IZcadTable * This,
             ZcGridLineType gridLineType,
             ZcRowType rowType,
             VARIANT_BOOL *bValue);

         HRESULT ( STDMETHODCALLTYPE *SetGridVisibility )(
            IZcadTable * This,
             int gridLineTypes,
             int rowTypes,
             VARIANT_BOOL bValue);

         HRESULT ( STDMETHODCALLTYPE *get_TableStyleOverrides )(
            IZcadTable * This,
             VARIANT *pIntArray);

         HRESULT ( STDMETHODCALLTYPE *ClearTableStyleOverrides )(
            IZcadTable * This,
             int flag);

         HRESULT ( STDMETHODCALLTYPE *GetCellType )(
            IZcadTable * This,
             int row,
             int col,
             ZcCellType *pCellType);

         HRESULT ( STDMETHODCALLTYPE *SetCellType )(
            IZcadTable * This,
             int row,
             int col,
             ZcCellType CellType);

         HRESULT ( STDMETHODCALLTYPE *GetCellExtents )(
            IZcadTable * This,
             int row,
             int col,
             VARIANT_BOOL bOuterCell,
             VARIANT *pPts);

         HRESULT ( STDMETHODCALLTYPE *GetAttachmentPoint )(
            IZcadTable * This,
             int row,
             int col,
             VARIANT *pAttachmentPoint);

         HRESULT ( STDMETHODCALLTYPE *GetCellAlignment )(
            IZcadTable * This,
             int row,
             int col,
             ZcCellAlignment *pCellAlignment);

         HRESULT ( STDMETHODCALLTYPE *SetCellAlignment )(
            IZcadTable * This,
             int row,
             int col,
             ZcCellAlignment cellAlignment);

         HRESULT ( STDMETHODCALLTYPE *GetCellBackgroundColorNone )(
            IZcadTable * This,
             int row,
             int col,
             VARIANT_BOOL *bValue);

         HRESULT ( STDMETHODCALLTYPE *SetCellBackgroundColorNone )(
            IZcadTable * This,
             int row,
             int col,
             VARIANT_BOOL *bValue);

         HRESULT ( STDMETHODCALLTYPE *GetCellBackgroundColor )(
            IZcadTable * This,
             int row,
             int col,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *SetCellBackgroundColor )(
            IZcadTable * This,
             int row,
             int col,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *GetCellContentColor )(
            IZcadTable * This,
             int row,
             int col,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *SetCellContentColor )(
            IZcadTable * This,
             int row,
             int col,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *GetCellStyleOverrides )(
            IZcadTable * This,
             int row,
             int col,
             VARIANT *pIntArray);

         HRESULT ( STDMETHODCALLTYPE *DeleteCellContent )(
            IZcadTable * This,
             int row,
             int col);

         HRESULT ( STDMETHODCALLTYPE *GetRowType )(
            IZcadTable * This,
             int row,
             ZcRowType *pRowType);

         HRESULT ( STDMETHODCALLTYPE *GetText )(
            IZcadTable * This,
             int row,
             int col,
             BSTR *pStr);

         HRESULT ( STDMETHODCALLTYPE *SetText )(
            IZcadTable * This,
             int row,
             int col,
             BSTR pStr);

         HRESULT ( STDMETHODCALLTYPE *GetCellTextStyle )(
            IZcadTable * This,
             int row,
             int col,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *SetCellTextStyle )(
            IZcadTable * This,
             int row,
             int col,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *GetCellTextHeight )(
            IZcadTable * This,
             int row,
             int col,
             double *pTextHeight);

         HRESULT ( STDMETHODCALLTYPE *SetCellTextHeight )(
            IZcadTable * This,
             int row,
             int col,
             double textHeight);

         HRESULT ( STDMETHODCALLTYPE *GetTextRotation )(
            IZcadTable * This,
             int row,
             int col,
             ZcRotationAngle *textRotation);

         HRESULT ( STDMETHODCALLTYPE *SetTextRotation )(
            IZcadTable * This,
             int row,
             int col,
             ZcRotationAngle textRotation);

         HRESULT ( STDMETHODCALLTYPE *GetAutoScale )(
            IZcadTable * This,
             int row,
             int col,
             VARIANT_BOOL *bValue);

         HRESULT ( STDMETHODCALLTYPE *SetAutoScale )(
            IZcadTable * This,
             int row,
             int col,
             VARIANT_BOOL *bValue);

         HRESULT ( STDMETHODCALLTYPE *GetBlockTableRecordId )(
            IZcadTable * This,
             int row,
             int col,
             LONG_PTR *blkId);

         HRESULT ( STDMETHODCALLTYPE *SetBlockTableRecordId )(
            IZcadTable * This,
             int row,
             int col,
             LONG_PTR blkId,
             VARIANT_BOOL bAutoFit);

         HRESULT ( STDMETHODCALLTYPE *GetBlockScale )(
            IZcadTable * This,
             int row,
             int col,
             double *blkScale);

         HRESULT ( STDMETHODCALLTYPE *SetBlockScale )(
            IZcadTable * This,
             int row,
             int col,
             double blkScale);

         HRESULT ( STDMETHODCALLTYPE *GetBlockRotation )(
            IZcadTable * This,
             int row,
             int col,
             double *blkRotation);

         HRESULT ( STDMETHODCALLTYPE *SetBlockRotation )(
            IZcadTable * This,
             int row,
             int col,
             double blkRotation);

         HRESULT ( STDMETHODCALLTYPE *GetBlockAttributeValue )(
            IZcadTable * This,
             int row,
             int col,
             LONG_PTR attdefId,
             BSTR *bstrValue);

         HRESULT ( STDMETHODCALLTYPE *SetBlockAttributeValue )(
            IZcadTable * This,
             int row,
             int col,
             LONG_PTR attdefId,
             BSTR bstrValue);

         HRESULT ( STDMETHODCALLTYPE *GetCellGridLineWeight )(
            IZcadTable * This,
             int row,
             int col,
             ZcCellEdgeMask edge,
             ZCAD_LWEIGHT *plineweight);

         HRESULT ( STDMETHODCALLTYPE *SetCellGridLineWeight )(
            IZcadTable * This,
             int row,
             int col,
             int edges,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *GetCellGridColor )(
            IZcadTable * This,
             int row,
             int col,
             ZcCellEdgeMask edge,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *SetCellGridColor )(
            IZcadTable * This,
             int row,
             int col,
             int edges,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *GetCellGridVisibility )(
            IZcadTable * This,
             int row,
             int col,
             ZcCellEdgeMask edge,
             VARIANT_BOOL *bValue);

         HRESULT ( STDMETHODCALLTYPE *SetCellGridVisibility )(
            IZcadTable * This,
             int row,
             int col,
             int edges,
             VARIANT_BOOL bValue);

         HRESULT ( STDMETHODCALLTYPE *InsertColumns )(
            IZcadTable * This,
             int col,
             double width,
             int cols);

         HRESULT ( STDMETHODCALLTYPE *DeleteColumns )(
            IZcadTable * This,
             int col,
             int cols);

         HRESULT ( STDMETHODCALLTYPE *InsertRows )(
            IZcadTable * This,
             int row,
             double height,
             int rows);

         HRESULT ( STDMETHODCALLTYPE *DeleteRows )(
            IZcadTable * This,
             int row,
             int rows);

         HRESULT ( STDMETHODCALLTYPE *MergeCells )(
            IZcadTable * This,
             int minRow,
             int maxRow,
             int minCol,
             int maxCol);

         HRESULT ( STDMETHODCALLTYPE *UnmergeCells )(
            IZcadTable * This,
             int minRow,
             int maxRow,
             int minCol,
             int maxCol);

         HRESULT ( STDMETHODCALLTYPE *IsMergedCell )(
            IZcadTable * This,
             int row,
             int col,
             int *minRow,
             int *maxRow,
             int *minCol,
             int *maxCol,
             VARIANT_BOOL *pbValue);

         HRESULT ( STDMETHODCALLTYPE *GetFieldId )(
            IZcadTable * This,
             int row,
             int col,
             LONG_PTR *fieldId);

         HRESULT ( STDMETHODCALLTYPE *SetFieldId )(
            IZcadTable * This,
             int row,
             int col,
             LONG_PTR fieldId);

         HRESULT ( STDMETHODCALLTYPE *GenerateLayout )(
            IZcadTable * This);

         HRESULT ( STDMETHODCALLTYPE *RecomputeTableBlock )(
            IZcadTable * This,
             VARIANT_BOOL bForceUpdate);

         HRESULT ( STDMETHODCALLTYPE *HitTest )(
            IZcadTable * This,
             VARIANT wpt,
             VARIANT wviewVec,
             int *resultRowIndex,
             int *resultColumnIndex,
             VARIANT_BOOL *bReturn);

         HRESULT ( STDMETHODCALLTYPE *Select )(
            IZcadTable * This,
             VARIANT wpt,
             VARIANT wvwVec,
             VARIANT wvwxVec,
             double wxaper,
             double wyaper,
             VARIANT_BOOL allowOutside,
             int *resultRowIndex,
             int *resultColumnIndex);

         HRESULT ( STDMETHODCALLTYPE *SelectSubRegion )(
            IZcadTable * This,
             VARIANT wpt1,
             VARIANT wpt2,
             VARIANT wvwVec,
             VARIANT wvwxVec,
             ZcSelectType seltype,
             VARIANT_BOOL bIncludeCurrentSelection,
             int *rowMin,
             int *rowMax,
             int *colMin,
             int *colMax);

         HRESULT ( STDMETHODCALLTYPE *ReselectSubRegion )(
            IZcadTable * This);

         HRESULT ( STDMETHODCALLTYPE *GetSubSelection )(
            IZcadTable * This,
             int *rowMin,
             int *rowMax,
             int *colMin,
             int *colMax);

         HRESULT ( STDMETHODCALLTYPE *SetSubSelection )(
            IZcadTable * This,
             int rowMin,
             int rowMax,
             int colMin,
             int colMax);

         HRESULT ( STDMETHODCALLTYPE *ClearSubSelection )(
            IZcadTable * This);

         HRESULT ( STDMETHODCALLTYPE *get_HasSubSelection )(
            IZcadTable * This,
             VARIANT_BOOL *pbValue);

         HRESULT ( STDMETHODCALLTYPE *get_RegenerateTableSuppressed )(
            IZcadTable * This,
             VARIANT_BOOL *bValue);

         HRESULT ( STDMETHODCALLTYPE *put_RegenerateTableSuppressed )(
            IZcadTable * This,
             VARIANT_BOOL bValue);

         HRESULT ( STDMETHODCALLTYPE *GetDataType )(
            IZcadTable * This,
             ZcRowType rowType,
             ZcValueDataType *pDataType,
             ZcValueUnitType *pUnitType);

         HRESULT ( STDMETHODCALLTYPE *SetDataType )(
            IZcadTable * This,
             int rowTypes,
             ZcValueDataType dataType,
             ZcValueUnitType unitType);

         HRESULT ( STDMETHODCALLTYPE *GetFormat )(
            IZcadTable * This,
             ZcRowType rowType,
             BSTR *pFormat);

         HRESULT ( STDMETHODCALLTYPE *SetFormat )(
            IZcadTable * This,
             int rowTypes,
            BSTR pFormat);

         HRESULT ( STDMETHODCALLTYPE *FormatValue )(
            IZcadTable * This,
             int row,
             int col,
            ZcFormatOption nOption,
            BSTR *pVal);

         HRESULT ( STDMETHODCALLTYPE *GetCellDataType )(
            IZcadTable * This,
             int row,
             int col,
             ZcValueDataType *pDataType,
             ZcValueUnitType *pUnitType);

         HRESULT ( STDMETHODCALLTYPE *SetCellDataType )(
            IZcadTable * This,
             int row,
             int col,
            ZcValueDataType dataType,
            ZcValueUnitType unitType);

         HRESULT ( STDMETHODCALLTYPE *GetCellFormat )(
            IZcadTable * This,
             int row,
             int col,
             BSTR *pFormat);

         HRESULT ( STDMETHODCALLTYPE *SetCellFormat )(
            IZcadTable * This,
             int row,
             int col,
            BSTR pFormat);

         HRESULT ( STDMETHODCALLTYPE *GetCellValue )(
            IZcadTable * This,
             int row,
             int col,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *SetCellValue )(
            IZcadTable * This,
             int row,
             int col,
            VARIANT val);

         HRESULT ( STDMETHODCALLTYPE *SetCellValueFromText )(
            IZcadTable * This,
             int row,
             int col,
             BSTR val,
             ZcParseOption nOption);

         HRESULT ( STDMETHODCALLTYPE *ResetCellValue )(
            IZcadTable * This,
             int row,
             int col);

         HRESULT ( STDMETHODCALLTYPE *IsEmpty )(
            IZcadTable * This,
             int nRow,
             int nCol,
             VARIANT_BOOL *bValue);

         HRESULT ( STDMETHODCALLTYPE *CreateContent )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nIndex,
             int *pInt);

         HRESULT ( STDMETHODCALLTYPE *MoveContent )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nFromIndex,
             int nToIndex);

         HRESULT ( STDMETHODCALLTYPE *DeleteContent )(
            IZcadTable * This,
             int nRow,
             int nCol);

         HRESULT ( STDMETHODCALLTYPE *GetValue )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             VARIANT *pZcValue);

         HRESULT ( STDMETHODCALLTYPE *SetValue )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             VARIANT acValue);

         HRESULT ( STDMETHODCALLTYPE *SetValueFromText )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             BSTR szText,
             ZcParseOption nOption);

         HRESULT ( STDMETHODCALLTYPE *GetDataFormat )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             BSTR *pValue);

         HRESULT ( STDMETHODCALLTYPE *SetDataFormat )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             BSTR szFormat);

         HRESULT ( STDMETHODCALLTYPE *GetTextString )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             BSTR *pTextString);

         HRESULT ( STDMETHODCALLTYPE *SetTextString )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             BSTR text);

         HRESULT ( STDMETHODCALLTYPE *GetFieldId2 )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             LONG_PTR *pZcDbObjectId);

         HRESULT ( STDMETHODCALLTYPE *SetFieldId2 )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             LONG_PTR zcDbObjectId,
             ZcCellOption nflag);

         HRESULT ( STDMETHODCALLTYPE *GetBlockTableRecordId2 )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             LONG_PTR *pZcDbObjectId);

         HRESULT ( STDMETHODCALLTYPE *SetBlockTableRecordId2 )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             LONG_PTR blkId,
             VARIANT_BOOL autoFit);

         HRESULT ( STDMETHODCALLTYPE *GetBlockAttributeValue2 )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             LONG_PTR blkId,
             BSTR *value);

         HRESULT ( STDMETHODCALLTYPE *SetBlockAttributeValue2 )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             LONG_PTR blkId,
             BSTR value);

         HRESULT ( STDMETHODCALLTYPE *GetCustomData )(
            IZcadTable * This,
             int nRow,
             int nCol,
             BSTR szKey,
             VARIANT *pData);

         HRESULT ( STDMETHODCALLTYPE *SetCustomData )(
            IZcadTable * This,
             int nRow,
             int nCol,
             BSTR szKey,
             VARIANT data);

         HRESULT ( STDMETHODCALLTYPE *GetCellStyle )(
            IZcadTable * This,
             int nRow,
             int nCol,
             BSTR *pCellStyle);

         HRESULT ( STDMETHODCALLTYPE *SetCellStyle )(
            IZcadTable * This,
             int nRow,
             int nCol,
             BSTR szCellStyle);

         HRESULT ( STDMETHODCALLTYPE *GetContentColor2 )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *SetContentColor2 )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *GetDataType2 )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             ZcValueDataType *pDataType,
             ZcValueUnitType *pUnitType);

         HRESULT ( STDMETHODCALLTYPE *SetDataType2 )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             ZcValueDataType dataType,
             ZcValueUnitType unitType);

         HRESULT ( STDMETHODCALLTYPE *GetTextStyle2 )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             BSTR *pbstrStyleName);

         HRESULT ( STDMETHODCALLTYPE *SetTextStyle2 )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             BSTR bstrStyleName);

         HRESULT ( STDMETHODCALLTYPE *GetTextHeight2 )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             double *pHeight);

         HRESULT ( STDMETHODCALLTYPE *SetTextHeight2 )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             double height);

         HRESULT ( STDMETHODCALLTYPE *GetRotation )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             double *pValue);

         HRESULT ( STDMETHODCALLTYPE *SetRotation )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             double value);

         HRESULT ( STDMETHODCALLTYPE *GetAutoScale2 )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             VARIANT_BOOL *bAutoScale);

         HRESULT ( STDMETHODCALLTYPE *SetAutoScale2 )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             VARIANT_BOOL bAutoFit);

         HRESULT ( STDMETHODCALLTYPE *GetScale )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             double *pScale);

         HRESULT ( STDMETHODCALLTYPE *SetScale )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             double scale);

         HRESULT ( STDMETHODCALLTYPE *RemoveAllOverrides )(
            IZcadTable * This,
             int nRow,
             int nCol);

         HRESULT ( STDMETHODCALLTYPE *GetGridLineWeight2 )(
            IZcadTable * This,
             int nRow,
             int nCol,
             ZcGridLineType nGridLineType,
             ZCAD_LWEIGHT *pLineWeight);

         HRESULT ( STDMETHODCALLTYPE *SetGridLineWeight2 )(
            IZcadTable * This,
             int nRow,
             int nCol,
             ZcGridLineType nGridLineType,
             ZCAD_LWEIGHT lineWeight);

         HRESULT ( STDMETHODCALLTYPE *GetGridLinetype )(
            IZcadTable * This,
             int nRow,
             int nCol,
             ZcGridLineType nGridLineType,
             LONG_PTR *pacDbObjId);

         HRESULT ( STDMETHODCALLTYPE *SetGridLinetype )(
            IZcadTable * This,
             int nRow,
             int nCol,
             ZcGridLineType nGridLineType,
             LONG_PTR idLinetype);

         HRESULT ( STDMETHODCALLTYPE *GetGridColor2 )(
            IZcadTable * This,
             int nRow,
             int nCol,
             ZcGridLineType nGridLineType,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *SetGridColor2 )(
            IZcadTable * This,
             int nRow,
             int nCol,
             ZcGridLineType nGridLineType,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *GetGridVisibility2 )(
            IZcadTable * This,
             int nRow,
             int nCol,
             ZcGridLineType nGridLineType,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *SetGridVisibility2 )(
            IZcadTable * This,
             int nRow,
             int nCol,
             ZcGridLineType nGridLineType,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *GetGridDoubleLineSpacing )(
            IZcadTable * This,
             int nRow,
             int nCol,
             ZcGridLineType nGridLineType,
             double *pValue);

         HRESULT ( STDMETHODCALLTYPE *SetGridDoubleLineSpacing )(
            IZcadTable * This,
             int nRow,
             int nCol,
             ZcGridLineType nGridLineType,
             double fSpacing);

         HRESULT ( STDMETHODCALLTYPE *put_EnableBreak )(
            IZcadTable * This,
             VARIANT_BOOL bEnable);

         HRESULT ( STDMETHODCALLTYPE *GetBreakHeight )(
            IZcadTable * This,
             int nIndex,
             double *pHeight);

         HRESULT ( STDMETHODCALLTYPE *SetBreakHeight )(
            IZcadTable * This,
             int nIndex,
             double height);

         HRESULT ( STDMETHODCALLTYPE *GetContentType )(
            IZcadTable * This,
             int nRow,
             int nCol,
             ZcCellContentType *pType);

         HRESULT ( STDMETHODCALLTYPE *GetMargin )(
            IZcadTable * This,
             int nRow,
             int nCol,
             ZcCellMargin nMargin,
             double *pValue);

         HRESULT ( STDMETHODCALLTYPE *SetMargin )(
            IZcadTable * This,
             int nRow,
             int nCol,
             ZcCellMargin nMargins,
             double fMargin);

         HRESULT ( STDMETHODCALLTYPE *GetContentLayout )(
            IZcadTable * This,
             int row,
             int col,
             ZcCellContentLayout *pLayout);

         HRESULT ( STDMETHODCALLTYPE *SetContentLayout )(
            IZcadTable * This,
             int row,
             int col,
             ZcCellContentLayout nLayout);

         HRESULT ( STDMETHODCALLTYPE *GetOverride )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             ZcCellProperty *pValue);

         HRESULT ( STDMETHODCALLTYPE *SetOverride )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             ZcCellProperty nProp);

         HRESULT ( STDMETHODCALLTYPE *GetGridLineStyle )(
            IZcadTable * This,
             int nRow,
             int nCol,
             ZcGridLineType nGridLineType,
             ZcGridLineStyle *pStyle);

         HRESULT ( STDMETHODCALLTYPE *SetGridLineStyle )(
            IZcadTable * This,
             int nRow,
             int nCol,
             ZcGridLineType nGridLineTypes,
             ZcGridLineStyle nLineStyle);

         HRESULT ( STDMETHODCALLTYPE *InsertRowsAndInherit )(
            IZcadTable * This,
             int nIndex,
             int nInheritFrom,
             int nNumRows);

         HRESULT ( STDMETHODCALLTYPE *InsertColumnsAndInherit )(
            IZcadTable * This,
             int col,
             int nInheritFrom,
             int nNumCols);

         HRESULT ( STDMETHODCALLTYPE *GetHasFormula )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             VARIANT_BOOL *bValue);

         HRESULT ( STDMETHODCALLTYPE *GetFormula )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             BSTR *pszFormula);

         HRESULT ( STDMETHODCALLTYPE *SetFormula )(
            IZcadTable * This,
             int nRow,
             int nCol,
             int nContent,
             BSTR pszFormula);

         HRESULT ( STDMETHODCALLTYPE *IsContentEditable )(
            IZcadTable * This,
             int nRow,
             int nCol,
             VARIANT_BOOL *bValue);

         HRESULT ( STDMETHODCALLTYPE *IsFormatEditable )(
            IZcadTable * This,
             int nRow,
             int nCol,
             VARIANT_BOOL *bValue);

         HRESULT ( STDMETHODCALLTYPE *GetCellState )(
            IZcadTable * This,
             int nRow,
             int nCol,
             ZcCellState *pCellState);

         HRESULT ( STDMETHODCALLTYPE *SetCellState )(
            IZcadTable * This,
             int nRow,
             int nCol,
             ZcCellState nLock);

         HRESULT ( STDMETHODCALLTYPE *EnableMergeAll )(
            IZcadTable * This,
             int nRow,
             int nCol,
             VARIANT_BOOL bEnable);

         HRESULT ( STDMETHODCALLTYPE *IsMergeAllEnabled )(
            IZcadTable * This,
             int nRow,
             int nCol,
             VARIANT_BOOL *bValue);

         HRESULT ( STDMETHODCALLTYPE *get_BreaksEnabled )(
            IZcadTable * This,
             VARIANT_BOOL *bEnabled);

         HRESULT ( STDMETHODCALLTYPE *put_BreaksEnabled )(
            IZcadTable * This,
             VARIANT_BOOL bEnabled);

         HRESULT ( STDMETHODCALLTYPE *get_RepeatTopLabels )(
            IZcadTable * This,
             VARIANT_BOOL *bEnabled);

         HRESULT ( STDMETHODCALLTYPE *put_RepeatTopLabels )(
            IZcadTable * This,
             VARIANT_BOOL bEnabled);

         HRESULT ( STDMETHODCALLTYPE *get_RepeatBottomLabels )(
            IZcadTable * This,
             VARIANT_BOOL *bEnabled);

         HRESULT ( STDMETHODCALLTYPE *put_RepeatBottomLabels )(
            IZcadTable * This,
             VARIANT_BOOL bEnabled);

         HRESULT ( STDMETHODCALLTYPE *get_TableBreakFlowDirection )(
            IZcadTable * This,
             ZcTableFlowDirection *pDir);

         HRESULT ( STDMETHODCALLTYPE *put_TableBreakFlowDirection )(
            IZcadTable * This,
             ZcTableFlowDirection dir);

         HRESULT ( STDMETHODCALLTYPE *get_AllowManualPositions )(
            IZcadTable * This,
             VARIANT_BOOL *bEnabled);

         HRESULT ( STDMETHODCALLTYPE *put_AllowManualPositions )(
            IZcadTable * This,
             VARIANT_BOOL bEnabled);

         HRESULT ( STDMETHODCALLTYPE *get_AllowManualHeights )(
            IZcadTable * This,
             VARIANT_BOOL *bEnabled);

         HRESULT ( STDMETHODCALLTYPE *put_AllowManualHeights )(
            IZcadTable * This,
             VARIANT_BOOL bEnabled);

         HRESULT ( STDMETHODCALLTYPE *get_TableBreakHeight )(
            IZcadTable * This,
             double *pHeight);

         HRESULT ( STDMETHODCALLTYPE *put_TableBreakHeight )(
            IZcadTable * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_BreakSpacing )(
            IZcadTable * This,
             double *pSpacing);

         HRESULT ( STDMETHODCALLTYPE *put_BreakSpacing )(
            IZcadTable * This,
             double spacing);

         HRESULT ( STDMETHODCALLTYPE *GetColumnName )(
            IZcadTable * This,
             int nIndex,
             BSTR *name);

         HRESULT ( STDMETHODCALLTYPE *SetColumnName )(
            IZcadTable * This,
             int nIndex,
             BSTR name);

         HRESULT ( STDMETHODCALLTYPE *SetToolTip )(
            IZcadTable * This,
             int nRow,
             int nCol,
             BSTR tip);

        END_INTERFACE
    } IZcadTableVtbl;

    interface IZcadTable
    {
        CONST_VTBL struct IZcadTableVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadTable_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadTable_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadTable_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadTable_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadTable_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadTable_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadTable_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadTable_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadTable_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadTable_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadTable_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadTable_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadTable_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadTable_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadTable_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadTable_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadTable_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadTable_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadTable_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadTable_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadTable_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadTable_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadTable_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadTable_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadTable_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadTable_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadTable_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadTable_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadTable_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadTable_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadTable_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadTable_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadTable_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadTable_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadTable_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadTable_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadTable_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadTable_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadTable_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadTable_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadTable_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadTable_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadTable_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadTable_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadTable_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadTable_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadTable_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadTable_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadTable_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadTable_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadTable_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadTable_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadTable_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadTable_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadTable_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadTable_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadTable_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadTable_get_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> get_StyleName(This,bstrName))

#define IZcadTable_put_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> put_StyleName(This,bstrName))

#define IZcadTable_get_Rows(This,pRows)	\
    ((This)->lpVtbl -> get_Rows(This,pRows))

#define IZcadTable_put_Rows(This,nRows)	\
    ((This)->lpVtbl -> put_Rows(This,nRows))

#define IZcadTable_get_Columns(This,pColumns)	\
    ((This)->lpVtbl -> get_Columns(This,pColumns))

#define IZcadTable_put_Columns(This,nColumns)	\
    ((This)->lpVtbl -> put_Columns(This,nColumns))

#define IZcadTable_get_FlowDirection(This,pFlow)	\
    ((This)->lpVtbl -> get_FlowDirection(This,pFlow))

#define IZcadTable_put_FlowDirection(This,flow)	\
    ((This)->lpVtbl -> put_FlowDirection(This,flow))

#define IZcadTable_get_Width(This,pWidth)	\
    ((This)->lpVtbl -> get_Width(This,pWidth))

#define IZcadTable_put_Width(This,fWidth)	\
    ((This)->lpVtbl -> put_Width(This,fWidth))

#define IZcadTable_get_Height(This,pHeight)	\
    ((This)->lpVtbl -> get_Height(This,pHeight))

#define IZcadTable_put_Height(This,fRowHeight)	\
    ((This)->lpVtbl -> put_Height(This,fRowHeight))

#define IZcadTable_get_VertCellMargin(This,pGap)	\
    ((This)->lpVtbl -> get_VertCellMargin(This,pGap))

#define IZcadTable_put_VertCellMargin(This,gap)	\
    ((This)->lpVtbl -> put_VertCellMargin(This,gap))

#define IZcadTable_get_HorzCellMargin(This,pGap)	\
    ((This)->lpVtbl -> get_HorzCellMargin(This,pGap))

#define IZcadTable_put_HorzCellMargin(This,gap)	\
    ((This)->lpVtbl -> put_HorzCellMargin(This,gap))

#define IZcadTable_get_InsertionPoint(This,insPoint)	\
    ((This)->lpVtbl -> get_InsertionPoint(This,insPoint))

#define IZcadTable_put_InsertionPoint(This,insPoint)	\
    ((This)->lpVtbl -> put_InsertionPoint(This,insPoint))

#define IZcadTable_GetColumnWidth(This,col,pWidth)	\
    ((This)->lpVtbl -> GetColumnWidth(This,col,pWidth))

#define IZcadTable_SetColumnWidth(This,col,width)	\
    ((This)->lpVtbl -> SetColumnWidth(This,col,width))

#define IZcadTable_put_ColumnWidth(This,width)	\
    ((This)->lpVtbl -> put_ColumnWidth(This,width))

#define IZcadTable_GetRowHeight(This,row,pheight)	\
    ((This)->lpVtbl -> GetRowHeight(This,row,pheight))

#define IZcadTable_SetRowHeight(This,row,height)	\
    ((This)->lpVtbl -> SetRowHeight(This,row,height))

#define IZcadTable_put_RowHeight(This,height)	\
    ((This)->lpVtbl -> put_RowHeight(This,height))

#define IZcadTable_GetMinimumColumnWidth(This,col,pWidth)	\
    ((This)->lpVtbl -> GetMinimumColumnWidth(This,col,pWidth))

#define IZcadTable_GetMinimumRowHeight(This,row,pHeight)	\
    ((This)->lpVtbl -> GetMinimumRowHeight(This,row,pHeight))

#define IZcadTable_get_MinimumTableWidth(This,pWidth)	\
    ((This)->lpVtbl -> get_MinimumTableWidth(This,pWidth))

#define IZcadTable_get_MinimumTableHeight(This,pHeight)	\
    ((This)->lpVtbl -> get_MinimumTableHeight(This,pHeight))

#define IZcadTable_get_Direction(This,directionVector)	\
    ((This)->lpVtbl -> get_Direction(This,directionVector))

#define IZcadTable_put_Direction(This,directionVector)	\
    ((This)->lpVtbl -> put_Direction(This,directionVector))

#define IZcadTable_get_TitleSuppressed(This,bValue)	\
    ((This)->lpVtbl -> get_TitleSuppressed(This,bValue))

#define IZcadTable_put_TitleSuppressed(This,bValue)	\
    ((This)->lpVtbl -> put_TitleSuppressed(This,bValue))

#define IZcadTable_get_HeaderSuppressed(This,bValue)	\
    ((This)->lpVtbl -> get_HeaderSuppressed(This,bValue))

#define IZcadTable_put_HeaderSuppressed(This,bValue)	\
    ((This)->lpVtbl -> put_HeaderSuppressed(This,bValue))

#define IZcadTable_GetAlignment(This,rowType,pCellAlignment)	\
    ((This)->lpVtbl -> GetAlignment(This,rowType,pCellAlignment))

#define IZcadTable_SetAlignment(This,rowTypes,cellAlignment)	\
    ((This)->lpVtbl -> SetAlignment(This,rowTypes,cellAlignment))

#define IZcadTable_GetBackgroundColorNone(This,rowType,bValue)	\
    ((This)->lpVtbl -> GetBackgroundColorNone(This,rowType,bValue))

#define IZcadTable_SetBackgroundColorNone(This,rowTypes,bValue)	\
    ((This)->lpVtbl -> SetBackgroundColorNone(This,rowTypes,bValue))

#define IZcadTable_GetBackgroundColor(This,rowType,pColor)	\
    ((This)->lpVtbl -> GetBackgroundColor(This,rowType,pColor))

#define IZcadTable_SetBackgroundColor(This,rowTypes,pColor)	\
    ((This)->lpVtbl -> SetBackgroundColor(This,rowTypes,pColor))

#define IZcadTable_GetContentColor(This,rowType,pColor)	\
    ((This)->lpVtbl -> GetContentColor(This,rowType,pColor))

#define IZcadTable_SetContentColor(This,rowTypes,pColor)	\
    ((This)->lpVtbl -> SetContentColor(This,rowTypes,pColor))

#define IZcadTable_GetTextStyle(This,rowType,bstrName)	\
    ((This)->lpVtbl -> GetTextStyle(This,rowType,bstrName))

#define IZcadTable_SetTextStyle(This,rowTypes,bstrName)	\
    ((This)->lpVtbl -> SetTextStyle(This,rowTypes,bstrName))

#define IZcadTable_GetTextHeight(This,rowType,pTextHeight)	\
    ((This)->lpVtbl -> GetTextHeight(This,rowType,pTextHeight))

#define IZcadTable_SetTextHeight(This,rowTypes,textHeight)	\
    ((This)->lpVtbl -> SetTextHeight(This,rowTypes,textHeight))

#define IZcadTable_GetGridLineWeight(This,gridLineType,rowType,lineweight)	\
    ((This)->lpVtbl -> GetGridLineWeight(This,gridLineType,rowType,lineweight))

#define IZcadTable_SetGridLineWeight(This,gridLineTypes,rowTypes,lineweight)	\
    ((This)->lpVtbl -> SetGridLineWeight(This,gridLineTypes,rowTypes,lineweight))

#define IZcadTable_GetGridColor(This,gridLineType,rowType,pColor)	\
    ((This)->lpVtbl -> GetGridColor(This,gridLineType,rowType,pColor))

#define IZcadTable_SetGridColor(This,gridLineTypes,rowTypes,pColor)	\
    ((This)->lpVtbl -> SetGridColor(This,gridLineTypes,rowTypes,pColor))

#define IZcadTable_GetGridVisibility(This,gridLineType,rowType,bValue)	\
    ((This)->lpVtbl -> GetGridVisibility(This,gridLineType,rowType,bValue))

#define IZcadTable_SetGridVisibility(This,gridLineTypes,rowTypes,bValue)	\
    ((This)->lpVtbl -> SetGridVisibility(This,gridLineTypes,rowTypes,bValue))

#define IZcadTable_get_TableStyleOverrides(This,pIntArray)	\
    ((This)->lpVtbl -> get_TableStyleOverrides(This,pIntArray))

#define IZcadTable_ClearTableStyleOverrides(This,flag)	\
    ((This)->lpVtbl -> ClearTableStyleOverrides(This,flag))

#define IZcadTable_GetCellType(This,row,col,pCellType)	\
    ((This)->lpVtbl -> GetCellType(This,row,col,pCellType))

#define IZcadTable_SetCellType(This,row,col,CellType)	\
    ((This)->lpVtbl -> SetCellType(This,row,col,CellType))

#define IZcadTable_GetCellExtents(This,row,col,bOuterCell,pPts)	\
    ((This)->lpVtbl -> GetCellExtents(This,row,col,bOuterCell,pPts))

#define IZcadTable_GetAttachmentPoint(This,row,col,pAttachmentPoint)	\
    ((This)->lpVtbl -> GetAttachmentPoint(This,row,col,pAttachmentPoint))

#define IZcadTable_GetCellAlignment(This,row,col,pCellAlignment)	\
    ((This)->lpVtbl -> GetCellAlignment(This,row,col,pCellAlignment))

#define IZcadTable_SetCellAlignment(This,row,col,cellAlignment)	\
    ((This)->lpVtbl -> SetCellAlignment(This,row,col,cellAlignment))

#define IZcadTable_GetCellBackgroundColorNone(This,row,col,bValue)	\
    ((This)->lpVtbl -> GetCellBackgroundColorNone(This,row,col,bValue))

#define IZcadTable_SetCellBackgroundColorNone(This,row,col,bValue)	\
    ((This)->lpVtbl -> SetCellBackgroundColorNone(This,row,col,bValue))

#define IZcadTable_GetCellBackgroundColor(This,row,col,pColor)	\
    ((This)->lpVtbl -> GetCellBackgroundColor(This,row,col,pColor))

#define IZcadTable_SetCellBackgroundColor(This,row,col,pColor)	\
    ((This)->lpVtbl -> SetCellBackgroundColor(This,row,col,pColor))

#define IZcadTable_GetCellContentColor(This,row,col,pColor)	\
    ((This)->lpVtbl -> GetCellContentColor(This,row,col,pColor))

#define IZcadTable_SetCellContentColor(This,row,col,pColor)	\
    ((This)->lpVtbl -> SetCellContentColor(This,row,col,pColor))

#define IZcadTable_GetCellStyleOverrides(This,row,col,pIntArray)	\
    ((This)->lpVtbl -> GetCellStyleOverrides(This,row,col,pIntArray))

#define IZcadTable_DeleteCellContent(This,row,col)	\
    ((This)->lpVtbl -> DeleteCellContent(This,row,col))

#define IZcadTable_GetRowType(This,row,pRowType)	\
    ((This)->lpVtbl -> GetRowType(This,row,pRowType))

#define IZcadTable_GetText(This,row,col,pStr)	\
    ((This)->lpVtbl -> GetText(This,row,col,pStr))

#define IZcadTable_SetText(This,row,col,pStr)	\
    ((This)->lpVtbl -> SetText(This,row,col,pStr))

#define IZcadTable_GetCellTextStyle(This,row,col,bstrName)	\
    ((This)->lpVtbl -> GetCellTextStyle(This,row,col,bstrName))

#define IZcadTable_SetCellTextStyle(This,row,col,bstrName)	\
    ((This)->lpVtbl -> SetCellTextStyle(This,row,col,bstrName))

#define IZcadTable_GetCellTextHeight(This,row,col,pTextHeight)	\
    ((This)->lpVtbl -> GetCellTextHeight(This,row,col,pTextHeight))

#define IZcadTable_SetCellTextHeight(This,row,col,textHeight)	\
    ((This)->lpVtbl -> SetCellTextHeight(This,row,col,textHeight))

#define IZcadTable_GetTextRotation(This,row,col,textRotation)	\
    ((This)->lpVtbl -> GetTextRotation(This,row,col,textRotation))

#define IZcadTable_SetTextRotation(This,row,col,textRotation)	\
    ((This)->lpVtbl -> SetTextRotation(This,row,col,textRotation))

#define IZcadTable_GetAutoScale(This,row,col,bValue)	\
    ((This)->lpVtbl -> GetAutoScale(This,row,col,bValue))

#define IZcadTable_SetAutoScale(This,row,col,bValue)	\
    ((This)->lpVtbl -> SetAutoScale(This,row,col,bValue))

#define IZcadTable_GetBlockTableRecordId(This,row,col,blkId)	\
    ((This)->lpVtbl -> GetBlockTableRecordId(This,row,col,blkId))

#define IZcadTable_SetBlockTableRecordId(This,row,col,blkId,bAutoFit)	\
    ((This)->lpVtbl -> SetBlockTableRecordId(This,row,col,blkId,bAutoFit))

#define IZcadTable_GetBlockScale(This,row,col,blkScale)	\
    ((This)->lpVtbl -> GetBlockScale(This,row,col,blkScale))

#define IZcadTable_SetBlockScale(This,row,col,blkScale)	\
    ((This)->lpVtbl -> SetBlockScale(This,row,col,blkScale))

#define IZcadTable_GetBlockRotation(This,row,col,blkRotation)	\
    ((This)->lpVtbl -> GetBlockRotation(This,row,col,blkRotation))

#define IZcadTable_SetBlockRotation(This,row,col,blkRotation)	\
    ((This)->lpVtbl -> SetBlockRotation(This,row,col,blkRotation))

#define IZcadTable_GetBlockAttributeValue(This,row,col,attdefId,bstrValue)	\
    ((This)->lpVtbl -> GetBlockAttributeValue(This,row,col,attdefId,bstrValue))

#define IZcadTable_SetBlockAttributeValue(This,row,col,attdefId,bstrValue)	\
    ((This)->lpVtbl -> SetBlockAttributeValue(This,row,col,attdefId,bstrValue))

#define IZcadTable_GetCellGridLineWeight(This,row,col,edge,plineweight)	\
    ((This)->lpVtbl -> GetCellGridLineWeight(This,row,col,edge,plineweight))

#define IZcadTable_SetCellGridLineWeight(This,row,col,edges,lineweight)	\
    ((This)->lpVtbl -> SetCellGridLineWeight(This,row,col,edges,lineweight))

#define IZcadTable_GetCellGridColor(This,row,col,edge,pColor)	\
    ((This)->lpVtbl -> GetCellGridColor(This,row,col,edge,pColor))

#define IZcadTable_SetCellGridColor(This,row,col,edges,pColor)	\
    ((This)->lpVtbl -> SetCellGridColor(This,row,col,edges,pColor))

#define IZcadTable_GetCellGridVisibility(This,row,col,edge,bValue)	\
    ((This)->lpVtbl -> GetCellGridVisibility(This,row,col,edge,bValue))

#define IZcadTable_SetCellGridVisibility(This,row,col,edges,bValue)	\
    ((This)->lpVtbl -> SetCellGridVisibility(This,row,col,edges,bValue))

#define IZcadTable_InsertColumns(This,col,width,cols)	\
    ((This)->lpVtbl -> InsertColumns(This,col,width,cols))

#define IZcadTable_DeleteColumns(This,col,cols)	\
    ((This)->lpVtbl -> DeleteColumns(This,col,cols))

#define IZcadTable_InsertRows(This,row,height,rows)	\
    ((This)->lpVtbl -> InsertRows(This,row,height,rows))

#define IZcadTable_DeleteRows(This,row,rows)	\
    ((This)->lpVtbl -> DeleteRows(This,row,rows))

#define IZcadTable_MergeCells(This,minRow,maxRow,minCol,maxCol)	\
    ((This)->lpVtbl -> MergeCells(This,minRow,maxRow,minCol,maxCol))

#define IZcadTable_UnmergeCells(This,minRow,maxRow,minCol,maxCol)	\
    ((This)->lpVtbl -> UnmergeCells(This,minRow,maxRow,minCol,maxCol))

#define IZcadTable_IsMergedCell(This,row,col,minRow,maxRow,minCol,maxCol,pbValue)	\
    ((This)->lpVtbl -> IsMergedCell(This,row,col,minRow,maxRow,minCol,maxCol,pbValue))

#define IZcadTable_GetFieldId(This,row,col,fieldId)	\
    ((This)->lpVtbl -> GetFieldId(This,row,col,fieldId))

#define IZcadTable_SetFieldId(This,row,col,fieldId)	\
    ((This)->lpVtbl -> SetFieldId(This,row,col,fieldId))

#define IZcadTable_GenerateLayout(This)	\
    ((This)->lpVtbl -> GenerateLayout(This))

#define IZcadTable_RecomputeTableBlock(This,bForceUpdate)	\
    ((This)->lpVtbl -> RecomputeTableBlock(This,bForceUpdate))

#define IZcadTable_HitTest(This,wpt,wviewVec,resultRowIndex,resultColumnIndex,bReturn)	\
    ((This)->lpVtbl -> HitTest(This,wpt,wviewVec,resultRowIndex,resultColumnIndex,bReturn))

#define IZcadTable_Select(This,wpt,wvwVec,wvwxVec,wxaper,wyaper,allowOutside,resultRowIndex,resultColumnIndex)	\
    ((This)->lpVtbl -> Select(This,wpt,wvwVec,wvwxVec,wxaper,wyaper,allowOutside,resultRowIndex,resultColumnIndex))

#define IZcadTable_SelectSubRegion(This,wpt1,wpt2,wvwVec,wvwxVec,seltype,bIncludeCurrentSelection,rowMin,rowMax,colMin,colMax)	\
    ((This)->lpVtbl -> SelectSubRegion(This,wpt1,wpt2,wvwVec,wvwxVec,seltype,bIncludeCurrentSelection,rowMin,rowMax,colMin,colMax))

#define IZcadTable_ReselectSubRegion(This)	\
    ((This)->lpVtbl -> ReselectSubRegion(This))

#define IZcadTable_GetSubSelection(This,rowMin,rowMax,colMin,colMax)	\
    ((This)->lpVtbl -> GetSubSelection(This,rowMin,rowMax,colMin,colMax))

#define IZcadTable_SetSubSelection(This,rowMin,rowMax,colMin,colMax)	\
    ((This)->lpVtbl -> SetSubSelection(This,rowMin,rowMax,colMin,colMax))

#define IZcadTable_ClearSubSelection(This)	\
    ((This)->lpVtbl -> ClearSubSelection(This))

#define IZcadTable_get_HasSubSelection(This,pbValue)	\
    ((This)->lpVtbl -> get_HasSubSelection(This,pbValue))

#define IZcadTable_get_RegenerateTableSuppressed(This,bValue)	\
    ((This)->lpVtbl -> get_RegenerateTableSuppressed(This,bValue))

#define IZcadTable_put_RegenerateTableSuppressed(This,bValue)	\
    ((This)->lpVtbl -> put_RegenerateTableSuppressed(This,bValue))

#define IZcadTable_GetDataType(This,rowType,pDataType,pUnitType)	\
    ((This)->lpVtbl -> GetDataType(This,rowType,pDataType,pUnitType))

#define IZcadTable_SetDataType(This,rowTypes,dataType,unitType)	\
    ((This)->lpVtbl -> SetDataType(This,rowTypes,dataType,unitType))

#define IZcadTable_GetFormat(This,rowType,pFormat)	\
    ((This)->lpVtbl -> GetFormat(This,rowType,pFormat))

#define IZcadTable_SetFormat(This,rowTypes,pFormat)	\
    ((This)->lpVtbl -> SetFormat(This,rowTypes,pFormat))

#define IZcadTable_FormatValue(This,row,col,nOption,pVal)	\
    ((This)->lpVtbl -> FormatValue(This,row,col,nOption,pVal))

#define IZcadTable_GetCellDataType(This,row,col,pDataType,pUnitType)	\
    ((This)->lpVtbl -> GetCellDataType(This,row,col,pDataType,pUnitType))

#define IZcadTable_SetCellDataType(This,row,col,dataType,unitType)	\
    ((This)->lpVtbl -> SetCellDataType(This,row,col,dataType,unitType))

#define IZcadTable_GetCellFormat(This,row,col,pFormat)	\
    ((This)->lpVtbl -> GetCellFormat(This,row,col,pFormat))

#define IZcadTable_SetCellFormat(This,row,col,pFormat)	\
    ((This)->lpVtbl -> SetCellFormat(This,row,col,pFormat))

#define IZcadTable_GetCellValue(This,row,col,pVal)	\
    ((This)->lpVtbl -> GetCellValue(This,row,col,pVal))

#define IZcadTable_SetCellValue(This,row,col,val)	\
    ((This)->lpVtbl -> SetCellValue(This,row,col,val))

#define IZcadTable_SetCellValueFromText(This,row,col,val,nOption)	\
    ((This)->lpVtbl -> SetCellValueFromText(This,row,col,val,nOption))

#define IZcadTable_ResetCellValue(This,row,col)	\
    ((This)->lpVtbl -> ResetCellValue(This,row,col))

#define IZcadTable_IsEmpty(This,nRow,nCol,bValue)	\
    ((This)->lpVtbl -> IsEmpty(This,nRow,nCol,bValue))

#define IZcadTable_CreateContent(This,nRow,nCol,nIndex,pInt)	\
    ((This)->lpVtbl -> CreateContent(This,nRow,nCol,nIndex,pInt))

#define IZcadTable_MoveContent(This,nRow,nCol,nFromIndex,nToIndex)	\
    ((This)->lpVtbl -> MoveContent(This,nRow,nCol,nFromIndex,nToIndex))

#define IZcadTable_DeleteContent(This,nRow,nCol)	\
    ((This)->lpVtbl -> DeleteContent(This,nRow,nCol))

#define IZcadTable_GetValue(This,nRow,nCol,nContent,pZcValue)	\
    ((This)->lpVtbl -> GetValue(This,nRow,nCol,nContent,pZcValue))

#define IZcadTable_SetValue(This,nRow,nCol,nContent,acValue)	\
    ((This)->lpVtbl -> SetValue(This,nRow,nCol,nContent,acValue))

#define IZcadTable_SetValueFromText(This,nRow,nCol,nContent,szText,nOption)	\
    ((This)->lpVtbl -> SetValueFromText(This,nRow,nCol,nContent,szText,nOption))

#define IZcadTable_GetDataFormat(This,nRow,nCol,nContent,pValue)	\
    ((This)->lpVtbl -> GetDataFormat(This,nRow,nCol,nContent,pValue))

#define IZcadTable_SetDataFormat(This,nRow,nCol,nContent,szFormat)	\
    ((This)->lpVtbl -> SetDataFormat(This,nRow,nCol,nContent,szFormat))

#define IZcadTable_GetTextString(This,nRow,nCol,nContent,pTextString)	\
    ((This)->lpVtbl -> GetTextString(This,nRow,nCol,nContent,pTextString))

#define IZcadTable_SetTextString(This,nRow,nCol,nContent,text)	\
    ((This)->lpVtbl -> SetTextString(This,nRow,nCol,nContent,text))

#define IZcadTable_GetFieldId2(This,nRow,nCol,nContent,pZcDbObjectId)	\
    ((This)->lpVtbl -> GetFieldId2(This,nRow,nCol,nContent,pZcDbObjectId))

#define IZcadTable_SetFieldId2(This,nRow,nCol,nContent,zcDbObjectId,nflag)	\
    ((This)->lpVtbl -> SetFieldId2(This,nRow,nCol,nContent,zcDbObjectId,nflag))

#define IZcadTable_GetBlockTableRecordId2(This,nRow,nCol,nContent,pZcDbObjectId)	\
    ((This)->lpVtbl -> GetBlockTableRecordId2(This,nRow,nCol,nContent,pZcDbObjectId))

#define IZcadTable_SetBlockTableRecordId2(This,nRow,nCol,nContent,blkId,autoFit)	\
    ((This)->lpVtbl -> SetBlockTableRecordId2(This,nRow,nCol,nContent,blkId,autoFit))

#define IZcadTable_GetBlockAttributeValue2(This,nRow,nCol,nContent,blkId,value)	\
    ((This)->lpVtbl -> GetBlockAttributeValue2(This,nRow,nCol,nContent,blkId,value))

#define IZcadTable_SetBlockAttributeValue2(This,nRow,nCol,nContent,blkId,value)	\
    ((This)->lpVtbl -> SetBlockAttributeValue2(This,nRow,nCol,nContent,blkId,value))

#define IZcadTable_GetCustomData(This,nRow,nCol,szKey,pData)	\
    ((This)->lpVtbl -> GetCustomData(This,nRow,nCol,szKey,pData))

#define IZcadTable_SetCustomData(This,nRow,nCol,szKey,data)	\
    ((This)->lpVtbl -> SetCustomData(This,nRow,nCol,szKey,data))

#define IZcadTable_GetCellStyle(This,nRow,nCol,pCellStyle)	\
    ((This)->lpVtbl -> GetCellStyle(This,nRow,nCol,pCellStyle))

#define IZcadTable_SetCellStyle(This,nRow,nCol,szCellStyle)	\
    ((This)->lpVtbl -> SetCellStyle(This,nRow,nCol,szCellStyle))

#define IZcadTable_GetContentColor2(This,nRow,nCol,nContent,pColor)	\
    ((This)->lpVtbl -> GetContentColor2(This,nRow,nCol,nContent,pColor))

#define IZcadTable_SetContentColor2(This,nRow,nCol,nContent,pColor)	\
    ((This)->lpVtbl -> SetContentColor2(This,nRow,nCol,nContent,pColor))

#define IZcadTable_GetDataType2(This,nRow,nCol,nContent,pDataType,pUnitType)	\
    ((This)->lpVtbl -> GetDataType2(This,nRow,nCol,nContent,pDataType,pUnitType))

#define IZcadTable_SetDataType2(This,nRow,nCol,nContent,dataType,unitType)	\
    ((This)->lpVtbl -> SetDataType2(This,nRow,nCol,nContent,dataType,unitType))

#define IZcadTable_GetTextStyle2(This,nRow,nCol,nContent,pbstrStyleName)	\
    ((This)->lpVtbl -> GetTextStyle2(This,nRow,nCol,nContent,pbstrStyleName))

#define IZcadTable_SetTextStyle2(This,nRow,nCol,nContent,bstrStyleName)	\
    ((This)->lpVtbl -> SetTextStyle2(This,nRow,nCol,nContent,bstrStyleName))

#define IZcadTable_GetTextHeight2(This,nRow,nCol,nContent,pHeight)	\
    ((This)->lpVtbl -> GetTextHeight2(This,nRow,nCol,nContent,pHeight))

#define IZcadTable_SetTextHeight2(This,nRow,nCol,nContent,height)	\
    ((This)->lpVtbl -> SetTextHeight2(This,nRow,nCol,nContent,height))

#define IZcadTable_GetRotation(This,nRow,nCol,nContent,pValue)	\
    ((This)->lpVtbl -> GetRotation(This,nRow,nCol,nContent,pValue))

#define IZcadTable_SetRotation(This,nRow,nCol,nContent,value)	\
    ((This)->lpVtbl -> SetRotation(This,nRow,nCol,nContent,value))

#define IZcadTable_GetAutoScale2(This,nRow,nCol,nContent,bAutoScale)	\
    ((This)->lpVtbl -> GetAutoScale2(This,nRow,nCol,nContent,bAutoScale))

#define IZcadTable_SetAutoScale2(This,nRow,nCol,nContent,bAutoFit)	\
    ((This)->lpVtbl -> SetAutoScale2(This,nRow,nCol,nContent,bAutoFit))

#define IZcadTable_GetScale(This,nRow,nCol,nContent,pScale)	\
    ((This)->lpVtbl -> GetScale(This,nRow,nCol,nContent,pScale))

#define IZcadTable_SetScale(This,nRow,nCol,nContent,scale)	\
    ((This)->lpVtbl -> SetScale(This,nRow,nCol,nContent,scale))

#define IZcadTable_RemoveAllOverrides(This,nRow,nCol)	\
    ((This)->lpVtbl -> RemoveAllOverrides(This,nRow,nCol))

#define IZcadTable_GetGridLineWeight2(This,nRow,nCol,nGridLineType,pLineWeight)	\
    ((This)->lpVtbl -> GetGridLineWeight2(This,nRow,nCol,nGridLineType,pLineWeight))

#define IZcadTable_SetGridLineWeight2(This,nRow,nCol,nGridLineType,lineWeight)	\
    ((This)->lpVtbl -> SetGridLineWeight2(This,nRow,nCol,nGridLineType,lineWeight))

#define IZcadTable_GetGridLinetype(This,nRow,nCol,nGridLineType,pacDbObjId)	\
    ((This)->lpVtbl -> GetGridLinetype(This,nRow,nCol,nGridLineType,pacDbObjId))

#define IZcadTable_SetGridLinetype(This,nRow,nCol,nGridLineType,idLinetype)	\
    ((This)->lpVtbl -> SetGridLinetype(This,nRow,nCol,nGridLineType,idLinetype))

#define IZcadTable_GetGridColor2(This,nRow,nCol,nGridLineType,pColor)	\
    ((This)->lpVtbl -> GetGridColor2(This,nRow,nCol,nGridLineType,pColor))

#define IZcadTable_SetGridColor2(This,nRow,nCol,nGridLineType,pColor)	\
    ((This)->lpVtbl -> SetGridColor2(This,nRow,nCol,nGridLineType,pColor))

#define IZcadTable_GetGridVisibility2(This,nRow,nCol,nGridLineType,bVisible)	\
    ((This)->lpVtbl -> GetGridVisibility2(This,nRow,nCol,nGridLineType,bVisible))

#define IZcadTable_SetGridVisibility2(This,nRow,nCol,nGridLineType,bVisible)	\
    ((This)->lpVtbl -> SetGridVisibility2(This,nRow,nCol,nGridLineType,bVisible))

#define IZcadTable_GetGridDoubleLineSpacing(This,nRow,nCol,nGridLineType,pValue)	\
    ((This)->lpVtbl -> GetGridDoubleLineSpacing(This,nRow,nCol,nGridLineType,pValue))

#define IZcadTable_SetGridDoubleLineSpacing(This,nRow,nCol,nGridLineType,fSpacing)	\
    ((This)->lpVtbl -> SetGridDoubleLineSpacing(This,nRow,nCol,nGridLineType,fSpacing))

#define IZcadTable_put_EnableBreak(This,bEnable)	\
    ((This)->lpVtbl -> put_EnableBreak(This,bEnable))

#define IZcadTable_GetBreakHeight(This,nIndex,pHeight)	\
    ((This)->lpVtbl -> GetBreakHeight(This,nIndex,pHeight))

#define IZcadTable_SetBreakHeight(This,nIndex,height)	\
    ((This)->lpVtbl -> SetBreakHeight(This,nIndex,height))

#define IZcadTable_GetContentType(This,nRow,nCol,pType)	\
    ((This)->lpVtbl -> GetContentType(This,nRow,nCol,pType))

#define IZcadTable_GetMargin(This,nRow,nCol,nMargin,pValue)	\
    ((This)->lpVtbl -> GetMargin(This,nRow,nCol,nMargin,pValue))

#define IZcadTable_SetMargin(This,nRow,nCol,nMargins,fMargin)	\
    ((This)->lpVtbl -> SetMargin(This,nRow,nCol,nMargins,fMargin))

#define IZcadTable_GetContentLayout(This,row,col,pLayout)	\
    ((This)->lpVtbl -> GetContentLayout(This,row,col,pLayout))

#define IZcadTable_SetContentLayout(This,row,col,nLayout)	\
    ((This)->lpVtbl -> SetContentLayout(This,row,col,nLayout))

#define IZcadTable_GetOverride(This,nRow,nCol,nContent,pValue)	\
    ((This)->lpVtbl -> GetOverride(This,nRow,nCol,nContent,pValue))

#define IZcadTable_SetOverride(This,nRow,nCol,nContent,nProp)	\
    ((This)->lpVtbl -> SetOverride(This,nRow,nCol,nContent,nProp))

#define IZcadTable_GetGridLineStyle(This,nRow,nCol,nGridLineType,pStyle)	\
    ((This)->lpVtbl -> GetGridLineStyle(This,nRow,nCol,nGridLineType,pStyle))

#define IZcadTable_SetGridLineStyle(This,nRow,nCol,nGridLineTypes,nLineStyle)	\
    ((This)->lpVtbl -> SetGridLineStyle(This,nRow,nCol,nGridLineTypes,nLineStyle))

#define IZcadTable_InsertRowsAndInherit(This,nIndex,nInheritFrom,nNumRows)	\
    ((This)->lpVtbl -> InsertRowsAndInherit(This,nIndex,nInheritFrom,nNumRows))

#define IZcadTable_InsertColumnsAndInherit(This,col,nInheritFrom,nNumCols)	\
    ((This)->lpVtbl -> InsertColumnsAndInherit(This,col,nInheritFrom,nNumCols))

#define IZcadTable_GetHasFormula(This,nRow,nCol,nContent,bValue)	\
    ((This)->lpVtbl -> GetHasFormula(This,nRow,nCol,nContent,bValue))

#define IZcadTable_GetFormula(This,nRow,nCol,nContent,pszFormula)	\
    ((This)->lpVtbl -> GetFormula(This,nRow,nCol,nContent,pszFormula))

#define IZcadTable_SetFormula(This,nRow,nCol,nContent,pszFormula)	\
    ((This)->lpVtbl -> SetFormula(This,nRow,nCol,nContent,pszFormula))

#define IZcadTable_IsContentEditable(This,nRow,nCol,bValue)	\
    ((This)->lpVtbl -> IsContentEditable(This,nRow,nCol,bValue))

#define IZcadTable_IsFormatEditable(This,nRow,nCol,bValue)	\
    ((This)->lpVtbl -> IsFormatEditable(This,nRow,nCol,bValue))

#define IZcadTable_GetCellState(This,nRow,nCol,pCellState)	\
    ((This)->lpVtbl -> GetCellState(This,nRow,nCol,pCellState))

#define IZcadTable_SetCellState(This,nRow,nCol,nLock)	\
    ((This)->lpVtbl -> SetCellState(This,nRow,nCol,nLock))

#define IZcadTable_EnableMergeAll(This,nRow,nCol,bEnable)	\
    ((This)->lpVtbl -> EnableMergeAll(This,nRow,nCol,bEnable))

#define IZcadTable_IsMergeAllEnabled(This,nRow,nCol,bValue)	\
    ((This)->lpVtbl -> IsMergeAllEnabled(This,nRow,nCol,bValue))

#define IZcadTable_get_BreaksEnabled(This,bEnabled)	\
    ((This)->lpVtbl -> get_BreaksEnabled(This,bEnabled))

#define IZcadTable_put_BreaksEnabled(This,bEnabled)	\
    ((This)->lpVtbl -> put_BreaksEnabled(This,bEnabled))

#define IZcadTable_get_RepeatTopLabels(This,bEnabled)	\
    ((This)->lpVtbl -> get_RepeatTopLabels(This,bEnabled))

#define IZcadTable_put_RepeatTopLabels(This,bEnabled)	\
    ((This)->lpVtbl -> put_RepeatTopLabels(This,bEnabled))

#define IZcadTable_get_RepeatBottomLabels(This,bEnabled)	\
    ((This)->lpVtbl -> get_RepeatBottomLabels(This,bEnabled))

#define IZcadTable_put_RepeatBottomLabels(This,bEnabled)	\
    ((This)->lpVtbl -> put_RepeatBottomLabels(This,bEnabled))

#define IZcadTable_get_TableBreakFlowDirection(This,pDir)	\
    ((This)->lpVtbl -> get_TableBreakFlowDirection(This,pDir))

#define IZcadTable_put_TableBreakFlowDirection(This,dir)	\
    ((This)->lpVtbl -> put_TableBreakFlowDirection(This,dir))

#define IZcadTable_get_AllowManualPositions(This,bEnabled)	\
    ((This)->lpVtbl -> get_AllowManualPositions(This,bEnabled))

#define IZcadTable_put_AllowManualPositions(This,bEnabled)	\
    ((This)->lpVtbl -> put_AllowManualPositions(This,bEnabled))

#define IZcadTable_get_AllowManualHeights(This,bEnabled)	\
    ((This)->lpVtbl -> get_AllowManualHeights(This,bEnabled))

#define IZcadTable_put_AllowManualHeights(This,bEnabled)	\
    ((This)->lpVtbl -> put_AllowManualHeights(This,bEnabled))

#define IZcadTable_get_TableBreakHeight(This,pHeight)	\
    ((This)->lpVtbl -> get_TableBreakHeight(This,pHeight))

#define IZcadTable_put_TableBreakHeight(This,height)	\
    ((This)->lpVtbl -> put_TableBreakHeight(This,height))

#define IZcadTable_get_BreakSpacing(This,pSpacing)	\
    ((This)->lpVtbl -> get_BreakSpacing(This,pSpacing))

#define IZcadTable_put_BreakSpacing(This,spacing)	\
    ((This)->lpVtbl -> put_BreakSpacing(This,spacing))

#define IZcadTable_GetColumnName(This,nIndex,name)	\
    ((This)->lpVtbl -> GetColumnName(This,nIndex,name))

#define IZcadTable_SetColumnName(This,nIndex,name)	\
    ((This)->lpVtbl -> SetColumnName(This,nIndex,name))

#define IZcadTable_SetToolTip(This,nRow,nCol,tip)	\
    ((This)->lpVtbl -> SetToolTip(This,nRow,nCol,tip))

#endif
#endif


 HRESULT STDMETHODCALLTYPE IZcadTable_GetCellTextStyle_Proxy(
    IZcadTable * This,
     int row,
     int col,
     BSTR *bstrName);

void __RPC_STUB IZcadTable_GetCellTextStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetCellTextStyle_Proxy(
    IZcadTable * This,
     int row,
     int col,
     BSTR bstrName);

void __RPC_STUB IZcadTable_SetCellTextStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetCellTextHeight_Proxy(
    IZcadTable * This,
     int row,
     int col,
     double *pTextHeight);

void __RPC_STUB IZcadTable_GetCellTextHeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetCellTextHeight_Proxy(
    IZcadTable * This,
     int row,
     int col,
     double textHeight);

void __RPC_STUB IZcadTable_SetCellTextHeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetTextRotation_Proxy(
    IZcadTable * This,
     int row,
     int col,
     ZcRotationAngle *textRotation);

void __RPC_STUB IZcadTable_GetTextRotation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetTextRotation_Proxy(
    IZcadTable * This,
     int row,
     int col,
     ZcRotationAngle textRotation);

void __RPC_STUB IZcadTable_SetTextRotation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetAutoScale_Proxy(
    IZcadTable * This,
     int row,
     int col,
     VARIANT_BOOL *bValue);

void __RPC_STUB IZcadTable_GetAutoScale_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetAutoScale_Proxy(
    IZcadTable * This,
     int row,
     int col,
     VARIANT_BOOL *bValue);

void __RPC_STUB IZcadTable_SetAutoScale_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetBlockTableRecordId_Proxy(
    IZcadTable * This,
     int row,
     int col,
     LONG_PTR *blkId);

void __RPC_STUB IZcadTable_GetBlockTableRecordId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetBlockTableRecordId_Proxy(
    IZcadTable * This,
     int row,
     int col,
     LONG_PTR blkId,
     VARIANT_BOOL bAutoFit);

void __RPC_STUB IZcadTable_SetBlockTableRecordId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetBlockScale_Proxy(
    IZcadTable * This,
     int row,
     int col,
     double *blkScale);

void __RPC_STUB IZcadTable_GetBlockScale_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetBlockScale_Proxy(
    IZcadTable * This,
     int row,
     int col,
     double blkScale);

void __RPC_STUB IZcadTable_SetBlockScale_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetBlockRotation_Proxy(
    IZcadTable * This,
     int row,
     int col,
     double *blkRotation);

void __RPC_STUB IZcadTable_GetBlockRotation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetBlockRotation_Proxy(
    IZcadTable * This,
     int row,
     int col,
     double blkRotation);

void __RPC_STUB IZcadTable_SetBlockRotation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetBlockAttributeValue_Proxy(
    IZcadTable * This,
     int row,
     int col,
     LONG_PTR attdefId,
     BSTR *bstrValue);

void __RPC_STUB IZcadTable_GetBlockAttributeValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetBlockAttributeValue_Proxy(
    IZcadTable * This,
     int row,
     int col,
     LONG_PTR attdefId,
     BSTR bstrValue);

void __RPC_STUB IZcadTable_SetBlockAttributeValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetCellGridLineWeight_Proxy(
    IZcadTable * This,
     int row,
     int col,
     ZcCellEdgeMask edge,
     ZCAD_LWEIGHT *plineweight);

void __RPC_STUB IZcadTable_GetCellGridLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetCellGridLineWeight_Proxy(
    IZcadTable * This,
     int row,
     int col,
     int edges,
     ZCAD_LWEIGHT lineweight);

void __RPC_STUB IZcadTable_SetCellGridLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetCellGridColor_Proxy(
    IZcadTable * This,
     int row,
     int col,
     ZcCellEdgeMask edge,
     IZcadZcCmColor **pColor);

void __RPC_STUB IZcadTable_GetCellGridColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetCellGridColor_Proxy(
    IZcadTable * This,
     int row,
     int col,
     int edges,
     IZcadZcCmColor *pColor);

void __RPC_STUB IZcadTable_SetCellGridColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetCellGridVisibility_Proxy(
    IZcadTable * This,
     int row,
     int col,
     ZcCellEdgeMask edge,
     VARIANT_BOOL *bValue);

void __RPC_STUB IZcadTable_GetCellGridVisibility_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetCellGridVisibility_Proxy(
    IZcadTable * This,
     int row,
     int col,
     int edges,
     VARIANT_BOOL bValue);

void __RPC_STUB IZcadTable_SetCellGridVisibility_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_InsertColumns_Proxy(
    IZcadTable * This,
     int col,
     double width,
     int cols);

void __RPC_STUB IZcadTable_InsertColumns_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_DeleteColumns_Proxy(
    IZcadTable * This,
     int col,
     int cols);

void __RPC_STUB IZcadTable_DeleteColumns_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_InsertRows_Proxy(
    IZcadTable * This,
     int row,
     double height,
     int rows);

void __RPC_STUB IZcadTable_InsertRows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_DeleteRows_Proxy(
    IZcadTable * This,
     int row,
     int rows);

void __RPC_STUB IZcadTable_DeleteRows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_MergeCells_Proxy(
    IZcadTable * This,
     int minRow,
     int maxRow,
     int minCol,
     int maxCol);

void __RPC_STUB IZcadTable_MergeCells_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_UnmergeCells_Proxy(
    IZcadTable * This,
     int minRow,
     int maxRow,
     int minCol,
     int maxCol);

void __RPC_STUB IZcadTable_UnmergeCells_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_IsMergedCell_Proxy(
    IZcadTable * This,
     int row,
     int col,
     int *minRow,
     int *maxRow,
     int *minCol,
     int *maxCol,
     VARIANT_BOOL *pbValue);

void __RPC_STUB IZcadTable_IsMergedCell_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetFieldId_Proxy(
    IZcadTable * This,
     int row,
     int col,
     LONG_PTR *fieldId);

void __RPC_STUB IZcadTable_GetFieldId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetFieldId_Proxy(
    IZcadTable * This,
     int row,
     int col,
     LONG_PTR fieldId);

void __RPC_STUB IZcadTable_SetFieldId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GenerateLayout_Proxy(
    IZcadTable * This);

void __RPC_STUB IZcadTable_GenerateLayout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_RecomputeTableBlock_Proxy(
    IZcadTable * This,
     VARIANT_BOOL bForceUpdate);

void __RPC_STUB IZcadTable_RecomputeTableBlock_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_HitTest_Proxy(
    IZcadTable * This,
     VARIANT wpt,
     VARIANT wviewVec,
     int *resultRowIndex,
     int *resultColumnIndex,
     VARIANT_BOOL *bReturn);

void __RPC_STUB IZcadTable_HitTest_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_Select_Proxy(
    IZcadTable * This,
     VARIANT wpt,
     VARIANT wvwVec,
     VARIANT wvwxVec,
     double wxaper,
     double wyaper,
     VARIANT_BOOL allowOutside,
     int *resultRowIndex,
     int *resultColumnIndex);

void __RPC_STUB IZcadTable_Select_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SelectSubRegion_Proxy(
    IZcadTable * This,
     VARIANT wpt1,
     VARIANT wpt2,
     VARIANT wvwVec,
     VARIANT wvwxVec,
     ZcSelectType seltype,
     VARIANT_BOOL bIncludeCurrentSelection,
     int *rowMin,
     int *rowMax,
     int *colMin,
     int *colMax);

void __RPC_STUB IZcadTable_SelectSubRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_ReselectSubRegion_Proxy(
    IZcadTable * This);

void __RPC_STUB IZcadTable_ReselectSubRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetSubSelection_Proxy(
    IZcadTable * This,
     int *rowMin,
     int *rowMax,
     int *colMin,
     int *colMax);

void __RPC_STUB IZcadTable_GetSubSelection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetSubSelection_Proxy(
    IZcadTable * This,
     int rowMin,
     int rowMax,
     int colMin,
     int colMax);

void __RPC_STUB IZcadTable_SetSubSelection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_ClearSubSelection_Proxy(
    IZcadTable * This);

void __RPC_STUB IZcadTable_ClearSubSelection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_get_HasSubSelection_Proxy(
    IZcadTable * This,
     VARIANT_BOOL *pbValue);

void __RPC_STUB IZcadTable_get_HasSubSelection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_get_RegenerateTableSuppressed_Proxy(
    IZcadTable * This,
     VARIANT_BOOL *bValue);

void __RPC_STUB IZcadTable_get_RegenerateTableSuppressed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_put_RegenerateTableSuppressed_Proxy(
    IZcadTable * This,
     VARIANT_BOOL bValue);

void __RPC_STUB IZcadTable_put_RegenerateTableSuppressed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetDataType_Proxy(
    IZcadTable * This,
     ZcRowType rowType,
     ZcValueDataType *pDataType,
     ZcValueUnitType *pUnitType);

void __RPC_STUB IZcadTable_GetDataType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetDataType_Proxy(
    IZcadTable * This,
     int rowTypes,
     ZcValueDataType dataType,
     ZcValueUnitType unitType);

void __RPC_STUB IZcadTable_SetDataType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetFormat_Proxy(
    IZcadTable * This,
     ZcRowType rowType,
     BSTR *pFormat);

void __RPC_STUB IZcadTable_GetFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetFormat_Proxy(
    IZcadTable * This,
     int rowTypes,
    BSTR pFormat);

void __RPC_STUB IZcadTable_SetFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_FormatValue_Proxy(
    IZcadTable * This,
     int row,
     int col,
    ZcFormatOption nOption,
    BSTR *pVal);

void __RPC_STUB IZcadTable_FormatValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetCellDataType_Proxy(
    IZcadTable * This,
     int row,
     int col,
     ZcValueDataType *pDataType,
     ZcValueUnitType *pUnitType);

void __RPC_STUB IZcadTable_GetCellDataType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetCellDataType_Proxy(
    IZcadTable * This,
     int row,
     int col,
    ZcValueDataType dataType,
    ZcValueUnitType unitType);

void __RPC_STUB IZcadTable_SetCellDataType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetCellFormat_Proxy(
    IZcadTable * This,
     int row,
     int col,
     BSTR *pFormat);

void __RPC_STUB IZcadTable_GetCellFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetCellFormat_Proxy(
    IZcadTable * This,
     int row,
     int col,
    BSTR pFormat);

void __RPC_STUB IZcadTable_SetCellFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetCellValue_Proxy(
    IZcadTable * This,
     int row,
     int col,
     VARIANT *pVal);

void __RPC_STUB IZcadTable_GetCellValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetCellValue_Proxy(
    IZcadTable * This,
     int row,
     int col,
    VARIANT val);

void __RPC_STUB IZcadTable_SetCellValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetCellValueFromText_Proxy(
    IZcadTable * This,
     int row,
     int col,
     BSTR val,
     ZcParseOption nOption);

void __RPC_STUB IZcadTable_SetCellValueFromText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_ResetCellValue_Proxy(
    IZcadTable * This,
     int row,
     int col);

void __RPC_STUB IZcadTable_ResetCellValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_IsEmpty_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     VARIANT_BOOL *bValue);

void __RPC_STUB IZcadTable_IsEmpty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_CreateContent_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nIndex,
     int *pInt);

void __RPC_STUB IZcadTable_CreateContent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_MoveContent_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nFromIndex,
     int nToIndex);

void __RPC_STUB IZcadTable_MoveContent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_DeleteContent_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol);

void __RPC_STUB IZcadTable_DeleteContent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetValue_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     VARIANT *pZcValue);

void __RPC_STUB IZcadTable_GetValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetValue_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     VARIANT acValue);

void __RPC_STUB IZcadTable_SetValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetValueFromText_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     BSTR szText,
     ZcParseOption nOption);

void __RPC_STUB IZcadTable_SetValueFromText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetDataFormat_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     BSTR *pValue);

void __RPC_STUB IZcadTable_GetDataFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetDataFormat_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     BSTR szFormat);

void __RPC_STUB IZcadTable_SetDataFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetTextString_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     BSTR *pTextString);

void __RPC_STUB IZcadTable_GetTextString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetTextString_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     BSTR text);

void __RPC_STUB IZcadTable_SetTextString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetFieldId2_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     LONG_PTR *pZcDbObjectId);

void __RPC_STUB IZcadTable_GetFieldId2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetFieldId2_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     LONG_PTR zcDbObjectId,
     ZcCellOption nflag);

void __RPC_STUB IZcadTable_SetFieldId2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetBlockTableRecordId2_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     LONG_PTR *pZcDbObjectId);

void __RPC_STUB IZcadTable_GetBlockTableRecordId2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetBlockTableRecordId2_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     LONG_PTR blkId,
     VARIANT_BOOL autoFit);

void __RPC_STUB IZcadTable_SetBlockTableRecordId2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetBlockAttributeValue2_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     LONG_PTR blkId,
     BSTR *value);

void __RPC_STUB IZcadTable_GetBlockAttributeValue2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetBlockAttributeValue2_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     LONG_PTR blkId,
     BSTR value);

void __RPC_STUB IZcadTable_SetBlockAttributeValue2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetCustomData_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     BSTR szKey,
     VARIANT *pData);

void __RPC_STUB IZcadTable_GetCustomData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetCustomData_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     BSTR szKey,
     VARIANT data);

void __RPC_STUB IZcadTable_SetCustomData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetCellStyle_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     BSTR *pCellStyle);

void __RPC_STUB IZcadTable_GetCellStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetCellStyle_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     BSTR szCellStyle);

void __RPC_STUB IZcadTable_SetCellStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetContentColor2_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     IZcadZcCmColor **pColor);

void __RPC_STUB IZcadTable_GetContentColor2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetContentColor2_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     IZcadZcCmColor *pColor);

void __RPC_STUB IZcadTable_SetContentColor2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetDataType2_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     ZcValueDataType *pDataType,
     ZcValueUnitType *pUnitType);

void __RPC_STUB IZcadTable_GetDataType2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetDataType2_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     ZcValueDataType dataType,
     ZcValueUnitType unitType);

void __RPC_STUB IZcadTable_SetDataType2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetTextStyle2_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     BSTR *pbstrStyleName);

void __RPC_STUB IZcadTable_GetTextStyle2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetTextStyle2_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     BSTR bstrStyleName);

void __RPC_STUB IZcadTable_SetTextStyle2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetTextHeight2_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     double *pHeight);

void __RPC_STUB IZcadTable_GetTextHeight2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetTextHeight2_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     double height);

void __RPC_STUB IZcadTable_SetTextHeight2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetRotation_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     double *pValue);

void __RPC_STUB IZcadTable_GetRotation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetRotation_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     double value);

void __RPC_STUB IZcadTable_SetRotation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetAutoScale2_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     VARIANT_BOOL *bAutoScale);

void __RPC_STUB IZcadTable_GetAutoScale2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetAutoScale2_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     VARIANT_BOOL bAutoFit);

void __RPC_STUB IZcadTable_SetAutoScale2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetScale_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     double *pScale);

void __RPC_STUB IZcadTable_GetScale_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetScale_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     double scale);

void __RPC_STUB IZcadTable_SetScale_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_RemoveAllOverrides_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol);

void __RPC_STUB IZcadTable_RemoveAllOverrides_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetGridLineWeight2_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     ZcGridLineType nGridLineType,
     ZCAD_LWEIGHT *pLineWeight);

void __RPC_STUB IZcadTable_GetGridLineWeight2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetGridLineWeight2_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     ZcGridLineType nGridLineType,
     ZCAD_LWEIGHT lineWeight);

void __RPC_STUB IZcadTable_SetGridLineWeight2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetGridLinetype_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     ZcGridLineType nGridLineType,
     LONG_PTR *pacDbObjId);

void __RPC_STUB IZcadTable_GetGridLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetGridLinetype_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     ZcGridLineType nGridLineType,
     LONG_PTR idLinetype);

void __RPC_STUB IZcadTable_SetGridLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetGridColor2_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     ZcGridLineType nGridLineType,
     IZcadZcCmColor **pColor);

void __RPC_STUB IZcadTable_GetGridColor2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetGridColor2_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     ZcGridLineType nGridLineType,
     IZcadZcCmColor *pColor);

void __RPC_STUB IZcadTable_SetGridColor2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetGridVisibility2_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     ZcGridLineType nGridLineType,
     VARIANT_BOOL *bVisible);

void __RPC_STUB IZcadTable_GetGridVisibility2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetGridVisibility2_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     ZcGridLineType nGridLineType,
     VARIANT_BOOL bVisible);

void __RPC_STUB IZcadTable_SetGridVisibility2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetGridDoubleLineSpacing_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     ZcGridLineType nGridLineType,
     double *pValue);

void __RPC_STUB IZcadTable_GetGridDoubleLineSpacing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetGridDoubleLineSpacing_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     ZcGridLineType nGridLineType,
     double fSpacing);

void __RPC_STUB IZcadTable_SetGridDoubleLineSpacing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_put_EnableBreak_Proxy(
    IZcadTable * This,
     VARIANT_BOOL bEnable);

void __RPC_STUB IZcadTable_put_EnableBreak_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetBreakHeight_Proxy(
    IZcadTable * This,
     int nIndex,
     double *pHeight);

void __RPC_STUB IZcadTable_GetBreakHeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetBreakHeight_Proxy(
    IZcadTable * This,
     int nIndex,
     double height);

void __RPC_STUB IZcadTable_SetBreakHeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetContentType_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     ZcCellContentType *pType);

void __RPC_STUB IZcadTable_GetContentType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetMargin_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     ZcCellMargin nMargin,
     double *pValue);

void __RPC_STUB IZcadTable_GetMargin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetMargin_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     ZcCellMargin nMargins,
     double fMargin);

void __RPC_STUB IZcadTable_SetMargin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetContentLayout_Proxy(
    IZcadTable * This,
     int row,
     int col,
     ZcCellContentLayout *pLayout);

void __RPC_STUB IZcadTable_GetContentLayout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetContentLayout_Proxy(
    IZcadTable * This,
     int row,
     int col,
     ZcCellContentLayout nLayout);

void __RPC_STUB IZcadTable_SetContentLayout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetOverride_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     ZcCellProperty *pValue);

void __RPC_STUB IZcadTable_GetOverride_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetOverride_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     ZcCellProperty nProp);

void __RPC_STUB IZcadTable_SetOverride_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetGridLineStyle_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     ZcGridLineType nGridLineType,
     ZcGridLineStyle *pStyle);

void __RPC_STUB IZcadTable_GetGridLineStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetGridLineStyle_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     ZcGridLineType nGridLineTypes,
     ZcGridLineStyle nLineStyle);

void __RPC_STUB IZcadTable_SetGridLineStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_InsertRowsAndInherit_Proxy(
    IZcadTable * This,
     int nIndex,
     int nInheritFrom,
     int nNumRows);

void __RPC_STUB IZcadTable_InsertRowsAndInherit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_InsertColumnsAndInherit_Proxy(
    IZcadTable * This,
     int col,
     int nInheritFrom,
     int nNumCols);

void __RPC_STUB IZcadTable_InsertColumnsAndInherit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetHasFormula_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     VARIANT_BOOL *bValue);

void __RPC_STUB IZcadTable_GetHasFormula_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetFormula_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     BSTR *pszFormula);

void __RPC_STUB IZcadTable_GetFormula_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetFormula_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     int nContent,
     BSTR pszFormula);

void __RPC_STUB IZcadTable_SetFormula_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_IsContentEditable_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     VARIANT_BOOL *bValue);

void __RPC_STUB IZcadTable_IsContentEditable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_IsFormatEditable_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     VARIANT_BOOL *bValue);

void __RPC_STUB IZcadTable_IsFormatEditable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetCellState_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     ZcCellState *pCellState);

void __RPC_STUB IZcadTable_GetCellState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetCellState_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     ZcCellState nLock);

void __RPC_STUB IZcadTable_SetCellState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_EnableMergeAll_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     VARIANT_BOOL bEnable);

void __RPC_STUB IZcadTable_EnableMergeAll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_IsMergeAllEnabled_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     VARIANT_BOOL *bValue);

void __RPC_STUB IZcadTable_IsMergeAllEnabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_get_BreaksEnabled_Proxy(
    IZcadTable * This,
     VARIANT_BOOL *bEnabled);

void __RPC_STUB IZcadTable_get_BreaksEnabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_put_BreaksEnabled_Proxy(
    IZcadTable * This,
     VARIANT_BOOL bEnabled);

void __RPC_STUB IZcadTable_put_BreaksEnabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_get_RepeatTopLabels_Proxy(
    IZcadTable * This,
     VARIANT_BOOL *bEnabled);

void __RPC_STUB IZcadTable_get_RepeatTopLabels_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_put_RepeatTopLabels_Proxy(
    IZcadTable * This,
     VARIANT_BOOL bEnabled);

void __RPC_STUB IZcadTable_put_RepeatTopLabels_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_get_RepeatBottomLabels_Proxy(
    IZcadTable * This,
     VARIANT_BOOL *bEnabled);

void __RPC_STUB IZcadTable_get_RepeatBottomLabels_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_put_RepeatBottomLabels_Proxy(
    IZcadTable * This,
     VARIANT_BOOL bEnabled);

void __RPC_STUB IZcadTable_put_RepeatBottomLabels_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_get_TableBreakFlowDirection_Proxy(
    IZcadTable * This,
     ZcTableFlowDirection *pDir);

void __RPC_STUB IZcadTable_get_TableBreakFlowDirection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_put_TableBreakFlowDirection_Proxy(
    IZcadTable * This,
     ZcTableFlowDirection dir);

void __RPC_STUB IZcadTable_put_TableBreakFlowDirection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_get_AllowManualPositions_Proxy(
    IZcadTable * This,
     VARIANT_BOOL *bEnabled);

void __RPC_STUB IZcadTable_get_AllowManualPositions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_put_AllowManualPositions_Proxy(
    IZcadTable * This,
     VARIANT_BOOL bEnabled);

void __RPC_STUB IZcadTable_put_AllowManualPositions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_get_AllowManualHeights_Proxy(
    IZcadTable * This,
     VARIANT_BOOL *bEnabled);

void __RPC_STUB IZcadTable_get_AllowManualHeights_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_put_AllowManualHeights_Proxy(
    IZcadTable * This,
     VARIANT_BOOL bEnabled);

void __RPC_STUB IZcadTable_put_AllowManualHeights_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_get_TableBreakHeight_Proxy(
    IZcadTable * This,
     double *pHeight);

void __RPC_STUB IZcadTable_get_TableBreakHeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_put_TableBreakHeight_Proxy(
    IZcadTable * This,
     double height);

void __RPC_STUB IZcadTable_put_TableBreakHeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_get_BreakSpacing_Proxy(
    IZcadTable * This,
     double *pSpacing);

void __RPC_STUB IZcadTable_get_BreakSpacing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_put_BreakSpacing_Proxy(
    IZcadTable * This,
     double spacing);

void __RPC_STUB IZcadTable_put_BreakSpacing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_GetColumnName_Proxy(
    IZcadTable * This,
     int nIndex,
     BSTR *name);

void __RPC_STUB IZcadTable_GetColumnName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetColumnName_Proxy(
    IZcadTable * This,
     int nIndex,
     BSTR name);

void __RPC_STUB IZcadTable_SetColumnName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadTable_SetToolTip_Proxy(
    IZcadTable * This,
     int nRow,
     int nCol,
     BSTR tip);

void __RPC_STUB IZcadTable_SetToolTip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


#endif

DEFINE_GUID(CLSID_ZcadTable,0xEC923019,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923019-5A17-11E7-B72E-BC5FF42AC839")
ZcadTable;
#endif

#ifndef __IZcadOle_INTERFACE_DEFINED__
#define __IZcadOle_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadOle,0xEC923045,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923045-5A17-11E7-B72E-BC5FF42AC839")
    IZcadOle : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_InsertionPoint(
             VARIANT *insPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_InsertionPoint(
             VARIANT insPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Rotation(
             ZCAD_ANGLE *rot) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Rotation(
             ZCAD_ANGLE rot) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Width(
             double *width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Width(
             double width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Height(
             double *height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Height(
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ScaleWidth(
             double *swidth) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ScaleWidth(
             double swidth) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ScaleHeight(
             double *sheight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ScaleHeight(
             double sheight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LockAspectRatio(
             VARIANT_BOOL *aspect) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LockAspectRatio(
             VARIANT_BOOL aspect) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_OleItemType(
             ZcOleType *pType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_OleItemType(
             ZcOleType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_OlePlotQuality(
             ZcOlePlotQuality *pPQuality) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_OlePlotQuality(
             ZcOlePlotQuality pQuality) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_OleSourceApp(
             BSTR *srcApp) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_OleSourceApp(
             BSTR srcApp) = 0;

    };

#else

    typedef struct IZcadOleVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadOle * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadOle * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadOle * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadOle * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadOle * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadOle * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadOle * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadOle * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadOle * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadOle * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadOle * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadOle * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadOle * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadOle * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadOle * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadOle * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadOle * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadOle * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadOle * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadOle * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadOle * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadOle * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadOle * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadOle * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadOle * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadOle * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadOle * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadOle * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadOle * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadOle * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadOle * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadOle * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadOle * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadOle * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadOle * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadOle * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadOle * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadOle * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadOle * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadOle * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadOle * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadOle * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadOle * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadOle * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadOle * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadOle * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadOle * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadOle * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadOle * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadOle * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadOle * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadOle * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadOle * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadOle * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadOle * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadOle * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadOle * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_InsertionPoint )(
            IZcadOle * This,
             VARIANT *insPoint);

         HRESULT ( STDMETHODCALLTYPE *put_InsertionPoint )(
            IZcadOle * This,
             VARIANT insPoint);

         HRESULT ( STDMETHODCALLTYPE *get_Rotation )(
            IZcadOle * This,
             ZCAD_ANGLE *rot);

         HRESULT ( STDMETHODCALLTYPE *put_Rotation )(
            IZcadOle * This,
             ZCAD_ANGLE rot);

         HRESULT ( STDMETHODCALLTYPE *get_Width )(
            IZcadOle * This,
             double *width);

         HRESULT ( STDMETHODCALLTYPE *put_Width )(
            IZcadOle * This,
             double width);

         HRESULT ( STDMETHODCALLTYPE *get_Height )(
            IZcadOle * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_Height )(
            IZcadOle * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleWidth )(
            IZcadOle * This,
             double *swidth);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleWidth )(
            IZcadOle * This,
             double swidth);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleHeight )(
            IZcadOle * This,
             double *sheight);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleHeight )(
            IZcadOle * This,
             double sheight);

         HRESULT ( STDMETHODCALLTYPE *get_LockAspectRatio )(
            IZcadOle * This,
             VARIANT_BOOL *aspect);

         HRESULT ( STDMETHODCALLTYPE *put_LockAspectRatio )(
            IZcadOle * This,
             VARIANT_BOOL aspect);

         HRESULT ( STDMETHODCALLTYPE *get_OleItemType )(
            IZcadOle * This,
             ZcOleType *pType);

         HRESULT ( STDMETHODCALLTYPE *put_OleItemType )(
            IZcadOle * This,
             ZcOleType type);

         HRESULT ( STDMETHODCALLTYPE *get_OlePlotQuality )(
            IZcadOle * This,
             ZcOlePlotQuality *pPQuality);

         HRESULT ( STDMETHODCALLTYPE *put_OlePlotQuality )(
            IZcadOle * This,
             ZcOlePlotQuality pQuality);

         HRESULT ( STDMETHODCALLTYPE *get_OleSourceApp )(
            IZcadOle * This,
             BSTR *srcApp);

         HRESULT ( STDMETHODCALLTYPE *put_OleSourceApp )(
            IZcadOle * This,
             BSTR srcApp);

        END_INTERFACE
    } IZcadOleVtbl;

    interface IZcadOle
    {
        CONST_VTBL struct IZcadOleVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadOle_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadOle_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadOle_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadOle_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadOle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadOle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadOle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadOle_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadOle_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadOle_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadOle_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadOle_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadOle_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadOle_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadOle_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadOle_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadOle_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadOle_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadOle_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadOle_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadOle_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadOle_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadOle_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadOle_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadOle_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadOle_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadOle_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadOle_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadOle_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadOle_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadOle_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadOle_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadOle_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadOle_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadOle_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadOle_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadOle_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadOle_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadOle_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadOle_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadOle_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadOle_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadOle_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadOle_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadOle_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadOle_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadOle_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadOle_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadOle_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadOle_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadOle_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadOle_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadOle_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadOle_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadOle_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadOle_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadOle_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadOle_get_InsertionPoint(This,insPoint)	\
    ((This)->lpVtbl -> get_InsertionPoint(This,insPoint))

#define IZcadOle_put_InsertionPoint(This,insPoint)	\
    ((This)->lpVtbl -> put_InsertionPoint(This,insPoint))

#define IZcadOle_get_Rotation(This,rot)	\
    ((This)->lpVtbl -> get_Rotation(This,rot))

#define IZcadOle_put_Rotation(This,rot)	\
    ((This)->lpVtbl -> put_Rotation(This,rot))

#define IZcadOle_get_Width(This,width)	\
    ((This)->lpVtbl -> get_Width(This,width))

#define IZcadOle_put_Width(This,width)	\
    ((This)->lpVtbl -> put_Width(This,width))

#define IZcadOle_get_Height(This,height)	\
    ((This)->lpVtbl -> get_Height(This,height))

#define IZcadOle_put_Height(This,height)	\
    ((This)->lpVtbl -> put_Height(This,height))

#define IZcadOle_get_ScaleWidth(This,swidth)	\
    ((This)->lpVtbl -> get_ScaleWidth(This,swidth))

#define IZcadOle_put_ScaleWidth(This,swidth)	\
    ((This)->lpVtbl -> put_ScaleWidth(This,swidth))

#define IZcadOle_get_ScaleHeight(This,sheight)	\
    ((This)->lpVtbl -> get_ScaleHeight(This,sheight))

#define IZcadOle_put_ScaleHeight(This,sheight)	\
    ((This)->lpVtbl -> put_ScaleHeight(This,sheight))

#define IZcadOle_get_LockAspectRatio(This,aspect)	\
    ((This)->lpVtbl -> get_LockAspectRatio(This,aspect))

#define IZcadOle_put_LockAspectRatio(This,aspect)	\
    ((This)->lpVtbl -> put_LockAspectRatio(This,aspect))

#define IZcadOle_get_OleItemType(This,pType)	\
    ((This)->lpVtbl -> get_OleItemType(This,pType))

#define IZcadOle_put_OleItemType(This,type)	\
    ((This)->lpVtbl -> put_OleItemType(This,type))

#define IZcadOle_get_OlePlotQuality(This,pPQuality)	\
    ((This)->lpVtbl -> get_OlePlotQuality(This,pPQuality))

#define IZcadOle_put_OlePlotQuality(This,pQuality)	\
    ((This)->lpVtbl -> put_OlePlotQuality(This,pQuality))

#define IZcadOle_get_OleSourceApp(This,srcApp)	\
    ((This)->lpVtbl -> get_OleSourceApp(This,srcApp))

#define IZcadOle_put_OleSourceApp(This,srcApp)	\
    ((This)->lpVtbl -> put_OleSourceApp(This,srcApp))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadOle,0xEC92311B,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC92311B-5A17-11E7-B72E-BC5FF42AC839")
ZcadOle;
#endif

#ifndef __IZcadHelix_INTERFACE_DEFINED__
#define __IZcadHelix_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadHelix,0xEC923142,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923142-5A17-11E7-B72E-BC5FF42AC839")
    IZcadHelix : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Position(
             VARIANT *startPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Position(
             VARIANT startPoint) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Constrain(
             ZcHelixConstrainType *constrainType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Constrain(
             ZcHelixConstrainType constrainType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Height(
             double *length) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Height(
             double length) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Turns(
             ZCAD_NOUNITS *turns) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Turns(
             ZCAD_NOUNITS radius) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TurnHeight(
             double *distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TurnHeight(
             double distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BaseRadius(
             double *radius) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BaseRadius(
             double radius) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TopRadius(
             double *radius) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TopRadius(
             double turns) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Twist(
             ZcHelixTwistType *twistType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Twist(
             ZcHelixTwistType twistType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TurnSlope(
             ZCAD_ANGLE *slopeAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TotalLength(
             double *totalLength) = 0;

    };

#else

    typedef struct IZcadHelixVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadHelix * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadHelix * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadHelix * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadHelix * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadHelix * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadHelix * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadHelix * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadHelix * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadHelix * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadHelix * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadHelix * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadHelix * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadHelix * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadHelix * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadHelix * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadHelix * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadHelix * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadHelix * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadHelix * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadHelix * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadHelix * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadHelix * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadHelix * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadHelix * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadHelix * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadHelix * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadHelix * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadHelix * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadHelix * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadHelix * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadHelix * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadHelix * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadHelix * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadHelix * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadHelix * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadHelix * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadHelix * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadHelix * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadHelix * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadHelix * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadHelix * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadHelix * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadHelix * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadHelix * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadHelix * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadHelix * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadHelix * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadHelix * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadHelix * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadHelix * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadHelix * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadHelix * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadHelix * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadHelix * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadHelix * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadHelix * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadHelix * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Position )(
            IZcadHelix * This,
             VARIANT *startPoint);

         HRESULT ( STDMETHODCALLTYPE *put_Position )(
            IZcadHelix * This,
             VARIANT startPoint);

         HRESULT ( STDMETHODCALLTYPE *get_Constrain )(
            IZcadHelix * This,
             ZcHelixConstrainType *constrainType);

         HRESULT ( STDMETHODCALLTYPE *put_Constrain )(
            IZcadHelix * This,
             ZcHelixConstrainType constrainType);

         HRESULT ( STDMETHODCALLTYPE *get_Height )(
            IZcadHelix * This,
             double *length);

         HRESULT ( STDMETHODCALLTYPE *put_Height )(
            IZcadHelix * This,
             double length);

         HRESULT ( STDMETHODCALLTYPE *get_Turns )(
            IZcadHelix * This,
             ZCAD_NOUNITS *turns);

         HRESULT ( STDMETHODCALLTYPE *put_Turns )(
            IZcadHelix * This,
             ZCAD_NOUNITS radius);

         HRESULT ( STDMETHODCALLTYPE *get_TurnHeight )(
            IZcadHelix * This,
             double *distance);

         HRESULT ( STDMETHODCALLTYPE *put_TurnHeight )(
            IZcadHelix * This,
             double distance);

         HRESULT ( STDMETHODCALLTYPE *get_BaseRadius )(
            IZcadHelix * This,
             double *radius);

         HRESULT ( STDMETHODCALLTYPE *put_BaseRadius )(
            IZcadHelix * This,
             double radius);

         HRESULT ( STDMETHODCALLTYPE *get_TopRadius )(
            IZcadHelix * This,
             double *radius);

         HRESULT ( STDMETHODCALLTYPE *put_TopRadius )(
            IZcadHelix * This,
             double turns);

         HRESULT ( STDMETHODCALLTYPE *get_Twist )(
            IZcadHelix * This,
             ZcHelixTwistType *twistType);

         HRESULT ( STDMETHODCALLTYPE *put_Twist )(
            IZcadHelix * This,
             ZcHelixTwistType twistType);

         HRESULT ( STDMETHODCALLTYPE *get_TurnSlope )(
            IZcadHelix * This,
             ZCAD_ANGLE *slopeAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TotalLength )(
            IZcadHelix * This,
             double *totalLength);

        END_INTERFACE
    } IZcadHelixVtbl;

    interface IZcadHelix
    {
        CONST_VTBL struct IZcadHelixVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadHelix_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadHelix_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadHelix_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadHelix_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadHelix_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadHelix_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadHelix_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadHelix_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadHelix_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadHelix_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadHelix_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadHelix_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadHelix_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadHelix_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadHelix_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadHelix_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadHelix_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadHelix_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadHelix_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadHelix_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadHelix_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadHelix_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadHelix_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadHelix_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadHelix_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadHelix_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadHelix_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadHelix_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadHelix_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadHelix_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadHelix_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadHelix_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadHelix_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadHelix_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadHelix_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadHelix_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadHelix_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadHelix_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadHelix_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadHelix_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadHelix_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadHelix_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadHelix_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadHelix_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadHelix_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadHelix_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadHelix_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadHelix_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadHelix_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadHelix_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadHelix_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadHelix_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadHelix_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadHelix_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadHelix_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadHelix_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadHelix_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadHelix_get_Position(This,startPoint)	\
    ((This)->lpVtbl -> get_Position(This,startPoint))

#define IZcadHelix_put_Position(This,startPoint)	\
    ((This)->lpVtbl -> put_Position(This,startPoint))

#define IZcadHelix_get_Constrain(This,constrainType)	\
    ((This)->lpVtbl -> get_Constrain(This,constrainType))

#define IZcadHelix_put_Constrain(This,constrainType)	\
    ((This)->lpVtbl -> put_Constrain(This,constrainType))

#define IZcadHelix_get_Height(This,length)	\
    ((This)->lpVtbl -> get_Height(This,length))

#define IZcadHelix_put_Height(This,length)	\
    ((This)->lpVtbl -> put_Height(This,length))

#define IZcadHelix_get_Turns(This,turns)	\
    ((This)->lpVtbl -> get_Turns(This,turns))

#define IZcadHelix_put_Turns(This,radius)	\
    ((This)->lpVtbl -> put_Turns(This,radius))

#define IZcadHelix_get_TurnHeight(This,distance)	\
    ((This)->lpVtbl -> get_TurnHeight(This,distance))

#define IZcadHelix_put_TurnHeight(This,distance)	\
    ((This)->lpVtbl -> put_TurnHeight(This,distance))

#define IZcadHelix_get_BaseRadius(This,radius)	\
    ((This)->lpVtbl -> get_BaseRadius(This,radius))

#define IZcadHelix_put_BaseRadius(This,radius)	\
    ((This)->lpVtbl -> put_BaseRadius(This,radius))

#define IZcadHelix_get_TopRadius(This,radius)	\
    ((This)->lpVtbl -> get_TopRadius(This,radius))

#define IZcadHelix_put_TopRadius(This,turns)	\
    ((This)->lpVtbl -> put_TopRadius(This,turns))

#define IZcadHelix_get_Twist(This,twistType)	\
    ((This)->lpVtbl -> get_Twist(This,twistType))

#define IZcadHelix_put_Twist(This,twistType)	\
    ((This)->lpVtbl -> put_Twist(This,twistType))

#define IZcadHelix_get_TurnSlope(This,slopeAngle)	\
    ((This)->lpVtbl -> get_TurnSlope(This,slopeAngle))

#define IZcadHelix_get_TotalLength(This,totalLength)	\
    ((This)->lpVtbl -> get_TotalLength(This,totalLength))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadHelix,0xEC923012,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923012-5A17-11E7-B72E-BC5FF42AC839")
ZcadHelix;
#endif

#ifndef __IZcadSurface_INTERFACE_DEFINED__
#define __IZcadSurface_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadSurface,0xEC9231DF,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9231DF-5A17-11E7-B72E-BC5FF42AC839")
    IZcadSurface : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_SurfaceType(
             BSTR *surfaceType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UIsolineDensity(
             long *density) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_UIsolineDensity(
             long density) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_VIsolineDensity(
             long *density) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_VIsolineDensity(
             long density) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_WireframeType(
             ZcWireframeType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_WireframeType(
             ZcWireframeType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MaintainAssociativity(
             int *maintainAssoc) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_MaintainAssociativity(
             int maintainAssoc) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ShowAssociativity(
             VARIANT_BOOL *bEnabled) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ShowAssociativity(
             VARIANT_BOOL bEnabled) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EdgeExtensionDistances(
             VARIANT *extDistances) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_EdgeExtensionDistances(
             VARIANT extDistances) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SurfTrimAssociativity(
             VARIANT *associative) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SurfTrimAssociativity(
             VARIANT associative) = 0;

    };

#else

    typedef struct IZcadSurfaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadSurface * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadSurface * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadSurface * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadSurface * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadSurface * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadSurface * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadSurface * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadSurface * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadSurface * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadSurface * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadSurface * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadSurface * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadSurface * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadSurface * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadSurface * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadSurface * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadSurface * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadSurface * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadSurface * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadSurface * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadSurface * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadSurface * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadSurface * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadSurface * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadSurface * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadSurface * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadSurface * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadSurface * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadSurface * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadSurface * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadSurface * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadSurface * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadSurface * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadSurface * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadSurface * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadSurface * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadSurface * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadSurface * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadSurface * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadSurface * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadSurface * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadSurface * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadSurface * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadSurface * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadSurface * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadSurface * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadSurface * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadSurface * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadSurface * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadSurface * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadSurface * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadSurface * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadSurface * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadSurface * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadSurface * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadSurface * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadSurface * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_SurfaceType )(
            IZcadSurface * This,
             BSTR *surfaceType);

         HRESULT ( STDMETHODCALLTYPE *get_UIsolineDensity )(
            IZcadSurface * This,
             long *density);

         HRESULT ( STDMETHODCALLTYPE *put_UIsolineDensity )(
            IZcadSurface * This,
             long density);

         HRESULT ( STDMETHODCALLTYPE *get_VIsolineDensity )(
            IZcadSurface * This,
             long *density);

         HRESULT ( STDMETHODCALLTYPE *put_VIsolineDensity )(
            IZcadSurface * This,
             long density);

         HRESULT ( STDMETHODCALLTYPE *get_WireframeType )(
            IZcadSurface * This,
             ZcWireframeType *type);

         HRESULT ( STDMETHODCALLTYPE *put_WireframeType )(
            IZcadSurface * This,
             ZcWireframeType type);

         HRESULT ( STDMETHODCALLTYPE *get_MaintainAssociativity )(
            IZcadSurface * This,
             int *maintainAssoc);

         HRESULT ( STDMETHODCALLTYPE *put_MaintainAssociativity )(
            IZcadSurface * This,
             int maintainAssoc);

         HRESULT ( STDMETHODCALLTYPE *get_ShowAssociativity )(
            IZcadSurface * This,
             VARIANT_BOOL *bEnabled);

         HRESULT ( STDMETHODCALLTYPE *put_ShowAssociativity )(
            IZcadSurface * This,
             VARIANT_BOOL bEnabled);

         HRESULT ( STDMETHODCALLTYPE *get_EdgeExtensionDistances )(
            IZcadSurface * This,
             VARIANT *extDistances);

         HRESULT ( STDMETHODCALLTYPE *put_EdgeExtensionDistances )(
            IZcadSurface * This,
             VARIANT extDistances);

         HRESULT ( STDMETHODCALLTYPE *get_SurfTrimAssociativity )(
            IZcadSurface * This,
             VARIANT *associative);

         HRESULT ( STDMETHODCALLTYPE *put_SurfTrimAssociativity )(
            IZcadSurface * This,
             VARIANT associative);

        END_INTERFACE
    } IZcadSurfaceVtbl;

    interface IZcadSurface
    {
        CONST_VTBL struct IZcadSurfaceVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadSurface_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadSurface_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadSurface_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadSurface_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadSurface_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadSurface_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadSurface_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadSurface_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadSurface_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadSurface_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadSurface_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadSurface_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadSurface_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadSurface_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadSurface_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadSurface_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadSurface_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadSurface_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadSurface_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadSurface_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadSurface_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadSurface_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadSurface_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadSurface_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadSurface_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadSurface_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadSurface_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadSurface_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadSurface_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadSurface_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadSurface_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadSurface_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadSurface_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadSurface_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadSurface_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadSurface_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadSurface_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadSurface_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadSurface_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadSurface_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadSurface_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadSurface_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadSurface_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadSurface_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadSurface_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadSurface_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadSurface_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadSurface_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadSurface_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadSurface_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadSurface_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadSurface_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadSurface_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadSurface_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadSurface_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadSurface_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadSurface_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadSurface_get_SurfaceType(This,surfaceType)	\
    ((This)->lpVtbl -> get_SurfaceType(This,surfaceType))

#define IZcadSurface_get_UIsolineDensity(This,density)	\
    ((This)->lpVtbl -> get_UIsolineDensity(This,density))

#define IZcadSurface_put_UIsolineDensity(This,density)	\
    ((This)->lpVtbl -> put_UIsolineDensity(This,density))

#define IZcadSurface_get_VIsolineDensity(This,density)	\
    ((This)->lpVtbl -> get_VIsolineDensity(This,density))

#define IZcadSurface_put_VIsolineDensity(This,density)	\
    ((This)->lpVtbl -> put_VIsolineDensity(This,density))

#define IZcadSurface_get_WireframeType(This,type)	\
    ((This)->lpVtbl -> get_WireframeType(This,type))

#define IZcadSurface_put_WireframeType(This,type)	\
    ((This)->lpVtbl -> put_WireframeType(This,type))

#define IZcadSurface_get_MaintainAssociativity(This,maintainAssoc)	\
    ((This)->lpVtbl -> get_MaintainAssociativity(This,maintainAssoc))

#define IZcadSurface_put_MaintainAssociativity(This,maintainAssoc)	\
    ((This)->lpVtbl -> put_MaintainAssociativity(This,maintainAssoc))

#define IZcadSurface_get_ShowAssociativity(This,bEnabled)	\
    ((This)->lpVtbl -> get_ShowAssociativity(This,bEnabled))

#define IZcadSurface_put_ShowAssociativity(This,bEnabled)	\
    ((This)->lpVtbl -> put_ShowAssociativity(This,bEnabled))

#define IZcadSurface_get_EdgeExtensionDistances(This,extDistances)	\
    ((This)->lpVtbl -> get_EdgeExtensionDistances(This,extDistances))

#define IZcadSurface_put_EdgeExtensionDistances(This,extDistances)	\
    ((This)->lpVtbl -> put_EdgeExtensionDistances(This,extDistances))

#define IZcadSurface_get_SurfTrimAssociativity(This,associative)	\
    ((This)->lpVtbl -> get_SurfTrimAssociativity(This,associative))

#define IZcadSurface_put_SurfTrimAssociativity(This,associative)	\
    ((This)->lpVtbl -> put_SurfTrimAssociativity(This,associative))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadSurface,0xEC92305A,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC92305A-5A17-11E7-B72E-BC5FF42AC839")
ZcadSurface;
#endif

#ifndef __IZcadPlaneSurface_INTERFACE_DEFINED__
#define __IZcadPlaneSurface_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadPlaneSurface,0xEC9230A4,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9230A4-5A17-11E7-B72E-BC5FF42AC839")
    IZcadPlaneSurface : public IZcadSurface
    {
    public:
    };

#else

    typedef struct IZcadPlaneSurfaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadPlaneSurface * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadPlaneSurface * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadPlaneSurface * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadPlaneSurface * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadPlaneSurface * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadPlaneSurface * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadPlaneSurface * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadPlaneSurface * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadPlaneSurface * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadPlaneSurface * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadPlaneSurface * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadPlaneSurface * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadPlaneSurface * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadPlaneSurface * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadPlaneSurface * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadPlaneSurface * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadPlaneSurface * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadPlaneSurface * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadPlaneSurface * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadPlaneSurface * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadPlaneSurface * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadPlaneSurface * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadPlaneSurface * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadPlaneSurface * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadPlaneSurface * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadPlaneSurface * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadPlaneSurface * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadPlaneSurface * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadPlaneSurface * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadPlaneSurface * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadPlaneSurface * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadPlaneSurface * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadPlaneSurface * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadPlaneSurface * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadPlaneSurface * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadPlaneSurface * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadPlaneSurface * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadPlaneSurface * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadPlaneSurface * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadPlaneSurface * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadPlaneSurface * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadPlaneSurface * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadPlaneSurface * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadPlaneSurface * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadPlaneSurface * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadPlaneSurface * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadPlaneSurface * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadPlaneSurface * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadPlaneSurface * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadPlaneSurface * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadPlaneSurface * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadPlaneSurface * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadPlaneSurface * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadPlaneSurface * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadPlaneSurface * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadPlaneSurface * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadPlaneSurface * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_SurfaceType )(
            IZcadPlaneSurface * This,
             BSTR *surfaceType);

         HRESULT ( STDMETHODCALLTYPE *get_UIsolineDensity )(
            IZcadPlaneSurface * This,
             long *density);

         HRESULT ( STDMETHODCALLTYPE *put_UIsolineDensity )(
            IZcadPlaneSurface * This,
             long density);

         HRESULT ( STDMETHODCALLTYPE *get_VIsolineDensity )(
            IZcadPlaneSurface * This,
             long *density);

         HRESULT ( STDMETHODCALLTYPE *put_VIsolineDensity )(
            IZcadPlaneSurface * This,
             long density);

         HRESULT ( STDMETHODCALLTYPE *get_WireframeType )(
            IZcadPlaneSurface * This,
             ZcWireframeType *type);

         HRESULT ( STDMETHODCALLTYPE *put_WireframeType )(
            IZcadPlaneSurface * This,
             ZcWireframeType type);

         HRESULT ( STDMETHODCALLTYPE *get_MaintainAssociativity )(
            IZcadPlaneSurface * This,
             int *maintainAssoc);

         HRESULT ( STDMETHODCALLTYPE *put_MaintainAssociativity )(
            IZcadPlaneSurface * This,
             int maintainAssoc);

         HRESULT ( STDMETHODCALLTYPE *get_ShowAssociativity )(
            IZcadPlaneSurface * This,
             VARIANT_BOOL *bEnabled);

         HRESULT ( STDMETHODCALLTYPE *put_ShowAssociativity )(
            IZcadPlaneSurface * This,
             VARIANT_BOOL bEnabled);

         HRESULT ( STDMETHODCALLTYPE *get_EdgeExtensionDistances )(
            IZcadPlaneSurface * This,
             VARIANT *extDistances);

         HRESULT ( STDMETHODCALLTYPE *put_EdgeExtensionDistances )(
            IZcadPlaneSurface * This,
             VARIANT extDistances);

         HRESULT ( STDMETHODCALLTYPE *get_SurfTrimAssociativity )(
            IZcadPlaneSurface * This,
             VARIANT *associative);

         HRESULT ( STDMETHODCALLTYPE *put_SurfTrimAssociativity )(
            IZcadPlaneSurface * This,
             VARIANT associative);

        END_INTERFACE
    } IZcadPlaneSurfaceVtbl;

    interface IZcadPlaneSurface
    {
        CONST_VTBL struct IZcadPlaneSurfaceVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadPlaneSurface_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadPlaneSurface_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadPlaneSurface_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadPlaneSurface_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadPlaneSurface_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadPlaneSurface_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadPlaneSurface_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadPlaneSurface_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadPlaneSurface_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadPlaneSurface_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadPlaneSurface_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadPlaneSurface_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadPlaneSurface_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadPlaneSurface_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadPlaneSurface_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadPlaneSurface_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadPlaneSurface_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadPlaneSurface_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadPlaneSurface_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadPlaneSurface_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadPlaneSurface_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadPlaneSurface_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadPlaneSurface_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadPlaneSurface_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadPlaneSurface_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadPlaneSurface_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadPlaneSurface_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadPlaneSurface_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadPlaneSurface_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadPlaneSurface_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadPlaneSurface_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadPlaneSurface_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadPlaneSurface_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadPlaneSurface_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadPlaneSurface_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadPlaneSurface_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadPlaneSurface_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadPlaneSurface_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadPlaneSurface_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadPlaneSurface_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadPlaneSurface_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadPlaneSurface_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadPlaneSurface_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadPlaneSurface_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadPlaneSurface_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadPlaneSurface_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadPlaneSurface_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadPlaneSurface_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadPlaneSurface_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadPlaneSurface_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadPlaneSurface_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadPlaneSurface_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadPlaneSurface_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadPlaneSurface_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadPlaneSurface_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadPlaneSurface_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadPlaneSurface_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadPlaneSurface_get_SurfaceType(This,surfaceType)	\
    ((This)->lpVtbl -> get_SurfaceType(This,surfaceType))

#define IZcadPlaneSurface_get_UIsolineDensity(This,density)	\
    ((This)->lpVtbl -> get_UIsolineDensity(This,density))

#define IZcadPlaneSurface_put_UIsolineDensity(This,density)	\
    ((This)->lpVtbl -> put_UIsolineDensity(This,density))

#define IZcadPlaneSurface_get_VIsolineDensity(This,density)	\
    ((This)->lpVtbl -> get_VIsolineDensity(This,density))

#define IZcadPlaneSurface_put_VIsolineDensity(This,density)	\
    ((This)->lpVtbl -> put_VIsolineDensity(This,density))

#define IZcadPlaneSurface_get_WireframeType(This,type)	\
    ((This)->lpVtbl -> get_WireframeType(This,type))

#define IZcadPlaneSurface_put_WireframeType(This,type)	\
    ((This)->lpVtbl -> put_WireframeType(This,type))

#define IZcadPlaneSurface_get_MaintainAssociativity(This,maintainAssoc)	\
    ((This)->lpVtbl -> get_MaintainAssociativity(This,maintainAssoc))

#define IZcadPlaneSurface_put_MaintainAssociativity(This,maintainAssoc)	\
    ((This)->lpVtbl -> put_MaintainAssociativity(This,maintainAssoc))

#define IZcadPlaneSurface_get_ShowAssociativity(This,bEnabled)	\
    ((This)->lpVtbl -> get_ShowAssociativity(This,bEnabled))

#define IZcadPlaneSurface_put_ShowAssociativity(This,bEnabled)	\
    ((This)->lpVtbl -> put_ShowAssociativity(This,bEnabled))

#define IZcadPlaneSurface_get_EdgeExtensionDistances(This,extDistances)	\
    ((This)->lpVtbl -> get_EdgeExtensionDistances(This,extDistances))

#define IZcadPlaneSurface_put_EdgeExtensionDistances(This,extDistances)	\
    ((This)->lpVtbl -> put_EdgeExtensionDistances(This,extDistances))

#define IZcadPlaneSurface_get_SurfTrimAssociativity(This,associative)	\
    ((This)->lpVtbl -> get_SurfTrimAssociativity(This,associative))

#define IZcadPlaneSurface_put_SurfTrimAssociativity(This,associative)	\
    ((This)->lpVtbl -> put_SurfTrimAssociativity(This,associative))


#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadPlaneSurface,0xEC923036,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923036-5A17-11E7-B72E-BC5FF42AC839")
ZcadPlaneSurface;
#endif

#ifndef __IZcadExtrudedSurface_INTERFACE_DEFINED__
#define __IZcadExtrudedSurface_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadExtrudedSurface,0xEC923285,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923285-5A17-11E7-B72E-BC5FF42AC839")
    IZcadExtrudedSurface : public IZcadSurface
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Height(
             double *height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Height(
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TaperAngle(
             ZCAD_ANGLE *taperAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TaperAngle(
             ZCAD_ANGLE taperAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Direction(
             VARIANT *direction) = 0;

    };

#else

    typedef struct IZcadExtrudedSurfaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadExtrudedSurface * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadExtrudedSurface * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadExtrudedSurface * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadExtrudedSurface * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadExtrudedSurface * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadExtrudedSurface * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadExtrudedSurface * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadExtrudedSurface * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadExtrudedSurface * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadExtrudedSurface * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadExtrudedSurface * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadExtrudedSurface * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadExtrudedSurface * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadExtrudedSurface * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadExtrudedSurface * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadExtrudedSurface * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadExtrudedSurface * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadExtrudedSurface * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadExtrudedSurface * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadExtrudedSurface * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadExtrudedSurface * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadExtrudedSurface * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadExtrudedSurface * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadExtrudedSurface * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadExtrudedSurface * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadExtrudedSurface * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadExtrudedSurface * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadExtrudedSurface * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadExtrudedSurface * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadExtrudedSurface * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadExtrudedSurface * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadExtrudedSurface * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadExtrudedSurface * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadExtrudedSurface * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadExtrudedSurface * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadExtrudedSurface * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadExtrudedSurface * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadExtrudedSurface * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadExtrudedSurface * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadExtrudedSurface * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadExtrudedSurface * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadExtrudedSurface * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadExtrudedSurface * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadExtrudedSurface * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadExtrudedSurface * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadExtrudedSurface * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadExtrudedSurface * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadExtrudedSurface * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadExtrudedSurface * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadExtrudedSurface * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadExtrudedSurface * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadExtrudedSurface * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadExtrudedSurface * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadExtrudedSurface * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadExtrudedSurface * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadExtrudedSurface * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadExtrudedSurface * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_SurfaceType )(
            IZcadExtrudedSurface * This,
             BSTR *surfaceType);

         HRESULT ( STDMETHODCALLTYPE *get_UIsolineDensity )(
            IZcadExtrudedSurface * This,
             long *density);

         HRESULT ( STDMETHODCALLTYPE *put_UIsolineDensity )(
            IZcadExtrudedSurface * This,
             long density);

         HRESULT ( STDMETHODCALLTYPE *get_VIsolineDensity )(
            IZcadExtrudedSurface * This,
             long *density);

         HRESULT ( STDMETHODCALLTYPE *put_VIsolineDensity )(
            IZcadExtrudedSurface * This,
             long density);

         HRESULT ( STDMETHODCALLTYPE *get_WireframeType )(
            IZcadExtrudedSurface * This,
             ZcWireframeType *type);

         HRESULT ( STDMETHODCALLTYPE *put_WireframeType )(
            IZcadExtrudedSurface * This,
             ZcWireframeType type);

         HRESULT ( STDMETHODCALLTYPE *get_MaintainAssociativity )(
            IZcadExtrudedSurface * This,
             int *maintainAssoc);

         HRESULT ( STDMETHODCALLTYPE *put_MaintainAssociativity )(
            IZcadExtrudedSurface * This,
             int maintainAssoc);

         HRESULT ( STDMETHODCALLTYPE *get_ShowAssociativity )(
            IZcadExtrudedSurface * This,
             VARIANT_BOOL *bEnabled);

         HRESULT ( STDMETHODCALLTYPE *put_ShowAssociativity )(
            IZcadExtrudedSurface * This,
             VARIANT_BOOL bEnabled);

         HRESULT ( STDMETHODCALLTYPE *get_EdgeExtensionDistances )(
            IZcadExtrudedSurface * This,
             VARIANT *extDistances);

         HRESULT ( STDMETHODCALLTYPE *put_EdgeExtensionDistances )(
            IZcadExtrudedSurface * This,
             VARIANT extDistances);

         HRESULT ( STDMETHODCALLTYPE *get_SurfTrimAssociativity )(
            IZcadExtrudedSurface * This,
             VARIANT *associative);

         HRESULT ( STDMETHODCALLTYPE *put_SurfTrimAssociativity )(
            IZcadExtrudedSurface * This,
             VARIANT associative);

         HRESULT ( STDMETHODCALLTYPE *get_Height )(
            IZcadExtrudedSurface * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_Height )(
            IZcadExtrudedSurface * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_TaperAngle )(
            IZcadExtrudedSurface * This,
             ZCAD_ANGLE *taperAngle);

         HRESULT ( STDMETHODCALLTYPE *put_TaperAngle )(
            IZcadExtrudedSurface * This,
             ZCAD_ANGLE taperAngle);

         HRESULT ( STDMETHODCALLTYPE *get_Direction )(
            IZcadExtrudedSurface * This,
             VARIANT *direction);

        END_INTERFACE
    } IZcadExtrudedSurfaceVtbl;

    interface IZcadExtrudedSurface
    {
        CONST_VTBL struct IZcadExtrudedSurfaceVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadExtrudedSurface_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadExtrudedSurface_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadExtrudedSurface_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadExtrudedSurface_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadExtrudedSurface_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadExtrudedSurface_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadExtrudedSurface_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadExtrudedSurface_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadExtrudedSurface_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadExtrudedSurface_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadExtrudedSurface_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadExtrudedSurface_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadExtrudedSurface_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadExtrudedSurface_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadExtrudedSurface_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadExtrudedSurface_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadExtrudedSurface_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadExtrudedSurface_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadExtrudedSurface_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadExtrudedSurface_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadExtrudedSurface_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadExtrudedSurface_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadExtrudedSurface_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadExtrudedSurface_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadExtrudedSurface_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadExtrudedSurface_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadExtrudedSurface_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadExtrudedSurface_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadExtrudedSurface_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadExtrudedSurface_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadExtrudedSurface_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadExtrudedSurface_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadExtrudedSurface_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadExtrudedSurface_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadExtrudedSurface_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadExtrudedSurface_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadExtrudedSurface_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadExtrudedSurface_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadExtrudedSurface_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadExtrudedSurface_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadExtrudedSurface_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadExtrudedSurface_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadExtrudedSurface_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadExtrudedSurface_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadExtrudedSurface_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadExtrudedSurface_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadExtrudedSurface_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadExtrudedSurface_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadExtrudedSurface_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadExtrudedSurface_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadExtrudedSurface_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadExtrudedSurface_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadExtrudedSurface_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadExtrudedSurface_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadExtrudedSurface_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadExtrudedSurface_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadExtrudedSurface_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadExtrudedSurface_get_SurfaceType(This,surfaceType)	\
    ((This)->lpVtbl -> get_SurfaceType(This,surfaceType))

#define IZcadExtrudedSurface_get_UIsolineDensity(This,density)	\
    ((This)->lpVtbl -> get_UIsolineDensity(This,density))

#define IZcadExtrudedSurface_put_UIsolineDensity(This,density)	\
    ((This)->lpVtbl -> put_UIsolineDensity(This,density))

#define IZcadExtrudedSurface_get_VIsolineDensity(This,density)	\
    ((This)->lpVtbl -> get_VIsolineDensity(This,density))

#define IZcadExtrudedSurface_put_VIsolineDensity(This,density)	\
    ((This)->lpVtbl -> put_VIsolineDensity(This,density))

#define IZcadExtrudedSurface_get_WireframeType(This,type)	\
    ((This)->lpVtbl -> get_WireframeType(This,type))

#define IZcadExtrudedSurface_put_WireframeType(This,type)	\
    ((This)->lpVtbl -> put_WireframeType(This,type))

#define IZcadExtrudedSurface_get_MaintainAssociativity(This,maintainAssoc)	\
    ((This)->lpVtbl -> get_MaintainAssociativity(This,maintainAssoc))

#define IZcadExtrudedSurface_put_MaintainAssociativity(This,maintainAssoc)	\
    ((This)->lpVtbl -> put_MaintainAssociativity(This,maintainAssoc))

#define IZcadExtrudedSurface_get_ShowAssociativity(This,bEnabled)	\
    ((This)->lpVtbl -> get_ShowAssociativity(This,bEnabled))

#define IZcadExtrudedSurface_put_ShowAssociativity(This,bEnabled)	\
    ((This)->lpVtbl -> put_ShowAssociativity(This,bEnabled))

#define IZcadExtrudedSurface_get_EdgeExtensionDistances(This,extDistances)	\
    ((This)->lpVtbl -> get_EdgeExtensionDistances(This,extDistances))

#define IZcadExtrudedSurface_put_EdgeExtensionDistances(This,extDistances)	\
    ((This)->lpVtbl -> put_EdgeExtensionDistances(This,extDistances))

#define IZcadExtrudedSurface_get_SurfTrimAssociativity(This,associative)	\
    ((This)->lpVtbl -> get_SurfTrimAssociativity(This,associative))

#define IZcadExtrudedSurface_put_SurfTrimAssociativity(This,associative)	\
    ((This)->lpVtbl -> put_SurfTrimAssociativity(This,associative))


#define IZcadExtrudedSurface_get_Height(This,height)	\
    ((This)->lpVtbl -> get_Height(This,height))

#define IZcadExtrudedSurface_put_Height(This,height)	\
    ((This)->lpVtbl -> put_Height(This,height))

#define IZcadExtrudedSurface_get_TaperAngle(This,taperAngle)	\
    ((This)->lpVtbl -> get_TaperAngle(This,taperAngle))

#define IZcadExtrudedSurface_put_TaperAngle(This,taperAngle)	\
    ((This)->lpVtbl -> put_TaperAngle(This,taperAngle))

#define IZcadExtrudedSurface_get_Direction(This,direction)	\
    ((This)->lpVtbl -> get_Direction(This,direction))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadExtrudedSurface,0xEC923284,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923284-5A17-11E7-B72E-BC5FF42AC839")
ZcadExtrudedSurface;
#endif

#ifndef __IZcadRevolvedSurface_INTERFACE_DEFINED__
#define __IZcadRevolvedSurface_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadRevolvedSurface,0xEC9231B7,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9231B7-5A17-11E7-B72E-BC5FF42AC839")
    IZcadRevolvedSurface : public IZcadSurface
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_RevolutionAngle(
             ZCAD_ANGLE *revAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_RevolutionAngle(
             ZCAD_ANGLE revAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AxisPosition(
             VARIANT *axisPosition) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AxisPosition(
             VARIANT axisPosition) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AxisDirection(
             VARIANT *axisDirection) = 0;

    };

#else

    typedef struct IZcadRevolvedSurfaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadRevolvedSurface * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadRevolvedSurface * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadRevolvedSurface * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadRevolvedSurface * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadRevolvedSurface * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadRevolvedSurface * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadRevolvedSurface * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadRevolvedSurface * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadRevolvedSurface * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadRevolvedSurface * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadRevolvedSurface * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadRevolvedSurface * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadRevolvedSurface * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadRevolvedSurface * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadRevolvedSurface * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadRevolvedSurface * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadRevolvedSurface * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadRevolvedSurface * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadRevolvedSurface * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadRevolvedSurface * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadRevolvedSurface * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadRevolvedSurface * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadRevolvedSurface * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadRevolvedSurface * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadRevolvedSurface * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadRevolvedSurface * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadRevolvedSurface * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadRevolvedSurface * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadRevolvedSurface * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadRevolvedSurface * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadRevolvedSurface * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadRevolvedSurface * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadRevolvedSurface * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadRevolvedSurface * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadRevolvedSurface * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadRevolvedSurface * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadRevolvedSurface * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadRevolvedSurface * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadRevolvedSurface * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadRevolvedSurface * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadRevolvedSurface * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadRevolvedSurface * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadRevolvedSurface * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadRevolvedSurface * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadRevolvedSurface * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadRevolvedSurface * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadRevolvedSurface * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadRevolvedSurface * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadRevolvedSurface * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadRevolvedSurface * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadRevolvedSurface * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadRevolvedSurface * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadRevolvedSurface * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadRevolvedSurface * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadRevolvedSurface * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadRevolvedSurface * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadRevolvedSurface * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_SurfaceType )(
            IZcadRevolvedSurface * This,
             BSTR *surfaceType);

         HRESULT ( STDMETHODCALLTYPE *get_UIsolineDensity )(
            IZcadRevolvedSurface * This,
             long *density);

         HRESULT ( STDMETHODCALLTYPE *put_UIsolineDensity )(
            IZcadRevolvedSurface * This,
             long density);

         HRESULT ( STDMETHODCALLTYPE *get_VIsolineDensity )(
            IZcadRevolvedSurface * This,
             long *density);

         HRESULT ( STDMETHODCALLTYPE *put_VIsolineDensity )(
            IZcadRevolvedSurface * This,
             long density);

         HRESULT ( STDMETHODCALLTYPE *get_WireframeType )(
            IZcadRevolvedSurface * This,
             ZcWireframeType *type);

         HRESULT ( STDMETHODCALLTYPE *put_WireframeType )(
            IZcadRevolvedSurface * This,
             ZcWireframeType type);

         HRESULT ( STDMETHODCALLTYPE *get_MaintainAssociativity )(
            IZcadRevolvedSurface * This,
             int *maintainAssoc);

         HRESULT ( STDMETHODCALLTYPE *put_MaintainAssociativity )(
            IZcadRevolvedSurface * This,
             int maintainAssoc);

         HRESULT ( STDMETHODCALLTYPE *get_ShowAssociativity )(
            IZcadRevolvedSurface * This,
             VARIANT_BOOL *bEnabled);

         HRESULT ( STDMETHODCALLTYPE *put_ShowAssociativity )(
            IZcadRevolvedSurface * This,
             VARIANT_BOOL bEnabled);

         HRESULT ( STDMETHODCALLTYPE *get_EdgeExtensionDistances )(
            IZcadRevolvedSurface * This,
             VARIANT *extDistances);

         HRESULT ( STDMETHODCALLTYPE *put_EdgeExtensionDistances )(
            IZcadRevolvedSurface * This,
             VARIANT extDistances);

         HRESULT ( STDMETHODCALLTYPE *get_SurfTrimAssociativity )(
            IZcadRevolvedSurface * This,
             VARIANT *associative);

         HRESULT ( STDMETHODCALLTYPE *put_SurfTrimAssociativity )(
            IZcadRevolvedSurface * This,
             VARIANT associative);

         HRESULT ( STDMETHODCALLTYPE *get_RevolutionAngle )(
            IZcadRevolvedSurface * This,
             ZCAD_ANGLE *revAngle);

         HRESULT ( STDMETHODCALLTYPE *put_RevolutionAngle )(
            IZcadRevolvedSurface * This,
             ZCAD_ANGLE revAngle);

         HRESULT ( STDMETHODCALLTYPE *get_AxisPosition )(
            IZcadRevolvedSurface * This,
             VARIANT *axisPosition);

         HRESULT ( STDMETHODCALLTYPE *put_AxisPosition )(
            IZcadRevolvedSurface * This,
             VARIANT axisPosition);

         HRESULT ( STDMETHODCALLTYPE *get_AxisDirection )(
            IZcadRevolvedSurface * This,
             VARIANT *axisDirection);

        END_INTERFACE
    } IZcadRevolvedSurfaceVtbl;

    interface IZcadRevolvedSurface
    {
        CONST_VTBL struct IZcadRevolvedSurfaceVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadRevolvedSurface_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadRevolvedSurface_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadRevolvedSurface_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadRevolvedSurface_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadRevolvedSurface_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadRevolvedSurface_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadRevolvedSurface_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadRevolvedSurface_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadRevolvedSurface_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadRevolvedSurface_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadRevolvedSurface_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadRevolvedSurface_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadRevolvedSurface_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadRevolvedSurface_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadRevolvedSurface_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadRevolvedSurface_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadRevolvedSurface_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadRevolvedSurface_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadRevolvedSurface_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadRevolvedSurface_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadRevolvedSurface_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadRevolvedSurface_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadRevolvedSurface_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadRevolvedSurface_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadRevolvedSurface_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadRevolvedSurface_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadRevolvedSurface_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadRevolvedSurface_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadRevolvedSurface_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadRevolvedSurface_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadRevolvedSurface_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadRevolvedSurface_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadRevolvedSurface_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadRevolvedSurface_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadRevolvedSurface_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadRevolvedSurface_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadRevolvedSurface_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadRevolvedSurface_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadRevolvedSurface_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadRevolvedSurface_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadRevolvedSurface_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadRevolvedSurface_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadRevolvedSurface_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadRevolvedSurface_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadRevolvedSurface_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadRevolvedSurface_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadRevolvedSurface_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadRevolvedSurface_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadRevolvedSurface_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadRevolvedSurface_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadRevolvedSurface_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadRevolvedSurface_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadRevolvedSurface_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadRevolvedSurface_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadRevolvedSurface_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadRevolvedSurface_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadRevolvedSurface_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadRevolvedSurface_get_SurfaceType(This,surfaceType)	\
    ((This)->lpVtbl -> get_SurfaceType(This,surfaceType))

#define IZcadRevolvedSurface_get_UIsolineDensity(This,density)	\
    ((This)->lpVtbl -> get_UIsolineDensity(This,density))

#define IZcadRevolvedSurface_put_UIsolineDensity(This,density)	\
    ((This)->lpVtbl -> put_UIsolineDensity(This,density))

#define IZcadRevolvedSurface_get_VIsolineDensity(This,density)	\
    ((This)->lpVtbl -> get_VIsolineDensity(This,density))

#define IZcadRevolvedSurface_put_VIsolineDensity(This,density)	\
    ((This)->lpVtbl -> put_VIsolineDensity(This,density))

#define IZcadRevolvedSurface_get_WireframeType(This,type)	\
    ((This)->lpVtbl -> get_WireframeType(This,type))

#define IZcadRevolvedSurface_put_WireframeType(This,type)	\
    ((This)->lpVtbl -> put_WireframeType(This,type))

#define IZcadRevolvedSurface_get_MaintainAssociativity(This,maintainAssoc)	\
    ((This)->lpVtbl -> get_MaintainAssociativity(This,maintainAssoc))

#define IZcadRevolvedSurface_put_MaintainAssociativity(This,maintainAssoc)	\
    ((This)->lpVtbl -> put_MaintainAssociativity(This,maintainAssoc))

#define IZcadRevolvedSurface_get_ShowAssociativity(This,bEnabled)	\
    ((This)->lpVtbl -> get_ShowAssociativity(This,bEnabled))

#define IZcadRevolvedSurface_put_ShowAssociativity(This,bEnabled)	\
    ((This)->lpVtbl -> put_ShowAssociativity(This,bEnabled))

#define IZcadRevolvedSurface_get_EdgeExtensionDistances(This,extDistances)	\
    ((This)->lpVtbl -> get_EdgeExtensionDistances(This,extDistances))

#define IZcadRevolvedSurface_put_EdgeExtensionDistances(This,extDistances)	\
    ((This)->lpVtbl -> put_EdgeExtensionDistances(This,extDistances))

#define IZcadRevolvedSurface_get_SurfTrimAssociativity(This,associative)	\
    ((This)->lpVtbl -> get_SurfTrimAssociativity(This,associative))

#define IZcadRevolvedSurface_put_SurfTrimAssociativity(This,associative)	\
    ((This)->lpVtbl -> put_SurfTrimAssociativity(This,associative))


#define IZcadRevolvedSurface_get_RevolutionAngle(This,revAngle)	\
    ((This)->lpVtbl -> get_RevolutionAngle(This,revAngle))

#define IZcadRevolvedSurface_put_RevolutionAngle(This,revAngle)	\
    ((This)->lpVtbl -> put_RevolutionAngle(This,revAngle))

#define IZcadRevolvedSurface_get_AxisPosition(This,axisPosition)	\
    ((This)->lpVtbl -> get_AxisPosition(This,axisPosition))

#define IZcadRevolvedSurface_put_AxisPosition(This,axisPosition)	\
    ((This)->lpVtbl -> put_AxisPosition(This,axisPosition))

#define IZcadRevolvedSurface_get_AxisDirection(This,axisDirection)	\
    ((This)->lpVtbl -> get_AxisDirection(This,axisDirection))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadRevolvedSurface,0xEC922FE4,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC922FE4-5A17-11E7-B72E-BC5FF42AC839")
ZcadRevolvedSurface;
#endif

#ifndef __IZcadSweptSurface_INTERFACE_DEFINED__
#define __IZcadSweptSurface_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadSweptSurface,0xEC92304B,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC92304B-5A17-11E7-B72E-BC5FF42AC839")
    IZcadSweptSurface : public IZcadSurface
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_ProfileRotation(
             ZCAD_ANGLE *profileRotationAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ProfileRotation(
             ZCAD_ANGLE profileRotationAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Bank(
             VARIANT_BOOL *bBank) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Bank(
             VARIANT_BOOL bBank) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Twist(
             ZCAD_ANGLE *twistAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Twist(
             ZCAD_ANGLE twistAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Scale(
             double *scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Scale(
             double scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Length(
             double *length) = 0;

    };

#else

    typedef struct IZcadSweptSurfaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadSweptSurface * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadSweptSurface * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadSweptSurface * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadSweptSurface * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadSweptSurface * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadSweptSurface * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadSweptSurface * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadSweptSurface * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadSweptSurface * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadSweptSurface * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadSweptSurface * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadSweptSurface * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadSweptSurface * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadSweptSurface * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadSweptSurface * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadSweptSurface * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadSweptSurface * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadSweptSurface * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadSweptSurface * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadSweptSurface * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadSweptSurface * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadSweptSurface * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadSweptSurface * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadSweptSurface * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadSweptSurface * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadSweptSurface * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadSweptSurface * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadSweptSurface * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadSweptSurface * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadSweptSurface * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadSweptSurface * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadSweptSurface * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadSweptSurface * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadSweptSurface * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadSweptSurface * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadSweptSurface * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadSweptSurface * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadSweptSurface * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadSweptSurface * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadSweptSurface * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadSweptSurface * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadSweptSurface * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadSweptSurface * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadSweptSurface * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadSweptSurface * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadSweptSurface * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadSweptSurface * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadSweptSurface * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadSweptSurface * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadSweptSurface * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadSweptSurface * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadSweptSurface * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadSweptSurface * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadSweptSurface * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadSweptSurface * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadSweptSurface * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadSweptSurface * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_SurfaceType )(
            IZcadSweptSurface * This,
             BSTR *surfaceType);

         HRESULT ( STDMETHODCALLTYPE *get_UIsolineDensity )(
            IZcadSweptSurface * This,
             long *density);

         HRESULT ( STDMETHODCALLTYPE *put_UIsolineDensity )(
            IZcadSweptSurface * This,
             long density);

         HRESULT ( STDMETHODCALLTYPE *get_VIsolineDensity )(
            IZcadSweptSurface * This,
             long *density);

         HRESULT ( STDMETHODCALLTYPE *put_VIsolineDensity )(
            IZcadSweptSurface * This,
             long density);

         HRESULT ( STDMETHODCALLTYPE *get_WireframeType )(
            IZcadSweptSurface * This,
             ZcWireframeType *type);

         HRESULT ( STDMETHODCALLTYPE *put_WireframeType )(
            IZcadSweptSurface * This,
             ZcWireframeType type);

         HRESULT ( STDMETHODCALLTYPE *get_MaintainAssociativity )(
            IZcadSweptSurface * This,
             int *maintainAssoc);

         HRESULT ( STDMETHODCALLTYPE *put_MaintainAssociativity )(
            IZcadSweptSurface * This,
             int maintainAssoc);

         HRESULT ( STDMETHODCALLTYPE *get_ShowAssociativity )(
            IZcadSweptSurface * This,
             VARIANT_BOOL *bEnabled);

         HRESULT ( STDMETHODCALLTYPE *put_ShowAssociativity )(
            IZcadSweptSurface * This,
             VARIANT_BOOL bEnabled);

         HRESULT ( STDMETHODCALLTYPE *get_EdgeExtensionDistances )(
            IZcadSweptSurface * This,
             VARIANT *extDistances);

         HRESULT ( STDMETHODCALLTYPE *put_EdgeExtensionDistances )(
            IZcadSweptSurface * This,
             VARIANT extDistances);

         HRESULT ( STDMETHODCALLTYPE *get_SurfTrimAssociativity )(
            IZcadSweptSurface * This,
             VARIANT *associative);

         HRESULT ( STDMETHODCALLTYPE *put_SurfTrimAssociativity )(
            IZcadSweptSurface * This,
             VARIANT associative);

         HRESULT ( STDMETHODCALLTYPE *get_ProfileRotation )(
            IZcadSweptSurface * This,
             ZCAD_ANGLE *profileRotationAngle);

         HRESULT ( STDMETHODCALLTYPE *put_ProfileRotation )(
            IZcadSweptSurface * This,
             ZCAD_ANGLE profileRotationAngle);

         HRESULT ( STDMETHODCALLTYPE *get_Bank )(
            IZcadSweptSurface * This,
             VARIANT_BOOL *bBank);

         HRESULT ( STDMETHODCALLTYPE *put_Bank )(
            IZcadSweptSurface * This,
             VARIANT_BOOL bBank);

         HRESULT ( STDMETHODCALLTYPE *get_Twist )(
            IZcadSweptSurface * This,
             ZCAD_ANGLE *twistAngle);

         HRESULT ( STDMETHODCALLTYPE *put_Twist )(
            IZcadSweptSurface * This,
             ZCAD_ANGLE twistAngle);

         HRESULT ( STDMETHODCALLTYPE *get_Scale )(
            IZcadSweptSurface * This,
             double *scale);

         HRESULT ( STDMETHODCALLTYPE *put_Scale )(
            IZcadSweptSurface * This,
             double scale);

         HRESULT ( STDMETHODCALLTYPE *get_Length )(
            IZcadSweptSurface * This,
             double *length);

        END_INTERFACE
    } IZcadSweptSurfaceVtbl;

    interface IZcadSweptSurface
    {
        CONST_VTBL struct IZcadSweptSurfaceVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadSweptSurface_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadSweptSurface_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadSweptSurface_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadSweptSurface_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadSweptSurface_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadSweptSurface_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadSweptSurface_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadSweptSurface_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadSweptSurface_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadSweptSurface_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadSweptSurface_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadSweptSurface_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadSweptSurface_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadSweptSurface_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadSweptSurface_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadSweptSurface_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadSweptSurface_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadSweptSurface_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadSweptSurface_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadSweptSurface_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadSweptSurface_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadSweptSurface_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadSweptSurface_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadSweptSurface_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadSweptSurface_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadSweptSurface_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadSweptSurface_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadSweptSurface_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadSweptSurface_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadSweptSurface_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadSweptSurface_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadSweptSurface_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadSweptSurface_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadSweptSurface_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadSweptSurface_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadSweptSurface_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadSweptSurface_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadSweptSurface_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadSweptSurface_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadSweptSurface_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadSweptSurface_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadSweptSurface_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadSweptSurface_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadSweptSurface_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadSweptSurface_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadSweptSurface_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadSweptSurface_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadSweptSurface_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadSweptSurface_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadSweptSurface_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadSweptSurface_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadSweptSurface_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadSweptSurface_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadSweptSurface_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadSweptSurface_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadSweptSurface_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadSweptSurface_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadSweptSurface_get_SurfaceType(This,surfaceType)	\
    ((This)->lpVtbl -> get_SurfaceType(This,surfaceType))

#define IZcadSweptSurface_get_UIsolineDensity(This,density)	\
    ((This)->lpVtbl -> get_UIsolineDensity(This,density))

#define IZcadSweptSurface_put_UIsolineDensity(This,density)	\
    ((This)->lpVtbl -> put_UIsolineDensity(This,density))

#define IZcadSweptSurface_get_VIsolineDensity(This,density)	\
    ((This)->lpVtbl -> get_VIsolineDensity(This,density))

#define IZcadSweptSurface_put_VIsolineDensity(This,density)	\
    ((This)->lpVtbl -> put_VIsolineDensity(This,density))

#define IZcadSweptSurface_get_WireframeType(This,type)	\
    ((This)->lpVtbl -> get_WireframeType(This,type))

#define IZcadSweptSurface_put_WireframeType(This,type)	\
    ((This)->lpVtbl -> put_WireframeType(This,type))

#define IZcadSweptSurface_get_MaintainAssociativity(This,maintainAssoc)	\
    ((This)->lpVtbl -> get_MaintainAssociativity(This,maintainAssoc))

#define IZcadSweptSurface_put_MaintainAssociativity(This,maintainAssoc)	\
    ((This)->lpVtbl -> put_MaintainAssociativity(This,maintainAssoc))

#define IZcadSweptSurface_get_ShowAssociativity(This,bEnabled)	\
    ((This)->lpVtbl -> get_ShowAssociativity(This,bEnabled))

#define IZcadSweptSurface_put_ShowAssociativity(This,bEnabled)	\
    ((This)->lpVtbl -> put_ShowAssociativity(This,bEnabled))

#define IZcadSweptSurface_get_EdgeExtensionDistances(This,extDistances)	\
    ((This)->lpVtbl -> get_EdgeExtensionDistances(This,extDistances))

#define IZcadSweptSurface_put_EdgeExtensionDistances(This,extDistances)	\
    ((This)->lpVtbl -> put_EdgeExtensionDistances(This,extDistances))

#define IZcadSweptSurface_get_SurfTrimAssociativity(This,associative)	\
    ((This)->lpVtbl -> get_SurfTrimAssociativity(This,associative))

#define IZcadSweptSurface_put_SurfTrimAssociativity(This,associative)	\
    ((This)->lpVtbl -> put_SurfTrimAssociativity(This,associative))


#define IZcadSweptSurface_get_ProfileRotation(This,profileRotationAngle)	\
    ((This)->lpVtbl -> get_ProfileRotation(This,profileRotationAngle))

#define IZcadSweptSurface_put_ProfileRotation(This,profileRotationAngle)	\
    ((This)->lpVtbl -> put_ProfileRotation(This,profileRotationAngle))

#define IZcadSweptSurface_get_Bank(This,bBank)	\
    ((This)->lpVtbl -> get_Bank(This,bBank))

#define IZcadSweptSurface_put_Bank(This,bBank)	\
    ((This)->lpVtbl -> put_Bank(This,bBank))

#define IZcadSweptSurface_get_Twist(This,twistAngle)	\
    ((This)->lpVtbl -> get_Twist(This,twistAngle))

#define IZcadSweptSurface_put_Twist(This,twistAngle)	\
    ((This)->lpVtbl -> put_Twist(This,twistAngle))

#define IZcadSweptSurface_get_Scale(This,scale)	\
    ((This)->lpVtbl -> get_Scale(This,scale))

#define IZcadSweptSurface_put_Scale(This,scale)	\
    ((This)->lpVtbl -> put_Scale(This,scale))

#define IZcadSweptSurface_get_Length(This,length)	\
    ((This)->lpVtbl -> get_Length(This,length))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadSweptSurface,0xEC923060,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923060-5A17-11E7-B72E-BC5FF42AC839")
ZcadSweptSurface;
#endif

#ifndef __IZcadLoftedSurface_INTERFACE_DEFINED__
#define __IZcadLoftedSurface_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadLoftedSurface,0xEC923221,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923221-5A17-11E7-B72E-BC5FF42AC839")
    IZcadLoftedSurface : public IZcadSurface
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_NumCrossSections(
             long *numCrossSections) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_NumGuidePaths(
             long *numGuidePaths) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SurfaceNormals(
             ZcLoftedSurfaceNormalType *surfaceNormal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SurfaceNormals(
             ZcLoftedSurfaceNormalType surfaceNormal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_StartDraftAngle(
             ZCAD_ANGLE *startDraftAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StartDraftAngle(
             ZCAD_ANGLE startDraftAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_StartDraftMagnitude(
             double *startDraftMag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StartDraftMagnitude(
             double startDraftMag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EndDraftAngle(
             ZCAD_ANGLE *endDraftAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_EndDraftAngle(
             ZCAD_ANGLE endDraftAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EndDraftMagnitude(
             double *endDraftMag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_EndDraftMagnitude(
             double endDraftMag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Closed(
             VARIANT_BOOL *bClosed) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Closed(
             VARIANT_BOOL bClosed) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_StartSmoothMagnitude(
             double *startSmoothMag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StartSmoothMagnitude(
             double startSmoothMag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EndSmoothMagnitude(
             double *endSmoothMag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_EndSmoothMagnitude(
             double endSmoothMag) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_StartSmoothContinuity(
             int *startSmoothContinuity) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StartSmoothContinuity(
             int startSmoothContinuity) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_EndSmoothContinuity(
             int *endSmoothContinuity) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_EndSmoothContinuity(
             int endSmoothContinuity) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Periodic(
             VARIANT_BOOL *bPeriodic) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Periodic(
             VARIANT_BOOL bPeriodic) = 0;

    };

#else

    typedef struct IZcadLoftedSurfaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadLoftedSurface * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadLoftedSurface * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadLoftedSurface * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadLoftedSurface * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadLoftedSurface * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadLoftedSurface * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadLoftedSurface * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadLoftedSurface * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadLoftedSurface * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadLoftedSurface * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadLoftedSurface * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadLoftedSurface * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadLoftedSurface * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadLoftedSurface * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadLoftedSurface * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadLoftedSurface * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadLoftedSurface * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadLoftedSurface * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadLoftedSurface * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadLoftedSurface * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadLoftedSurface * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadLoftedSurface * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadLoftedSurface * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadLoftedSurface * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadLoftedSurface * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadLoftedSurface * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadLoftedSurface * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadLoftedSurface * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadLoftedSurface * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadLoftedSurface * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadLoftedSurface * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadLoftedSurface * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadLoftedSurface * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadLoftedSurface * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadLoftedSurface * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadLoftedSurface * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadLoftedSurface * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadLoftedSurface * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadLoftedSurface * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadLoftedSurface * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadLoftedSurface * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadLoftedSurface * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadLoftedSurface * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadLoftedSurface * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadLoftedSurface * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadLoftedSurface * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadLoftedSurface * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadLoftedSurface * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadLoftedSurface * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadLoftedSurface * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadLoftedSurface * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadLoftedSurface * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadLoftedSurface * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadLoftedSurface * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadLoftedSurface * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadLoftedSurface * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadLoftedSurface * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_SurfaceType )(
            IZcadLoftedSurface * This,
             BSTR *surfaceType);

         HRESULT ( STDMETHODCALLTYPE *get_UIsolineDensity )(
            IZcadLoftedSurface * This,
             long *density);

         HRESULT ( STDMETHODCALLTYPE *put_UIsolineDensity )(
            IZcadLoftedSurface * This,
             long density);

         HRESULT ( STDMETHODCALLTYPE *get_VIsolineDensity )(
            IZcadLoftedSurface * This,
             long *density);

         HRESULT ( STDMETHODCALLTYPE *put_VIsolineDensity )(
            IZcadLoftedSurface * This,
             long density);

         HRESULT ( STDMETHODCALLTYPE *get_WireframeType )(
            IZcadLoftedSurface * This,
             ZcWireframeType *type);

         HRESULT ( STDMETHODCALLTYPE *put_WireframeType )(
            IZcadLoftedSurface * This,
             ZcWireframeType type);

         HRESULT ( STDMETHODCALLTYPE *get_MaintainAssociativity )(
            IZcadLoftedSurface * This,
             int *maintainAssoc);

         HRESULT ( STDMETHODCALLTYPE *put_MaintainAssociativity )(
            IZcadLoftedSurface * This,
             int maintainAssoc);

         HRESULT ( STDMETHODCALLTYPE *get_ShowAssociativity )(
            IZcadLoftedSurface * This,
             VARIANT_BOOL *bEnabled);

         HRESULT ( STDMETHODCALLTYPE *put_ShowAssociativity )(
            IZcadLoftedSurface * This,
             VARIANT_BOOL bEnabled);

         HRESULT ( STDMETHODCALLTYPE *get_EdgeExtensionDistances )(
            IZcadLoftedSurface * This,
             VARIANT *extDistances);

         HRESULT ( STDMETHODCALLTYPE *put_EdgeExtensionDistances )(
            IZcadLoftedSurface * This,
             VARIANT extDistances);

         HRESULT ( STDMETHODCALLTYPE *get_SurfTrimAssociativity )(
            IZcadLoftedSurface * This,
             VARIANT *associative);

         HRESULT ( STDMETHODCALLTYPE *put_SurfTrimAssociativity )(
            IZcadLoftedSurface * This,
             VARIANT associative);

         HRESULT ( STDMETHODCALLTYPE *get_NumCrossSections )(
            IZcadLoftedSurface * This,
             long *numCrossSections);

         HRESULT ( STDMETHODCALLTYPE *get_NumGuidePaths )(
            IZcadLoftedSurface * This,
             long *numGuidePaths);

         HRESULT ( STDMETHODCALLTYPE *get_SurfaceNormals )(
            IZcadLoftedSurface * This,
             ZcLoftedSurfaceNormalType *surfaceNormal);

         HRESULT ( STDMETHODCALLTYPE *put_SurfaceNormals )(
            IZcadLoftedSurface * This,
             ZcLoftedSurfaceNormalType surfaceNormal);

         HRESULT ( STDMETHODCALLTYPE *get_StartDraftAngle )(
            IZcadLoftedSurface * This,
             ZCAD_ANGLE *startDraftAngle);

         HRESULT ( STDMETHODCALLTYPE *put_StartDraftAngle )(
            IZcadLoftedSurface * This,
             ZCAD_ANGLE startDraftAngle);

         HRESULT ( STDMETHODCALLTYPE *get_StartDraftMagnitude )(
            IZcadLoftedSurface * This,
             double *startDraftMag);

         HRESULT ( STDMETHODCALLTYPE *put_StartDraftMagnitude )(
            IZcadLoftedSurface * This,
             double startDraftMag);

         HRESULT ( STDMETHODCALLTYPE *get_EndDraftAngle )(
            IZcadLoftedSurface * This,
             ZCAD_ANGLE *endDraftAngle);

         HRESULT ( STDMETHODCALLTYPE *put_EndDraftAngle )(
            IZcadLoftedSurface * This,
             ZCAD_ANGLE endDraftAngle);

         HRESULT ( STDMETHODCALLTYPE *get_EndDraftMagnitude )(
            IZcadLoftedSurface * This,
             double *endDraftMag);

         HRESULT ( STDMETHODCALLTYPE *put_EndDraftMagnitude )(
            IZcadLoftedSurface * This,
             double endDraftMag);

         HRESULT ( STDMETHODCALLTYPE *get_Closed )(
            IZcadLoftedSurface * This,
             VARIANT_BOOL *bClosed);

         HRESULT ( STDMETHODCALLTYPE *put_Closed )(
            IZcadLoftedSurface * This,
             VARIANT_BOOL bClosed);

         HRESULT ( STDMETHODCALLTYPE *get_StartSmoothMagnitude )(
            IZcadLoftedSurface * This,
             double *startSmoothMag);

         HRESULT ( STDMETHODCALLTYPE *put_StartSmoothMagnitude )(
            IZcadLoftedSurface * This,
             double startSmoothMag);

         HRESULT ( STDMETHODCALLTYPE *get_EndSmoothMagnitude )(
            IZcadLoftedSurface * This,
             double *endSmoothMag);

         HRESULT ( STDMETHODCALLTYPE *put_EndSmoothMagnitude )(
            IZcadLoftedSurface * This,
             double endSmoothMag);

         HRESULT ( STDMETHODCALLTYPE *get_StartSmoothContinuity )(
            IZcadLoftedSurface * This,
             int *startSmoothContinuity);

         HRESULT ( STDMETHODCALLTYPE *put_StartSmoothContinuity )(
            IZcadLoftedSurface * This,
             int startSmoothContinuity);

         HRESULT ( STDMETHODCALLTYPE *get_EndSmoothContinuity )(
            IZcadLoftedSurface * This,
             int *endSmoothContinuity);

         HRESULT ( STDMETHODCALLTYPE *put_EndSmoothContinuity )(
            IZcadLoftedSurface * This,
             int endSmoothContinuity);

         HRESULT ( STDMETHODCALLTYPE *get_Periodic )(
            IZcadLoftedSurface * This,
             VARIANT_BOOL *bPeriodic);

         HRESULT ( STDMETHODCALLTYPE *put_Periodic )(
            IZcadLoftedSurface * This,
             VARIANT_BOOL bPeriodic);

        END_INTERFACE
    } IZcadLoftedSurfaceVtbl;

    interface IZcadLoftedSurface
    {
        CONST_VTBL struct IZcadLoftedSurfaceVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadLoftedSurface_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadLoftedSurface_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadLoftedSurface_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadLoftedSurface_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadLoftedSurface_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadLoftedSurface_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadLoftedSurface_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadLoftedSurface_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadLoftedSurface_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadLoftedSurface_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadLoftedSurface_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadLoftedSurface_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadLoftedSurface_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadLoftedSurface_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadLoftedSurface_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadLoftedSurface_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadLoftedSurface_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadLoftedSurface_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadLoftedSurface_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadLoftedSurface_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadLoftedSurface_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadLoftedSurface_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadLoftedSurface_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadLoftedSurface_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadLoftedSurface_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadLoftedSurface_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadLoftedSurface_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadLoftedSurface_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadLoftedSurface_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadLoftedSurface_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadLoftedSurface_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadLoftedSurface_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadLoftedSurface_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadLoftedSurface_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadLoftedSurface_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadLoftedSurface_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadLoftedSurface_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadLoftedSurface_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadLoftedSurface_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadLoftedSurface_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadLoftedSurface_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadLoftedSurface_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadLoftedSurface_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadLoftedSurface_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadLoftedSurface_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadLoftedSurface_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadLoftedSurface_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadLoftedSurface_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadLoftedSurface_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadLoftedSurface_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadLoftedSurface_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadLoftedSurface_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadLoftedSurface_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadLoftedSurface_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadLoftedSurface_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadLoftedSurface_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadLoftedSurface_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadLoftedSurface_get_SurfaceType(This,surfaceType)	\
    ((This)->lpVtbl -> get_SurfaceType(This,surfaceType))

#define IZcadLoftedSurface_get_UIsolineDensity(This,density)	\
    ((This)->lpVtbl -> get_UIsolineDensity(This,density))

#define IZcadLoftedSurface_put_UIsolineDensity(This,density)	\
    ((This)->lpVtbl -> put_UIsolineDensity(This,density))

#define IZcadLoftedSurface_get_VIsolineDensity(This,density)	\
    ((This)->lpVtbl -> get_VIsolineDensity(This,density))

#define IZcadLoftedSurface_put_VIsolineDensity(This,density)	\
    ((This)->lpVtbl -> put_VIsolineDensity(This,density))

#define IZcadLoftedSurface_get_WireframeType(This,type)	\
    ((This)->lpVtbl -> get_WireframeType(This,type))

#define IZcadLoftedSurface_put_WireframeType(This,type)	\
    ((This)->lpVtbl -> put_WireframeType(This,type))

#define IZcadLoftedSurface_get_MaintainAssociativity(This,maintainAssoc)	\
    ((This)->lpVtbl -> get_MaintainAssociativity(This,maintainAssoc))

#define IZcadLoftedSurface_put_MaintainAssociativity(This,maintainAssoc)	\
    ((This)->lpVtbl -> put_MaintainAssociativity(This,maintainAssoc))

#define IZcadLoftedSurface_get_ShowAssociativity(This,bEnabled)	\
    ((This)->lpVtbl -> get_ShowAssociativity(This,bEnabled))

#define IZcadLoftedSurface_put_ShowAssociativity(This,bEnabled)	\
    ((This)->lpVtbl -> put_ShowAssociativity(This,bEnabled))

#define IZcadLoftedSurface_get_EdgeExtensionDistances(This,extDistances)	\
    ((This)->lpVtbl -> get_EdgeExtensionDistances(This,extDistances))

#define IZcadLoftedSurface_put_EdgeExtensionDistances(This,extDistances)	\
    ((This)->lpVtbl -> put_EdgeExtensionDistances(This,extDistances))

#define IZcadLoftedSurface_get_SurfTrimAssociativity(This,associative)	\
    ((This)->lpVtbl -> get_SurfTrimAssociativity(This,associative))

#define IZcadLoftedSurface_put_SurfTrimAssociativity(This,associative)	\
    ((This)->lpVtbl -> put_SurfTrimAssociativity(This,associative))


#define IZcadLoftedSurface_get_NumCrossSections(This,numCrossSections)	\
    ((This)->lpVtbl -> get_NumCrossSections(This,numCrossSections))

#define IZcadLoftedSurface_get_NumGuidePaths(This,numGuidePaths)	\
    ((This)->lpVtbl -> get_NumGuidePaths(This,numGuidePaths))

#define IZcadLoftedSurface_get_SurfaceNormals(This,surfaceNormal)	\
    ((This)->lpVtbl -> get_SurfaceNormals(This,surfaceNormal))

#define IZcadLoftedSurface_put_SurfaceNormals(This,surfaceNormal)	\
    ((This)->lpVtbl -> put_SurfaceNormals(This,surfaceNormal))

#define IZcadLoftedSurface_get_StartDraftAngle(This,startDraftAngle)	\
    ((This)->lpVtbl -> get_StartDraftAngle(This,startDraftAngle))

#define IZcadLoftedSurface_put_StartDraftAngle(This,startDraftAngle)	\
    ((This)->lpVtbl -> put_StartDraftAngle(This,startDraftAngle))

#define IZcadLoftedSurface_get_StartDraftMagnitude(This,startDraftMag)	\
    ((This)->lpVtbl -> get_StartDraftMagnitude(This,startDraftMag))

#define IZcadLoftedSurface_put_StartDraftMagnitude(This,startDraftMag)	\
    ((This)->lpVtbl -> put_StartDraftMagnitude(This,startDraftMag))

#define IZcadLoftedSurface_get_EndDraftAngle(This,endDraftAngle)	\
    ((This)->lpVtbl -> get_EndDraftAngle(This,endDraftAngle))

#define IZcadLoftedSurface_put_EndDraftAngle(This,endDraftAngle)	\
    ((This)->lpVtbl -> put_EndDraftAngle(This,endDraftAngle))

#define IZcadLoftedSurface_get_EndDraftMagnitude(This,endDraftMag)	\
    ((This)->lpVtbl -> get_EndDraftMagnitude(This,endDraftMag))

#define IZcadLoftedSurface_put_EndDraftMagnitude(This,endDraftMag)	\
    ((This)->lpVtbl -> put_EndDraftMagnitude(This,endDraftMag))

#define IZcadLoftedSurface_get_Closed(This,bClosed)	\
    ((This)->lpVtbl -> get_Closed(This,bClosed))

#define IZcadLoftedSurface_put_Closed(This,bClosed)	\
    ((This)->lpVtbl -> put_Closed(This,bClosed))

#define IZcadLoftedSurface_get_StartSmoothMagnitude(This,startSmoothMag)	\
    ((This)->lpVtbl -> get_StartSmoothMagnitude(This,startSmoothMag))

#define IZcadLoftedSurface_put_StartSmoothMagnitude(This,startSmoothMag)	\
    ((This)->lpVtbl -> put_StartSmoothMagnitude(This,startSmoothMag))

#define IZcadLoftedSurface_get_EndSmoothMagnitude(This,endSmoothMag)	\
    ((This)->lpVtbl -> get_EndSmoothMagnitude(This,endSmoothMag))

#define IZcadLoftedSurface_put_EndSmoothMagnitude(This,endSmoothMag)	\
    ((This)->lpVtbl -> put_EndSmoothMagnitude(This,endSmoothMag))

#define IZcadLoftedSurface_get_StartSmoothContinuity(This,startSmoothContinuity)	\
    ((This)->lpVtbl -> get_StartSmoothContinuity(This,startSmoothContinuity))

#define IZcadLoftedSurface_put_StartSmoothContinuity(This,startSmoothContinuity)	\
    ((This)->lpVtbl -> put_StartSmoothContinuity(This,startSmoothContinuity))

#define IZcadLoftedSurface_get_EndSmoothContinuity(This,endSmoothContinuity)	\
    ((This)->lpVtbl -> get_EndSmoothContinuity(This,endSmoothContinuity))

#define IZcadLoftedSurface_put_EndSmoothContinuity(This,endSmoothContinuity)	\
    ((This)->lpVtbl -> put_EndSmoothContinuity(This,endSmoothContinuity))

#define IZcadLoftedSurface_get_Periodic(This,bPeriodic)	\
    ((This)->lpVtbl -> get_Periodic(This,bPeriodic))

#define IZcadLoftedSurface_put_Periodic(This,bPeriodic)	\
    ((This)->lpVtbl -> put_Periodic(This,bPeriodic))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadLoftedSurface,0xEC923222,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923222-5A17-11E7-B72E-BC5FF42AC839")
ZcadLoftedSurface;
#endif

#ifndef __IZcadSection_INTERFACE_DEFINED__
#define __IZcadSection_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadSection,0xEC9231D6,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9231D6-5A17-11E7-B72E-BC5FF42AC839")
    IZcadSection : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Name(
             BSTR *pbstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Name(
             BSTR pbstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_State(
             ZcSectionState *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_State(
             ZcSectionState val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ViewingDirection(
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ViewingDirection(
             VARIANT val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_VerticalDirection(
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_VerticalDirection(
             VARIANT val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Normal(
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LiveSectionEnabled(
             VARIANT_BOOL *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LiveSectionEnabled(
             VARIANT_BOOL val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IndicatorTransparency(
             int *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IndicatorTransparency(
             int val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IndicatorFillColor(
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IndicatorFillColor(
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Elevation(
             double *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Elevation(
             double val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TopHeight(
             double *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TopHeight(
             double val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_BottomHeight(
             double *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_BottomHeight(
             double val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_NumVertices(
             int *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Vertices(
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Vertices(
             VARIANT val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Coordinate(
             int Index,
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Coordinate(
             int Index,
             VARIANT val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddVertex(
             int nIndex,
             VARIANT val) = 0;

        virtual  HRESULT STDMETHODCALLTYPE RemoveVertex(
             int nIndex) = 0;

        virtual  HRESULT STDMETHODCALLTYPE HitTest(
             VARIANT varPtHit,
             VARIANT_BOOL *pHit,
             int *pSegmentIndex,
             VARIANT *pPtOnSegment,
             ZcSectionSubItem *pSubItem) = 0;

        virtual  HRESULT STDMETHODCALLTYPE CreateJog(
             VARIANT varPt) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Settings(
             IZcadSectionSettings **pUnk) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GenerateSectionGeometry(
             IZcadEntity *pEntity,
             VARIANT *pIntersectionBoundaryObjs,
             VARIANT *pIntersectionFillObjs,
             VARIANT *pBackgroudnObjs,
             VARIANT *pForegroudObjs,
             VARIANT *pCurveTangencyObjs) = 0;

    };

#else

    typedef struct IZcadSectionVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadSection * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadSection * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadSection * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadSection * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadSection * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadSection * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadSection * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadSection * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadSection * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadSection * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadSection * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadSection * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadSection * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadSection * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadSection * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadSection * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadSection * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadSection * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadSection * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadSection * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadSection * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadSection * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadSection * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadSection * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadSection * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadSection * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadSection * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadSection * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadSection * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadSection * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadSection * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadSection * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadSection * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadSection * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadSection * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadSection * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadSection * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadSection * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadSection * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadSection * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadSection * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadSection * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadSection * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadSection * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadSection * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadSection * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadSection * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadSection * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadSection * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadSection * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadSection * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadSection * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadSection * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadSection * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadSection * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadSection * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadSection * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadSection * This,
             BSTR *pbstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadSection * This,
             BSTR pbstrName);

         HRESULT ( STDMETHODCALLTYPE *get_State )(
            IZcadSection * This,
             ZcSectionState *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_State )(
            IZcadSection * This,
             ZcSectionState val);

         HRESULT ( STDMETHODCALLTYPE *get_ViewingDirection )(
            IZcadSection * This,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_ViewingDirection )(
            IZcadSection * This,
             VARIANT val);

         HRESULT ( STDMETHODCALLTYPE *get_VerticalDirection )(
            IZcadSection * This,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_VerticalDirection )(
            IZcadSection * This,
             VARIANT val);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadSection * This,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *get_LiveSectionEnabled )(
            IZcadSection * This,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_LiveSectionEnabled )(
            IZcadSection * This,
             VARIANT_BOOL val);

         HRESULT ( STDMETHODCALLTYPE *get_IndicatorTransparency )(
            IZcadSection * This,
             int *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_IndicatorTransparency )(
            IZcadSection * This,
             int val);

         HRESULT ( STDMETHODCALLTYPE *get_IndicatorFillColor )(
            IZcadSection * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_IndicatorFillColor )(
            IZcadSection * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Elevation )(
            IZcadSection * This,
             double *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_Elevation )(
            IZcadSection * This,
             double val);

         HRESULT ( STDMETHODCALLTYPE *get_TopHeight )(
            IZcadSection * This,
             double *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_TopHeight )(
            IZcadSection * This,
             double val);

         HRESULT ( STDMETHODCALLTYPE *get_BottomHeight )(
            IZcadSection * This,
             double *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_BottomHeight )(
            IZcadSection * This,
             double val);

         HRESULT ( STDMETHODCALLTYPE *get_NumVertices )(
            IZcadSection * This,
             int *pVal);

         HRESULT ( STDMETHODCALLTYPE *get_Vertices )(
            IZcadSection * This,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_Vertices )(
            IZcadSection * This,
             VARIANT val);

         HRESULT ( STDMETHODCALLTYPE *get_Coordinate )(
            IZcadSection * This,
             int Index,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_Coordinate )(
            IZcadSection * This,
             int Index,
             VARIANT val);

         HRESULT ( STDMETHODCALLTYPE *AddVertex )(
            IZcadSection * This,
             int nIndex,
             VARIANT val);

         HRESULT ( STDMETHODCALLTYPE *RemoveVertex )(
            IZcadSection * This,
             int nIndex);

         HRESULT ( STDMETHODCALLTYPE *HitTest )(
            IZcadSection * This,
             VARIANT varPtHit,
             VARIANT_BOOL *pHit,
             int *pSegmentIndex,
             VARIANT *pPtOnSegment,
             ZcSectionSubItem *pSubItem);

         HRESULT ( STDMETHODCALLTYPE *CreateJog )(
            IZcadSection * This,
             VARIANT varPt);

         HRESULT ( STDMETHODCALLTYPE *get_Settings )(
            IZcadSection * This,
             IZcadSectionSettings **pUnk);

         HRESULT ( STDMETHODCALLTYPE *GenerateSectionGeometry )(
            IZcadSection * This,
             IZcadEntity *pEntity,
             VARIANT *pIntersectionBoundaryObjs,
             VARIANT *pIntersectionFillObjs,
             VARIANT *pBackgroudnObjs,
             VARIANT *pForegroudObjs,
             VARIANT *pCurveTangencyObjs);

        END_INTERFACE
    } IZcadSectionVtbl;

    interface IZcadSection
    {
        CONST_VTBL struct IZcadSectionVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadSection_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadSection_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadSection_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadSection_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadSection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadSection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadSection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadSection_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadSection_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadSection_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadSection_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadSection_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadSection_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadSection_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadSection_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadSection_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadSection_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadSection_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadSection_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadSection_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadSection_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadSection_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadSection_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadSection_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadSection_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadSection_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadSection_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadSection_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadSection_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadSection_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadSection_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadSection_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadSection_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadSection_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadSection_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadSection_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadSection_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadSection_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadSection_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadSection_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadSection_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadSection_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadSection_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadSection_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadSection_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadSection_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadSection_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadSection_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadSection_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadSection_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadSection_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadSection_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadSection_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadSection_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadSection_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadSection_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadSection_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadSection_get_Name(This,pbstrName)	\
    ((This)->lpVtbl -> get_Name(This,pbstrName))

#define IZcadSection_put_Name(This,pbstrName)	\
    ((This)->lpVtbl -> put_Name(This,pbstrName))

#define IZcadSection_get_State(This,pVal)	\
    ((This)->lpVtbl -> get_State(This,pVal))

#define IZcadSection_put_State(This,val)	\
    ((This)->lpVtbl -> put_State(This,val))

#define IZcadSection_get_ViewingDirection(This,pVal)	\
    ((This)->lpVtbl -> get_ViewingDirection(This,pVal))

#define IZcadSection_put_ViewingDirection(This,val)	\
    ((This)->lpVtbl -> put_ViewingDirection(This,val))

#define IZcadSection_get_VerticalDirection(This,pVal)	\
    ((This)->lpVtbl -> get_VerticalDirection(This,pVal))

#define IZcadSection_put_VerticalDirection(This,val)	\
    ((This)->lpVtbl -> put_VerticalDirection(This,val))

#define IZcadSection_get_Normal(This,pVal)	\
    ((This)->lpVtbl -> get_Normal(This,pVal))

#define IZcadSection_get_LiveSectionEnabled(This,pVal)	\
    ((This)->lpVtbl -> get_LiveSectionEnabled(This,pVal))

#define IZcadSection_put_LiveSectionEnabled(This,val)	\
    ((This)->lpVtbl -> put_LiveSectionEnabled(This,val))

#define IZcadSection_get_IndicatorTransparency(This,pVal)	\
    ((This)->lpVtbl -> get_IndicatorTransparency(This,pVal))

#define IZcadSection_put_IndicatorTransparency(This,val)	\
    ((This)->lpVtbl -> put_IndicatorTransparency(This,val))

#define IZcadSection_get_IndicatorFillColor(This,pColor)	\
    ((This)->lpVtbl -> get_IndicatorFillColor(This,pColor))

#define IZcadSection_put_IndicatorFillColor(This,pColor)	\
    ((This)->lpVtbl -> put_IndicatorFillColor(This,pColor))

#define IZcadSection_get_Elevation(This,pVal)	\
    ((This)->lpVtbl -> get_Elevation(This,pVal))

#define IZcadSection_put_Elevation(This,val)	\
    ((This)->lpVtbl -> put_Elevation(This,val))

#define IZcadSection_get_TopHeight(This,pVal)	\
    ((This)->lpVtbl -> get_TopHeight(This,pVal))

#define IZcadSection_put_TopHeight(This,val)	\
    ((This)->lpVtbl -> put_TopHeight(This,val))

#define IZcadSection_get_BottomHeight(This,pVal)	\
    ((This)->lpVtbl -> get_BottomHeight(This,pVal))

#define IZcadSection_put_BottomHeight(This,val)	\
    ((This)->lpVtbl -> put_BottomHeight(This,val))

#define IZcadSection_get_NumVertices(This,pVal)	\
    ((This)->lpVtbl -> get_NumVertices(This,pVal))

#define IZcadSection_get_Vertices(This,pVal)	\
    ((This)->lpVtbl -> get_Vertices(This,pVal))

#define IZcadSection_put_Vertices(This,val)	\
    ((This)->lpVtbl -> put_Vertices(This,val))

#define IZcadSection_get_Coordinate(This,Index,pVal)	\
    ((This)->lpVtbl -> get_Coordinate(This,Index,pVal))

#define IZcadSection_put_Coordinate(This,Index,val)	\
    ((This)->lpVtbl -> put_Coordinate(This,Index,val))

#define IZcadSection_AddVertex(This,nIndex,val)	\
    ((This)->lpVtbl -> AddVertex(This,nIndex,val))

#define IZcadSection_RemoveVertex(This,nIndex)	\
    ((This)->lpVtbl -> RemoveVertex(This,nIndex))

#define IZcadSection_HitTest(This,varPtHit,pHit,pSegmentIndex,pPtOnSegment,pSubItem)	\
    ((This)->lpVtbl -> HitTest(This,varPtHit,pHit,pSegmentIndex,pPtOnSegment,pSubItem))

#define IZcadSection_CreateJog(This,varPt)	\
    ((This)->lpVtbl -> CreateJog(This,varPt))

#define IZcadSection_get_Settings(This,pUnk)	\
    ((This)->lpVtbl -> get_Settings(This,pUnk))

#define IZcadSection_GenerateSectionGeometry(This,pEntity,pIntersectionBoundaryObjs,pIntersectionFillObjs,pBackgroudnObjs,pForegroudObjs,pCurveTangencyObjs)	\
    ((This)->lpVtbl -> GenerateSectionGeometry(This,pEntity,pIntersectionBoundaryObjs,pIntersectionFillObjs,pBackgroudnObjs,pForegroudObjs,pCurveTangencyObjs))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadSection,0xEC92302B,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC92302B-5A17-11E7-B72E-BC5FF42AC839")
ZcadSection;
#endif

#ifndef __IZcadSectionManager_INTERFACE_DEFINED__
#define __IZcadSectionManager_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadSectionManager,0xEC923035,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923035-5A17-11E7-B72E-BC5FF42AC839")
    IZcadSectionManager : public IZcadObject
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE Item(
             VARIANT Index,
             IZcadSection **pSection) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get__NewEnum(
             LPUNKNOWN *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Count(
             long *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetLiveSection(
             IZcadSection **pSection) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetUniqueSectionName(
             BSTR pBaseName,
             BSTR *ppUniqueName) = 0;

    };

#else

    typedef struct IZcadSectionManagerVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadSectionManager * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadSectionManager * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadSectionManager * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadSectionManager * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadSectionManager * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadSectionManager * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadSectionManager * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadSectionManager * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadSectionManager * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadSectionManager * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadSectionManager * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadSectionManager * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadSectionManager * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadSectionManager * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadSectionManager * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadSectionManager * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadSectionManager * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadSectionManager * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadSectionManager * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadSectionManager * This);

         HRESULT ( STDMETHODCALLTYPE *Item )(
            IZcadSectionManager * This,
             VARIANT Index,
             IZcadSection **pSection);

         HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            IZcadSectionManager * This,
             LPUNKNOWN *pVal);

         HRESULT ( STDMETHODCALLTYPE *get_Count )(
            IZcadSectionManager * This,
             long *pVal);

         HRESULT ( STDMETHODCALLTYPE *GetLiveSection )(
            IZcadSectionManager * This,
             IZcadSection **pSection);

         HRESULT ( STDMETHODCALLTYPE *GetUniqueSectionName )(
            IZcadSectionManager * This,
             BSTR pBaseName,
             BSTR *ppUniqueName);

        END_INTERFACE
    } IZcadSectionManagerVtbl;

    interface IZcadSectionManager
    {
        CONST_VTBL struct IZcadSectionManagerVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadSectionManager_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadSectionManager_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadSectionManager_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadSectionManager_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadSectionManager_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadSectionManager_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadSectionManager_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadSectionManager_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadSectionManager_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadSectionManager_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadSectionManager_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadSectionManager_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadSectionManager_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadSectionManager_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadSectionManager_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadSectionManager_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadSectionManager_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadSectionManager_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadSectionManager_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadSectionManager_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadSectionManager_Item(This,Index,pSection)	\
    ((This)->lpVtbl -> Item(This,Index,pSection))

#define IZcadSectionManager_get__NewEnum(This,pVal)	\
    ((This)->lpVtbl -> get__NewEnum(This,pVal))

#define IZcadSectionManager_get_Count(This,pVal)	\
    ((This)->lpVtbl -> get_Count(This,pVal))

#define IZcadSectionManager_GetLiveSection(This,pSection)	\
    ((This)->lpVtbl -> GetLiveSection(This,pSection))

#define IZcadSectionManager_GetUniqueSectionName(This,pBaseName,ppUniqueName)	\
    ((This)->lpVtbl -> GetUniqueSectionName(This,pBaseName,ppUniqueName))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadSectionManager,0xEC9230EB,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9230EB-5A17-11E7-B72E-BC5FF42AC839")
ZcadSectionManager;
#endif

#ifndef __IZcadUnderlay_INTERFACE_DEFINED__
#define __IZcadUnderlay_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadUnderlay,0xEC9230F8,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9230F8-5A17-11E7-B72E-BC5FF42AC839")
    IZcadUnderlay : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Contrast(
             long *contrast) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Contrast(
             long contrast) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Fade(
             long *fade) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Fade(
             long fade) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Position(
             VARIANT *pos) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Position(
             VARIANT pos) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Rotation(
             ZCAD_ANGLE *rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Rotation(
             ZCAD_ANGLE rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Width(
             double *width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Width(
             double width) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Height(
             double *height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Height(
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UnderlayName(
             BSTR *Name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_UnderlayName(
             BSTR Name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ItemName(
             BSTR sheetName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ItemName(
             BSTR *sheetName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Monochrome(
             VARIANT_BOOL *bMono) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Monochrome(
             VARIANT_BOOL bMono) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AdjustForBackground(
             VARIANT_BOOL *value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AdjustForBackground(
             VARIANT_BOOL value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE ClipBoundary(
             VARIANT boundry) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ScaleFactor(
             ZCAD_NOUNITS *scaleFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ScaleFactor(
             ZCAD_NOUNITS scaleFactor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_File(
             BSTR *Name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_File(
             BSTR Name) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UnderlayVisibility(
             VARIANT_BOOL *fVisible) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_UnderlayVisibility(
             VARIANT_BOOL fVisible) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ClippingEnabled(
             VARIANT_BOOL *kClip) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ClippingEnabled(
             VARIANT_BOOL kClip) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UnderlayLayerOverrideApplied(
             ZcUnderlayLayerOverrideType *bOverride) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_UnderlayLayerOverrideApplied(
             ZcUnderlayLayerOverrideType bOverride) = 0;

    };

#else

    typedef struct IZcadUnderlayVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadUnderlay * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadUnderlay * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadUnderlay * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadUnderlay * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadUnderlay * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadUnderlay * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadUnderlay * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadUnderlay * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadUnderlay * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadUnderlay * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadUnderlay * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadUnderlay * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadUnderlay * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadUnderlay * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadUnderlay * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadUnderlay * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadUnderlay * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadUnderlay * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadUnderlay * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadUnderlay * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadUnderlay * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadUnderlay * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadUnderlay * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadUnderlay * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadUnderlay * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadUnderlay * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadUnderlay * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadUnderlay * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadUnderlay * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadUnderlay * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadUnderlay * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadUnderlay * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadUnderlay * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadUnderlay * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadUnderlay * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadUnderlay * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadUnderlay * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadUnderlay * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadUnderlay * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadUnderlay * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadUnderlay * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadUnderlay * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadUnderlay * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadUnderlay * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadUnderlay * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadUnderlay * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadUnderlay * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadUnderlay * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadUnderlay * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadUnderlay * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadUnderlay * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadUnderlay * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadUnderlay * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadUnderlay * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadUnderlay * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadUnderlay * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadUnderlay * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Contrast )(
            IZcadUnderlay * This,
             long *contrast);

         HRESULT ( STDMETHODCALLTYPE *put_Contrast )(
            IZcadUnderlay * This,
             long contrast);

         HRESULT ( STDMETHODCALLTYPE *get_Fade )(
            IZcadUnderlay * This,
             long *fade);

         HRESULT ( STDMETHODCALLTYPE *put_Fade )(
            IZcadUnderlay * This,
             long fade);

         HRESULT ( STDMETHODCALLTYPE *get_Position )(
            IZcadUnderlay * This,
             VARIANT *pos);

         HRESULT ( STDMETHODCALLTYPE *put_Position )(
            IZcadUnderlay * This,
             VARIANT pos);

         HRESULT ( STDMETHODCALLTYPE *get_Rotation )(
            IZcadUnderlay * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_Rotation )(
            IZcadUnderlay * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_Width )(
            IZcadUnderlay * This,
             double *width);

         HRESULT ( STDMETHODCALLTYPE *put_Width )(
            IZcadUnderlay * This,
             double width);

         HRESULT ( STDMETHODCALLTYPE *get_Height )(
            IZcadUnderlay * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_Height )(
            IZcadUnderlay * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_UnderlayName )(
            IZcadUnderlay * This,
             BSTR *Name);

         HRESULT ( STDMETHODCALLTYPE *put_UnderlayName )(
            IZcadUnderlay * This,
             BSTR Name);

         HRESULT ( STDMETHODCALLTYPE *put_ItemName )(
            IZcadUnderlay * This,
             BSTR sheetName);

         HRESULT ( STDMETHODCALLTYPE *get_ItemName )(
            IZcadUnderlay * This,
             BSTR *sheetName);

         HRESULT ( STDMETHODCALLTYPE *get_Monochrome )(
            IZcadUnderlay * This,
             VARIANT_BOOL *bMono);

         HRESULT ( STDMETHODCALLTYPE *put_Monochrome )(
            IZcadUnderlay * This,
             VARIANT_BOOL bMono);

         HRESULT ( STDMETHODCALLTYPE *get_AdjustForBackground )(
            IZcadUnderlay * This,
             VARIANT_BOOL *value);

         HRESULT ( STDMETHODCALLTYPE *put_AdjustForBackground )(
            IZcadUnderlay * This,
             VARIANT_BOOL value);

         HRESULT ( STDMETHODCALLTYPE *ClipBoundary )(
            IZcadUnderlay * This,
             VARIANT boundry);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )(
            IZcadUnderlay * This,
             ZCAD_NOUNITS *scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )(
            IZcadUnderlay * This,
             ZCAD_NOUNITS scaleFactor);

         HRESULT ( STDMETHODCALLTYPE *get_File )(
            IZcadUnderlay * This,
             BSTR *Name);

         HRESULT ( STDMETHODCALLTYPE *put_File )(
            IZcadUnderlay * This,
             BSTR Name);

         HRESULT ( STDMETHODCALLTYPE *get_UnderlayVisibility )(
            IZcadUnderlay * This,
             VARIANT_BOOL *fVisible);

         HRESULT ( STDMETHODCALLTYPE *put_UnderlayVisibility )(
            IZcadUnderlay * This,
             VARIANT_BOOL fVisible);

         HRESULT ( STDMETHODCALLTYPE *get_ClippingEnabled )(
            IZcadUnderlay * This,
             VARIANT_BOOL *kClip);

         HRESULT ( STDMETHODCALLTYPE *put_ClippingEnabled )(
            IZcadUnderlay * This,
             VARIANT_BOOL kClip);

         HRESULT ( STDMETHODCALLTYPE *get_UnderlayLayerOverrideApplied )(
            IZcadUnderlay * This,
             ZcUnderlayLayerOverrideType *bOverride);

         HRESULT ( STDMETHODCALLTYPE *put_UnderlayLayerOverrideApplied )(
            IZcadUnderlay * This,
             ZcUnderlayLayerOverrideType bOverride);

        END_INTERFACE
    } IZcadUnderlayVtbl;

    interface IZcadUnderlay
    {
        CONST_VTBL struct IZcadUnderlayVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadUnderlay_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadUnderlay_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadUnderlay_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadUnderlay_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadUnderlay_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadUnderlay_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadUnderlay_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))

#define IZcadUnderlay_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadUnderlay_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadUnderlay_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadUnderlay_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadUnderlay_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadUnderlay_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadUnderlay_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadUnderlay_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadUnderlay_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadUnderlay_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadUnderlay_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadUnderlay_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadUnderlay_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadUnderlay_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadUnderlay_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadUnderlay_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadUnderlay_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadUnderlay_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadUnderlay_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadUnderlay_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadUnderlay_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadUnderlay_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadUnderlay_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadUnderlay_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadUnderlay_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadUnderlay_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadUnderlay_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadUnderlay_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadUnderlay_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadUnderlay_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadUnderlay_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadUnderlay_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadUnderlay_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadUnderlay_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadUnderlay_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadUnderlay_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadUnderlay_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadUnderlay_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadUnderlay_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadUnderlay_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadUnderlay_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadUnderlay_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadUnderlay_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadUnderlay_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadUnderlay_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadUnderlay_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadUnderlay_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadUnderlay_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadUnderlay_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadUnderlay_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadUnderlay_get_Contrast(This,contrast)	\
    ((This)->lpVtbl -> get_Contrast(This,contrast))

#define IZcadUnderlay_put_Contrast(This,contrast)	\
    ((This)->lpVtbl -> put_Contrast(This,contrast))

#define IZcadUnderlay_get_Fade(This,fade)	\
    ((This)->lpVtbl -> get_Fade(This,fade))

#define IZcadUnderlay_put_Fade(This,fade)	\
    ((This)->lpVtbl -> put_Fade(This,fade))

#define IZcadUnderlay_get_Position(This,pos)	\
    ((This)->lpVtbl -> get_Position(This,pos))

#define IZcadUnderlay_put_Position(This,pos)	\
    ((This)->lpVtbl -> put_Position(This,pos))

#define IZcadUnderlay_get_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_Rotation(This,rotAngle))

#define IZcadUnderlay_put_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_Rotation(This,rotAngle))

#define IZcadUnderlay_get_Width(This,width)	\
    ((This)->lpVtbl -> get_Width(This,width))

#define IZcadUnderlay_put_Width(This,width)	\
    ((This)->lpVtbl -> put_Width(This,width))

#define IZcadUnderlay_get_Height(This,height)	\
    ((This)->lpVtbl -> get_Height(This,height))

#define IZcadUnderlay_put_Height(This,height)	\
    ((This)->lpVtbl -> put_Height(This,height))

#define IZcadUnderlay_get_UnderlayName(This,Name)	\
    ((This)->lpVtbl -> get_UnderlayName(This,Name))

#define IZcadUnderlay_put_UnderlayName(This,Name)	\
    ((This)->lpVtbl -> put_UnderlayName(This,Name))

#define IZcadUnderlay_put_ItemName(This,sheetName)	\
    ((This)->lpVtbl -> put_ItemName(This,sheetName))

#define IZcadUnderlay_get_ItemName(This,sheetName)	\
    ((This)->lpVtbl -> get_ItemName(This,sheetName))

#define IZcadUnderlay_get_Monochrome(This,bMono)	\
    ((This)->lpVtbl -> get_Monochrome(This,bMono))

#define IZcadUnderlay_put_Monochrome(This,bMono)	\
    ((This)->lpVtbl -> put_Monochrome(This,bMono))

#define IZcadUnderlay_get_AdjustForBackground(This,value)	\
    ((This)->lpVtbl -> get_AdjustForBackground(This,value))

#define IZcadUnderlay_put_AdjustForBackground(This,value)	\
    ((This)->lpVtbl -> put_AdjustForBackground(This,value))

#define IZcadUnderlay_ClipBoundary(This,boundry)	\
    ((This)->lpVtbl -> ClipBoundary(This,boundry))

#define IZcadUnderlay_get_ScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> get_ScaleFactor(This,scaleFactor))

#define IZcadUnderlay_put_ScaleFactor(This,scaleFactor)	\
    ((This)->lpVtbl -> put_ScaleFactor(This,scaleFactor))

#define IZcadUnderlay_get_File(This,Name)	\
    ((This)->lpVtbl -> get_File(This,Name))

#define IZcadUnderlay_put_File(This,Name)	\
    ((This)->lpVtbl -> put_File(This,Name))

#define IZcadUnderlay_get_UnderlayVisibility(This,fVisible)	\
    ((This)->lpVtbl -> get_UnderlayVisibility(This,fVisible))

#define IZcadUnderlay_put_UnderlayVisibility(This,fVisible)	\
    ((This)->lpVtbl -> put_UnderlayVisibility(This,fVisible))

#define IZcadUnderlay_get_ClippingEnabled(This,kClip)	\
    ((This)->lpVtbl -> get_ClippingEnabled(This,kClip))

#define IZcadUnderlay_put_ClippingEnabled(This,kClip)	\
    ((This)->lpVtbl -> put_ClippingEnabled(This,kClip))

#define IZcadUnderlay_get_UnderlayLayerOverrideApplied(This,bOverride)	\
    ((This)->lpVtbl -> get_UnderlayLayerOverrideApplied(This,bOverride))

#define IZcadUnderlay_put_UnderlayLayerOverrideApplied(This,bOverride)	\
    ((This)->lpVtbl -> put_UnderlayLayerOverrideApplied(This,bOverride))

#endif
#endif


#endif


DEFINE_GUID(CLSID_ZcadDgnUnderlay,0xF779D165,0x9A0A,0x4482,0xB1,0x8D,0xF9,0x40,0x59,0xE3,0xCB,0x4A);

#ifdef __cplusplus

class DECLSPEC_UUID("F779D165-9A0A-4482-B18D-F94059E3CB4A")
ZcadDgnUnderlay;
#endif

#ifndef __IZcadSubEntity_INTERFACE_DEFINED__
#define __IZcadSubEntity_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadSubEntity,0xEC923058,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923058-5A17-11E7-B72E-BC5FF42AC839")
    IZcadSubEntity : public IDispatch
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE OnModified( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ObjectName(
             BSTR *ObjectName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Color(
             IZcadZcCmColor **pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Color(
             IZcadZcCmColor *pColor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Layer(
             BSTR *Layer) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Linetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LinetypeScale(
             ZCAD_NOUNITS *ltScale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PlotStyleName(
             BSTR *plotStyle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Lineweight(
             ZCAD_LWEIGHT *lineweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Hyperlinks(
             IZcadHyperlinks **HyperLinks) = 0;

    };

#else

    typedef struct IZcadSubEntityVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadSubEntity * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadSubEntity * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadSubEntity * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadSubEntity * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadSubEntity * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadSubEntity * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadSubEntity * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *OnModified )(
            IZcadSubEntity * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadSubEntity * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadSubEntity * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadSubEntity * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadSubEntity * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadSubEntity * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadSubEntity * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadSubEntity * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadSubEntity * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadSubEntity * This,
             IZcadHyperlinks **HyperLinks);

        END_INTERFACE
    } IZcadSubEntityVtbl;

    interface IZcadSubEntity
    {
        CONST_VTBL struct IZcadSubEntityVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadSubEntity_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadSubEntity_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadSubEntity_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadSubEntity_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadSubEntity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadSubEntity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadSubEntity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))

#define IZcadSubEntity_OnModified(This)	\
    ((This)->lpVtbl -> OnModified(This))

#define IZcadSubEntity_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadSubEntity_get_Color(This,pColor)	\
    ((This)->lpVtbl -> get_Color(This,pColor))

#define IZcadSubEntity_put_Color(This,pColor)	\
    ((This)->lpVtbl -> put_Color(This,pColor))

#define IZcadSubEntity_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadSubEntity_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadSubEntity_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadSubEntity_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadSubEntity_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadSubEntity_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#endif
#endif


#endif


DEFINE_GUID(CLSID_ZcadSubEntity,0xEC9231A7,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9231A7-5A17-11E7-B72E-BC5FF42AC839")
ZcadSubEntity;
#endif

#ifndef __IZcadSubEntSolidFace_INTERFACE_DEFINED__
#define __IZcadSubEntSolidFace_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadSubEntSolidFace,0xB2B924B8,0xC431,0x4BD7,0x88,0x51,0x4C,0xB5,0x61,0x5A,0xD5,0x7F);

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B2B924B8-C431-4BD7-8851-4CB5615AD57F")
    IZcadSubEntSolidFace : public IZcadSubEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Material(
             BSTR *Material) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Material(
             BSTR Material) = 0;

    };

#else

    typedef struct IZcadSubEntSolidFaceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadSubEntSolidFace * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadSubEntSolidFace * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadSubEntSolidFace * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadSubEntSolidFace * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadSubEntSolidFace * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadSubEntSolidFace * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadSubEntSolidFace * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *OnModified )(
            IZcadSubEntSolidFace * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadSubEntSolidFace * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadSubEntSolidFace * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadSubEntSolidFace * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadSubEntSolidFace * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadSubEntSolidFace * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadSubEntSolidFace * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadSubEntSolidFace * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadSubEntSolidFace * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadSubEntSolidFace * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadSubEntSolidFace * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadSubEntSolidFace * This,
             BSTR Material);

        END_INTERFACE
    } IZcadSubEntSolidFaceVtbl;

    interface IZcadSubEntSolidFace
    {
        CONST_VTBL struct IZcadSubEntSolidFaceVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadSubEntSolidFace_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject)) 

#define IZcadSubEntSolidFace_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This)) 

#define IZcadSubEntSolidFace_Release(This)	\
    ((This)->lpVtbl -> Release(This)) 

#define IZcadSubEntSolidFace_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)) 

#define IZcadSubEntSolidFace_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)) 

#define IZcadSubEntSolidFace_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)) 

#define IZcadSubEntSolidFace_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)) 

#define IZcadSubEntSolidFace_OnModified(This)	\
    ((This)->lpVtbl -> OnModified(This)) 

#define IZcadSubEntSolidFace_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName)) 

#define IZcadSubEntSolidFace_get_Color(This,pColor)	\
    ((This)->lpVtbl -> get_Color(This,pColor)) 

#define IZcadSubEntSolidFace_put_Color(This,pColor)	\
    ((This)->lpVtbl -> put_Color(This,pColor)) 

#define IZcadSubEntSolidFace_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer)) 

#define IZcadSubEntSolidFace_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype)) 

#define IZcadSubEntSolidFace_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale)) 

#define IZcadSubEntSolidFace_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle)) 

#define IZcadSubEntSolidFace_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight)) 

#define IZcadSubEntSolidFace_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks)) 

#define IZcadSubEntSolidFace_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material)) 

#define IZcadSubEntSolidFace_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material)) 

#endif 


#endif 	




#endif 	

DEFINE_GUID(CLSID_ZcadSubEntSolidFace,0x605545E6,0x33F8,0x47E0,0x8B,0xEA,0x89,0x40,0x8A,0x7C,0x58,0xF5);

#ifdef __cplusplus

class DECLSPEC_UUID("605545E6-33F8-47E0-8BEA-89408A7C58F5")
ZcadSubEntSolidFace;
#endif

#ifndef __IZcadSubEntSolidEdge_INTERFACE_DEFINED__
#define __IZcadSubEntSolidEdge_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadSubEntSolidEdge,0xEC923136,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923136-5A17-11E7-B72E-BC5FF42AC839")
    IZcadSubEntSolidEdge : public IZcadSubEntity
    {
    public:
    };

#else

    typedef struct IZcadSubEntSolidEdgeVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadSubEntSolidEdge * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadSubEntSolidEdge * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadSubEntSolidEdge * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadSubEntSolidEdge * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadSubEntSolidEdge * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadSubEntSolidEdge * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadSubEntSolidEdge * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *OnModified )(
            IZcadSubEntSolidEdge * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadSubEntSolidEdge * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadSubEntSolidEdge * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadSubEntSolidEdge * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadSubEntSolidEdge * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadSubEntSolidEdge * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadSubEntSolidEdge * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadSubEntSolidEdge * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadSubEntSolidEdge * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadSubEntSolidEdge * This,
             IZcadHyperlinks **HyperLinks);

        END_INTERFACE
    } IZcadSubEntSolidEdgeVtbl;

    interface IZcadSubEntSolidEdge
    {
        CONST_VTBL struct IZcadSubEntSolidEdgeVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadSubEntSolidEdge_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject)) 

#define IZcadSubEntSolidEdge_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This)) 

#define IZcadSubEntSolidEdge_Release(This)	\
    ((This)->lpVtbl -> Release(This)) 

#define IZcadSubEntSolidEdge_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)) 

#define IZcadSubEntSolidEdge_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)) 

#define IZcadSubEntSolidEdge_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)) 

#define IZcadSubEntSolidEdge_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)) 

#define IZcadSubEntSolidEdge_OnModified(This)	\
    ((This)->lpVtbl -> OnModified(This)) 

#define IZcadSubEntSolidEdge_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName)) 

#define IZcadSubEntSolidEdge_get_Color(This,pColor)	\
    ((This)->lpVtbl -> get_Color(This,pColor)) 

#define IZcadSubEntSolidEdge_put_Color(This,pColor)	\
    ((This)->lpVtbl -> put_Color(This,pColor)) 

#define IZcadSubEntSolidEdge_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer)) 

#define IZcadSubEntSolidEdge_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype)) 

#define IZcadSubEntSolidEdge_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale)) 

#define IZcadSubEntSolidEdge_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle)) 

#define IZcadSubEntSolidEdge_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight)) 

#define IZcadSubEntSolidEdge_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks)) 

#endif

#endif

#endif

DEFINE_GUID(CLSID_ZcadSubEntSolidEdge,0xEC923191,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923191-5A17-11E7-B72E-BC5FF42AC839")
ZcadSubEntSolidEdge;
#endif

#ifndef __IZcadSubEntSolidVertex_INTERFACE_DEFINED__
#define __IZcadSubEntSolidVertex_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadSubEntSolidVertex,0xEC922FEF,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC922FEF-5A17-11E7-B72E-BC5FF42AC839")
    IZcadSubEntSolidVertex : public IZcadSubEntity
    {
    public:
    };

#else

    typedef struct IZcadSubEntSolidVertexVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadSubEntSolidVertex * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadSubEntSolidVertex * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadSubEntSolidVertex * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadSubEntSolidVertex * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadSubEntSolidVertex * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadSubEntSolidVertex * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadSubEntSolidVertex * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *OnModified )(
            IZcadSubEntSolidVertex * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadSubEntSolidVertex * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadSubEntSolidVertex * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadSubEntSolidVertex * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadSubEntSolidVertex * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadSubEntSolidVertex * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadSubEntSolidVertex * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadSubEntSolidVertex * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadSubEntSolidVertex * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadSubEntSolidVertex * This,
             IZcadHyperlinks **HyperLinks);

        END_INTERFACE
    } IZcadSubEntSolidVertexVtbl;

    interface IZcadSubEntSolidVertex
    {
        CONST_VTBL struct IZcadSubEntSolidVertexVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadSubEntSolidVertex_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject)) 

#define IZcadSubEntSolidVertex_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This)) 

#define IZcadSubEntSolidVertex_Release(This)	\
    ((This)->lpVtbl -> Release(This)) 


#define IZcadSubEntSolidVertex_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)) 

#define IZcadSubEntSolidVertex_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)) 

#define IZcadSubEntSolidVertex_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)) 

#define IZcadSubEntSolidVertex_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)) 


#define IZcadSubEntSolidVertex_OnModified(This)	\
    ((This)->lpVtbl -> OnModified(This)) 

#define IZcadSubEntSolidVertex_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName)) 

#define IZcadSubEntSolidVertex_get_Color(This,pColor)	\
    ((This)->lpVtbl -> get_Color(This,pColor)) 

#define IZcadSubEntSolidVertex_put_Color(This,pColor)	\
    ((This)->lpVtbl -> put_Color(This,pColor)) 

#define IZcadSubEntSolidVertex_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer)) 

#define IZcadSubEntSolidVertex_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype)) 

#define IZcadSubEntSolidVertex_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale)) 

#define IZcadSubEntSolidVertex_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle)) 

#define IZcadSubEntSolidVertex_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight)) 

#define IZcadSubEntSolidVertex_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks)) 

#endif

#endif

#endif

DEFINE_GUID(CLSID_ZcadSubEntSolidVertex,0xEC9230E1,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9230E1-5A17-11E7-B72E-BC5FF42AC839")
ZcadSubEntSolidVertex;
#endif

#ifndef __IZcadSubEntSolidNode_INTERFACE_DEFINED__
#define __IZcadSubEntSolidNode_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadSubEntSolidNode,0x8153157B,0xC750,0x4788,0xA3,0x3D,0x96,0xAD,0xE0,0x37,0xF8,0x7F);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("8153157B-C750-4788-A33D-96ADE037F87F")
    IZcadSubEntSolidNode : public IZcadSubEntity
    {
    public:
    };

#else

    typedef struct IZcadSubEntSolidNodeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadSubEntSolidNode * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadSubEntSolidNode * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadSubEntSolidNode * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadSubEntSolidNode * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadSubEntSolidNode * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadSubEntSolidNode * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadSubEntSolidNode * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *OnModified )(
            IZcadSubEntSolidNode * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadSubEntSolidNode * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadSubEntSolidNode * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadSubEntSolidNode * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadSubEntSolidNode * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadSubEntSolidNode * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadSubEntSolidNode * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadSubEntSolidNode * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadSubEntSolidNode * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadSubEntSolidNode * This,
             IZcadHyperlinks **HyperLinks);

        END_INTERFACE
    } IZcadSubEntSolidNodeVtbl;

    interface IZcadSubEntSolidNode
    {
        CONST_VTBL struct IZcadSubEntSolidNodeVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadSubEntSolidNode_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject)) 

#define IZcadSubEntSolidNode_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This)) 

#define IZcadSubEntSolidNode_Release(This)	\
    ((This)->lpVtbl -> Release(This)) 


#define IZcadSubEntSolidNode_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)) 

#define IZcadSubEntSolidNode_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)) 

#define IZcadSubEntSolidNode_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)) 

#define IZcadSubEntSolidNode_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)) 


#define IZcadSubEntSolidNode_OnModified(This)	\
    ((This)->lpVtbl -> OnModified(This)) 

#define IZcadSubEntSolidNode_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName)) 

#define IZcadSubEntSolidNode_get_Color(This,pColor)	\
    ((This)->lpVtbl -> get_Color(This,pColor)) 

#define IZcadSubEntSolidNode_put_Color(This,pColor)	\
    ((This)->lpVtbl -> put_Color(This,pColor)) 

#define IZcadSubEntSolidNode_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer)) 

#define IZcadSubEntSolidNode_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype)) 

#define IZcadSubEntSolidNode_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale)) 

#define IZcadSubEntSolidNode_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle)) 

#define IZcadSubEntSolidNode_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight)) 

#define IZcadSubEntSolidNode_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks)) 

#endif

#endif

#endif

DEFINE_GUID(CLSID_ZcadSubEntSolidNode,0xC87E3A37,0xF999,0x432D,0xA7,0x1A,0x31,0xE5,0x01,0xFE,0xD5,0x2B);

#ifdef __cplusplus

class DECLSPEC_UUID("C87E3A37-F999-432D-A71A-31E501FED52B")
ZcadSubEntSolidNode;
#endif


#ifndef __IZcadSubDMesh_INTERFACE_DEFINED__
#define __IZcadSubDMesh_INTERFACE_DEFINED__


DEFINE_GUID(IID_IZcadSubDMesh,0xEC923287,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EC923287-5A17-11E7-B72E-BC5FF42AC839")
    IZcadSubDMesh : public IZcadEntity
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE get_Smoothness( 
             int *level) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE put_Smoothness( 
             int level) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_Coordinates( 
             VARIANT *corners) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE put_Coordinates( 
             VARIANT corners) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_Coordinate( 
             int Index,
             VARIANT *pVal) = 0;
        
        virtual  HRESULT STDMETHODCALLTYPE put_Coordinate( 
             int Index,
             VARIANT newVal) = 0;
        
        virtual  HRESULT STDMETHODCALLTYPE get_VertexCount( 
             int *count) = 0;
        
        virtual  HRESULT STDMETHODCALLTYPE get_FaceCount( 
             int *count) = 0;
        
    };
    
#else 

    typedef struct IZcadSubDMeshVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IZcadSubDMesh * This,
             REFIID riid,
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IZcadSubDMesh * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IZcadSubDMesh * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IZcadSubDMesh * This,
            UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IZcadSubDMesh * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IZcadSubDMesh * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IZcadSubDMesh * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IZcadSubDMesh * This,
             BSTR *Handle);
        
         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IZcadSubDMesh * This,
             BSTR *ObjectName);
        
         HRESULT ( STDMETHODCALLTYPE *GetXData )( 
            IZcadSubDMesh * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);
        
         HRESULT ( STDMETHODCALLTYPE *SetXData )( 
            IZcadSubDMesh * This,
             VARIANT XDataType,
             VARIANT XDataValue);
        
         HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IZcadSubDMesh * This);
        
         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )( 
            IZcadSubDMesh * This,
             LONG_PTR *ObjectId);
        
         HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IZcadSubDMesh * This,
             LPDISPATCH *ApplicationObject);
        
         HRESULT ( STDMETHODCALLTYPE *get_Database )( 
            IZcadSubDMesh * This,
             IZcadDatabase **pDatabase);
        
         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )( 
            IZcadSubDMesh * This,
             VARIANT_BOOL *bHasDictionary);
        
         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )( 
            IZcadSubDMesh * This,
             IZcadDictionary **pExtDictionary);
        
         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )( 
            IZcadSubDMesh * This,
             LONG_PTR *OwnerId);
        
         HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            IZcadSubDMesh * This,
             LPDISPATCH *pDocument);
        
         HRESULT ( STDMETHODCALLTYPE *Erase )( 
            IZcadSubDMesh * This);
        
         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )( 
            IZcadSubDMesh * This,
             IZcadZcCmColor **pColor);
        
         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )( 
            IZcadSubDMesh * This,
             IZcadZcCmColor *pColor);
        
         HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            IZcadSubDMesh * This,
             BSTR *Layer);
        
         HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            IZcadSubDMesh * This,
             BSTR Layer);
        
         HRESULT ( STDMETHODCALLTYPE *get_Linetype )( 
            IZcadSubDMesh * This,
             BSTR *Linetype);
        
         HRESULT ( STDMETHODCALLTYPE *put_Linetype )( 
            IZcadSubDMesh * This,
             BSTR Linetype);
        
         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )( 
            IZcadSubDMesh * This,
             ZCAD_NOUNITS *ltScale);
        
         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )( 
            IZcadSubDMesh * This,
             ZCAD_NOUNITS ltScale);
        
         HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            IZcadSubDMesh * This,
             VARIANT_BOOL *bVisible);
        
         HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            IZcadSubDMesh * This,
             VARIANT_BOOL bVisible);
        
         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )( 
            IZcadSubDMesh * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);
        
         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )( 
            IZcadSubDMesh * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);
        
         HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            IZcadSubDMesh * This,
             VARIANT_BOOL HighlightFlag);
        
         HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IZcadSubDMesh * This,
             LPDISPATCH *pCopyObj);
        
         HRESULT ( STDMETHODCALLTYPE *Move )( 
            IZcadSubDMesh * This,
             VARIANT FromPoint,
             VARIANT ToPoint);
        
         HRESULT ( STDMETHODCALLTYPE *Rotate )( 
            IZcadSubDMesh * This,
             VARIANT BasePoint,
             double RotationAngle);
        
         HRESULT ( STDMETHODCALLTYPE *Rotate3D )( 
            IZcadSubDMesh * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);
        
         HRESULT ( STDMETHODCALLTYPE *Mirror )( 
            IZcadSubDMesh * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);
        
         HRESULT ( STDMETHODCALLTYPE *Mirror3D )( 
            IZcadSubDMesh * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);
        
         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )( 
            IZcadSubDMesh * This,
             VARIANT BasePoint,
             double ScaleFactor);
        
         HRESULT ( STDMETHODCALLTYPE *TransformBy )( 
            IZcadSubDMesh * This,
             VARIANT TransformationMatrix);
        
         HRESULT ( STDMETHODCALLTYPE *Update )( 
            IZcadSubDMesh * This);
        
         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )( 
            IZcadSubDMesh * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);
        
         HRESULT ( STDMETHODCALLTYPE *IntersectWith )( 
            IZcadSubDMesh * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);
        
         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )( 
            IZcadSubDMesh * This,
             BSTR *plotStyle);
        
         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )( 
            IZcadSubDMesh * This,
             BSTR plotStyle);
        
         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )( 
            IZcadSubDMesh * This,
             ZCAD_LWEIGHT *lineweight);
        
         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )( 
            IZcadSubDMesh * This,
             ZCAD_LWEIGHT lineweight);
        
         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )( 
            IZcadSubDMesh * This,
             BSTR *transparency);
        
         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )( 
            IZcadSubDMesh * This,
             BSTR transparency);
        
         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            IZcadSubDMesh * This,
             IZcadHyperlinks **HyperLinks);
        
         HRESULT ( STDMETHODCALLTYPE *get_Material )( 
            IZcadSubDMesh * This,
             BSTR *Material);
        
         HRESULT ( STDMETHODCALLTYPE *put_Material )( 
            IZcadSubDMesh * This,
             BSTR Material);
        
         HRESULT ( STDMETHODCALLTYPE *get_EntityName )( 
            IZcadSubDMesh * This,
             BSTR *EntityName);
        
         HRESULT ( STDMETHODCALLTYPE *get_EntityType )( 
            IZcadSubDMesh * This,
             long *entType);
        
         HRESULT ( STDMETHODCALLTYPE *get_Color )( 
            IZcadSubDMesh * This,
             ZCAD_COLOR *Color);
        
         HRESULT ( STDMETHODCALLTYPE *put_Color )( 
            IZcadSubDMesh * This,
             ZCAD_COLOR Color);
        
         HRESULT ( STDMETHODCALLTYPE *get_Smoothness )( 
            IZcadSubDMesh * This,
             int *level);
        
         HRESULT ( STDMETHODCALLTYPE *put_Smoothness )( 
            IZcadSubDMesh * This,
             int level);
        
         HRESULT ( STDMETHODCALLTYPE *get_Coordinates )( 
            IZcadSubDMesh * This,
             VARIANT *corners);
        
         HRESULT ( STDMETHODCALLTYPE *put_Coordinates )( 
            IZcadSubDMesh * This,
             VARIANT corners);
        
         HRESULT ( STDMETHODCALLTYPE *get_Coordinate )( 
            IZcadSubDMesh * This,
             int Index,
             VARIANT *pVal);
        
         HRESULT ( STDMETHODCALLTYPE *put_Coordinate )( 
            IZcadSubDMesh * This,
             int Index,
             VARIANT newVal);
        
         HRESULT ( STDMETHODCALLTYPE *get_VertexCount )( 
            IZcadSubDMesh * This,
             int *count);
        
         HRESULT ( STDMETHODCALLTYPE *get_FaceCount )( 
            IZcadSubDMesh * This,
             int *count);
        
        END_INTERFACE
    } IZcadSubDMeshVtbl;

    interface IZcadSubDMesh
    {
        CONST_VTBL struct IZcadSubDMeshVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IZcadSubDMesh_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IZcadSubDMesh_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IZcadSubDMesh_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IZcadSubDMesh_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IZcadSubDMesh_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IZcadSubDMesh_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IZcadSubDMesh_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IZcadSubDMesh_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define IZcadSubDMesh_get_ObjectName(This,ObjectName)	\
    ( (This)->lpVtbl -> get_ObjectName(This,ObjectName) ) 

#define IZcadSubDMesh_GetXData(This,AppName,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue) ) 

#define IZcadSubDMesh_SetXData(This,XDataType,XDataValue)	\
    ( (This)->lpVtbl -> SetXData(This,XDataType,XDataValue) ) 

#define IZcadSubDMesh_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IZcadSubDMesh_get_ObjectID(This,ObjectId)	\
    ( (This)->lpVtbl -> get_ObjectID(This,ObjectId) ) 

#define IZcadSubDMesh_get_Application(This,ApplicationObject)	\
    ( (This)->lpVtbl -> get_Application(This,ApplicationObject) ) 

#define IZcadSubDMesh_get_Database(This,pDatabase)	\
    ( (This)->lpVtbl -> get_Database(This,pDatabase) ) 

#define IZcadSubDMesh_get_HasExtensionDictionary(This,bHasDictionary)	\
    ( (This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary) ) 

#define IZcadSubDMesh_GetExtensionDictionary(This,pExtDictionary)	\
    ( (This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary) ) 

#define IZcadSubDMesh_get_OwnerID(This,OwnerId)	\
    ( (This)->lpVtbl -> get_OwnerID(This,OwnerId) ) 

#define IZcadSubDMesh_get_Document(This,pDocument)	\
    ( (This)->lpVtbl -> get_Document(This,pDocument) ) 

#define IZcadSubDMesh_Erase(This)	\
    ( (This)->lpVtbl -> Erase(This) ) 


#define IZcadSubDMesh_get_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> get_TrueColor(This,pColor) ) 

#define IZcadSubDMesh_put_TrueColor(This,pColor)	\
    ( (This)->lpVtbl -> put_TrueColor(This,pColor) ) 

#define IZcadSubDMesh_get_Layer(This,Layer)	\
    ( (This)->lpVtbl -> get_Layer(This,Layer) ) 

#define IZcadSubDMesh_put_Layer(This,Layer)	\
    ( (This)->lpVtbl -> put_Layer(This,Layer) ) 

#define IZcadSubDMesh_get_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> get_Linetype(This,Linetype) ) 

#define IZcadSubDMesh_put_Linetype(This,Linetype)	\
    ( (This)->lpVtbl -> put_Linetype(This,Linetype) ) 

#define IZcadSubDMesh_get_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> get_LinetypeScale(This,ltScale) ) 

#define IZcadSubDMesh_put_LinetypeScale(This,ltScale)	\
    ( (This)->lpVtbl -> put_LinetypeScale(This,ltScale) ) 

#define IZcadSubDMesh_get_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> get_Visible(This,bVisible) ) 

#define IZcadSubDMesh_put_Visible(This,bVisible)	\
    ( (This)->lpVtbl -> put_Visible(This,bVisible) ) 

#define IZcadSubDMesh_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs) ) 

#define IZcadSubDMesh_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ( (This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs) ) 

#define IZcadSubDMesh_Highlight(This,HighlightFlag)	\
    ( (This)->lpVtbl -> Highlight(This,HighlightFlag) ) 

#define IZcadSubDMesh_Copy(This,pCopyObj)	\
    ( (This)->lpVtbl -> Copy(This,pCopyObj) ) 

#define IZcadSubDMesh_Move(This,FromPoint,ToPoint)	\
    ( (This)->lpVtbl -> Move(This,FromPoint,ToPoint) ) 

#define IZcadSubDMesh_Rotate(This,BasePoint,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle) ) 

#define IZcadSubDMesh_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ( (This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle) ) 

#define IZcadSubDMesh_Mirror(This,Point1,Point2,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj) ) 

#define IZcadSubDMesh_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ( (This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj) ) 

#define IZcadSubDMesh_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ( (This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor) ) 

#define IZcadSubDMesh_TransformBy(This,TransformationMatrix)	\
    ( (This)->lpVtbl -> TransformBy(This,TransformationMatrix) ) 

#define IZcadSubDMesh_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IZcadSubDMesh_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ( (This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint) ) 

#define IZcadSubDMesh_IntersectWith(This,IntersectObject,option,intPoints)	\
    ( (This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints) ) 

#define IZcadSubDMesh_get_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> get_PlotStyleName(This,plotStyle) ) 

#define IZcadSubDMesh_put_PlotStyleName(This,plotStyle)	\
    ( (This)->lpVtbl -> put_PlotStyleName(This,plotStyle) ) 

#define IZcadSubDMesh_get_Lineweight(This,lineweight)	\
    ( (This)->lpVtbl -> get_Lineweight(This,lineweight) ) 

#define IZcadSubDMesh_put_Lineweight(This,lineweight)	\
    ( (This)->lpVtbl -> put_Lineweight(This,lineweight) ) 

#define IZcadSubDMesh_get_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> get_EntityTransparency(This,transparency) ) 

#define IZcadSubDMesh_put_EntityTransparency(This,transparency)	\
    ( (This)->lpVtbl -> put_EntityTransparency(This,transparency) ) 

#define IZcadSubDMesh_get_Hyperlinks(This,HyperLinks)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,HyperLinks) ) 

#define IZcadSubDMesh_get_Material(This,Material)	\
    ( (This)->lpVtbl -> get_Material(This,Material) ) 

#define IZcadSubDMesh_put_Material(This,Material)	\
    ( (This)->lpVtbl -> put_Material(This,Material) ) 

#define IZcadSubDMesh_get_EntityName(This,EntityName)	\
    ( (This)->lpVtbl -> get_EntityName(This,EntityName) ) 

#define IZcadSubDMesh_get_EntityType(This,entType)	\
    ( (This)->lpVtbl -> get_EntityType(This,entType) ) 

#define IZcadSubDMesh_get_Color(This,Color)	\
    ( (This)->lpVtbl -> get_Color(This,Color) ) 

#define IZcadSubDMesh_put_Color(This,Color)	\
    ( (This)->lpVtbl -> put_Color(This,Color) ) 


#define IZcadSubDMesh_get_Smoothness(This,level)	\
    ( (This)->lpVtbl -> get_Smoothness(This,level) ) 

#define IZcadSubDMesh_put_Smoothness(This,level)	\
    ( (This)->lpVtbl -> put_Smoothness(This,level) ) 

#define IZcadSubDMesh_get_Coordinates(This,corners)	\
    ( (This)->lpVtbl -> get_Coordinates(This,corners) ) 

#define IZcadSubDMesh_put_Coordinates(This,corners)	\
    ( (This)->lpVtbl -> put_Coordinates(This,corners) ) 

#define IZcadSubDMesh_get_Coordinate(This,Index,pVal)	\
    ( (This)->lpVtbl -> get_Coordinate(This,Index,pVal) ) 

#define IZcadSubDMesh_put_Coordinate(This,Index,newVal)	\
    ( (This)->lpVtbl -> put_Coordinate(This,Index,newVal) ) 

#define IZcadSubDMesh_get_VertexCount(This,count)	\
    ( (This)->lpVtbl -> get_VertexCount(This,count) ) 

#define IZcadSubDMesh_get_FaceCount(This,count)	\
    ( (This)->lpVtbl -> get_FaceCount(This,count) ) 

#endif


#endif 




#endif 


DEFINE_GUID(CLSID_ZcadSubDMesh,0xEC923286,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923286-5A17-11E7-B72E-BC5FF42AC839")
ZcadSubDMesh;
#endif

#ifndef __IZcadDimension_INTERFACE_DEFINED__
#define __IZcadDimension_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadDimension,0xEC9230DF,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9230DF-5A17-11E7-B72E-BC5FF42AC839")
    IZcadDimension : public IZcadEntity
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Normal(
             VARIANT *normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Normal(
             VARIANT normal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Rotation(
             ZCAD_ANGLE *rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Rotation(
             ZCAD_ANGLE rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextPosition(
             VARIANT *textPos) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextPosition(
             VARIANT textPos) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextRotation(
             ZCAD_ANGLE *rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextRotation(
             ZCAD_ANGLE rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextOverride(
             BSTR *bstrText) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextOverride(
             BSTR bstrText) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_StyleName(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_StyleName(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextColor(
             ZCAD_COLOR *Color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextColor(
             ZCAD_COLOR Color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DecimalSeparator(
             BSTR *character) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DecimalSeparator(
             BSTR character) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextGap(
             double *offset) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextGap(
             double offset) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextPrefix(
             BSTR *prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextPrefix(
             BSTR prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextSuffix(
             BSTR *suffix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextSuffix(
             BSTR suffix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ScaleFactor(
             ZCAD_NOUNITS *factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ScaleFactor(
             ZCAD_NOUNITS factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_VerticalTextPosition(
             ZcDimVerticalJustification *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_VerticalTextPosition(
             ZcDimVerticalJustification type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TolerancePrecision(
             ZcDimPrecision *precision) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TolerancePrecision(
             ZcDimPrecision precision) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ToleranceHeightScale(
             ZCAD_NOUNITS *scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ToleranceHeightScale(
             ZCAD_NOUNITS scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ToleranceLowerLimit(
             double *lower) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ToleranceLowerLimit(
             double lower) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextMovement(
             ZcDimTextMovement *move) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextMovement(
             ZcDimTextMovement move) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ToleranceDisplay(
             ZcDimToleranceMethod *method) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ToleranceDisplay(
             ZcDimToleranceMethod method) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ToleranceJustification(
             ZcDimToleranceJustify *method) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ToleranceJustification(
             ZcDimToleranceJustify method) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ToleranceUpperLimit(
             double *upper) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ToleranceUpperLimit(
             double upper) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextStyle(
             BSTR *style) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextStyle(
             BSTR style) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextHeight(
             double *height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextHeight(
             double height) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SuppressLeadingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SuppressLeadingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SuppressTrailingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SuppressTrailingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ToleranceSuppressLeadingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ToleranceSuppressLeadingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ToleranceSuppressTrailingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ToleranceSuppressTrailingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextFill(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextFill(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextFillColor(
             ZCAD_COLOR *Color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextFillColor(
             ZCAD_COLOR Color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimTxtDirection(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimTxtDirection(
             VARIANT_BOOL bVal) = 0;

    };

#else

    typedef struct IZcadDimensionVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadDimension * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadDimension * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadDimension * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadDimension * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadDimension * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadDimension * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadDimension * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadDimension * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadDimension * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadDimension * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadDimension * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadDimension * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadDimension * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadDimension * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadDimension * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadDimension * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadDimension * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadDimension * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadDimension * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadDimension * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadDimension * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadDimension * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadDimension * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadDimension * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadDimension * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadDimension * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadDimension * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadDimension * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadDimension * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadDimension * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadDimension * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadDimension * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadDimension * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadDimension * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadDimension * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadDimension * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadDimension * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadDimension * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadDimension * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadDimension * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadDimension * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadDimension * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadDimension * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadDimension * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadDimension * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadDimension * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadDimension * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadDimension * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadDimension * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadDimension * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadDimension * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadDimension * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadDimension * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadDimension * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadDimension * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadDimension * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadDimension * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadDimension * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadDimension * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_Rotation )(
            IZcadDimension * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_Rotation )(
            IZcadDimension * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextPosition )(
            IZcadDimension * This,
             VARIANT *textPos);

         HRESULT ( STDMETHODCALLTYPE *put_TextPosition )(
            IZcadDimension * This,
             VARIANT textPos);

         HRESULT ( STDMETHODCALLTYPE *get_TextRotation )(
            IZcadDimension * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_TextRotation )(
            IZcadDimension * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextOverride )(
            IZcadDimension * This,
             BSTR *bstrText);

         HRESULT ( STDMETHODCALLTYPE *put_TextOverride )(
            IZcadDimension * This,
             BSTR bstrText);

         HRESULT ( STDMETHODCALLTYPE *get_StyleName )(
            IZcadDimension * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_StyleName )(
            IZcadDimension * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_TextColor )(
            IZcadDimension * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_TextColor )(
            IZcadDimension * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_DecimalSeparator )(
            IZcadDimension * This,
             BSTR *character);

         HRESULT ( STDMETHODCALLTYPE *put_DecimalSeparator )(
            IZcadDimension * This,
             BSTR character);

         HRESULT ( STDMETHODCALLTYPE *get_TextGap )(
            IZcadDimension * This,
             double *offset);

         HRESULT ( STDMETHODCALLTYPE *put_TextGap )(
            IZcadDimension * This,
             double offset);

         HRESULT ( STDMETHODCALLTYPE *get_TextPrefix )(
            IZcadDimension * This,
             BSTR *prefix);

         HRESULT ( STDMETHODCALLTYPE *put_TextPrefix )(
            IZcadDimension * This,
             BSTR prefix);

         HRESULT ( STDMETHODCALLTYPE *get_TextSuffix )(
            IZcadDimension * This,
             BSTR *suffix);

         HRESULT ( STDMETHODCALLTYPE *put_TextSuffix )(
            IZcadDimension * This,
             BSTR suffix);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )(
            IZcadDimension * This,
             ZCAD_NOUNITS *factor);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )(
            IZcadDimension * This,
             ZCAD_NOUNITS factor);

         HRESULT ( STDMETHODCALLTYPE *get_VerticalTextPosition )(
            IZcadDimension * This,
             ZcDimVerticalJustification *type);

         HRESULT ( STDMETHODCALLTYPE *put_VerticalTextPosition )(
            IZcadDimension * This,
             ZcDimVerticalJustification type);

         HRESULT ( STDMETHODCALLTYPE *get_TolerancePrecision )(
            IZcadDimension * This,
             ZcDimPrecision *precision);

         HRESULT ( STDMETHODCALLTYPE *put_TolerancePrecision )(
            IZcadDimension * This,
             ZcDimPrecision precision);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceHeightScale )(
            IZcadDimension * This,
             ZCAD_NOUNITS *scale);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceHeightScale )(
            IZcadDimension * This,
             ZCAD_NOUNITS scale);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceLowerLimit )(
            IZcadDimension * This,
             double *lower);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceLowerLimit )(
            IZcadDimension * This,
             double lower);

         HRESULT ( STDMETHODCALLTYPE *get_TextMovement )(
            IZcadDimension * This,
             ZcDimTextMovement *move);

         HRESULT ( STDMETHODCALLTYPE *put_TextMovement )(
            IZcadDimension * This,
             ZcDimTextMovement move);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceDisplay )(
            IZcadDimension * This,
             ZcDimToleranceMethod *method);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceDisplay )(
            IZcadDimension * This,
             ZcDimToleranceMethod method);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceJustification )(
            IZcadDimension * This,
             ZcDimToleranceJustify *method);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceJustification )(
            IZcadDimension * This,
             ZcDimToleranceJustify method);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceUpperLimit )(
            IZcadDimension * This,
             double *upper);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceUpperLimit )(
            IZcadDimension * This,
             double upper);

         HRESULT ( STDMETHODCALLTYPE *get_TextStyle )(
            IZcadDimension * This,
             BSTR *style);

         HRESULT ( STDMETHODCALLTYPE *put_TextStyle )(
            IZcadDimension * This,
             BSTR style);

         HRESULT ( STDMETHODCALLTYPE *get_TextHeight )(
            IZcadDimension * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_TextHeight )(
            IZcadDimension * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressLeadingZeros )(
            IZcadDimension * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressLeadingZeros )(
            IZcadDimension * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressTrailingZeros )(
            IZcadDimension * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressTrailingZeros )(
            IZcadDimension * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressLeadingZeros )(
            IZcadDimension * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressLeadingZeros )(
            IZcadDimension * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressTrailingZeros )(
            IZcadDimension * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressTrailingZeros )(
            IZcadDimension * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_TextFill )(
            IZcadDimension * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_TextFill )(
            IZcadDimension * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_TextFillColor )(
            IZcadDimension * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_TextFillColor )(
            IZcadDimension * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_DimTxtDirection )(
            IZcadDimension * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_DimTxtDirection )(
            IZcadDimension * This,
             VARIANT_BOOL bVal);

        END_INTERFACE
    } IZcadDimensionVtbl;

    interface IZcadDimension
    {
        CONST_VTBL struct IZcadDimensionVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadDimension_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadDimension_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadDimension_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadDimension_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadDimension_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadDimension_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadDimension_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadDimension_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadDimension_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadDimension_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadDimension_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadDimension_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadDimension_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadDimension_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadDimension_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadDimension_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadDimension_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadDimension_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadDimension_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadDimension_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadDimension_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadDimension_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadDimension_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadDimension_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadDimension_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadDimension_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadDimension_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadDimension_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadDimension_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadDimension_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadDimension_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadDimension_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadDimension_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadDimension_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadDimension_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadDimension_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadDimension_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadDimension_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadDimension_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadDimension_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadDimension_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadDimension_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadDimension_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadDimension_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadDimension_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadDimension_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadDimension_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadDimension_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadDimension_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadDimension_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadDimension_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadDimension_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadDimension_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadDimension_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadDimension_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadDimension_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadDimension_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadDimension_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadDimension_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadDimension_get_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_Rotation(This,rotAngle))

#define IZcadDimension_put_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_Rotation(This,rotAngle))

#define IZcadDimension_get_TextPosition(This,textPos)	\
    ((This)->lpVtbl -> get_TextPosition(This,textPos))

#define IZcadDimension_put_TextPosition(This,textPos)	\
    ((This)->lpVtbl -> put_TextPosition(This,textPos))

#define IZcadDimension_get_TextRotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_TextRotation(This,rotAngle))

#define IZcadDimension_put_TextRotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_TextRotation(This,rotAngle))

#define IZcadDimension_get_TextOverride(This,bstrText)	\
    ((This)->lpVtbl -> get_TextOverride(This,bstrText))

#define IZcadDimension_put_TextOverride(This,bstrText)	\
    ((This)->lpVtbl -> put_TextOverride(This,bstrText))

#define IZcadDimension_get_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> get_StyleName(This,bstrName))

#define IZcadDimension_put_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> put_StyleName(This,bstrName))

#define IZcadDimension_get_TextColor(This,Color)	\
    ((This)->lpVtbl -> get_TextColor(This,Color))

#define IZcadDimension_put_TextColor(This,Color)	\
    ((This)->lpVtbl -> put_TextColor(This,Color))

#define IZcadDimension_get_DecimalSeparator(This,character)	\
    ((This)->lpVtbl -> get_DecimalSeparator(This,character))

#define IZcadDimension_put_DecimalSeparator(This,character)	\
    ((This)->lpVtbl -> put_DecimalSeparator(This,character))

#define IZcadDimension_get_TextGap(This,offset)	\
    ((This)->lpVtbl -> get_TextGap(This,offset))

#define IZcadDimension_put_TextGap(This,offset)	\
    ((This)->lpVtbl -> put_TextGap(This,offset))

#define IZcadDimension_get_TextPrefix(This,prefix)	\
    ((This)->lpVtbl -> get_TextPrefix(This,prefix))

#define IZcadDimension_put_TextPrefix(This,prefix)	\
    ((This)->lpVtbl -> put_TextPrefix(This,prefix))

#define IZcadDimension_get_TextSuffix(This,suffix)	\
    ((This)->lpVtbl -> get_TextSuffix(This,suffix))

#define IZcadDimension_put_TextSuffix(This,suffix)	\
    ((This)->lpVtbl -> put_TextSuffix(This,suffix))

#define IZcadDimension_get_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> get_ScaleFactor(This,factor))

#define IZcadDimension_put_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> put_ScaleFactor(This,factor))

#define IZcadDimension_get_VerticalTextPosition(This,type)	\
    ((This)->lpVtbl -> get_VerticalTextPosition(This,type))

#define IZcadDimension_put_VerticalTextPosition(This,type)	\
    ((This)->lpVtbl -> put_VerticalTextPosition(This,type))

#define IZcadDimension_get_TolerancePrecision(This,precision)	\
    ((This)->lpVtbl -> get_TolerancePrecision(This,precision))

#define IZcadDimension_put_TolerancePrecision(This,precision)	\
    ((This)->lpVtbl -> put_TolerancePrecision(This,precision))

#define IZcadDimension_get_ToleranceHeightScale(This,scale)	\
    ((This)->lpVtbl -> get_ToleranceHeightScale(This,scale))

#define IZcadDimension_put_ToleranceHeightScale(This,scale)	\
    ((This)->lpVtbl -> put_ToleranceHeightScale(This,scale))

#define IZcadDimension_get_ToleranceLowerLimit(This,lower)	\
    ((This)->lpVtbl -> get_ToleranceLowerLimit(This,lower))

#define IZcadDimension_put_ToleranceLowerLimit(This,lower)	\
    ((This)->lpVtbl -> put_ToleranceLowerLimit(This,lower))

#define IZcadDimension_get_TextMovement(This,move)	\
    ((This)->lpVtbl -> get_TextMovement(This,move))

#define IZcadDimension_put_TextMovement(This,move)	\
    ((This)->lpVtbl -> put_TextMovement(This,move))

#define IZcadDimension_get_ToleranceDisplay(This,method)	\
    ((This)->lpVtbl -> get_ToleranceDisplay(This,method))

#define IZcadDimension_put_ToleranceDisplay(This,method)	\
    ((This)->lpVtbl -> put_ToleranceDisplay(This,method))

#define IZcadDimension_get_ToleranceJustification(This,method)	\
    ((This)->lpVtbl -> get_ToleranceJustification(This,method))

#define IZcadDimension_put_ToleranceJustification(This,method)	\
    ((This)->lpVtbl -> put_ToleranceJustification(This,method))

#define IZcadDimension_get_ToleranceUpperLimit(This,upper)	\
    ((This)->lpVtbl -> get_ToleranceUpperLimit(This,upper))

#define IZcadDimension_put_ToleranceUpperLimit(This,upper)	\
    ((This)->lpVtbl -> put_ToleranceUpperLimit(This,upper))

#define IZcadDimension_get_TextStyle(This,style)	\
    ((This)->lpVtbl -> get_TextStyle(This,style))

#define IZcadDimension_put_TextStyle(This,style)	\
    ((This)->lpVtbl -> put_TextStyle(This,style))

#define IZcadDimension_get_TextHeight(This,height)	\
    ((This)->lpVtbl -> get_TextHeight(This,height))

#define IZcadDimension_put_TextHeight(This,height)	\
    ((This)->lpVtbl -> put_TextHeight(This,height))

#define IZcadDimension_get_SuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressLeadingZeros(This,bVal))

#define IZcadDimension_put_SuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressLeadingZeros(This,bVal))

#define IZcadDimension_get_SuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressTrailingZeros(This,bVal))

#define IZcadDimension_put_SuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressTrailingZeros(This,bVal))

#define IZcadDimension_get_ToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimension_put_ToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimension_get_ToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimension_put_ToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimension_get_TextFill(This,bVal)	\
    ((This)->lpVtbl -> get_TextFill(This,bVal))

#define IZcadDimension_put_TextFill(This,bVal)	\
    ((This)->lpVtbl -> put_TextFill(This,bVal))

#define IZcadDimension_get_TextFillColor(This,Color)	\
    ((This)->lpVtbl -> get_TextFillColor(This,Color))

#define IZcadDimension_put_TextFillColor(This,Color)	\
    ((This)->lpVtbl -> put_TextFillColor(This,Color))

#define IZcadDimension_get_DimTxtDirection(This,bVal)	\
    ((This)->lpVtbl -> get_DimTxtDirection(This,bVal))

#define IZcadDimension_put_DimTxtDirection(This,bVal)	\
    ((This)->lpVtbl -> put_DimTxtDirection(This,bVal))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadDimension,0xEC9230F7,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9230F7-5A17-11E7-B72E-BC5FF42AC839")
ZcadDimension;
#endif

#ifndef __IZcadDimAligned_INTERFACE_DEFINED__
#define __IZcadDimAligned_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadDimAligned,0xEC923189,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923189-5A17-11E7-B72E-BC5FF42AC839")
    IZcadDimAligned : public IZcadDimension
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine1Point(
             VARIANT *xLine1Point) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine1Point(
             VARIANT xLine1Point) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine2Point(
             VARIANT *xLine2Point) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine2Point(
             VARIANT xLine2Point) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnits(
             VARIANT_BOOL *bAlternate) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnits(
             VARIANT_BOOL bAlternate) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnitsPrecision(
             ZcDimPrecision *Precision) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnitsPrecision(
             ZcDimPrecision Precision) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnitsScale(
             ZCAD_NOUNITS *Scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnitsScale(
             ZCAD_NOUNITS Scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltRoundDistance(
             double *Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltRoundDistance(
             double Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltTolerancePrecision(
             ZcDimPrecision *Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltTolerancePrecision(
             ZcDimPrecision Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnitsFormat(
             ZcDimUnits *Units) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnitsFormat(
             ZcDimUnits Units) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltTextPrefix(
             BSTR *Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltTextPrefix(
             BSTR Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltTextSuffix(
             BSTR *Suffix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltTextSuffix(
             BSTR Suffix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLineColor(
             ZCAD_COLOR *Color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLineColor(
             ZCAD_COLOR Color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineColor(
             ZCAD_COLOR *Color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineColor(
             ZCAD_COLOR Color) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PrimaryUnitsPrecision(
             ZcDimPrecision *Prec) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PrimaryUnitsPrecision(
             ZcDimPrecision Prec) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLineExtend(
             double *extend) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLineExtend(
             double extend) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineExtend(
             double *extend) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineExtend(
             double extend) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Fit(
             ZcDimFit *fittype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Fit(
             ZcDimFit fittype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_FractionFormat(
             ZcDimFractionType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_FractionFormat(
             ZcDimFractionType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_HorizontalTextPosition(
             ZcDimHorizontalJustification *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_HorizontalTextPosition(
             ZcDimHorizontalJustification type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LinearScaleFactor(
             ZCAD_NOUNITS *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LinearScaleFactor(
             ZCAD_NOUNITS type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UnitsFormat(
             ZcDimLUnits *format) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_UnitsFormat(
             ZcDimLUnits format) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineWeight(
             ZCAD_LWEIGHT *lweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineWeight(
             ZCAD_LWEIGHT lweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_RoundDistance(
             double *Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_RoundDistance(
             double Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimLine1Suppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimLine1Suppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimLine2Suppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimLine2Suppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine1Suppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine1Suppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine2Suppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine2Suppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimLineInside(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimLineInside(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextInsideAlign(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextInsideAlign(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextInside(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextInside(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ForceLineInside(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ForceLineInside(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextOutsideAlign(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextOutsideAlign(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineOffset(
             double *offset) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineOffset(
             double offset) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressLeadingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressLeadingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressTrailingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressTrailingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressLeadingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressLeadingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressTrailingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressTrailingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLineWeight(
             ZCAD_LWEIGHT *weight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLineWeight(
             ZCAD_LWEIGHT weight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArrowheadSize(
             double *size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArrowheadSize(
             double size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead1Type(
             ZcDimArrowheadType *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead1Type(
             ZcDimArrowheadType Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead2Type(
             ZcDimArrowheadType *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead2Type(
             ZcDimArrowheadType Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Measurement(
             double *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead1Block(
             BSTR *BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead1Block(
             BSTR BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead2Block(
             BSTR *BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead2Block(
             BSTR BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLinetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLinetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine1Linetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine1Linetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine2Linetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine2Linetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLineFixedLenSuppress(
             VARIANT_BOOL *bFixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLineFixedLenSuppress(
             VARIANT_BOOL bFixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLineFixedLen(
             double *FixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLineFixedLen(
             double FixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrForm(
             VARIANT_BOOL *bIsDynamic) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrForm(
             VARIANT_BOOL bIsDynamic) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrReference(
             VARIANT_BOOL *bIsReference) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrReference(
             VARIANT_BOOL bIsReference) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrName(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrName(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrExpression(
             BSTR *bstrExpression) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrExpression(
             BSTR bstrExpression) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrValue(
             BSTR *value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrValue(
             BSTR value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrDesc(
             BSTR *bstrDescription) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrDesc(
             BSTR bstrDescription) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SubUnitsSuffix(
             BSTR *suffix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SubUnitsSuffix(
             BSTR suffix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SubUnitsFactor(
             double *factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SubUnitsFactor(
             double factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSubUnitsSuffix(
             BSTR *suffix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSubUnitsSuffix(
             BSTR suffix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSubUnitsFactor(
             double *factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSubUnitsFactor(
             double factor) = 0;

    };

#else

    typedef struct IZcadDimAlignedVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadDimAligned * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadDimAligned * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadDimAligned * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadDimAligned * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadDimAligned * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadDimAligned * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadDimAligned * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadDimAligned * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadDimAligned * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadDimAligned * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadDimAligned * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadDimAligned * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadDimAligned * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadDimAligned * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadDimAligned * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadDimAligned * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadDimAligned * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadDimAligned * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadDimAligned * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadDimAligned * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadDimAligned * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadDimAligned * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadDimAligned * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadDimAligned * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadDimAligned * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadDimAligned * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadDimAligned * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadDimAligned * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadDimAligned * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadDimAligned * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadDimAligned * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadDimAligned * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadDimAligned * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadDimAligned * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadDimAligned * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadDimAligned * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadDimAligned * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadDimAligned * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadDimAligned * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadDimAligned * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadDimAligned * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadDimAligned * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadDimAligned * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadDimAligned * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadDimAligned * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadDimAligned * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadDimAligned * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadDimAligned * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadDimAligned * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadDimAligned * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadDimAligned * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadDimAligned * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadDimAligned * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadDimAligned * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadDimAligned * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadDimAligned * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadDimAligned * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_Rotation )(
            IZcadDimAligned * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_Rotation )(
            IZcadDimAligned * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextPosition )(
            IZcadDimAligned * This,
             VARIANT *textPos);

         HRESULT ( STDMETHODCALLTYPE *put_TextPosition )(
            IZcadDimAligned * This,
             VARIANT textPos);

         HRESULT ( STDMETHODCALLTYPE *get_TextRotation )(
            IZcadDimAligned * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_TextRotation )(
            IZcadDimAligned * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextOverride )(
            IZcadDimAligned * This,
             BSTR *bstrText);

         HRESULT ( STDMETHODCALLTYPE *put_TextOverride )(
            IZcadDimAligned * This,
             BSTR bstrText);

         HRESULT ( STDMETHODCALLTYPE *get_StyleName )(
            IZcadDimAligned * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_StyleName )(
            IZcadDimAligned * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_TextColor )(
            IZcadDimAligned * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_TextColor )(
            IZcadDimAligned * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_DecimalSeparator )(
            IZcadDimAligned * This,
             BSTR *character);

         HRESULT ( STDMETHODCALLTYPE *put_DecimalSeparator )(
            IZcadDimAligned * This,
             BSTR character);

         HRESULT ( STDMETHODCALLTYPE *get_TextGap )(
            IZcadDimAligned * This,
             double *offset);

         HRESULT ( STDMETHODCALLTYPE *put_TextGap )(
            IZcadDimAligned * This,
             double offset);

         HRESULT ( STDMETHODCALLTYPE *get_TextPrefix )(
            IZcadDimAligned * This,
             BSTR *prefix);

         HRESULT ( STDMETHODCALLTYPE *put_TextPrefix )(
            IZcadDimAligned * This,
             BSTR prefix);

         HRESULT ( STDMETHODCALLTYPE *get_TextSuffix )(
            IZcadDimAligned * This,
             BSTR *suffix);

         HRESULT ( STDMETHODCALLTYPE *put_TextSuffix )(
            IZcadDimAligned * This,
             BSTR suffix);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )(
            IZcadDimAligned * This,
             ZCAD_NOUNITS *factor);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )(
            IZcadDimAligned * This,
             ZCAD_NOUNITS factor);

         HRESULT ( STDMETHODCALLTYPE *get_VerticalTextPosition )(
            IZcadDimAligned * This,
             ZcDimVerticalJustification *type);

         HRESULT ( STDMETHODCALLTYPE *put_VerticalTextPosition )(
            IZcadDimAligned * This,
             ZcDimVerticalJustification type);

         HRESULT ( STDMETHODCALLTYPE *get_TolerancePrecision )(
            IZcadDimAligned * This,
             ZcDimPrecision *precision);

         HRESULT ( STDMETHODCALLTYPE *put_TolerancePrecision )(
            IZcadDimAligned * This,
             ZcDimPrecision precision);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceHeightScale )(
            IZcadDimAligned * This,
             ZCAD_NOUNITS *scale);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceHeightScale )(
            IZcadDimAligned * This,
             ZCAD_NOUNITS scale);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceLowerLimit )(
            IZcadDimAligned * This,
             double *lower);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceLowerLimit )(
            IZcadDimAligned * This,
             double lower);

         HRESULT ( STDMETHODCALLTYPE *get_TextMovement )(
            IZcadDimAligned * This,
             ZcDimTextMovement *move);

         HRESULT ( STDMETHODCALLTYPE *put_TextMovement )(
            IZcadDimAligned * This,
             ZcDimTextMovement move);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceDisplay )(
            IZcadDimAligned * This,
             ZcDimToleranceMethod *method);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceDisplay )(
            IZcadDimAligned * This,
             ZcDimToleranceMethod method);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceJustification )(
            IZcadDimAligned * This,
             ZcDimToleranceJustify *method);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceJustification )(
            IZcadDimAligned * This,
             ZcDimToleranceJustify method);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceUpperLimit )(
            IZcadDimAligned * This,
             double *upper);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceUpperLimit )(
            IZcadDimAligned * This,
             double upper);

         HRESULT ( STDMETHODCALLTYPE *get_TextStyle )(
            IZcadDimAligned * This,
             BSTR *style);

         HRESULT ( STDMETHODCALLTYPE *put_TextStyle )(
            IZcadDimAligned * This,
             BSTR style);

         HRESULT ( STDMETHODCALLTYPE *get_TextHeight )(
            IZcadDimAligned * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_TextHeight )(
            IZcadDimAligned * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressLeadingZeros )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressLeadingZeros )(
            IZcadDimAligned * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressTrailingZeros )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressTrailingZeros )(
            IZcadDimAligned * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressLeadingZeros )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressLeadingZeros )(
            IZcadDimAligned * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressTrailingZeros )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressTrailingZeros )(
            IZcadDimAligned * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_TextFill )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_TextFill )(
            IZcadDimAligned * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_TextFillColor )(
            IZcadDimAligned * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_TextFillColor )(
            IZcadDimAligned * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_DimTxtDirection )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_DimTxtDirection )(
            IZcadDimAligned * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Point )(
            IZcadDimAligned * This,
             VARIANT *xLine1Point);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Point )(
            IZcadDimAligned * This,
             VARIANT xLine1Point);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Point )(
            IZcadDimAligned * This,
             VARIANT *xLine2Point);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Point )(
            IZcadDimAligned * This,
             VARIANT xLine2Point);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnits )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bAlternate);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnits )(
            IZcadDimAligned * This,
             VARIANT_BOOL bAlternate);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnitsPrecision )(
            IZcadDimAligned * This,
             ZcDimPrecision *Precision);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnitsPrecision )(
            IZcadDimAligned * This,
             ZcDimPrecision Precision);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnitsScale )(
            IZcadDimAligned * This,
             ZCAD_NOUNITS *Scale);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnitsScale )(
            IZcadDimAligned * This,
             ZCAD_NOUNITS Scale);

         HRESULT ( STDMETHODCALLTYPE *get_AltRoundDistance )(
            IZcadDimAligned * This,
             double *Distance);

         HRESULT ( STDMETHODCALLTYPE *put_AltRoundDistance )(
            IZcadDimAligned * This,
             double Distance);

         HRESULT ( STDMETHODCALLTYPE *get_AltTolerancePrecision )(
            IZcadDimAligned * This,
             ZcDimPrecision *Distance);

         HRESULT ( STDMETHODCALLTYPE *put_AltTolerancePrecision )(
            IZcadDimAligned * This,
             ZcDimPrecision Distance);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnitsFormat )(
            IZcadDimAligned * This,
             ZcDimUnits *Units);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnitsFormat )(
            IZcadDimAligned * This,
             ZcDimUnits Units);

         HRESULT ( STDMETHODCALLTYPE *get_AltTextPrefix )(
            IZcadDimAligned * This,
             BSTR *Prefix);

         HRESULT ( STDMETHODCALLTYPE *put_AltTextPrefix )(
            IZcadDimAligned * This,
             BSTR Prefix);

         HRESULT ( STDMETHODCALLTYPE *get_AltTextSuffix )(
            IZcadDimAligned * This,
             BSTR *Suffix);

         HRESULT ( STDMETHODCALLTYPE *put_AltTextSuffix )(
            IZcadDimAligned * This,
             BSTR Suffix);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLineColor )(
            IZcadDimAligned * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLineColor )(
            IZcadDimAligned * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineColor )(
            IZcadDimAligned * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineColor )(
            IZcadDimAligned * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_PrimaryUnitsPrecision )(
            IZcadDimAligned * This,
             ZcDimPrecision *Prec);

         HRESULT ( STDMETHODCALLTYPE *put_PrimaryUnitsPrecision )(
            IZcadDimAligned * This,
             ZcDimPrecision Prec);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLineExtend )(
            IZcadDimAligned * This,
             double *extend);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLineExtend )(
            IZcadDimAligned * This,
             double extend);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineExtend )(
            IZcadDimAligned * This,
             double *extend);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineExtend )(
            IZcadDimAligned * This,
             double extend);

         HRESULT ( STDMETHODCALLTYPE *get_Fit )(
            IZcadDimAligned * This,
             ZcDimFit *fittype);

         HRESULT ( STDMETHODCALLTYPE *put_Fit )(
            IZcadDimAligned * This,
             ZcDimFit fittype);

         HRESULT ( STDMETHODCALLTYPE *get_FractionFormat )(
            IZcadDimAligned * This,
             ZcDimFractionType *type);

         HRESULT ( STDMETHODCALLTYPE *put_FractionFormat )(
            IZcadDimAligned * This,
             ZcDimFractionType type);

         HRESULT ( STDMETHODCALLTYPE *get_HorizontalTextPosition )(
            IZcadDimAligned * This,
             ZcDimHorizontalJustification *type);

         HRESULT ( STDMETHODCALLTYPE *put_HorizontalTextPosition )(
            IZcadDimAligned * This,
             ZcDimHorizontalJustification type);

         HRESULT ( STDMETHODCALLTYPE *get_LinearScaleFactor )(
            IZcadDimAligned * This,
             ZCAD_NOUNITS *type);

         HRESULT ( STDMETHODCALLTYPE *put_LinearScaleFactor )(
            IZcadDimAligned * This,
             ZCAD_NOUNITS type);

         HRESULT ( STDMETHODCALLTYPE *get_UnitsFormat )(
            IZcadDimAligned * This,
             ZcDimLUnits *format);

         HRESULT ( STDMETHODCALLTYPE *put_UnitsFormat )(
            IZcadDimAligned * This,
             ZcDimLUnits format);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineWeight )(
            IZcadDimAligned * This,
             ZCAD_LWEIGHT *lweight);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineWeight )(
            IZcadDimAligned * This,
             ZCAD_LWEIGHT lweight);

         HRESULT ( STDMETHODCALLTYPE *get_RoundDistance )(
            IZcadDimAligned * This,
             double *Distance);

         HRESULT ( STDMETHODCALLTYPE *put_RoundDistance )(
            IZcadDimAligned * This,
             double Distance);

         HRESULT ( STDMETHODCALLTYPE *get_DimLine1Suppress )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_DimLine1Suppress )(
            IZcadDimAligned * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_DimLine2Suppress )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_DimLine2Suppress )(
            IZcadDimAligned * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Suppress )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Suppress )(
            IZcadDimAligned * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Suppress )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Suppress )(
            IZcadDimAligned * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_DimLineInside )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_DimLineInside )(
            IZcadDimAligned * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_TextInsideAlign )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextInsideAlign )(
            IZcadDimAligned * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_TextInside )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextInside )(
            IZcadDimAligned * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_ForceLineInside )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_ForceLineInside )(
            IZcadDimAligned * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_TextOutsideAlign )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextOutsideAlign )(
            IZcadDimAligned * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineOffset )(
            IZcadDimAligned * This,
             double *offset);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineOffset )(
            IZcadDimAligned * This,
             double offset);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressLeadingZeros )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressLeadingZeros )(
            IZcadDimAligned * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressTrailingZeros )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressTrailingZeros )(
            IZcadDimAligned * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroFeet )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroFeet )(
            IZcadDimAligned * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroInches )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroInches )(
            IZcadDimAligned * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressLeadingZeros )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressLeadingZeros )(
            IZcadDimAligned * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressTrailingZeros )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressTrailingZeros )(
            IZcadDimAligned * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroFeet )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroFeet )(
            IZcadDimAligned * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroInches )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroInches )(
            IZcadDimAligned * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroFeet )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroFeet )(
            IZcadDimAligned * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroInches )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroInches )(
            IZcadDimAligned * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroFeet )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroFeet )(
            IZcadDimAligned * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroInches )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroInches )(
            IZcadDimAligned * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLineWeight )(
            IZcadDimAligned * This,
             ZCAD_LWEIGHT *weight);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLineWeight )(
            IZcadDimAligned * This,
             ZCAD_LWEIGHT weight);

         HRESULT ( STDMETHODCALLTYPE *get_ArrowheadSize )(
            IZcadDimAligned * This,
             double *size);

         HRESULT ( STDMETHODCALLTYPE *put_ArrowheadSize )(
            IZcadDimAligned * This,
             double size);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Type )(
            IZcadDimAligned * This,
             ZcDimArrowheadType *Type);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Type )(
            IZcadDimAligned * This,
             ZcDimArrowheadType Type);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Type )(
            IZcadDimAligned * This,
             ZcDimArrowheadType *Type);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Type )(
            IZcadDimAligned * This,
             ZcDimArrowheadType Type);

         HRESULT ( STDMETHODCALLTYPE *get_Measurement )(
            IZcadDimAligned * This,
             double *bVal);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Block )(
            IZcadDimAligned * This,
             BSTR *BlockName);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Block )(
            IZcadDimAligned * This,
             BSTR BlockName);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Block )(
            IZcadDimAligned * This,
             BSTR *BlockName);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Block )(
            IZcadDimAligned * This,
             BSTR BlockName);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLinetype )(
            IZcadDimAligned * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLinetype )(
            IZcadDimAligned * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Linetype )(
            IZcadDimAligned * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Linetype )(
            IZcadDimAligned * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Linetype )(
            IZcadDimAligned * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Linetype )(
            IZcadDimAligned * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLenSuppress )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bFixedLen);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLenSuppress )(
            IZcadDimAligned * This,
             VARIANT_BOOL bFixedLen);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLen )(
            IZcadDimAligned * This,
             double *FixedLen);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLen )(
            IZcadDimAligned * This,
             double FixedLen);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrForm )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bIsDynamic);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrForm )(
            IZcadDimAligned * This,
             VARIANT_BOOL bIsDynamic);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrReference )(
            IZcadDimAligned * This,
             VARIANT_BOOL *bIsReference);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrReference )(
            IZcadDimAligned * This,
             VARIANT_BOOL bIsReference);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrName )(
            IZcadDimAligned * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrName )(
            IZcadDimAligned * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrExpression )(
            IZcadDimAligned * This,
             BSTR *bstrExpression);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrExpression )(
            IZcadDimAligned * This,
             BSTR bstrExpression);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrValue )(
            IZcadDimAligned * This,
             BSTR *value);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrValue )(
            IZcadDimAligned * This,
             BSTR value);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrDesc )(
            IZcadDimAligned * This,
             BSTR *bstrDescription);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrDesc )(
            IZcadDimAligned * This,
             BSTR bstrDescription);

         HRESULT ( STDMETHODCALLTYPE *get_SubUnitsSuffix )(
            IZcadDimAligned * This,
             BSTR *suffix);

         HRESULT ( STDMETHODCALLTYPE *put_SubUnitsSuffix )(
            IZcadDimAligned * This,
             BSTR suffix);

         HRESULT ( STDMETHODCALLTYPE *get_SubUnitsFactor )(
            IZcadDimAligned * This,
             double *factor);

         HRESULT ( STDMETHODCALLTYPE *put_SubUnitsFactor )(
            IZcadDimAligned * This,
             double factor);

         HRESULT ( STDMETHODCALLTYPE *get_AltSubUnitsSuffix )(
            IZcadDimAligned * This,
             BSTR *suffix);

         HRESULT ( STDMETHODCALLTYPE *put_AltSubUnitsSuffix )(
            IZcadDimAligned * This,
             BSTR suffix);

         HRESULT ( STDMETHODCALLTYPE *get_AltSubUnitsFactor )(
            IZcadDimAligned * This,
             double *factor);

         HRESULT ( STDMETHODCALLTYPE *put_AltSubUnitsFactor )(
            IZcadDimAligned * This,
             double factor);

        END_INTERFACE
    } IZcadDimAlignedVtbl;

    interface IZcadDimAligned
    {
        CONST_VTBL struct IZcadDimAlignedVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadDimAligned_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadDimAligned_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadDimAligned_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadDimAligned_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadDimAligned_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadDimAligned_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadDimAligned_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadDimAligned_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadDimAligned_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadDimAligned_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadDimAligned_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadDimAligned_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadDimAligned_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadDimAligned_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadDimAligned_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadDimAligned_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadDimAligned_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadDimAligned_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadDimAligned_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadDimAligned_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadDimAligned_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadDimAligned_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadDimAligned_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadDimAligned_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadDimAligned_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadDimAligned_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadDimAligned_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadDimAligned_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadDimAligned_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadDimAligned_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadDimAligned_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadDimAligned_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadDimAligned_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadDimAligned_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadDimAligned_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadDimAligned_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadDimAligned_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadDimAligned_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadDimAligned_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadDimAligned_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadDimAligned_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadDimAligned_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadDimAligned_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadDimAligned_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadDimAligned_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadDimAligned_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadDimAligned_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadDimAligned_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadDimAligned_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadDimAligned_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadDimAligned_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadDimAligned_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadDimAligned_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadDimAligned_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadDimAligned_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadDimAligned_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadDimAligned_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadDimAligned_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadDimAligned_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadDimAligned_get_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_Rotation(This,rotAngle))

#define IZcadDimAligned_put_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_Rotation(This,rotAngle))

#define IZcadDimAligned_get_TextPosition(This,textPos)	\
    ((This)->lpVtbl -> get_TextPosition(This,textPos))

#define IZcadDimAligned_put_TextPosition(This,textPos)	\
    ((This)->lpVtbl -> put_TextPosition(This,textPos))

#define IZcadDimAligned_get_TextRotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_TextRotation(This,rotAngle))

#define IZcadDimAligned_put_TextRotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_TextRotation(This,rotAngle))

#define IZcadDimAligned_get_TextOverride(This,bstrText)	\
    ((This)->lpVtbl -> get_TextOverride(This,bstrText))

#define IZcadDimAligned_put_TextOverride(This,bstrText)	\
    ((This)->lpVtbl -> put_TextOverride(This,bstrText))

#define IZcadDimAligned_get_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> get_StyleName(This,bstrName))

#define IZcadDimAligned_put_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> put_StyleName(This,bstrName))

#define IZcadDimAligned_get_TextColor(This,Color)	\
    ((This)->lpVtbl -> get_TextColor(This,Color))

#define IZcadDimAligned_put_TextColor(This,Color)	\
    ((This)->lpVtbl -> put_TextColor(This,Color))

#define IZcadDimAligned_get_DecimalSeparator(This,character)	\
    ((This)->lpVtbl -> get_DecimalSeparator(This,character))

#define IZcadDimAligned_put_DecimalSeparator(This,character)	\
    ((This)->lpVtbl -> put_DecimalSeparator(This,character))

#define IZcadDimAligned_get_TextGap(This,offset)	\
    ((This)->lpVtbl -> get_TextGap(This,offset))

#define IZcadDimAligned_put_TextGap(This,offset)	\
    ((This)->lpVtbl -> put_TextGap(This,offset))

#define IZcadDimAligned_get_TextPrefix(This,prefix)	\
    ((This)->lpVtbl -> get_TextPrefix(This,prefix))

#define IZcadDimAligned_put_TextPrefix(This,prefix)	\
    ((This)->lpVtbl -> put_TextPrefix(This,prefix))

#define IZcadDimAligned_get_TextSuffix(This,suffix)	\
    ((This)->lpVtbl -> get_TextSuffix(This,suffix))

#define IZcadDimAligned_put_TextSuffix(This,suffix)	\
    ((This)->lpVtbl -> put_TextSuffix(This,suffix))

#define IZcadDimAligned_get_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> get_ScaleFactor(This,factor))

#define IZcadDimAligned_put_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> put_ScaleFactor(This,factor))

#define IZcadDimAligned_get_VerticalTextPosition(This,type)	\
    ((This)->lpVtbl -> get_VerticalTextPosition(This,type))

#define IZcadDimAligned_put_VerticalTextPosition(This,type)	\
    ((This)->lpVtbl -> put_VerticalTextPosition(This,type))

#define IZcadDimAligned_get_TolerancePrecision(This,precision)	\
    ((This)->lpVtbl -> get_TolerancePrecision(This,precision))

#define IZcadDimAligned_put_TolerancePrecision(This,precision)	\
    ((This)->lpVtbl -> put_TolerancePrecision(This,precision))

#define IZcadDimAligned_get_ToleranceHeightScale(This,scale)	\
    ((This)->lpVtbl -> get_ToleranceHeightScale(This,scale))

#define IZcadDimAligned_put_ToleranceHeightScale(This,scale)	\
    ((This)->lpVtbl -> put_ToleranceHeightScale(This,scale))

#define IZcadDimAligned_get_ToleranceLowerLimit(This,lower)	\
    ((This)->lpVtbl -> get_ToleranceLowerLimit(This,lower))

#define IZcadDimAligned_put_ToleranceLowerLimit(This,lower)	\
    ((This)->lpVtbl -> put_ToleranceLowerLimit(This,lower))

#define IZcadDimAligned_get_TextMovement(This,move)	\
    ((This)->lpVtbl -> get_TextMovement(This,move))

#define IZcadDimAligned_put_TextMovement(This,move)	\
    ((This)->lpVtbl -> put_TextMovement(This,move))

#define IZcadDimAligned_get_ToleranceDisplay(This,method)	\
    ((This)->lpVtbl -> get_ToleranceDisplay(This,method))

#define IZcadDimAligned_put_ToleranceDisplay(This,method)	\
    ((This)->lpVtbl -> put_ToleranceDisplay(This,method))

#define IZcadDimAligned_get_ToleranceJustification(This,method)	\
    ((This)->lpVtbl -> get_ToleranceJustification(This,method))

#define IZcadDimAligned_put_ToleranceJustification(This,method)	\
    ((This)->lpVtbl -> put_ToleranceJustification(This,method))

#define IZcadDimAligned_get_ToleranceUpperLimit(This,upper)	\
    ((This)->lpVtbl -> get_ToleranceUpperLimit(This,upper))

#define IZcadDimAligned_put_ToleranceUpperLimit(This,upper)	\
    ((This)->lpVtbl -> put_ToleranceUpperLimit(This,upper))

#define IZcadDimAligned_get_TextStyle(This,style)	\
    ((This)->lpVtbl -> get_TextStyle(This,style))

#define IZcadDimAligned_put_TextStyle(This,style)	\
    ((This)->lpVtbl -> put_TextStyle(This,style))

#define IZcadDimAligned_get_TextHeight(This,height)	\
    ((This)->lpVtbl -> get_TextHeight(This,height))

#define IZcadDimAligned_put_TextHeight(This,height)	\
    ((This)->lpVtbl -> put_TextHeight(This,height))

#define IZcadDimAligned_get_SuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressLeadingZeros(This,bVal))

#define IZcadDimAligned_put_SuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressLeadingZeros(This,bVal))

#define IZcadDimAligned_get_SuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressTrailingZeros(This,bVal))

#define IZcadDimAligned_put_SuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressTrailingZeros(This,bVal))

#define IZcadDimAligned_get_ToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimAligned_put_ToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimAligned_get_ToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimAligned_put_ToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimAligned_get_TextFill(This,bVal)	\
    ((This)->lpVtbl -> get_TextFill(This,bVal))

#define IZcadDimAligned_put_TextFill(This,bVal)	\
    ((This)->lpVtbl -> put_TextFill(This,bVal))

#define IZcadDimAligned_get_TextFillColor(This,Color)	\
    ((This)->lpVtbl -> get_TextFillColor(This,Color))

#define IZcadDimAligned_put_TextFillColor(This,Color)	\
    ((This)->lpVtbl -> put_TextFillColor(This,Color))

#define IZcadDimAligned_get_DimTxtDirection(This,bVal)	\
    ((This)->lpVtbl -> get_DimTxtDirection(This,bVal))

#define IZcadDimAligned_put_DimTxtDirection(This,bVal)	\
    ((This)->lpVtbl -> put_DimTxtDirection(This,bVal))


#define IZcadDimAligned_get_ExtLine1Point(This,xLine1Point)	\
    ((This)->lpVtbl -> get_ExtLine1Point(This,xLine1Point))

#define IZcadDimAligned_put_ExtLine1Point(This,xLine1Point)	\
    ((This)->lpVtbl -> put_ExtLine1Point(This,xLine1Point))

#define IZcadDimAligned_get_ExtLine2Point(This,xLine2Point)	\
    ((This)->lpVtbl -> get_ExtLine2Point(This,xLine2Point))

#define IZcadDimAligned_put_ExtLine2Point(This,xLine2Point)	\
    ((This)->lpVtbl -> put_ExtLine2Point(This,xLine2Point))

#define IZcadDimAligned_get_AltUnits(This,bAlternate)	\
    ((This)->lpVtbl -> get_AltUnits(This,bAlternate))

#define IZcadDimAligned_put_AltUnits(This,bAlternate)	\
    ((This)->lpVtbl -> put_AltUnits(This,bAlternate))

#define IZcadDimAligned_get_AltUnitsPrecision(This,Precision)	\
    ((This)->lpVtbl -> get_AltUnitsPrecision(This,Precision))

#define IZcadDimAligned_put_AltUnitsPrecision(This,Precision)	\
    ((This)->lpVtbl -> put_AltUnitsPrecision(This,Precision))

#define IZcadDimAligned_get_AltUnitsScale(This,Scale)	\
    ((This)->lpVtbl -> get_AltUnitsScale(This,Scale))

#define IZcadDimAligned_put_AltUnitsScale(This,Scale)	\
    ((This)->lpVtbl -> put_AltUnitsScale(This,Scale))

#define IZcadDimAligned_get_AltRoundDistance(This,Distance)	\
    ((This)->lpVtbl -> get_AltRoundDistance(This,Distance))

#define IZcadDimAligned_put_AltRoundDistance(This,Distance)	\
    ((This)->lpVtbl -> put_AltRoundDistance(This,Distance))

#define IZcadDimAligned_get_AltTolerancePrecision(This,Distance)	\
    ((This)->lpVtbl -> get_AltTolerancePrecision(This,Distance))

#define IZcadDimAligned_put_AltTolerancePrecision(This,Distance)	\
    ((This)->lpVtbl -> put_AltTolerancePrecision(This,Distance))

#define IZcadDimAligned_get_AltUnitsFormat(This,Units)	\
    ((This)->lpVtbl -> get_AltUnitsFormat(This,Units))

#define IZcadDimAligned_put_AltUnitsFormat(This,Units)	\
    ((This)->lpVtbl -> put_AltUnitsFormat(This,Units))

#define IZcadDimAligned_get_AltTextPrefix(This,Prefix)	\
    ((This)->lpVtbl -> get_AltTextPrefix(This,Prefix))

#define IZcadDimAligned_put_AltTextPrefix(This,Prefix)	\
    ((This)->lpVtbl -> put_AltTextPrefix(This,Prefix))

#define IZcadDimAligned_get_AltTextSuffix(This,Suffix)	\
    ((This)->lpVtbl -> get_AltTextSuffix(This,Suffix))

#define IZcadDimAligned_put_AltTextSuffix(This,Suffix)	\
    ((This)->lpVtbl -> put_AltTextSuffix(This,Suffix))

#define IZcadDimAligned_get_DimensionLineColor(This,Color)	\
    ((This)->lpVtbl -> get_DimensionLineColor(This,Color))

#define IZcadDimAligned_put_DimensionLineColor(This,Color)	\
    ((This)->lpVtbl -> put_DimensionLineColor(This,Color))

#define IZcadDimAligned_get_ExtensionLineColor(This,Color)	\
    ((This)->lpVtbl -> get_ExtensionLineColor(This,Color))

#define IZcadDimAligned_put_ExtensionLineColor(This,Color)	\
    ((This)->lpVtbl -> put_ExtensionLineColor(This,Color))

#define IZcadDimAligned_get_PrimaryUnitsPrecision(This,Prec)	\
    ((This)->lpVtbl -> get_PrimaryUnitsPrecision(This,Prec))

#define IZcadDimAligned_put_PrimaryUnitsPrecision(This,Prec)	\
    ((This)->lpVtbl -> put_PrimaryUnitsPrecision(This,Prec))

#define IZcadDimAligned_get_DimensionLineExtend(This,extend)	\
    ((This)->lpVtbl -> get_DimensionLineExtend(This,extend))

#define IZcadDimAligned_put_DimensionLineExtend(This,extend)	\
    ((This)->lpVtbl -> put_DimensionLineExtend(This,extend))

#define IZcadDimAligned_get_ExtensionLineExtend(This,extend)	\
    ((This)->lpVtbl -> get_ExtensionLineExtend(This,extend))

#define IZcadDimAligned_put_ExtensionLineExtend(This,extend)	\
    ((This)->lpVtbl -> put_ExtensionLineExtend(This,extend))

#define IZcadDimAligned_get_Fit(This,fittype)	\
    ((This)->lpVtbl -> get_Fit(This,fittype))

#define IZcadDimAligned_put_Fit(This,fittype)	\
    ((This)->lpVtbl -> put_Fit(This,fittype))

#define IZcadDimAligned_get_FractionFormat(This,type)	\
    ((This)->lpVtbl -> get_FractionFormat(This,type))

#define IZcadDimAligned_put_FractionFormat(This,type)	\
    ((This)->lpVtbl -> put_FractionFormat(This,type))

#define IZcadDimAligned_get_HorizontalTextPosition(This,type)	\
    ((This)->lpVtbl -> get_HorizontalTextPosition(This,type))

#define IZcadDimAligned_put_HorizontalTextPosition(This,type)	\
    ((This)->lpVtbl -> put_HorizontalTextPosition(This,type))

#define IZcadDimAligned_get_LinearScaleFactor(This,type)	\
    ((This)->lpVtbl -> get_LinearScaleFactor(This,type))

#define IZcadDimAligned_put_LinearScaleFactor(This,type)	\
    ((This)->lpVtbl -> put_LinearScaleFactor(This,type))

#define IZcadDimAligned_get_UnitsFormat(This,format)	\
    ((This)->lpVtbl -> get_UnitsFormat(This,format))

#define IZcadDimAligned_put_UnitsFormat(This,format)	\
    ((This)->lpVtbl -> put_UnitsFormat(This,format))

#define IZcadDimAligned_get_ExtensionLineWeight(This,lweight)	\
    ((This)->lpVtbl -> get_ExtensionLineWeight(This,lweight))

#define IZcadDimAligned_put_ExtensionLineWeight(This,lweight)	\
    ((This)->lpVtbl -> put_ExtensionLineWeight(This,lweight))

#define IZcadDimAligned_get_RoundDistance(This,Distance)	\
    ((This)->lpVtbl -> get_RoundDistance(This,Distance))

#define IZcadDimAligned_put_RoundDistance(This,Distance)	\
    ((This)->lpVtbl -> put_RoundDistance(This,Distance))

#define IZcadDimAligned_get_DimLine1Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_DimLine1Suppress(This,bSuppress))

#define IZcadDimAligned_put_DimLine1Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_DimLine1Suppress(This,bSuppress))

#define IZcadDimAligned_get_DimLine2Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_DimLine2Suppress(This,bSuppress))

#define IZcadDimAligned_put_DimLine2Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_DimLine2Suppress(This,bSuppress))

#define IZcadDimAligned_get_ExtLine1Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_ExtLine1Suppress(This,bSuppress))

#define IZcadDimAligned_put_ExtLine1Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_ExtLine1Suppress(This,bSuppress))

#define IZcadDimAligned_get_ExtLine2Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_ExtLine2Suppress(This,bSuppress))

#define IZcadDimAligned_put_ExtLine2Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_ExtLine2Suppress(This,bSuppress))

#define IZcadDimAligned_get_DimLineInside(This,bInside)	\
    ((This)->lpVtbl -> get_DimLineInside(This,bInside))

#define IZcadDimAligned_put_DimLineInside(This,bInside)	\
    ((This)->lpVtbl -> put_DimLineInside(This,bInside))

#define IZcadDimAligned_get_TextInsideAlign(This,bInside)	\
    ((This)->lpVtbl -> get_TextInsideAlign(This,bInside))

#define IZcadDimAligned_put_TextInsideAlign(This,bInside)	\
    ((This)->lpVtbl -> put_TextInsideAlign(This,bInside))

#define IZcadDimAligned_get_TextInside(This,bInside)	\
    ((This)->lpVtbl -> get_TextInside(This,bInside))

#define IZcadDimAligned_put_TextInside(This,bInside)	\
    ((This)->lpVtbl -> put_TextInside(This,bInside))

#define IZcadDimAligned_get_ForceLineInside(This,bInside)	\
    ((This)->lpVtbl -> get_ForceLineInside(This,bInside))

#define IZcadDimAligned_put_ForceLineInside(This,bInside)	\
    ((This)->lpVtbl -> put_ForceLineInside(This,bInside))

#define IZcadDimAligned_get_TextOutsideAlign(This,bInside)	\
    ((This)->lpVtbl -> get_TextOutsideAlign(This,bInside))

#define IZcadDimAligned_put_TextOutsideAlign(This,bInside)	\
    ((This)->lpVtbl -> put_TextOutsideAlign(This,bInside))

#define IZcadDimAligned_get_ExtensionLineOffset(This,offset)	\
    ((This)->lpVtbl -> get_ExtensionLineOffset(This,offset))

#define IZcadDimAligned_put_ExtensionLineOffset(This,offset)	\
    ((This)->lpVtbl -> put_ExtensionLineOffset(This,offset))

#define IZcadDimAligned_get_AltSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressLeadingZeros(This,bVal))

#define IZcadDimAligned_put_AltSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressLeadingZeros(This,bVal))

#define IZcadDimAligned_get_AltSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressTrailingZeros(This,bVal))

#define IZcadDimAligned_put_AltSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressTrailingZeros(This,bVal))

#define IZcadDimAligned_get_AltSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressZeroFeet(This,bVal))

#define IZcadDimAligned_put_AltSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressZeroFeet(This,bVal))

#define IZcadDimAligned_get_AltSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressZeroInches(This,bVal))

#define IZcadDimAligned_put_AltSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressZeroInches(This,bVal))

#define IZcadDimAligned_get_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimAligned_put_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimAligned_get_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimAligned_put_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimAligned_get_AltToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimAligned_put_AltToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimAligned_get_AltToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressZeroInches(This,bVal))

#define IZcadDimAligned_put_AltToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressZeroInches(This,bVal))

#define IZcadDimAligned_get_SuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressZeroFeet(This,bVal))

#define IZcadDimAligned_put_SuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressZeroFeet(This,bVal))

#define IZcadDimAligned_get_SuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressZeroInches(This,bVal))

#define IZcadDimAligned_put_SuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressZeroInches(This,bVal))

#define IZcadDimAligned_get_ToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimAligned_put_ToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimAligned_get_ToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressZeroInches(This,bVal))

#define IZcadDimAligned_put_ToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressZeroInches(This,bVal))

#define IZcadDimAligned_get_DimensionLineWeight(This,weight)	\
    ((This)->lpVtbl -> get_DimensionLineWeight(This,weight))

#define IZcadDimAligned_put_DimensionLineWeight(This,weight)	\
    ((This)->lpVtbl -> put_DimensionLineWeight(This,weight))

#define IZcadDimAligned_get_ArrowheadSize(This,size)	\
    ((This)->lpVtbl -> get_ArrowheadSize(This,size))

#define IZcadDimAligned_put_ArrowheadSize(This,size)	\
    ((This)->lpVtbl -> put_ArrowheadSize(This,size))

#define IZcadDimAligned_get_Arrowhead1Type(This,Type)	\
    ((This)->lpVtbl -> get_Arrowhead1Type(This,Type))

#define IZcadDimAligned_put_Arrowhead1Type(This,Type)	\
    ((This)->lpVtbl -> put_Arrowhead1Type(This,Type))

#define IZcadDimAligned_get_Arrowhead2Type(This,Type)	\
    ((This)->lpVtbl -> get_Arrowhead2Type(This,Type))

#define IZcadDimAligned_put_Arrowhead2Type(This,Type)	\
    ((This)->lpVtbl -> put_Arrowhead2Type(This,Type))

#define IZcadDimAligned_get_Measurement(This,bVal)	\
    ((This)->lpVtbl -> get_Measurement(This,bVal))

#define IZcadDimAligned_get_Arrowhead1Block(This,BlockName)	\
    ((This)->lpVtbl -> get_Arrowhead1Block(This,BlockName))

#define IZcadDimAligned_put_Arrowhead1Block(This,BlockName)	\
    ((This)->lpVtbl -> put_Arrowhead1Block(This,BlockName))

#define IZcadDimAligned_get_Arrowhead2Block(This,BlockName)	\
    ((This)->lpVtbl -> get_Arrowhead2Block(This,BlockName))

#define IZcadDimAligned_put_Arrowhead2Block(This,BlockName)	\
    ((This)->lpVtbl -> put_Arrowhead2Block(This,BlockName))

#define IZcadDimAligned_get_DimensionLinetype(This,Linetype)	\
    ((This)->lpVtbl -> get_DimensionLinetype(This,Linetype))

#define IZcadDimAligned_put_DimensionLinetype(This,Linetype)	\
    ((This)->lpVtbl -> put_DimensionLinetype(This,Linetype))

#define IZcadDimAligned_get_ExtLine1Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_ExtLine1Linetype(This,Linetype))

#define IZcadDimAligned_put_ExtLine1Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_ExtLine1Linetype(This,Linetype))

#define IZcadDimAligned_get_ExtLine2Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_ExtLine2Linetype(This,Linetype))

#define IZcadDimAligned_put_ExtLine2Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_ExtLine2Linetype(This,Linetype))

#define IZcadDimAligned_get_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ((This)->lpVtbl -> get_ExtLineFixedLenSuppress(This,bFixedLen))

#define IZcadDimAligned_put_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ((This)->lpVtbl -> put_ExtLineFixedLenSuppress(This,bFixedLen))

#define IZcadDimAligned_get_ExtLineFixedLen(This,FixedLen)	\
    ((This)->lpVtbl -> get_ExtLineFixedLen(This,FixedLen))

#define IZcadDimAligned_put_ExtLineFixedLen(This,FixedLen)	\
    ((This)->lpVtbl -> put_ExtLineFixedLen(This,FixedLen))

#define IZcadDimAligned_get_DimConstrForm(This,bIsDynamic)	\
    ((This)->lpVtbl -> get_DimConstrForm(This,bIsDynamic))

#define IZcadDimAligned_put_DimConstrForm(This,bIsDynamic)	\
    ((This)->lpVtbl -> put_DimConstrForm(This,bIsDynamic))

#define IZcadDimAligned_get_DimConstrReference(This,bIsReference)	\
    ((This)->lpVtbl -> get_DimConstrReference(This,bIsReference))

#define IZcadDimAligned_put_DimConstrReference(This,bIsReference)	\
    ((This)->lpVtbl -> put_DimConstrReference(This,bIsReference))

#define IZcadDimAligned_get_DimConstrName(This,bstrName)	\
    ((This)->lpVtbl -> get_DimConstrName(This,bstrName))

#define IZcadDimAligned_put_DimConstrName(This,bstrName)	\
    ((This)->lpVtbl -> put_DimConstrName(This,bstrName))

#define IZcadDimAligned_get_DimConstrExpression(This,bstrExpression)	\
    ((This)->lpVtbl -> get_DimConstrExpression(This,bstrExpression))

#define IZcadDimAligned_put_DimConstrExpression(This,bstrExpression)	\
    ((This)->lpVtbl -> put_DimConstrExpression(This,bstrExpression))

#define IZcadDimAligned_get_DimConstrValue(This,value)	\
    ((This)->lpVtbl -> get_DimConstrValue(This,value))

#define IZcadDimAligned_put_DimConstrValue(This,value)	\
    ((This)->lpVtbl -> put_DimConstrValue(This,value))

#define IZcadDimAligned_get_DimConstrDesc(This,bstrDescription)	\
    ((This)->lpVtbl -> get_DimConstrDesc(This,bstrDescription))

#define IZcadDimAligned_put_DimConstrDesc(This,bstrDescription)	\
    ((This)->lpVtbl -> put_DimConstrDesc(This,bstrDescription))

#define IZcadDimAligned_get_SubUnitsSuffix(This,suffix)	\
    ((This)->lpVtbl -> get_SubUnitsSuffix(This,suffix))

#define IZcadDimAligned_put_SubUnitsSuffix(This,suffix)	\
    ((This)->lpVtbl -> put_SubUnitsSuffix(This,suffix))

#define IZcadDimAligned_get_SubUnitsFactor(This,factor)	\
    ((This)->lpVtbl -> get_SubUnitsFactor(This,factor))

#define IZcadDimAligned_put_SubUnitsFactor(This,factor)	\
    ((This)->lpVtbl -> put_SubUnitsFactor(This,factor))

#define IZcadDimAligned_get_AltSubUnitsSuffix(This,suffix)	\
    ((This)->lpVtbl -> get_AltSubUnitsSuffix(This,suffix))

#define IZcadDimAligned_put_AltSubUnitsSuffix(This,suffix)	\
    ((This)->lpVtbl -> put_AltSubUnitsSuffix(This,suffix))

#define IZcadDimAligned_get_AltSubUnitsFactor(This,factor)	\
    ((This)->lpVtbl -> get_AltSubUnitsFactor(This,factor))

#define IZcadDimAligned_put_AltSubUnitsFactor(This,factor)	\
    ((This)->lpVtbl -> put_AltSubUnitsFactor(This,factor))

#endif
#endif


 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_AltTolerancePrecision_Proxy(
    IZcadDimAligned * This,
     ZcDimPrecision Distance);

void __RPC_STUB IZcadDimAligned_put_AltTolerancePrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_AltUnitsFormat_Proxy(
    IZcadDimAligned * This,
     ZcDimUnits *Units);

void __RPC_STUB IZcadDimAligned_get_AltUnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_AltUnitsFormat_Proxy(
    IZcadDimAligned * This,
     ZcDimUnits Units);

void __RPC_STUB IZcadDimAligned_put_AltUnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_AltTextPrefix_Proxy(
    IZcadDimAligned * This,
     BSTR *Prefix);

void __RPC_STUB IZcadDimAligned_get_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_AltTextPrefix_Proxy(
    IZcadDimAligned * This,
     BSTR Prefix);

void __RPC_STUB IZcadDimAligned_put_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_AltTextSuffix_Proxy(
    IZcadDimAligned * This,
     BSTR *Suffix);

void __RPC_STUB IZcadDimAligned_get_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_AltTextSuffix_Proxy(
    IZcadDimAligned * This,
     BSTR Suffix);

void __RPC_STUB IZcadDimAligned_put_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_DimensionLineColor_Proxy(
    IZcadDimAligned * This,
     ZCAD_COLOR *Color);

void __RPC_STUB IZcadDimAligned_get_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_DimensionLineColor_Proxy(
    IZcadDimAligned * This,
     ZCAD_COLOR Color);

void __RPC_STUB IZcadDimAligned_put_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_ExtensionLineColor_Proxy(
    IZcadDimAligned * This,
     ZCAD_COLOR *Color);

void __RPC_STUB IZcadDimAligned_get_ExtensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_ExtensionLineColor_Proxy(
    IZcadDimAligned * This,
     ZCAD_COLOR Color);

void __RPC_STUB IZcadDimAligned_put_ExtensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_PrimaryUnitsPrecision_Proxy(
    IZcadDimAligned * This,
     ZcDimPrecision *Prec);

void __RPC_STUB IZcadDimAligned_get_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_PrimaryUnitsPrecision_Proxy(
    IZcadDimAligned * This,
     ZcDimPrecision Prec);

void __RPC_STUB IZcadDimAligned_put_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_DimensionLineExtend_Proxy(
    IZcadDimAligned * This,
     double *extend);

void __RPC_STUB IZcadDimAligned_get_DimensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_DimensionLineExtend_Proxy(
    IZcadDimAligned * This,
     double extend);

void __RPC_STUB IZcadDimAligned_put_DimensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_ExtensionLineExtend_Proxy(
    IZcadDimAligned * This,
     double *extend);

void __RPC_STUB IZcadDimAligned_get_ExtensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_ExtensionLineExtend_Proxy(
    IZcadDimAligned * This,
     double extend);

void __RPC_STUB IZcadDimAligned_put_ExtensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_Fit_Proxy(
    IZcadDimAligned * This,
     ZcDimFit *fittype);

void __RPC_STUB IZcadDimAligned_get_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_Fit_Proxy(
    IZcadDimAligned * This,
     ZcDimFit fittype);

void __RPC_STUB IZcadDimAligned_put_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_FractionFormat_Proxy(
    IZcadDimAligned * This,
     ZcDimFractionType *type);

void __RPC_STUB IZcadDimAligned_get_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_FractionFormat_Proxy(
    IZcadDimAligned * This,
     ZcDimFractionType type);

void __RPC_STUB IZcadDimAligned_put_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_HorizontalTextPosition_Proxy(
    IZcadDimAligned * This,
     ZcDimHorizontalJustification *type);

void __RPC_STUB IZcadDimAligned_get_HorizontalTextPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_HorizontalTextPosition_Proxy(
    IZcadDimAligned * This,
     ZcDimHorizontalJustification type);

void __RPC_STUB IZcadDimAligned_put_HorizontalTextPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_LinearScaleFactor_Proxy(
    IZcadDimAligned * This,
     ZCAD_NOUNITS *type);

void __RPC_STUB IZcadDimAligned_get_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_LinearScaleFactor_Proxy(
    IZcadDimAligned * This,
     ZCAD_NOUNITS type);

void __RPC_STUB IZcadDimAligned_put_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_UnitsFormat_Proxy(
    IZcadDimAligned * This,
     ZcDimLUnits *format);

void __RPC_STUB IZcadDimAligned_get_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_UnitsFormat_Proxy(
    IZcadDimAligned * This,
     ZcDimLUnits format);

void __RPC_STUB IZcadDimAligned_put_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_ExtensionLineWeight_Proxy(
    IZcadDimAligned * This,
     ZCAD_LWEIGHT *lweight);

void __RPC_STUB IZcadDimAligned_get_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_ExtensionLineWeight_Proxy(
    IZcadDimAligned * This,
     ZCAD_LWEIGHT lweight);

void __RPC_STUB IZcadDimAligned_put_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_RoundDistance_Proxy(
    IZcadDimAligned * This,
     double *Distance);

void __RPC_STUB IZcadDimAligned_get_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_RoundDistance_Proxy(
    IZcadDimAligned * This,
     double Distance);

void __RPC_STUB IZcadDimAligned_put_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_DimLine1Suppress_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDimAligned_get_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_DimLine1Suppress_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDimAligned_put_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_DimLine2Suppress_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDimAligned_get_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_DimLine2Suppress_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDimAligned_put_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_ExtLine1Suppress_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDimAligned_get_ExtLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_ExtLine1Suppress_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDimAligned_put_ExtLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_ExtLine2Suppress_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDimAligned_get_ExtLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_ExtLine2Suppress_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDimAligned_put_ExtLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_DimLineInside_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimAligned_get_DimLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_DimLineInside_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimAligned_put_DimLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_TextInsideAlign_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimAligned_get_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_TextInsideAlign_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimAligned_put_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_TextInside_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimAligned_get_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_TextInside_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimAligned_put_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_ForceLineInside_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimAligned_get_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_ForceLineInside_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimAligned_put_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_TextOutsideAlign_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimAligned_get_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_TextOutsideAlign_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimAligned_put_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_ExtensionLineOffset_Proxy(
    IZcadDimAligned * This,
     double *offset);

void __RPC_STUB IZcadDimAligned_get_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_ExtensionLineOffset_Proxy(
    IZcadDimAligned * This,
     double offset);

void __RPC_STUB IZcadDimAligned_put_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_AltSuppressLeadingZeros_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimAligned_get_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_AltSuppressLeadingZeros_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimAligned_put_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_AltSuppressTrailingZeros_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimAligned_get_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_AltSuppressTrailingZeros_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimAligned_put_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_AltSuppressZeroFeet_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimAligned_get_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_AltSuppressZeroFeet_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimAligned_put_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_AltSuppressZeroInches_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimAligned_get_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_AltSuppressZeroInches_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimAligned_put_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_AltToleranceSuppressLeadingZeros_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimAligned_get_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_AltToleranceSuppressLeadingZeros_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimAligned_put_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_AltToleranceSuppressTrailingZeros_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimAligned_get_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_AltToleranceSuppressTrailingZeros_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimAligned_put_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_AltToleranceSuppressZeroFeet_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimAligned_get_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_AltToleranceSuppressZeroFeet_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimAligned_put_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_AltToleranceSuppressZeroInches_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimAligned_get_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_AltToleranceSuppressZeroInches_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimAligned_put_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_SuppressZeroFeet_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimAligned_get_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_SuppressZeroFeet_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimAligned_put_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_SuppressZeroInches_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimAligned_get_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_SuppressZeroInches_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimAligned_put_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_ToleranceSuppressZeroFeet_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimAligned_get_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_ToleranceSuppressZeroFeet_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimAligned_put_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_ToleranceSuppressZeroInches_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimAligned_get_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_ToleranceSuppressZeroInches_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimAligned_put_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_DimensionLineWeight_Proxy(
    IZcadDimAligned * This,
     ZCAD_LWEIGHT *weight);

void __RPC_STUB IZcadDimAligned_get_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_DimensionLineWeight_Proxy(
    IZcadDimAligned * This,
     ZCAD_LWEIGHT weight);

void __RPC_STUB IZcadDimAligned_put_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_ArrowheadSize_Proxy(
    IZcadDimAligned * This,
     double *size);

void __RPC_STUB IZcadDimAligned_get_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_ArrowheadSize_Proxy(
    IZcadDimAligned * This,
     double size);

void __RPC_STUB IZcadDimAligned_put_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_Arrowhead1Type_Proxy(
    IZcadDimAligned * This,
     ZcDimArrowheadType *Type);

void __RPC_STUB IZcadDimAligned_get_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_Arrowhead1Type_Proxy(
    IZcadDimAligned * This,
     ZcDimArrowheadType Type);

void __RPC_STUB IZcadDimAligned_put_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_Arrowhead2Type_Proxy(
    IZcadDimAligned * This,
     ZcDimArrowheadType *Type);

void __RPC_STUB IZcadDimAligned_get_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_Arrowhead2Type_Proxy(
    IZcadDimAligned * This,
     ZcDimArrowheadType Type);

void __RPC_STUB IZcadDimAligned_put_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_Measurement_Proxy(
    IZcadDimAligned * This,
     double *bVal);

void __RPC_STUB IZcadDimAligned_get_Measurement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_Arrowhead1Block_Proxy(
    IZcadDimAligned * This,
     BSTR *BlockName);

void __RPC_STUB IZcadDimAligned_get_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_Arrowhead1Block_Proxy(
    IZcadDimAligned * This,
     BSTR BlockName);

void __RPC_STUB IZcadDimAligned_put_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_Arrowhead2Block_Proxy(
    IZcadDimAligned * This,
     BSTR *BlockName);

void __RPC_STUB IZcadDimAligned_get_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_Arrowhead2Block_Proxy(
    IZcadDimAligned * This,
     BSTR BlockName);

void __RPC_STUB IZcadDimAligned_put_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_DimensionLinetype_Proxy(
    IZcadDimAligned * This,
     BSTR *Linetype);

void __RPC_STUB IZcadDimAligned_get_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_DimensionLinetype_Proxy(
    IZcadDimAligned * This,
     BSTR Linetype);

void __RPC_STUB IZcadDimAligned_put_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_ExtLine1Linetype_Proxy(
    IZcadDimAligned * This,
     BSTR *Linetype);

void __RPC_STUB IZcadDimAligned_get_ExtLine1Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_ExtLine1Linetype_Proxy(
    IZcadDimAligned * This,
     BSTR Linetype);

void __RPC_STUB IZcadDimAligned_put_ExtLine1Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_ExtLine2Linetype_Proxy(
    IZcadDimAligned * This,
     BSTR *Linetype);

void __RPC_STUB IZcadDimAligned_get_ExtLine2Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_ExtLine2Linetype_Proxy(
    IZcadDimAligned * This,
     BSTR Linetype);

void __RPC_STUB IZcadDimAligned_put_ExtLine2Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_ExtLineFixedLenSuppress_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bFixedLen);

void __RPC_STUB IZcadDimAligned_get_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_ExtLineFixedLenSuppress_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bFixedLen);

void __RPC_STUB IZcadDimAligned_put_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_ExtLineFixedLen_Proxy(
    IZcadDimAligned * This,
     double *FixedLen);

void __RPC_STUB IZcadDimAligned_get_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_ExtLineFixedLen_Proxy(
    IZcadDimAligned * This,
     double FixedLen);

void __RPC_STUB IZcadDimAligned_put_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_DimConstrForm_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bIsDynamic);

void __RPC_STUB IZcadDimAligned_get_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_DimConstrForm_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bIsDynamic);

void __RPC_STUB IZcadDimAligned_put_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_DimConstrReference_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL *bIsReference);

void __RPC_STUB IZcadDimAligned_get_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_DimConstrReference_Proxy(
    IZcadDimAligned * This,
     VARIANT_BOOL bIsReference);

void __RPC_STUB IZcadDimAligned_put_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_DimConstrName_Proxy(
    IZcadDimAligned * This,
     BSTR *bstrName);

void __RPC_STUB IZcadDimAligned_get_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_DimConstrName_Proxy(
    IZcadDimAligned * This,
     BSTR bstrName);

void __RPC_STUB IZcadDimAligned_put_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_DimConstrExpression_Proxy(
    IZcadDimAligned * This,
     BSTR *bstrExpression);

void __RPC_STUB IZcadDimAligned_get_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_DimConstrExpression_Proxy(
    IZcadDimAligned * This,
     BSTR bstrExpression);

void __RPC_STUB IZcadDimAligned_put_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_DimConstrValue_Proxy(
    IZcadDimAligned * This,
     BSTR *value);

void __RPC_STUB IZcadDimAligned_get_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_DimConstrValue_Proxy(
    IZcadDimAligned * This,
     BSTR value);

void __RPC_STUB IZcadDimAligned_put_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_DimConstrDesc_Proxy(
    IZcadDimAligned * This,
     BSTR *bstrDescription);

void __RPC_STUB IZcadDimAligned_get_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_DimConstrDesc_Proxy(
    IZcadDimAligned * This,
     BSTR bstrDescription);

void __RPC_STUB IZcadDimAligned_put_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_SubUnitsSuffix_Proxy(
    IZcadDimAligned * This,
     BSTR *suffix);

void __RPC_STUB IZcadDimAligned_get_SubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_SubUnitsSuffix_Proxy(
    IZcadDimAligned * This,
     BSTR suffix);

void __RPC_STUB IZcadDimAligned_put_SubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_SubUnitsFactor_Proxy(
    IZcadDimAligned * This,
     double *factor);

void __RPC_STUB IZcadDimAligned_get_SubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_SubUnitsFactor_Proxy(
    IZcadDimAligned * This,
     double factor);

void __RPC_STUB IZcadDimAligned_put_SubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_AltSubUnitsSuffix_Proxy(
    IZcadDimAligned * This,
     BSTR *suffix);

void __RPC_STUB IZcadDimAligned_get_AltSubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_AltSubUnitsSuffix_Proxy(
    IZcadDimAligned * This,
     BSTR suffix);

void __RPC_STUB IZcadDimAligned_put_AltSubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_get_AltSubUnitsFactor_Proxy(
    IZcadDimAligned * This,
     double *factor);

void __RPC_STUB IZcadDimAligned_get_AltSubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAligned_put_AltSubUnitsFactor_Proxy(
    IZcadDimAligned * This,
     double factor);

void __RPC_STUB IZcadDimAligned_put_AltSubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


#endif

DEFINE_GUID(CLSID_ZcadDimAligned,0xEC923118,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923118-5A17-11E7-B72E-BC5FF42AC839")
ZcadDimAligned;
#endif

#ifndef __IZcadDimAngular_INTERFACE_DEFINED__
#define __IZcadDimAngular_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadDimAngular,0xEC923152,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923152-5A17-11E7-B72E-BC5FF42AC839")
    IZcadDimAngular : public IZcadDimension
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine1StartPoint(
             VARIANT *xLine1Point) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine1StartPoint(
             VARIANT xLine1Point) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine1EndPoint(
             VARIANT *xLine1Point) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine1EndPoint(
             VARIANT xLine1Point) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine2StartPoint(
             VARIANT *xLine2Point) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine2StartPoint(
             VARIANT xLine2Point) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine2EndPoint(
             VARIANT *xLine2Point) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine2EndPoint(
             VARIANT xLine2Point) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AngleFormat(
             ZcAngleUnits *format) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AngleFormat(
             ZcAngleUnits format) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLineColor(
             ZCAD_COLOR *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLineColor(
             ZCAD_COLOR Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineColor(
             ZCAD_COLOR *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineColor(
             ZCAD_COLOR Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineExtend(
             double *extend) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineExtend(
             double extend) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Fit(
             ZcDimFit *fittype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Fit(
             ZcDimFit fittype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_HorizontalTextPosition(
             ZcDimHorizontalJustification *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_HorizontalTextPosition(
             ZcDimHorizontalJustification type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineWeight(
             ZCAD_LWEIGHT *lweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineWeight(
             ZCAD_LWEIGHT lweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimLine1Suppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimLine1Suppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimLine2Suppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimLine2Suppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine1Suppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine1Suppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine2Suppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine2Suppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimLineInside(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimLineInside(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextInsideAlign(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextInsideAlign(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextInside(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextInside(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ForceLineInside(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ForceLineInside(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextOutsideAlign(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextOutsideAlign(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextPrecision(
             ZcDimPrecision *precision) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextPrecision(
             ZcDimPrecision precision) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineOffset(
             double *offset) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineOffset(
             double offset) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLineWeight(
             ZCAD_LWEIGHT *weight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLineWeight(
             ZCAD_LWEIGHT weight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArrowheadSize(
             double *size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArrowheadSize(
             double size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead1Type(
             ZcDimArrowheadType *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead1Type(
             ZcDimArrowheadType Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead2Type(
             ZcDimArrowheadType *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead2Type(
             ZcDimArrowheadType Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Measurement(
             ZCAD_ANGLE *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead1Block(
             BSTR *BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead1Block(
             BSTR BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead2Block(
             BSTR *BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead2Block(
             BSTR BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLinetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLinetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine1Linetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine1Linetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine2Linetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine2Linetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLineFixedLenSuppress(
             VARIANT_BOOL *bFixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLineFixedLenSuppress(
             VARIANT_BOOL bFixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLineFixedLen(
             double *FixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLineFixedLen(
             double FixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrForm(
             VARIANT_BOOL *bIsDynamic) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrForm(
             VARIANT_BOOL bIsDynamic) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrReference(
             VARIANT_BOOL *bIsReference) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrReference(
             VARIANT_BOOL bIsReference) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrName(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrName(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrExpression(
             BSTR *bstrExpression) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrExpression(
             BSTR bstrExpression) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrValue(
             BSTR *value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrValue(
             BSTR value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrDesc(
             BSTR *bstrDescription) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrDesc(
             BSTR bstrDescription) = 0;

    };

#else

    typedef struct IZcadDimAngularVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadDimAngular * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadDimAngular * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadDimAngular * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadDimAngular * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadDimAngular * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadDimAngular * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadDimAngular * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadDimAngular * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadDimAngular * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadDimAngular * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadDimAngular * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadDimAngular * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadDimAngular * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadDimAngular * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadDimAngular * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadDimAngular * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadDimAngular * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadDimAngular * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadDimAngular * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadDimAngular * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadDimAngular * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadDimAngular * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadDimAngular * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadDimAngular * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadDimAngular * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadDimAngular * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadDimAngular * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadDimAngular * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadDimAngular * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadDimAngular * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadDimAngular * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadDimAngular * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadDimAngular * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadDimAngular * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadDimAngular * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadDimAngular * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadDimAngular * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadDimAngular * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadDimAngular * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadDimAngular * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadDimAngular * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadDimAngular * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadDimAngular * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadDimAngular * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadDimAngular * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadDimAngular * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadDimAngular * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadDimAngular * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadDimAngular * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadDimAngular * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadDimAngular * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadDimAngular * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadDimAngular * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadDimAngular * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadDimAngular * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadDimAngular * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadDimAngular * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadDimAngular * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadDimAngular * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_Rotation )(
            IZcadDimAngular * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_Rotation )(
            IZcadDimAngular * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextPosition )(
            IZcadDimAngular * This,
             VARIANT *textPos);

         HRESULT ( STDMETHODCALLTYPE *put_TextPosition )(
            IZcadDimAngular * This,
             VARIANT textPos);

         HRESULT ( STDMETHODCALLTYPE *get_TextRotation )(
            IZcadDimAngular * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_TextRotation )(
            IZcadDimAngular * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextOverride )(
            IZcadDimAngular * This,
             BSTR *bstrText);

         HRESULT ( STDMETHODCALLTYPE *put_TextOverride )(
            IZcadDimAngular * This,
             BSTR bstrText);

         HRESULT ( STDMETHODCALLTYPE *get_StyleName )(
            IZcadDimAngular * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_StyleName )(
            IZcadDimAngular * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_TextColor )(
            IZcadDimAngular * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_TextColor )(
            IZcadDimAngular * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_DecimalSeparator )(
            IZcadDimAngular * This,
             BSTR *character);

         HRESULT ( STDMETHODCALLTYPE *put_DecimalSeparator )(
            IZcadDimAngular * This,
             BSTR character);

         HRESULT ( STDMETHODCALLTYPE *get_TextGap )(
            IZcadDimAngular * This,
             double *offset);

         HRESULT ( STDMETHODCALLTYPE *put_TextGap )(
            IZcadDimAngular * This,
             double offset);

         HRESULT ( STDMETHODCALLTYPE *get_TextPrefix )(
            IZcadDimAngular * This,
             BSTR *prefix);

         HRESULT ( STDMETHODCALLTYPE *put_TextPrefix )(
            IZcadDimAngular * This,
             BSTR prefix);

         HRESULT ( STDMETHODCALLTYPE *get_TextSuffix )(
            IZcadDimAngular * This,
             BSTR *suffix);

         HRESULT ( STDMETHODCALLTYPE *put_TextSuffix )(
            IZcadDimAngular * This,
             BSTR suffix);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )(
            IZcadDimAngular * This,
             ZCAD_NOUNITS *factor);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )(
            IZcadDimAngular * This,
             ZCAD_NOUNITS factor);

         HRESULT ( STDMETHODCALLTYPE *get_VerticalTextPosition )(
            IZcadDimAngular * This,
             ZcDimVerticalJustification *type);

         HRESULT ( STDMETHODCALLTYPE *put_VerticalTextPosition )(
            IZcadDimAngular * This,
             ZcDimVerticalJustification type);

         HRESULT ( STDMETHODCALLTYPE *get_TolerancePrecision )(
            IZcadDimAngular * This,
             ZcDimPrecision *precision);

         HRESULT ( STDMETHODCALLTYPE *put_TolerancePrecision )(
            IZcadDimAngular * This,
             ZcDimPrecision precision);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceHeightScale )(
            IZcadDimAngular * This,
             ZCAD_NOUNITS *scale);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceHeightScale )(
            IZcadDimAngular * This,
             ZCAD_NOUNITS scale);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceLowerLimit )(
            IZcadDimAngular * This,
             double *lower);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceLowerLimit )(
            IZcadDimAngular * This,
             double lower);

         HRESULT ( STDMETHODCALLTYPE *get_TextMovement )(
            IZcadDimAngular * This,
             ZcDimTextMovement *move);

         HRESULT ( STDMETHODCALLTYPE *put_TextMovement )(
            IZcadDimAngular * This,
             ZcDimTextMovement move);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceDisplay )(
            IZcadDimAngular * This,
             ZcDimToleranceMethod *method);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceDisplay )(
            IZcadDimAngular * This,
             ZcDimToleranceMethod method);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceJustification )(
            IZcadDimAngular * This,
             ZcDimToleranceJustify *method);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceJustification )(
            IZcadDimAngular * This,
             ZcDimToleranceJustify method);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceUpperLimit )(
            IZcadDimAngular * This,
             double *upper);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceUpperLimit )(
            IZcadDimAngular * This,
             double upper);

         HRESULT ( STDMETHODCALLTYPE *get_TextStyle )(
            IZcadDimAngular * This,
             BSTR *style);

         HRESULT ( STDMETHODCALLTYPE *put_TextStyle )(
            IZcadDimAngular * This,
             BSTR style);

         HRESULT ( STDMETHODCALLTYPE *get_TextHeight )(
            IZcadDimAngular * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_TextHeight )(
            IZcadDimAngular * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressLeadingZeros )(
            IZcadDimAngular * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressLeadingZeros )(
            IZcadDimAngular * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressTrailingZeros )(
            IZcadDimAngular * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressTrailingZeros )(
            IZcadDimAngular * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressLeadingZeros )(
            IZcadDimAngular * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressLeadingZeros )(
            IZcadDimAngular * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressTrailingZeros )(
            IZcadDimAngular * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressTrailingZeros )(
            IZcadDimAngular * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_TextFill )(
            IZcadDimAngular * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_TextFill )(
            IZcadDimAngular * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_TextFillColor )(
            IZcadDimAngular * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_TextFillColor )(
            IZcadDimAngular * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_DimTxtDirection )(
            IZcadDimAngular * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_DimTxtDirection )(
            IZcadDimAngular * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine1StartPoint )(
            IZcadDimAngular * This,
             VARIANT *xLine1Point);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine1StartPoint )(
            IZcadDimAngular * This,
             VARIANT xLine1Point);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine1EndPoint )(
            IZcadDimAngular * This,
             VARIANT *xLine1Point);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine1EndPoint )(
            IZcadDimAngular * This,
             VARIANT xLine1Point);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine2StartPoint )(
            IZcadDimAngular * This,
             VARIANT *xLine2Point);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine2StartPoint )(
            IZcadDimAngular * This,
             VARIANT xLine2Point);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine2EndPoint )(
            IZcadDimAngular * This,
             VARIANT *xLine2Point);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine2EndPoint )(
            IZcadDimAngular * This,
             VARIANT xLine2Point);

         HRESULT ( STDMETHODCALLTYPE *get_AngleFormat )(
            IZcadDimAngular * This,
             ZcAngleUnits *format);

         HRESULT ( STDMETHODCALLTYPE *put_AngleFormat )(
            IZcadDimAngular * This,
             ZcAngleUnits format);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLineColor )(
            IZcadDimAngular * This,
             ZCAD_COLOR *Type);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLineColor )(
            IZcadDimAngular * This,
             ZCAD_COLOR Type);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineColor )(
            IZcadDimAngular * This,
             ZCAD_COLOR *Type);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineColor )(
            IZcadDimAngular * This,
             ZCAD_COLOR Type);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineExtend )(
            IZcadDimAngular * This,
             double *extend);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineExtend )(
            IZcadDimAngular * This,
             double extend);

         HRESULT ( STDMETHODCALLTYPE *get_Fit )(
            IZcadDimAngular * This,
             ZcDimFit *fittype);

         HRESULT ( STDMETHODCALLTYPE *put_Fit )(
            IZcadDimAngular * This,
             ZcDimFit fittype);

         HRESULT ( STDMETHODCALLTYPE *get_HorizontalTextPosition )(
            IZcadDimAngular * This,
             ZcDimHorizontalJustification *type);

         HRESULT ( STDMETHODCALLTYPE *put_HorizontalTextPosition )(
            IZcadDimAngular * This,
             ZcDimHorizontalJustification type);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineWeight )(
            IZcadDimAngular * This,
             ZCAD_LWEIGHT *lweight);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineWeight )(
            IZcadDimAngular * This,
             ZCAD_LWEIGHT lweight);

         HRESULT ( STDMETHODCALLTYPE *get_DimLine1Suppress )(
            IZcadDimAngular * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_DimLine1Suppress )(
            IZcadDimAngular * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_DimLine2Suppress )(
            IZcadDimAngular * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_DimLine2Suppress )(
            IZcadDimAngular * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Suppress )(
            IZcadDimAngular * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Suppress )(
            IZcadDimAngular * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Suppress )(
            IZcadDimAngular * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Suppress )(
            IZcadDimAngular * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_DimLineInside )(
            IZcadDimAngular * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_DimLineInside )(
            IZcadDimAngular * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_TextInsideAlign )(
            IZcadDimAngular * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextInsideAlign )(
            IZcadDimAngular * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_TextInside )(
            IZcadDimAngular * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextInside )(
            IZcadDimAngular * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_ForceLineInside )(
            IZcadDimAngular * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_ForceLineInside )(
            IZcadDimAngular * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_TextOutsideAlign )(
            IZcadDimAngular * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextOutsideAlign )(
            IZcadDimAngular * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_TextPrecision )(
            IZcadDimAngular * This,
             ZcDimPrecision *precision);

         HRESULT ( STDMETHODCALLTYPE *put_TextPrecision )(
            IZcadDimAngular * This,
             ZcDimPrecision precision);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineOffset )(
            IZcadDimAngular * This,
             double *offset);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineOffset )(
            IZcadDimAngular * This,
             double offset);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLineWeight )(
            IZcadDimAngular * This,
             ZCAD_LWEIGHT *weight);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLineWeight )(
            IZcadDimAngular * This,
             ZCAD_LWEIGHT weight);

         HRESULT ( STDMETHODCALLTYPE *get_ArrowheadSize )(
            IZcadDimAngular * This,
             double *size);

         HRESULT ( STDMETHODCALLTYPE *put_ArrowheadSize )(
            IZcadDimAngular * This,
             double size);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Type )(
            IZcadDimAngular * This,
             ZcDimArrowheadType *Type);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Type )(
            IZcadDimAngular * This,
             ZcDimArrowheadType Type);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Type )(
            IZcadDimAngular * This,
             ZcDimArrowheadType *Type);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Type )(
            IZcadDimAngular * This,
             ZcDimArrowheadType Type);

         HRESULT ( STDMETHODCALLTYPE *get_Measurement )(
            IZcadDimAngular * This,
             ZCAD_ANGLE *bVal);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Block )(
            IZcadDimAngular * This,
             BSTR *BlockName);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Block )(
            IZcadDimAngular * This,
             BSTR BlockName);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Block )(
            IZcadDimAngular * This,
             BSTR *BlockName);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Block )(
            IZcadDimAngular * This,
             BSTR BlockName);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLinetype )(
            IZcadDimAngular * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLinetype )(
            IZcadDimAngular * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Linetype )(
            IZcadDimAngular * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Linetype )(
            IZcadDimAngular * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Linetype )(
            IZcadDimAngular * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Linetype )(
            IZcadDimAngular * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLenSuppress )(
            IZcadDimAngular * This,
             VARIANT_BOOL *bFixedLen);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLenSuppress )(
            IZcadDimAngular * This,
             VARIANT_BOOL bFixedLen);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLen )(
            IZcadDimAngular * This,
             double *FixedLen);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLen )(
            IZcadDimAngular * This,
             double FixedLen);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrForm )(
            IZcadDimAngular * This,
             VARIANT_BOOL *bIsDynamic);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrForm )(
            IZcadDimAngular * This,
             VARIANT_BOOL bIsDynamic);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrReference )(
            IZcadDimAngular * This,
             VARIANT_BOOL *bIsReference);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrReference )(
            IZcadDimAngular * This,
             VARIANT_BOOL bIsReference);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrName )(
            IZcadDimAngular * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrName )(
            IZcadDimAngular * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrExpression )(
            IZcadDimAngular * This,
             BSTR *bstrExpression);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrExpression )(
            IZcadDimAngular * This,
             BSTR bstrExpression);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrValue )(
            IZcadDimAngular * This,
             BSTR *value);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrValue )(
            IZcadDimAngular * This,
             BSTR value);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrDesc )(
            IZcadDimAngular * This,
             BSTR *bstrDescription);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrDesc )(
            IZcadDimAngular * This,
             BSTR bstrDescription);

        END_INTERFACE
    } IZcadDimAngularVtbl;

    interface IZcadDimAngular
    {
        CONST_VTBL struct IZcadDimAngularVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadDimAngular_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadDimAngular_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadDimAngular_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadDimAngular_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadDimAngular_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadDimAngular_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadDimAngular_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadDimAngular_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadDimAngular_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadDimAngular_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadDimAngular_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadDimAngular_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadDimAngular_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadDimAngular_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadDimAngular_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadDimAngular_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadDimAngular_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadDimAngular_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadDimAngular_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadDimAngular_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadDimAngular_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadDimAngular_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadDimAngular_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadDimAngular_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadDimAngular_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadDimAngular_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadDimAngular_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadDimAngular_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadDimAngular_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadDimAngular_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadDimAngular_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadDimAngular_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadDimAngular_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadDimAngular_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadDimAngular_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadDimAngular_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadDimAngular_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadDimAngular_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadDimAngular_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadDimAngular_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadDimAngular_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadDimAngular_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadDimAngular_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadDimAngular_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadDimAngular_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadDimAngular_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadDimAngular_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadDimAngular_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadDimAngular_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadDimAngular_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadDimAngular_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadDimAngular_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadDimAngular_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadDimAngular_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadDimAngular_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadDimAngular_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadDimAngular_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadDimAngular_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadDimAngular_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadDimAngular_get_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_Rotation(This,rotAngle))

#define IZcadDimAngular_put_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_Rotation(This,rotAngle))

#define IZcadDimAngular_get_TextPosition(This,textPos)	\
    ((This)->lpVtbl -> get_TextPosition(This,textPos))

#define IZcadDimAngular_put_TextPosition(This,textPos)	\
    ((This)->lpVtbl -> put_TextPosition(This,textPos))

#define IZcadDimAngular_get_TextRotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_TextRotation(This,rotAngle))

#define IZcadDimAngular_put_TextRotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_TextRotation(This,rotAngle))

#define IZcadDimAngular_get_TextOverride(This,bstrText)	\
    ((This)->lpVtbl -> get_TextOverride(This,bstrText))

#define IZcadDimAngular_put_TextOverride(This,bstrText)	\
    ((This)->lpVtbl -> put_TextOverride(This,bstrText))

#define IZcadDimAngular_get_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> get_StyleName(This,bstrName))

#define IZcadDimAngular_put_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> put_StyleName(This,bstrName))

#define IZcadDimAngular_get_TextColor(This,Color)	\
    ((This)->lpVtbl -> get_TextColor(This,Color))

#define IZcadDimAngular_put_TextColor(This,Color)	\
    ((This)->lpVtbl -> put_TextColor(This,Color))

#define IZcadDimAngular_get_DecimalSeparator(This,character)	\
    ((This)->lpVtbl -> get_DecimalSeparator(This,character))

#define IZcadDimAngular_put_DecimalSeparator(This,character)	\
    ((This)->lpVtbl -> put_DecimalSeparator(This,character))

#define IZcadDimAngular_get_TextGap(This,offset)	\
    ((This)->lpVtbl -> get_TextGap(This,offset))

#define IZcadDimAngular_put_TextGap(This,offset)	\
    ((This)->lpVtbl -> put_TextGap(This,offset))

#define IZcadDimAngular_get_TextPrefix(This,prefix)	\
    ((This)->lpVtbl -> get_TextPrefix(This,prefix))

#define IZcadDimAngular_put_TextPrefix(This,prefix)	\
    ((This)->lpVtbl -> put_TextPrefix(This,prefix))

#define IZcadDimAngular_get_TextSuffix(This,suffix)	\
    ((This)->lpVtbl -> get_TextSuffix(This,suffix))

#define IZcadDimAngular_put_TextSuffix(This,suffix)	\
    ((This)->lpVtbl -> put_TextSuffix(This,suffix))

#define IZcadDimAngular_get_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> get_ScaleFactor(This,factor))

#define IZcadDimAngular_put_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> put_ScaleFactor(This,factor))

#define IZcadDimAngular_get_VerticalTextPosition(This,type)	\
    ((This)->lpVtbl -> get_VerticalTextPosition(This,type))

#define IZcadDimAngular_put_VerticalTextPosition(This,type)	\
    ((This)->lpVtbl -> put_VerticalTextPosition(This,type))

#define IZcadDimAngular_get_TolerancePrecision(This,precision)	\
    ((This)->lpVtbl -> get_TolerancePrecision(This,precision))

#define IZcadDimAngular_put_TolerancePrecision(This,precision)	\
    ((This)->lpVtbl -> put_TolerancePrecision(This,precision))

#define IZcadDimAngular_get_ToleranceHeightScale(This,scale)	\
    ((This)->lpVtbl -> get_ToleranceHeightScale(This,scale))

#define IZcadDimAngular_put_ToleranceHeightScale(This,scale)	\
    ((This)->lpVtbl -> put_ToleranceHeightScale(This,scale))

#define IZcadDimAngular_get_ToleranceLowerLimit(This,lower)	\
    ((This)->lpVtbl -> get_ToleranceLowerLimit(This,lower))

#define IZcadDimAngular_put_ToleranceLowerLimit(This,lower)	\
    ((This)->lpVtbl -> put_ToleranceLowerLimit(This,lower))

#define IZcadDimAngular_get_TextMovement(This,move)	\
    ((This)->lpVtbl -> get_TextMovement(This,move))

#define IZcadDimAngular_put_TextMovement(This,move)	\
    ((This)->lpVtbl -> put_TextMovement(This,move))

#define IZcadDimAngular_get_ToleranceDisplay(This,method)	\
    ((This)->lpVtbl -> get_ToleranceDisplay(This,method))

#define IZcadDimAngular_put_ToleranceDisplay(This,method)	\
    ((This)->lpVtbl -> put_ToleranceDisplay(This,method))

#define IZcadDimAngular_get_ToleranceJustification(This,method)	\
    ((This)->lpVtbl -> get_ToleranceJustification(This,method))

#define IZcadDimAngular_put_ToleranceJustification(This,method)	\
    ((This)->lpVtbl -> put_ToleranceJustification(This,method))

#define IZcadDimAngular_get_ToleranceUpperLimit(This,upper)	\
    ((This)->lpVtbl -> get_ToleranceUpperLimit(This,upper))

#define IZcadDimAngular_put_ToleranceUpperLimit(This,upper)	\
    ((This)->lpVtbl -> put_ToleranceUpperLimit(This,upper))

#define IZcadDimAngular_get_TextStyle(This,style)	\
    ((This)->lpVtbl -> get_TextStyle(This,style))

#define IZcadDimAngular_put_TextStyle(This,style)	\
    ((This)->lpVtbl -> put_TextStyle(This,style))

#define IZcadDimAngular_get_TextHeight(This,height)	\
    ((This)->lpVtbl -> get_TextHeight(This,height))

#define IZcadDimAngular_put_TextHeight(This,height)	\
    ((This)->lpVtbl -> put_TextHeight(This,height))

#define IZcadDimAngular_get_SuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressLeadingZeros(This,bVal))

#define IZcadDimAngular_put_SuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressLeadingZeros(This,bVal))

#define IZcadDimAngular_get_SuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressTrailingZeros(This,bVal))

#define IZcadDimAngular_put_SuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressTrailingZeros(This,bVal))

#define IZcadDimAngular_get_ToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimAngular_put_ToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimAngular_get_ToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimAngular_put_ToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimAngular_get_TextFill(This,bVal)	\
    ((This)->lpVtbl -> get_TextFill(This,bVal))

#define IZcadDimAngular_put_TextFill(This,bVal)	\
    ((This)->lpVtbl -> put_TextFill(This,bVal))

#define IZcadDimAngular_get_TextFillColor(This,Color)	\
    ((This)->lpVtbl -> get_TextFillColor(This,Color))

#define IZcadDimAngular_put_TextFillColor(This,Color)	\
    ((This)->lpVtbl -> put_TextFillColor(This,Color))

#define IZcadDimAngular_get_DimTxtDirection(This,bVal)	\
    ((This)->lpVtbl -> get_DimTxtDirection(This,bVal))

#define IZcadDimAngular_put_DimTxtDirection(This,bVal)	\
    ((This)->lpVtbl -> put_DimTxtDirection(This,bVal))


#define IZcadDimAngular_get_ExtLine1StartPoint(This,xLine1Point)	\
    ((This)->lpVtbl -> get_ExtLine1StartPoint(This,xLine1Point))

#define IZcadDimAngular_put_ExtLine1StartPoint(This,xLine1Point)	\
    ((This)->lpVtbl -> put_ExtLine1StartPoint(This,xLine1Point))

#define IZcadDimAngular_get_ExtLine1EndPoint(This,xLine1Point)	\
    ((This)->lpVtbl -> get_ExtLine1EndPoint(This,xLine1Point))

#define IZcadDimAngular_put_ExtLine1EndPoint(This,xLine1Point)	\
    ((This)->lpVtbl -> put_ExtLine1EndPoint(This,xLine1Point))

#define IZcadDimAngular_get_ExtLine2StartPoint(This,xLine2Point)	\
    ((This)->lpVtbl -> get_ExtLine2StartPoint(This,xLine2Point))

#define IZcadDimAngular_put_ExtLine2StartPoint(This,xLine2Point)	\
    ((This)->lpVtbl -> put_ExtLine2StartPoint(This,xLine2Point))

#define IZcadDimAngular_get_ExtLine2EndPoint(This,xLine2Point)	\
    ((This)->lpVtbl -> get_ExtLine2EndPoint(This,xLine2Point))

#define IZcadDimAngular_put_ExtLine2EndPoint(This,xLine2Point)	\
    ((This)->lpVtbl -> put_ExtLine2EndPoint(This,xLine2Point))

#define IZcadDimAngular_get_AngleFormat(This,format)	\
    ((This)->lpVtbl -> get_AngleFormat(This,format))

#define IZcadDimAngular_put_AngleFormat(This,format)	\
    ((This)->lpVtbl -> put_AngleFormat(This,format))

#define IZcadDimAngular_get_DimensionLineColor(This,Type)	\
    ((This)->lpVtbl -> get_DimensionLineColor(This,Type))

#define IZcadDimAngular_put_DimensionLineColor(This,Type)	\
    ((This)->lpVtbl -> put_DimensionLineColor(This,Type))

#define IZcadDimAngular_get_ExtensionLineColor(This,Type)	\
    ((This)->lpVtbl -> get_ExtensionLineColor(This,Type))

#define IZcadDimAngular_put_ExtensionLineColor(This,Type)	\
    ((This)->lpVtbl -> put_ExtensionLineColor(This,Type))

#define IZcadDimAngular_get_ExtensionLineExtend(This,extend)	\
    ((This)->lpVtbl -> get_ExtensionLineExtend(This,extend))

#define IZcadDimAngular_put_ExtensionLineExtend(This,extend)	\
    ((This)->lpVtbl -> put_ExtensionLineExtend(This,extend))

#define IZcadDimAngular_get_Fit(This,fittype)	\
    ((This)->lpVtbl -> get_Fit(This,fittype))

#define IZcadDimAngular_put_Fit(This,fittype)	\
    ((This)->lpVtbl -> put_Fit(This,fittype))

#define IZcadDimAngular_get_HorizontalTextPosition(This,type)	\
    ((This)->lpVtbl -> get_HorizontalTextPosition(This,type))

#define IZcadDimAngular_put_HorizontalTextPosition(This,type)	\
    ((This)->lpVtbl -> put_HorizontalTextPosition(This,type))

#define IZcadDimAngular_get_ExtensionLineWeight(This,lweight)	\
    ((This)->lpVtbl -> get_ExtensionLineWeight(This,lweight))

#define IZcadDimAngular_put_ExtensionLineWeight(This,lweight)	\
    ((This)->lpVtbl -> put_ExtensionLineWeight(This,lweight))

#define IZcadDimAngular_get_DimLine1Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_DimLine1Suppress(This,bSuppress))

#define IZcadDimAngular_put_DimLine1Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_DimLine1Suppress(This,bSuppress))

#define IZcadDimAngular_get_DimLine2Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_DimLine2Suppress(This,bSuppress))

#define IZcadDimAngular_put_DimLine2Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_DimLine2Suppress(This,bSuppress))

#define IZcadDimAngular_get_ExtLine1Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_ExtLine1Suppress(This,bSuppress))

#define IZcadDimAngular_put_ExtLine1Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_ExtLine1Suppress(This,bSuppress))

#define IZcadDimAngular_get_ExtLine2Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_ExtLine2Suppress(This,bSuppress))

#define IZcadDimAngular_put_ExtLine2Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_ExtLine2Suppress(This,bSuppress))

#define IZcadDimAngular_get_DimLineInside(This,bInside)	\
    ((This)->lpVtbl -> get_DimLineInside(This,bInside))

#define IZcadDimAngular_put_DimLineInside(This,bInside)	\
    ((This)->lpVtbl -> put_DimLineInside(This,bInside))

#define IZcadDimAngular_get_TextInsideAlign(This,bInside)	\
    ((This)->lpVtbl -> get_TextInsideAlign(This,bInside))

#define IZcadDimAngular_put_TextInsideAlign(This,bInside)	\
    ((This)->lpVtbl -> put_TextInsideAlign(This,bInside))

#define IZcadDimAngular_get_TextInside(This,bInside)	\
    ((This)->lpVtbl -> get_TextInside(This,bInside))

#define IZcadDimAngular_put_TextInside(This,bInside)	\
    ((This)->lpVtbl -> put_TextInside(This,bInside))

#define IZcadDimAngular_get_ForceLineInside(This,bInside)	\
    ((This)->lpVtbl -> get_ForceLineInside(This,bInside))

#define IZcadDimAngular_put_ForceLineInside(This,bInside)	\
    ((This)->lpVtbl -> put_ForceLineInside(This,bInside))

#define IZcadDimAngular_get_TextOutsideAlign(This,bInside)	\
    ((This)->lpVtbl -> get_TextOutsideAlign(This,bInside))

#define IZcadDimAngular_put_TextOutsideAlign(This,bInside)	\
    ((This)->lpVtbl -> put_TextOutsideAlign(This,bInside))

#define IZcadDimAngular_get_TextPrecision(This,precision)	\
    ((This)->lpVtbl -> get_TextPrecision(This,precision))

#define IZcadDimAngular_put_TextPrecision(This,precision)	\
    ((This)->lpVtbl -> put_TextPrecision(This,precision))

#define IZcadDimAngular_get_ExtensionLineOffset(This,offset)	\
    ((This)->lpVtbl -> get_ExtensionLineOffset(This,offset))

#define IZcadDimAngular_put_ExtensionLineOffset(This,offset)	\
    ((This)->lpVtbl -> put_ExtensionLineOffset(This,offset))

#define IZcadDimAngular_get_DimensionLineWeight(This,weight)	\
    ((This)->lpVtbl -> get_DimensionLineWeight(This,weight))

#define IZcadDimAngular_put_DimensionLineWeight(This,weight)	\
    ((This)->lpVtbl -> put_DimensionLineWeight(This,weight))

#define IZcadDimAngular_get_ArrowheadSize(This,size)	\
    ((This)->lpVtbl -> get_ArrowheadSize(This,size))

#define IZcadDimAngular_put_ArrowheadSize(This,size)	\
    ((This)->lpVtbl -> put_ArrowheadSize(This,size))

#define IZcadDimAngular_get_Arrowhead1Type(This,Type)	\
    ((This)->lpVtbl -> get_Arrowhead1Type(This,Type))

#define IZcadDimAngular_put_Arrowhead1Type(This,Type)	\
    ((This)->lpVtbl -> put_Arrowhead1Type(This,Type))

#define IZcadDimAngular_get_Arrowhead2Type(This,Type)	\
    ((This)->lpVtbl -> get_Arrowhead2Type(This,Type))

#define IZcadDimAngular_put_Arrowhead2Type(This,Type)	\
    ((This)->lpVtbl -> put_Arrowhead2Type(This,Type))

#define IZcadDimAngular_get_Measurement(This,bVal)	\
    ((This)->lpVtbl -> get_Measurement(This,bVal))

#define IZcadDimAngular_get_Arrowhead1Block(This,BlockName)	\
    ((This)->lpVtbl -> get_Arrowhead1Block(This,BlockName))

#define IZcadDimAngular_put_Arrowhead1Block(This,BlockName)	\
    ((This)->lpVtbl -> put_Arrowhead1Block(This,BlockName))

#define IZcadDimAngular_get_Arrowhead2Block(This,BlockName)	\
    ((This)->lpVtbl -> get_Arrowhead2Block(This,BlockName))

#define IZcadDimAngular_put_Arrowhead2Block(This,BlockName)	\
    ((This)->lpVtbl -> put_Arrowhead2Block(This,BlockName))

#define IZcadDimAngular_get_DimensionLinetype(This,Linetype)	\
    ((This)->lpVtbl -> get_DimensionLinetype(This,Linetype))

#define IZcadDimAngular_put_DimensionLinetype(This,Linetype)	\
    ((This)->lpVtbl -> put_DimensionLinetype(This,Linetype))

#define IZcadDimAngular_get_ExtLine1Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_ExtLine1Linetype(This,Linetype))

#define IZcadDimAngular_put_ExtLine1Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_ExtLine1Linetype(This,Linetype))

#define IZcadDimAngular_get_ExtLine2Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_ExtLine2Linetype(This,Linetype))

#define IZcadDimAngular_put_ExtLine2Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_ExtLine2Linetype(This,Linetype))

#define IZcadDimAngular_get_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ((This)->lpVtbl -> get_ExtLineFixedLenSuppress(This,bFixedLen))

#define IZcadDimAngular_put_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ((This)->lpVtbl -> put_ExtLineFixedLenSuppress(This,bFixedLen))

#define IZcadDimAngular_get_ExtLineFixedLen(This,FixedLen)	\
    ((This)->lpVtbl -> get_ExtLineFixedLen(This,FixedLen))

#define IZcadDimAngular_put_ExtLineFixedLen(This,FixedLen)	\
    ((This)->lpVtbl -> put_ExtLineFixedLen(This,FixedLen))

#define IZcadDimAngular_get_DimConstrForm(This,bIsDynamic)	\
    ((This)->lpVtbl -> get_DimConstrForm(This,bIsDynamic))

#define IZcadDimAngular_put_DimConstrForm(This,bIsDynamic)	\
    ((This)->lpVtbl -> put_DimConstrForm(This,bIsDynamic))

#define IZcadDimAngular_get_DimConstrReference(This,bIsReference)	\
    ((This)->lpVtbl -> get_DimConstrReference(This,bIsReference))

#define IZcadDimAngular_put_DimConstrReference(This,bIsReference)	\
    ((This)->lpVtbl -> put_DimConstrReference(This,bIsReference))

#define IZcadDimAngular_get_DimConstrName(This,bstrName)	\
    ((This)->lpVtbl -> get_DimConstrName(This,bstrName))

#define IZcadDimAngular_put_DimConstrName(This,bstrName)	\
    ((This)->lpVtbl -> put_DimConstrName(This,bstrName))

#define IZcadDimAngular_get_DimConstrExpression(This,bstrExpression)	\
    ((This)->lpVtbl -> get_DimConstrExpression(This,bstrExpression))

#define IZcadDimAngular_put_DimConstrExpression(This,bstrExpression)	\
    ((This)->lpVtbl -> put_DimConstrExpression(This,bstrExpression))

#define IZcadDimAngular_get_DimConstrValue(This,value)	\
    ((This)->lpVtbl -> get_DimConstrValue(This,value))

#define IZcadDimAngular_put_DimConstrValue(This,value)	\
    ((This)->lpVtbl -> put_DimConstrValue(This,value))

#define IZcadDimAngular_get_DimConstrDesc(This,bstrDescription)	\
    ((This)->lpVtbl -> get_DimConstrDesc(This,bstrDescription))

#define IZcadDimAngular_put_DimConstrDesc(This,bstrDescription)	\
    ((This)->lpVtbl -> put_DimConstrDesc(This,bstrDescription))

#endif
#endif


 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_ExtensionLineColor_Proxy(
    IZcadDimAngular * This,
     ZCAD_COLOR Type);

void __RPC_STUB IZcadDimAngular_put_ExtensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_ExtensionLineExtend_Proxy(
    IZcadDimAngular * This,
     double *extend);

void __RPC_STUB IZcadDimAngular_get_ExtensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_ExtensionLineExtend_Proxy(
    IZcadDimAngular * This,
     double extend);

void __RPC_STUB IZcadDimAngular_put_ExtensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_Fit_Proxy(
    IZcadDimAngular * This,
     ZcDimFit *fittype);

void __RPC_STUB IZcadDimAngular_get_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_Fit_Proxy(
    IZcadDimAngular * This,
     ZcDimFit fittype);

void __RPC_STUB IZcadDimAngular_put_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_HorizontalTextPosition_Proxy(
    IZcadDimAngular * This,
     ZcDimHorizontalJustification *type);

void __RPC_STUB IZcadDimAngular_get_HorizontalTextPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_HorizontalTextPosition_Proxy(
    IZcadDimAngular * This,
     ZcDimHorizontalJustification type);

void __RPC_STUB IZcadDimAngular_put_HorizontalTextPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_ExtensionLineWeight_Proxy(
    IZcadDimAngular * This,
     ZCAD_LWEIGHT *lweight);

void __RPC_STUB IZcadDimAngular_get_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_ExtensionLineWeight_Proxy(
    IZcadDimAngular * This,
     ZCAD_LWEIGHT lweight);

void __RPC_STUB IZcadDimAngular_put_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_DimLine1Suppress_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDimAngular_get_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_DimLine1Suppress_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDimAngular_put_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_DimLine2Suppress_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDimAngular_get_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_DimLine2Suppress_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDimAngular_put_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_ExtLine1Suppress_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDimAngular_get_ExtLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_ExtLine1Suppress_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDimAngular_put_ExtLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_ExtLine2Suppress_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDimAngular_get_ExtLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_ExtLine2Suppress_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDimAngular_put_ExtLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_DimLineInside_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimAngular_get_DimLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_DimLineInside_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimAngular_put_DimLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_TextInsideAlign_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimAngular_get_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_TextInsideAlign_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimAngular_put_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_TextInside_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimAngular_get_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_TextInside_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimAngular_put_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_ForceLineInside_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimAngular_get_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_ForceLineInside_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimAngular_put_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_TextOutsideAlign_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimAngular_get_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_TextOutsideAlign_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimAngular_put_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_TextPrecision_Proxy(
    IZcadDimAngular * This,
     ZcDimPrecision *precision);

void __RPC_STUB IZcadDimAngular_get_TextPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_TextPrecision_Proxy(
    IZcadDimAngular * This,
     ZcDimPrecision precision);

void __RPC_STUB IZcadDimAngular_put_TextPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_ExtensionLineOffset_Proxy(
    IZcadDimAngular * This,
     double *offset);

void __RPC_STUB IZcadDimAngular_get_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_ExtensionLineOffset_Proxy(
    IZcadDimAngular * This,
     double offset);

void __RPC_STUB IZcadDimAngular_put_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_DimensionLineWeight_Proxy(
    IZcadDimAngular * This,
     ZCAD_LWEIGHT *weight);

void __RPC_STUB IZcadDimAngular_get_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_DimensionLineWeight_Proxy(
    IZcadDimAngular * This,
     ZCAD_LWEIGHT weight);

void __RPC_STUB IZcadDimAngular_put_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_ArrowheadSize_Proxy(
    IZcadDimAngular * This,
     double *size);

void __RPC_STUB IZcadDimAngular_get_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_ArrowheadSize_Proxy(
    IZcadDimAngular * This,
     double size);

void __RPC_STUB IZcadDimAngular_put_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_Arrowhead1Type_Proxy(
    IZcadDimAngular * This,
     ZcDimArrowheadType *Type);

void __RPC_STUB IZcadDimAngular_get_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_Arrowhead1Type_Proxy(
    IZcadDimAngular * This,
     ZcDimArrowheadType Type);

void __RPC_STUB IZcadDimAngular_put_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_Arrowhead2Type_Proxy(
    IZcadDimAngular * This,
     ZcDimArrowheadType *Type);

void __RPC_STUB IZcadDimAngular_get_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_Arrowhead2Type_Proxy(
    IZcadDimAngular * This,
     ZcDimArrowheadType Type);

void __RPC_STUB IZcadDimAngular_put_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_Measurement_Proxy(
    IZcadDimAngular * This,
     ZCAD_ANGLE *bVal);

void __RPC_STUB IZcadDimAngular_get_Measurement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_Arrowhead1Block_Proxy(
    IZcadDimAngular * This,
     BSTR *BlockName);

void __RPC_STUB IZcadDimAngular_get_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_Arrowhead1Block_Proxy(
    IZcadDimAngular * This,
     BSTR BlockName);

void __RPC_STUB IZcadDimAngular_put_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_Arrowhead2Block_Proxy(
    IZcadDimAngular * This,
     BSTR *BlockName);

void __RPC_STUB IZcadDimAngular_get_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_Arrowhead2Block_Proxy(
    IZcadDimAngular * This,
     BSTR BlockName);

void __RPC_STUB IZcadDimAngular_put_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_DimensionLinetype_Proxy(
    IZcadDimAngular * This,
     BSTR *Linetype);

void __RPC_STUB IZcadDimAngular_get_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_DimensionLinetype_Proxy(
    IZcadDimAngular * This,
     BSTR Linetype);

void __RPC_STUB IZcadDimAngular_put_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_ExtLine1Linetype_Proxy(
    IZcadDimAngular * This,
     BSTR *Linetype);

void __RPC_STUB IZcadDimAngular_get_ExtLine1Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_ExtLine1Linetype_Proxy(
    IZcadDimAngular * This,
     BSTR Linetype);

void __RPC_STUB IZcadDimAngular_put_ExtLine1Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_ExtLine2Linetype_Proxy(
    IZcadDimAngular * This,
     BSTR *Linetype);

void __RPC_STUB IZcadDimAngular_get_ExtLine2Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_ExtLine2Linetype_Proxy(
    IZcadDimAngular * This,
     BSTR Linetype);

void __RPC_STUB IZcadDimAngular_put_ExtLine2Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_ExtLineFixedLenSuppress_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL *bFixedLen);

void __RPC_STUB IZcadDimAngular_get_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_ExtLineFixedLenSuppress_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL bFixedLen);

void __RPC_STUB IZcadDimAngular_put_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_ExtLineFixedLen_Proxy(
    IZcadDimAngular * This,
     double *FixedLen);

void __RPC_STUB IZcadDimAngular_get_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_ExtLineFixedLen_Proxy(
    IZcadDimAngular * This,
     double FixedLen);

void __RPC_STUB IZcadDimAngular_put_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_DimConstrForm_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL *bIsDynamic);

void __RPC_STUB IZcadDimAngular_get_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_DimConstrForm_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL bIsDynamic);

void __RPC_STUB IZcadDimAngular_put_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_DimConstrReference_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL *bIsReference);

void __RPC_STUB IZcadDimAngular_get_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_DimConstrReference_Proxy(
    IZcadDimAngular * This,
     VARIANT_BOOL bIsReference);

void __RPC_STUB IZcadDimAngular_put_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_DimConstrName_Proxy(
    IZcadDimAngular * This,
     BSTR *bstrName);

void __RPC_STUB IZcadDimAngular_get_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_DimConstrName_Proxy(
    IZcadDimAngular * This,
     BSTR bstrName);

void __RPC_STUB IZcadDimAngular_put_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_DimConstrExpression_Proxy(
    IZcadDimAngular * This,
     BSTR *bstrExpression);

void __RPC_STUB IZcadDimAngular_get_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_DimConstrExpression_Proxy(
    IZcadDimAngular * This,
     BSTR bstrExpression);

void __RPC_STUB IZcadDimAngular_put_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_DimConstrValue_Proxy(
    IZcadDimAngular * This,
     BSTR *value);

void __RPC_STUB IZcadDimAngular_get_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_DimConstrValue_Proxy(
    IZcadDimAngular * This,
     BSTR value);

void __RPC_STUB IZcadDimAngular_put_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_get_DimConstrDesc_Proxy(
    IZcadDimAngular * This,
     BSTR *bstrDescription);

void __RPC_STUB IZcadDimAngular_get_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimAngular_put_DimConstrDesc_Proxy(
    IZcadDimAngular * This,
     BSTR bstrDescription);

void __RPC_STUB IZcadDimAngular_put_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


#endif

DEFINE_GUID(CLSID_ZcadDimAngular,0xEC92306D,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC92306D-5A17-11E7-B72E-BC5FF42AC839")
ZcadDimAngular;
#endif

#ifndef __IZcadDimDiametric_INTERFACE_DEFINED__
#define __IZcadDimDiametric_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadDimDiametric,0xEC9231B6,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9231B6-5A17-11E7-B72E-BC5FF42AC839")
    IZcadDimDiametric : public IZcadDimension
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE put_LeaderLength(
             double Length) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnits(
             VARIANT_BOOL *bAlternate) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnits(
             VARIANT_BOOL bAlternate) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnitsPrecision(
             ZcDimPrecision *Precision) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnitsPrecision(
             ZcDimPrecision Precision) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnitsScale(
             ZCAD_NOUNITS *Scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnitsScale(
             ZCAD_NOUNITS Scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltRoundDistance(
             double *Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltRoundDistance(
             double Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltTolerancePrecision(
             ZcDimPrecision *Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltTolerancePrecision(
             ZcDimPrecision Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnitsFormat(
             ZcDimUnits *Units) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnitsFormat(
             ZcDimUnits Units) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltTextPrefix(
             BSTR *Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltTextPrefix(
             BSTR Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltTextSuffix(
             BSTR *Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltTextSuffix(
             BSTR Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLineColor(
             ZCAD_COLOR *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLineColor(
             ZCAD_COLOR Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PrimaryUnitsPrecision(
             ZcDimPrecision *Prec) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PrimaryUnitsPrecision(
             ZcDimPrecision Prec) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_FractionFormat(
             ZcDimFractionType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_FractionFormat(
             ZcDimFractionType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Fit(
             ZcDimFit *fittype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Fit(
             ZcDimFit fittype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LinearScaleFactor(
             ZCAD_NOUNITS *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LinearScaleFactor(
             ZCAD_NOUNITS type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UnitsFormat(
             ZcDimLUnits *format) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_UnitsFormat(
             ZcDimLUnits format) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_RoundDistance(
             double *Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_RoundDistance(
             double Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimLine1Suppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimLine1Suppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimLine2Suppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimLine2Suppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextInsideAlign(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextInsideAlign(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextInside(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextInside(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ForceLineInside(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ForceLineInside(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextOutsideAlign(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextOutsideAlign(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_CenterType(
             ZcDimCenterType *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_CenterType(
             ZcDimCenterType Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_CenterMarkSize(
             double *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_CenterMarkSize(
             double Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressLeadingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressLeadingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressTrailingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressTrailingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressLeadingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressLeadingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressTrailingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressTrailingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLineWeight(
             ZCAD_LWEIGHT *weight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLineWeight(
             ZCAD_LWEIGHT weight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArrowheadSize(
             double *size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArrowheadSize(
             double size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead1Type(
             ZcDimArrowheadType *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead1Type(
             ZcDimArrowheadType Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead2Type(
             ZcDimArrowheadType *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead2Type(
             ZcDimArrowheadType Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Measurement(
             double *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead1Block(
             BSTR *BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead1Block(
             BSTR BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead2Block(
             BSTR *BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead2Block(
             BSTR BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLinetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLinetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrForm(
             VARIANT_BOOL *bIsDynamic) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrForm(
             VARIANT_BOOL bIsDynamic) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrReference(
             VARIANT_BOOL *bIsReference) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrReference(
             VARIANT_BOOL bIsReference) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrName(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrName(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrExpression(
             BSTR *bstrExpression) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrExpression(
             BSTR bstrExpression) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrValue(
             BSTR *value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrValue(
             BSTR value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrDesc(
             BSTR *bstrDescription) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrDesc(
             BSTR bstrDescription) = 0;

    };

#else

    typedef struct IZcadDimDiametricVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadDimDiametric * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadDimDiametric * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadDimDiametric * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadDimDiametric * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadDimDiametric * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadDimDiametric * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadDimDiametric * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadDimDiametric * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadDimDiametric * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadDimDiametric * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadDimDiametric * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadDimDiametric * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadDimDiametric * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadDimDiametric * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadDimDiametric * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadDimDiametric * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadDimDiametric * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadDimDiametric * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadDimDiametric * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadDimDiametric * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadDimDiametric * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadDimDiametric * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadDimDiametric * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadDimDiametric * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadDimDiametric * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadDimDiametric * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadDimDiametric * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadDimDiametric * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadDimDiametric * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadDimDiametric * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadDimDiametric * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadDimDiametric * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadDimDiametric * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadDimDiametric * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadDimDiametric * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadDimDiametric * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadDimDiametric * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadDimDiametric * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadDimDiametric * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadDimDiametric * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadDimDiametric * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadDimDiametric * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadDimDiametric * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadDimDiametric * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadDimDiametric * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadDimDiametric * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadDimDiametric * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadDimDiametric * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadDimDiametric * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadDimDiametric * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadDimDiametric * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadDimDiametric * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadDimDiametric * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadDimDiametric * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadDimDiametric * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadDimDiametric * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_Rotation )(
            IZcadDimDiametric * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_Rotation )(
            IZcadDimDiametric * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextPosition )(
            IZcadDimDiametric * This,
             VARIANT *textPos);

         HRESULT ( STDMETHODCALLTYPE *put_TextPosition )(
            IZcadDimDiametric * This,
             VARIANT textPos);

         HRESULT ( STDMETHODCALLTYPE *get_TextRotation )(
            IZcadDimDiametric * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_TextRotation )(
            IZcadDimDiametric * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextOverride )(
            IZcadDimDiametric * This,
             BSTR *bstrText);

         HRESULT ( STDMETHODCALLTYPE *put_TextOverride )(
            IZcadDimDiametric * This,
             BSTR bstrText);

         HRESULT ( STDMETHODCALLTYPE *get_StyleName )(
            IZcadDimDiametric * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_StyleName )(
            IZcadDimDiametric * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_TextColor )(
            IZcadDimDiametric * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_TextColor )(
            IZcadDimDiametric * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_DecimalSeparator )(
            IZcadDimDiametric * This,
             BSTR *character);

         HRESULT ( STDMETHODCALLTYPE *put_DecimalSeparator )(
            IZcadDimDiametric * This,
             BSTR character);

         HRESULT ( STDMETHODCALLTYPE *get_TextGap )(
            IZcadDimDiametric * This,
             double *offset);

         HRESULT ( STDMETHODCALLTYPE *put_TextGap )(
            IZcadDimDiametric * This,
             double offset);

         HRESULT ( STDMETHODCALLTYPE *get_TextPrefix )(
            IZcadDimDiametric * This,
             BSTR *prefix);

         HRESULT ( STDMETHODCALLTYPE *put_TextPrefix )(
            IZcadDimDiametric * This,
             BSTR prefix);

         HRESULT ( STDMETHODCALLTYPE *get_TextSuffix )(
            IZcadDimDiametric * This,
             BSTR *suffix);

         HRESULT ( STDMETHODCALLTYPE *put_TextSuffix )(
            IZcadDimDiametric * This,
             BSTR suffix);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )(
            IZcadDimDiametric * This,
             ZCAD_NOUNITS *factor);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )(
            IZcadDimDiametric * This,
             ZCAD_NOUNITS factor);

         HRESULT ( STDMETHODCALLTYPE *get_VerticalTextPosition )(
            IZcadDimDiametric * This,
             ZcDimVerticalJustification *type);

         HRESULT ( STDMETHODCALLTYPE *put_VerticalTextPosition )(
            IZcadDimDiametric * This,
             ZcDimVerticalJustification type);

         HRESULT ( STDMETHODCALLTYPE *get_TolerancePrecision )(
            IZcadDimDiametric * This,
             ZcDimPrecision *precision);

         HRESULT ( STDMETHODCALLTYPE *put_TolerancePrecision )(
            IZcadDimDiametric * This,
             ZcDimPrecision precision);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceHeightScale )(
            IZcadDimDiametric * This,
             ZCAD_NOUNITS *scale);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceHeightScale )(
            IZcadDimDiametric * This,
             ZCAD_NOUNITS scale);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceLowerLimit )(
            IZcadDimDiametric * This,
             double *lower);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceLowerLimit )(
            IZcadDimDiametric * This,
             double lower);

         HRESULT ( STDMETHODCALLTYPE *get_TextMovement )(
            IZcadDimDiametric * This,
             ZcDimTextMovement *move);

         HRESULT ( STDMETHODCALLTYPE *put_TextMovement )(
            IZcadDimDiametric * This,
             ZcDimTextMovement move);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceDisplay )(
            IZcadDimDiametric * This,
             ZcDimToleranceMethod *method);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceDisplay )(
            IZcadDimDiametric * This,
             ZcDimToleranceMethod method);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceJustification )(
            IZcadDimDiametric * This,
             ZcDimToleranceJustify *method);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceJustification )(
            IZcadDimDiametric * This,
             ZcDimToleranceJustify method);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceUpperLimit )(
            IZcadDimDiametric * This,
             double *upper);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceUpperLimit )(
            IZcadDimDiametric * This,
             double upper);

         HRESULT ( STDMETHODCALLTYPE *get_TextStyle )(
            IZcadDimDiametric * This,
             BSTR *style);

         HRESULT ( STDMETHODCALLTYPE *put_TextStyle )(
            IZcadDimDiametric * This,
             BSTR style);

         HRESULT ( STDMETHODCALLTYPE *get_TextHeight )(
            IZcadDimDiametric * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_TextHeight )(
            IZcadDimDiametric * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressLeadingZeros )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressLeadingZeros )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressTrailingZeros )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressTrailingZeros )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressLeadingZeros )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressLeadingZeros )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressTrailingZeros )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressTrailingZeros )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_TextFill )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_TextFill )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_TextFillColor )(
            IZcadDimDiametric * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_TextFillColor )(
            IZcadDimDiametric * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_DimTxtDirection )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_DimTxtDirection )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *put_LeaderLength )(
            IZcadDimDiametric * This,
             double Length);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnits )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bAlternate);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnits )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bAlternate);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnitsPrecision )(
            IZcadDimDiametric * This,
             ZcDimPrecision *Precision);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnitsPrecision )(
            IZcadDimDiametric * This,
             ZcDimPrecision Precision);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnitsScale )(
            IZcadDimDiametric * This,
             ZCAD_NOUNITS *Scale);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnitsScale )(
            IZcadDimDiametric * This,
             ZCAD_NOUNITS Scale);

         HRESULT ( STDMETHODCALLTYPE *get_AltRoundDistance )(
            IZcadDimDiametric * This,
             double *Distance);

         HRESULT ( STDMETHODCALLTYPE *put_AltRoundDistance )(
            IZcadDimDiametric * This,
             double Distance);

         HRESULT ( STDMETHODCALLTYPE *get_AltTolerancePrecision )(
            IZcadDimDiametric * This,
             ZcDimPrecision *Distance);

         HRESULT ( STDMETHODCALLTYPE *put_AltTolerancePrecision )(
            IZcadDimDiametric * This,
             ZcDimPrecision Distance);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnitsFormat )(
            IZcadDimDiametric * This,
             ZcDimUnits *Units);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnitsFormat )(
            IZcadDimDiametric * This,
             ZcDimUnits Units);

         HRESULT ( STDMETHODCALLTYPE *get_AltTextPrefix )(
            IZcadDimDiametric * This,
             BSTR *Prefix);

         HRESULT ( STDMETHODCALLTYPE *put_AltTextPrefix )(
            IZcadDimDiametric * This,
             BSTR Prefix);

         HRESULT ( STDMETHODCALLTYPE *get_AltTextSuffix )(
            IZcadDimDiametric * This,
             BSTR *Prefix);

         HRESULT ( STDMETHODCALLTYPE *put_AltTextSuffix )(
            IZcadDimDiametric * This,
             BSTR Prefix);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLineColor )(
            IZcadDimDiametric * This,
             ZCAD_COLOR *Type);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLineColor )(
            IZcadDimDiametric * This,
             ZCAD_COLOR Type);

         HRESULT ( STDMETHODCALLTYPE *get_PrimaryUnitsPrecision )(
            IZcadDimDiametric * This,
             ZcDimPrecision *Prec);

         HRESULT ( STDMETHODCALLTYPE *put_PrimaryUnitsPrecision )(
            IZcadDimDiametric * This,
             ZcDimPrecision Prec);

         HRESULT ( STDMETHODCALLTYPE *get_FractionFormat )(
            IZcadDimDiametric * This,
             ZcDimFractionType *type);

         HRESULT ( STDMETHODCALLTYPE *put_FractionFormat )(
            IZcadDimDiametric * This,
             ZcDimFractionType type);

         HRESULT ( STDMETHODCALLTYPE *get_Fit )(
            IZcadDimDiametric * This,
             ZcDimFit *fittype);

         HRESULT ( STDMETHODCALLTYPE *put_Fit )(
            IZcadDimDiametric * This,
             ZcDimFit fittype);

         HRESULT ( STDMETHODCALLTYPE *get_LinearScaleFactor )(
            IZcadDimDiametric * This,
             ZCAD_NOUNITS *type);

         HRESULT ( STDMETHODCALLTYPE *put_LinearScaleFactor )(
            IZcadDimDiametric * This,
             ZCAD_NOUNITS type);

         HRESULT ( STDMETHODCALLTYPE *get_UnitsFormat )(
            IZcadDimDiametric * This,
             ZcDimLUnits *format);

         HRESULT ( STDMETHODCALLTYPE *put_UnitsFormat )(
            IZcadDimDiametric * This,
             ZcDimLUnits format);

         HRESULT ( STDMETHODCALLTYPE *get_RoundDistance )(
            IZcadDimDiametric * This,
             double *Distance);

         HRESULT ( STDMETHODCALLTYPE *put_RoundDistance )(
            IZcadDimDiametric * This,
             double Distance);

         HRESULT ( STDMETHODCALLTYPE *get_DimLine1Suppress )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_DimLine1Suppress )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_DimLine2Suppress )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_DimLine2Suppress )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_TextInsideAlign )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextInsideAlign )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_TextInside )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextInside )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_ForceLineInside )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_ForceLineInside )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_TextOutsideAlign )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextOutsideAlign )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_CenterType )(
            IZcadDimDiametric * This,
             ZcDimCenterType *Type);

         HRESULT ( STDMETHODCALLTYPE *put_CenterType )(
            IZcadDimDiametric * This,
             ZcDimCenterType Type);

         HRESULT ( STDMETHODCALLTYPE *get_CenterMarkSize )(
            IZcadDimDiametric * This,
             double *Type);

         HRESULT ( STDMETHODCALLTYPE *put_CenterMarkSize )(
            IZcadDimDiametric * This,
             double Type);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressLeadingZeros )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressLeadingZeros )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressTrailingZeros )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressTrailingZeros )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroFeet )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroFeet )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroInches )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroInches )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressLeadingZeros )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressLeadingZeros )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressTrailingZeros )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressTrailingZeros )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroFeet )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroFeet )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroInches )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroInches )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroFeet )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroFeet )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroInches )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroInches )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroFeet )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroFeet )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroInches )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroInches )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLineWeight )(
            IZcadDimDiametric * This,
             ZCAD_LWEIGHT *weight);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLineWeight )(
            IZcadDimDiametric * This,
             ZCAD_LWEIGHT weight);

         HRESULT ( STDMETHODCALLTYPE *get_ArrowheadSize )(
            IZcadDimDiametric * This,
             double *size);

         HRESULT ( STDMETHODCALLTYPE *put_ArrowheadSize )(
            IZcadDimDiametric * This,
             double size);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Type )(
            IZcadDimDiametric * This,
             ZcDimArrowheadType *Type);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Type )(
            IZcadDimDiametric * This,
             ZcDimArrowheadType Type);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Type )(
            IZcadDimDiametric * This,
             ZcDimArrowheadType *Type);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Type )(
            IZcadDimDiametric * This,
             ZcDimArrowheadType Type);

         HRESULT ( STDMETHODCALLTYPE *get_Measurement )(
            IZcadDimDiametric * This,
             double *bVal);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Block )(
            IZcadDimDiametric * This,
             BSTR *BlockName);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Block )(
            IZcadDimDiametric * This,
             BSTR BlockName);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Block )(
            IZcadDimDiametric * This,
             BSTR *BlockName);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Block )(
            IZcadDimDiametric * This,
             BSTR BlockName);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLinetype )(
            IZcadDimDiametric * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLinetype )(
            IZcadDimDiametric * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrForm )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bIsDynamic);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrForm )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bIsDynamic);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrReference )(
            IZcadDimDiametric * This,
             VARIANT_BOOL *bIsReference);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrReference )(
            IZcadDimDiametric * This,
             VARIANT_BOOL bIsReference);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrName )(
            IZcadDimDiametric * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrName )(
            IZcadDimDiametric * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrExpression )(
            IZcadDimDiametric * This,
             BSTR *bstrExpression);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrExpression )(
            IZcadDimDiametric * This,
             BSTR bstrExpression);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrValue )(
            IZcadDimDiametric * This,
             BSTR *value);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrValue )(
            IZcadDimDiametric * This,
             BSTR value);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrDesc )(
            IZcadDimDiametric * This,
             BSTR *bstrDescription);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrDesc )(
            IZcadDimDiametric * This,
             BSTR bstrDescription);

        END_INTERFACE
    } IZcadDimDiametricVtbl;

    interface IZcadDimDiametric
    {
        CONST_VTBL struct IZcadDimDiametricVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadDimDiametric_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadDimDiametric_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadDimDiametric_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadDimDiametric_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadDimDiametric_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadDimDiametric_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadDimDiametric_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadDimDiametric_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadDimDiametric_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadDimDiametric_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadDimDiametric_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadDimDiametric_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadDimDiametric_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadDimDiametric_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadDimDiametric_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadDimDiametric_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadDimDiametric_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadDimDiametric_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadDimDiametric_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadDimDiametric_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadDimDiametric_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadDimDiametric_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadDimDiametric_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadDimDiametric_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadDimDiametric_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadDimDiametric_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadDimDiametric_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadDimDiametric_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadDimDiametric_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadDimDiametric_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadDimDiametric_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadDimDiametric_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadDimDiametric_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadDimDiametric_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadDimDiametric_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadDimDiametric_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadDimDiametric_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadDimDiametric_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadDimDiametric_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadDimDiametric_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadDimDiametric_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadDimDiametric_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadDimDiametric_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadDimDiametric_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadDimDiametric_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadDimDiametric_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadDimDiametric_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadDimDiametric_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadDimDiametric_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadDimDiametric_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadDimDiametric_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadDimDiametric_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadDimDiametric_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadDimDiametric_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadDimDiametric_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadDimDiametric_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadDimDiametric_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadDimDiametric_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadDimDiametric_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadDimDiametric_get_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_Rotation(This,rotAngle))

#define IZcadDimDiametric_put_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_Rotation(This,rotAngle))

#define IZcadDimDiametric_get_TextPosition(This,textPos)	\
    ((This)->lpVtbl -> get_TextPosition(This,textPos))

#define IZcadDimDiametric_put_TextPosition(This,textPos)	\
    ((This)->lpVtbl -> put_TextPosition(This,textPos))

#define IZcadDimDiametric_get_TextRotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_TextRotation(This,rotAngle))

#define IZcadDimDiametric_put_TextRotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_TextRotation(This,rotAngle))

#define IZcadDimDiametric_get_TextOverride(This,bstrText)	\
    ((This)->lpVtbl -> get_TextOverride(This,bstrText))

#define IZcadDimDiametric_put_TextOverride(This,bstrText)	\
    ((This)->lpVtbl -> put_TextOverride(This,bstrText))

#define IZcadDimDiametric_get_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> get_StyleName(This,bstrName))

#define IZcadDimDiametric_put_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> put_StyleName(This,bstrName))

#define IZcadDimDiametric_get_TextColor(This,Color)	\
    ((This)->lpVtbl -> get_TextColor(This,Color))

#define IZcadDimDiametric_put_TextColor(This,Color)	\
    ((This)->lpVtbl -> put_TextColor(This,Color))

#define IZcadDimDiametric_get_DecimalSeparator(This,character)	\
    ((This)->lpVtbl -> get_DecimalSeparator(This,character))

#define IZcadDimDiametric_put_DecimalSeparator(This,character)	\
    ((This)->lpVtbl -> put_DecimalSeparator(This,character))

#define IZcadDimDiametric_get_TextGap(This,offset)	\
    ((This)->lpVtbl -> get_TextGap(This,offset))

#define IZcadDimDiametric_put_TextGap(This,offset)	\
    ((This)->lpVtbl -> put_TextGap(This,offset))

#define IZcadDimDiametric_get_TextPrefix(This,prefix)	\
    ((This)->lpVtbl -> get_TextPrefix(This,prefix))

#define IZcadDimDiametric_put_TextPrefix(This,prefix)	\
    ((This)->lpVtbl -> put_TextPrefix(This,prefix))

#define IZcadDimDiametric_get_TextSuffix(This,suffix)	\
    ((This)->lpVtbl -> get_TextSuffix(This,suffix))

#define IZcadDimDiametric_put_TextSuffix(This,suffix)	\
    ((This)->lpVtbl -> put_TextSuffix(This,suffix))

#define IZcadDimDiametric_get_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> get_ScaleFactor(This,factor))

#define IZcadDimDiametric_put_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> put_ScaleFactor(This,factor))

#define IZcadDimDiametric_get_VerticalTextPosition(This,type)	\
    ((This)->lpVtbl -> get_VerticalTextPosition(This,type))

#define IZcadDimDiametric_put_VerticalTextPosition(This,type)	\
    ((This)->lpVtbl -> put_VerticalTextPosition(This,type))

#define IZcadDimDiametric_get_TolerancePrecision(This,precision)	\
    ((This)->lpVtbl -> get_TolerancePrecision(This,precision))

#define IZcadDimDiametric_put_TolerancePrecision(This,precision)	\
    ((This)->lpVtbl -> put_TolerancePrecision(This,precision))

#define IZcadDimDiametric_get_ToleranceHeightScale(This,scale)	\
    ((This)->lpVtbl -> get_ToleranceHeightScale(This,scale))

#define IZcadDimDiametric_put_ToleranceHeightScale(This,scale)	\
    ((This)->lpVtbl -> put_ToleranceHeightScale(This,scale))

#define IZcadDimDiametric_get_ToleranceLowerLimit(This,lower)	\
    ((This)->lpVtbl -> get_ToleranceLowerLimit(This,lower))

#define IZcadDimDiametric_put_ToleranceLowerLimit(This,lower)	\
    ((This)->lpVtbl -> put_ToleranceLowerLimit(This,lower))

#define IZcadDimDiametric_get_TextMovement(This,move)	\
    ((This)->lpVtbl -> get_TextMovement(This,move))

#define IZcadDimDiametric_put_TextMovement(This,move)	\
    ((This)->lpVtbl -> put_TextMovement(This,move))

#define IZcadDimDiametric_get_ToleranceDisplay(This,method)	\
    ((This)->lpVtbl -> get_ToleranceDisplay(This,method))

#define IZcadDimDiametric_put_ToleranceDisplay(This,method)	\
    ((This)->lpVtbl -> put_ToleranceDisplay(This,method))

#define IZcadDimDiametric_get_ToleranceJustification(This,method)	\
    ((This)->lpVtbl -> get_ToleranceJustification(This,method))

#define IZcadDimDiametric_put_ToleranceJustification(This,method)	\
    ((This)->lpVtbl -> put_ToleranceJustification(This,method))

#define IZcadDimDiametric_get_ToleranceUpperLimit(This,upper)	\
    ((This)->lpVtbl -> get_ToleranceUpperLimit(This,upper))

#define IZcadDimDiametric_put_ToleranceUpperLimit(This,upper)	\
    ((This)->lpVtbl -> put_ToleranceUpperLimit(This,upper))

#define IZcadDimDiametric_get_TextStyle(This,style)	\
    ((This)->lpVtbl -> get_TextStyle(This,style))

#define IZcadDimDiametric_put_TextStyle(This,style)	\
    ((This)->lpVtbl -> put_TextStyle(This,style))

#define IZcadDimDiametric_get_TextHeight(This,height)	\
    ((This)->lpVtbl -> get_TextHeight(This,height))

#define IZcadDimDiametric_put_TextHeight(This,height)	\
    ((This)->lpVtbl -> put_TextHeight(This,height))

#define IZcadDimDiametric_get_SuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressLeadingZeros(This,bVal))

#define IZcadDimDiametric_put_SuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressLeadingZeros(This,bVal))

#define IZcadDimDiametric_get_SuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressTrailingZeros(This,bVal))

#define IZcadDimDiametric_put_SuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressTrailingZeros(This,bVal))

#define IZcadDimDiametric_get_ToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimDiametric_put_ToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimDiametric_get_ToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimDiametric_put_ToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimDiametric_get_TextFill(This,bVal)	\
    ((This)->lpVtbl -> get_TextFill(This,bVal))

#define IZcadDimDiametric_put_TextFill(This,bVal)	\
    ((This)->lpVtbl -> put_TextFill(This,bVal))

#define IZcadDimDiametric_get_TextFillColor(This,Color)	\
    ((This)->lpVtbl -> get_TextFillColor(This,Color))

#define IZcadDimDiametric_put_TextFillColor(This,Color)	\
    ((This)->lpVtbl -> put_TextFillColor(This,Color))

#define IZcadDimDiametric_get_DimTxtDirection(This,bVal)	\
    ((This)->lpVtbl -> get_DimTxtDirection(This,bVal))

#define IZcadDimDiametric_put_DimTxtDirection(This,bVal)	\
    ((This)->lpVtbl -> put_DimTxtDirection(This,bVal))


#define IZcadDimDiametric_put_LeaderLength(This,Length)	\
    ((This)->lpVtbl -> put_LeaderLength(This,Length))

#define IZcadDimDiametric_get_AltUnits(This,bAlternate)	\
    ((This)->lpVtbl -> get_AltUnits(This,bAlternate))

#define IZcadDimDiametric_put_AltUnits(This,bAlternate)	\
    ((This)->lpVtbl -> put_AltUnits(This,bAlternate))

#define IZcadDimDiametric_get_AltUnitsPrecision(This,Precision)	\
    ((This)->lpVtbl -> get_AltUnitsPrecision(This,Precision))

#define IZcadDimDiametric_put_AltUnitsPrecision(This,Precision)	\
    ((This)->lpVtbl -> put_AltUnitsPrecision(This,Precision))

#define IZcadDimDiametric_get_AltUnitsScale(This,Scale)	\
    ((This)->lpVtbl -> get_AltUnitsScale(This,Scale))

#define IZcadDimDiametric_put_AltUnitsScale(This,Scale)	\
    ((This)->lpVtbl -> put_AltUnitsScale(This,Scale))

#define IZcadDimDiametric_get_AltRoundDistance(This,Distance)	\
    ((This)->lpVtbl -> get_AltRoundDistance(This,Distance))

#define IZcadDimDiametric_put_AltRoundDistance(This,Distance)	\
    ((This)->lpVtbl -> put_AltRoundDistance(This,Distance))

#define IZcadDimDiametric_get_AltTolerancePrecision(This,Distance)	\
    ((This)->lpVtbl -> get_AltTolerancePrecision(This,Distance))

#define IZcadDimDiametric_put_AltTolerancePrecision(This,Distance)	\
    ((This)->lpVtbl -> put_AltTolerancePrecision(This,Distance))

#define IZcadDimDiametric_get_AltUnitsFormat(This,Units)	\
    ((This)->lpVtbl -> get_AltUnitsFormat(This,Units))

#define IZcadDimDiametric_put_AltUnitsFormat(This,Units)	\
    ((This)->lpVtbl -> put_AltUnitsFormat(This,Units))

#define IZcadDimDiametric_get_AltTextPrefix(This,Prefix)	\
    ((This)->lpVtbl -> get_AltTextPrefix(This,Prefix))

#define IZcadDimDiametric_put_AltTextPrefix(This,Prefix)	\
    ((This)->lpVtbl -> put_AltTextPrefix(This,Prefix))

#define IZcadDimDiametric_get_AltTextSuffix(This,Prefix)	\
    ((This)->lpVtbl -> get_AltTextSuffix(This,Prefix))

#define IZcadDimDiametric_put_AltTextSuffix(This,Prefix)	\
    ((This)->lpVtbl -> put_AltTextSuffix(This,Prefix))

#define IZcadDimDiametric_get_DimensionLineColor(This,Type)	\
    ((This)->lpVtbl -> get_DimensionLineColor(This,Type))

#define IZcadDimDiametric_put_DimensionLineColor(This,Type)	\
    ((This)->lpVtbl -> put_DimensionLineColor(This,Type))

#define IZcadDimDiametric_get_PrimaryUnitsPrecision(This,Prec)	\
    ((This)->lpVtbl -> get_PrimaryUnitsPrecision(This,Prec))

#define IZcadDimDiametric_put_PrimaryUnitsPrecision(This,Prec)	\
    ((This)->lpVtbl -> put_PrimaryUnitsPrecision(This,Prec))

#define IZcadDimDiametric_get_FractionFormat(This,type)	\
    ((This)->lpVtbl -> get_FractionFormat(This,type))

#define IZcadDimDiametric_put_FractionFormat(This,type)	\
    ((This)->lpVtbl -> put_FractionFormat(This,type))

#define IZcadDimDiametric_get_Fit(This,fittype)	\
    ((This)->lpVtbl -> get_Fit(This,fittype))

#define IZcadDimDiametric_put_Fit(This,fittype)	\
    ((This)->lpVtbl -> put_Fit(This,fittype))

#define IZcadDimDiametric_get_LinearScaleFactor(This,type)	\
    ((This)->lpVtbl -> get_LinearScaleFactor(This,type))

#define IZcadDimDiametric_put_LinearScaleFactor(This,type)	\
    ((This)->lpVtbl -> put_LinearScaleFactor(This,type))

#define IZcadDimDiametric_get_UnitsFormat(This,format)	\
    ((This)->lpVtbl -> get_UnitsFormat(This,format))

#define IZcadDimDiametric_put_UnitsFormat(This,format)	\
    ((This)->lpVtbl -> put_UnitsFormat(This,format))

#define IZcadDimDiametric_get_RoundDistance(This,Distance)	\
    ((This)->lpVtbl -> get_RoundDistance(This,Distance))

#define IZcadDimDiametric_put_RoundDistance(This,Distance)	\
    ((This)->lpVtbl -> put_RoundDistance(This,Distance))

#define IZcadDimDiametric_get_DimLine1Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_DimLine1Suppress(This,bSuppress))

#define IZcadDimDiametric_put_DimLine1Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_DimLine1Suppress(This,bSuppress))

#define IZcadDimDiametric_get_DimLine2Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_DimLine2Suppress(This,bSuppress))

#define IZcadDimDiametric_put_DimLine2Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_DimLine2Suppress(This,bSuppress))

#define IZcadDimDiametric_get_TextInsideAlign(This,bInside)	\
    ((This)->lpVtbl -> get_TextInsideAlign(This,bInside))

#define IZcadDimDiametric_put_TextInsideAlign(This,bInside)	\
    ((This)->lpVtbl -> put_TextInsideAlign(This,bInside))

#define IZcadDimDiametric_get_TextInside(This,bInside)	\
    ((This)->lpVtbl -> get_TextInside(This,bInside))

#define IZcadDimDiametric_put_TextInside(This,bInside)	\
    ((This)->lpVtbl -> put_TextInside(This,bInside))

#define IZcadDimDiametric_get_ForceLineInside(This,bInside)	\
    ((This)->lpVtbl -> get_ForceLineInside(This,bInside))

#define IZcadDimDiametric_put_ForceLineInside(This,bInside)	\
    ((This)->lpVtbl -> put_ForceLineInside(This,bInside))

#define IZcadDimDiametric_get_TextOutsideAlign(This,bInside)	\
    ((This)->lpVtbl -> get_TextOutsideAlign(This,bInside))

#define IZcadDimDiametric_put_TextOutsideAlign(This,bInside)	\
    ((This)->lpVtbl -> put_TextOutsideAlign(This,bInside))

#define IZcadDimDiametric_get_CenterType(This,Type)	\
    ((This)->lpVtbl -> get_CenterType(This,Type))

#define IZcadDimDiametric_put_CenterType(This,Type)	\
    ((This)->lpVtbl -> put_CenterType(This,Type))

#define IZcadDimDiametric_get_CenterMarkSize(This,Type)	\
    ((This)->lpVtbl -> get_CenterMarkSize(This,Type))

#define IZcadDimDiametric_put_CenterMarkSize(This,Type)	\
    ((This)->lpVtbl -> put_CenterMarkSize(This,Type))

#define IZcadDimDiametric_get_AltSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressLeadingZeros(This,bVal))

#define IZcadDimDiametric_put_AltSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressLeadingZeros(This,bVal))

#define IZcadDimDiametric_get_AltSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressTrailingZeros(This,bVal))

#define IZcadDimDiametric_put_AltSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressTrailingZeros(This,bVal))

#define IZcadDimDiametric_get_AltSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressZeroFeet(This,bVal))

#define IZcadDimDiametric_put_AltSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressZeroFeet(This,bVal))

#define IZcadDimDiametric_get_AltSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressZeroInches(This,bVal))

#define IZcadDimDiametric_put_AltSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressZeroInches(This,bVal))

#define IZcadDimDiametric_get_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimDiametric_put_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimDiametric_get_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimDiametric_put_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimDiametric_get_AltToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimDiametric_put_AltToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimDiametric_get_AltToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressZeroInches(This,bVal))

#define IZcadDimDiametric_put_AltToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressZeroInches(This,bVal))

#define IZcadDimDiametric_get_SuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressZeroFeet(This,bVal))

#define IZcadDimDiametric_put_SuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressZeroFeet(This,bVal))

#define IZcadDimDiametric_get_SuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressZeroInches(This,bVal))

#define IZcadDimDiametric_put_SuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressZeroInches(This,bVal))

#define IZcadDimDiametric_get_ToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimDiametric_put_ToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimDiametric_get_ToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressZeroInches(This,bVal))

#define IZcadDimDiametric_put_ToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressZeroInches(This,bVal))

#define IZcadDimDiametric_get_DimensionLineWeight(This,weight)	\
    ((This)->lpVtbl -> get_DimensionLineWeight(This,weight))

#define IZcadDimDiametric_put_DimensionLineWeight(This,weight)	\
    ((This)->lpVtbl -> put_DimensionLineWeight(This,weight))

#define IZcadDimDiametric_get_ArrowheadSize(This,size)	\
    ((This)->lpVtbl -> get_ArrowheadSize(This,size))

#define IZcadDimDiametric_put_ArrowheadSize(This,size)	\
    ((This)->lpVtbl -> put_ArrowheadSize(This,size))

#define IZcadDimDiametric_get_Arrowhead1Type(This,Type)	\
    ((This)->lpVtbl -> get_Arrowhead1Type(This,Type))

#define IZcadDimDiametric_put_Arrowhead1Type(This,Type)	\
    ((This)->lpVtbl -> put_Arrowhead1Type(This,Type))

#define IZcadDimDiametric_get_Arrowhead2Type(This,Type)	\
    ((This)->lpVtbl -> get_Arrowhead2Type(This,Type))

#define IZcadDimDiametric_put_Arrowhead2Type(This,Type)	\
    ((This)->lpVtbl -> put_Arrowhead2Type(This,Type))

#define IZcadDimDiametric_get_Measurement(This,bVal)	\
    ((This)->lpVtbl -> get_Measurement(This,bVal))

#define IZcadDimDiametric_get_Arrowhead1Block(This,BlockName)	\
    ((This)->lpVtbl -> get_Arrowhead1Block(This,BlockName))

#define IZcadDimDiametric_put_Arrowhead1Block(This,BlockName)	\
    ((This)->lpVtbl -> put_Arrowhead1Block(This,BlockName))

#define IZcadDimDiametric_get_Arrowhead2Block(This,BlockName)	\
    ((This)->lpVtbl -> get_Arrowhead2Block(This,BlockName))

#define IZcadDimDiametric_put_Arrowhead2Block(This,BlockName)	\
    ((This)->lpVtbl -> put_Arrowhead2Block(This,BlockName))

#define IZcadDimDiametric_get_DimensionLinetype(This,Linetype)	\
    ((This)->lpVtbl -> get_DimensionLinetype(This,Linetype))

#define IZcadDimDiametric_put_DimensionLinetype(This,Linetype)	\
    ((This)->lpVtbl -> put_DimensionLinetype(This,Linetype))

#define IZcadDimDiametric_get_DimConstrForm(This,bIsDynamic)	\
    ((This)->lpVtbl -> get_DimConstrForm(This,bIsDynamic))

#define IZcadDimDiametric_put_DimConstrForm(This,bIsDynamic)	\
    ((This)->lpVtbl -> put_DimConstrForm(This,bIsDynamic))

#define IZcadDimDiametric_get_DimConstrReference(This,bIsReference)	\
    ((This)->lpVtbl -> get_DimConstrReference(This,bIsReference))

#define IZcadDimDiametric_put_DimConstrReference(This,bIsReference)	\
    ((This)->lpVtbl -> put_DimConstrReference(This,bIsReference))

#define IZcadDimDiametric_get_DimConstrName(This,bstrName)	\
    ((This)->lpVtbl -> get_DimConstrName(This,bstrName))

#define IZcadDimDiametric_put_DimConstrName(This,bstrName)	\
    ((This)->lpVtbl -> put_DimConstrName(This,bstrName))

#define IZcadDimDiametric_get_DimConstrExpression(This,bstrExpression)	\
    ((This)->lpVtbl -> get_DimConstrExpression(This,bstrExpression))

#define IZcadDimDiametric_put_DimConstrExpression(This,bstrExpression)	\
    ((This)->lpVtbl -> put_DimConstrExpression(This,bstrExpression))

#define IZcadDimDiametric_get_DimConstrValue(This,value)	\
    ((This)->lpVtbl -> get_DimConstrValue(This,value))

#define IZcadDimDiametric_put_DimConstrValue(This,value)	\
    ((This)->lpVtbl -> put_DimConstrValue(This,value))

#define IZcadDimDiametric_get_DimConstrDesc(This,bstrDescription)	\
    ((This)->lpVtbl -> get_DimConstrDesc(This,bstrDescription))

#define IZcadDimDiametric_put_DimConstrDesc(This,bstrDescription)	\
    ((This)->lpVtbl -> put_DimConstrDesc(This,bstrDescription))

#endif
#endif


 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_AltTextPrefix_Proxy(
    IZcadDimDiametric * This,
     BSTR *Prefix);

void __RPC_STUB IZcadDimDiametric_get_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_AltTextPrefix_Proxy(
    IZcadDimDiametric * This,
     BSTR Prefix);

void __RPC_STUB IZcadDimDiametric_put_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_AltTextSuffix_Proxy(
    IZcadDimDiametric * This,
     BSTR *Prefix);

void __RPC_STUB IZcadDimDiametric_get_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_AltTextSuffix_Proxy(
    IZcadDimDiametric * This,
     BSTR Prefix);

void __RPC_STUB IZcadDimDiametric_put_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_DimensionLineColor_Proxy(
    IZcadDimDiametric * This,
     ZCAD_COLOR *Type);

void __RPC_STUB IZcadDimDiametric_get_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_DimensionLineColor_Proxy(
    IZcadDimDiametric * This,
     ZCAD_COLOR Type);

void __RPC_STUB IZcadDimDiametric_put_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_PrimaryUnitsPrecision_Proxy(
    IZcadDimDiametric * This,
     ZcDimPrecision *Prec);

void __RPC_STUB IZcadDimDiametric_get_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_PrimaryUnitsPrecision_Proxy(
    IZcadDimDiametric * This,
     ZcDimPrecision Prec);

void __RPC_STUB IZcadDimDiametric_put_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_FractionFormat_Proxy(
    IZcadDimDiametric * This,
     ZcDimFractionType *type);

void __RPC_STUB IZcadDimDiametric_get_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_FractionFormat_Proxy(
    IZcadDimDiametric * This,
     ZcDimFractionType type);

void __RPC_STUB IZcadDimDiametric_put_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_Fit_Proxy(
    IZcadDimDiametric * This,
     ZcDimFit *fittype);

void __RPC_STUB IZcadDimDiametric_get_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_Fit_Proxy(
    IZcadDimDiametric * This,
     ZcDimFit fittype);

void __RPC_STUB IZcadDimDiametric_put_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_LinearScaleFactor_Proxy(
    IZcadDimDiametric * This,
     ZCAD_NOUNITS *type);

void __RPC_STUB IZcadDimDiametric_get_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_LinearScaleFactor_Proxy(
    IZcadDimDiametric * This,
     ZCAD_NOUNITS type);

void __RPC_STUB IZcadDimDiametric_put_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_UnitsFormat_Proxy(
    IZcadDimDiametric * This,
     ZcDimLUnits *format);

void __RPC_STUB IZcadDimDiametric_get_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_UnitsFormat_Proxy(
    IZcadDimDiametric * This,
     ZcDimLUnits format);

void __RPC_STUB IZcadDimDiametric_put_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_RoundDistance_Proxy(
    IZcadDimDiametric * This,
     double *Distance);

void __RPC_STUB IZcadDimDiametric_get_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_RoundDistance_Proxy(
    IZcadDimDiametric * This,
     double Distance);

void __RPC_STUB IZcadDimDiametric_put_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_DimLine1Suppress_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDimDiametric_get_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_DimLine1Suppress_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDimDiametric_put_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_DimLine2Suppress_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDimDiametric_get_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_DimLine2Suppress_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDimDiametric_put_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_TextInsideAlign_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimDiametric_get_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_TextInsideAlign_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimDiametric_put_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_TextInside_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimDiametric_get_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_TextInside_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimDiametric_put_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_ForceLineInside_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimDiametric_get_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_ForceLineInside_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimDiametric_put_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_TextOutsideAlign_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimDiametric_get_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_TextOutsideAlign_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimDiametric_put_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_CenterType_Proxy(
    IZcadDimDiametric * This,
     ZcDimCenterType *Type);

void __RPC_STUB IZcadDimDiametric_get_CenterType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_CenterType_Proxy(
    IZcadDimDiametric * This,
     ZcDimCenterType Type);

void __RPC_STUB IZcadDimDiametric_put_CenterType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_CenterMarkSize_Proxy(
    IZcadDimDiametric * This,
     double *Type);

void __RPC_STUB IZcadDimDiametric_get_CenterMarkSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_CenterMarkSize_Proxy(
    IZcadDimDiametric * This,
     double Type);

void __RPC_STUB IZcadDimDiametric_put_CenterMarkSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_AltSuppressLeadingZeros_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimDiametric_get_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_AltSuppressLeadingZeros_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimDiametric_put_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_AltSuppressTrailingZeros_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimDiametric_get_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_AltSuppressTrailingZeros_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimDiametric_put_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_AltSuppressZeroFeet_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimDiametric_get_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_AltSuppressZeroFeet_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimDiametric_put_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_AltSuppressZeroInches_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimDiametric_get_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_AltSuppressZeroInches_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimDiametric_put_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_AltToleranceSuppressLeadingZeros_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimDiametric_get_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_AltToleranceSuppressLeadingZeros_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimDiametric_put_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_AltToleranceSuppressTrailingZeros_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimDiametric_get_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_AltToleranceSuppressTrailingZeros_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimDiametric_put_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_AltToleranceSuppressZeroFeet_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimDiametric_get_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_AltToleranceSuppressZeroFeet_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimDiametric_put_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_AltToleranceSuppressZeroInches_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimDiametric_get_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_AltToleranceSuppressZeroInches_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimDiametric_put_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_SuppressZeroFeet_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimDiametric_get_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_SuppressZeroFeet_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimDiametric_put_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_SuppressZeroInches_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimDiametric_get_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_SuppressZeroInches_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimDiametric_put_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_ToleranceSuppressZeroFeet_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimDiametric_get_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_ToleranceSuppressZeroFeet_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimDiametric_put_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_ToleranceSuppressZeroInches_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimDiametric_get_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_ToleranceSuppressZeroInches_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimDiametric_put_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_DimensionLineWeight_Proxy(
    IZcadDimDiametric * This,
     ZCAD_LWEIGHT *weight);

void __RPC_STUB IZcadDimDiametric_get_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_DimensionLineWeight_Proxy(
    IZcadDimDiametric * This,
     ZCAD_LWEIGHT weight);

void __RPC_STUB IZcadDimDiametric_put_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_ArrowheadSize_Proxy(
    IZcadDimDiametric * This,
     double *size);

void __RPC_STUB IZcadDimDiametric_get_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_ArrowheadSize_Proxy(
    IZcadDimDiametric * This,
     double size);

void __RPC_STUB IZcadDimDiametric_put_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_Arrowhead1Type_Proxy(
    IZcadDimDiametric * This,
     ZcDimArrowheadType *Type);

void __RPC_STUB IZcadDimDiametric_get_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_Arrowhead1Type_Proxy(
    IZcadDimDiametric * This,
     ZcDimArrowheadType Type);

void __RPC_STUB IZcadDimDiametric_put_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_Arrowhead2Type_Proxy(
    IZcadDimDiametric * This,
     ZcDimArrowheadType *Type);

void __RPC_STUB IZcadDimDiametric_get_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_Arrowhead2Type_Proxy(
    IZcadDimDiametric * This,
     ZcDimArrowheadType Type);

void __RPC_STUB IZcadDimDiametric_put_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_Measurement_Proxy(
    IZcadDimDiametric * This,
     double *bVal);

void __RPC_STUB IZcadDimDiametric_get_Measurement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_Arrowhead1Block_Proxy(
    IZcadDimDiametric * This,
     BSTR *BlockName);

void __RPC_STUB IZcadDimDiametric_get_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_Arrowhead1Block_Proxy(
    IZcadDimDiametric * This,
     BSTR BlockName);

void __RPC_STUB IZcadDimDiametric_put_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_Arrowhead2Block_Proxy(
    IZcadDimDiametric * This,
     BSTR *BlockName);

void __RPC_STUB IZcadDimDiametric_get_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_Arrowhead2Block_Proxy(
    IZcadDimDiametric * This,
     BSTR BlockName);

void __RPC_STUB IZcadDimDiametric_put_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_DimensionLinetype_Proxy(
    IZcadDimDiametric * This,
     BSTR *Linetype);

void __RPC_STUB IZcadDimDiametric_get_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_DimensionLinetype_Proxy(
    IZcadDimDiametric * This,
     BSTR Linetype);

void __RPC_STUB IZcadDimDiametric_put_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_DimConstrForm_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL *bIsDynamic);

void __RPC_STUB IZcadDimDiametric_get_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_DimConstrForm_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL bIsDynamic);

void __RPC_STUB IZcadDimDiametric_put_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_DimConstrReference_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL *bIsReference);

void __RPC_STUB IZcadDimDiametric_get_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_DimConstrReference_Proxy(
    IZcadDimDiametric * This,
     VARIANT_BOOL bIsReference);

void __RPC_STUB IZcadDimDiametric_put_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_DimConstrName_Proxy(
    IZcadDimDiametric * This,
     BSTR *bstrName);

void __RPC_STUB IZcadDimDiametric_get_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_DimConstrName_Proxy(
    IZcadDimDiametric * This,
     BSTR bstrName);

void __RPC_STUB IZcadDimDiametric_put_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_DimConstrExpression_Proxy(
    IZcadDimDiametric * This,
     BSTR *bstrExpression);

void __RPC_STUB IZcadDimDiametric_get_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_DimConstrExpression_Proxy(
    IZcadDimDiametric * This,
     BSTR bstrExpression);

void __RPC_STUB IZcadDimDiametric_put_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_DimConstrValue_Proxy(
    IZcadDimDiametric * This,
     BSTR *value);

void __RPC_STUB IZcadDimDiametric_get_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_DimConstrValue_Proxy(
    IZcadDimDiametric * This,
     BSTR value);

void __RPC_STUB IZcadDimDiametric_put_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_get_DimConstrDesc_Proxy(
    IZcadDimDiametric * This,
     BSTR *bstrDescription);

void __RPC_STUB IZcadDimDiametric_get_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimDiametric_put_DimConstrDesc_Proxy(
    IZcadDimDiametric * This,
     BSTR bstrDescription);

void __RPC_STUB IZcadDimDiametric_put_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


#endif

DEFINE_GUID(CLSID_ZcadDimDiametric,0xEC9231E5,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9231E5-5A17-11E7-B72E-BC5FF42AC839")
ZcadDimDiametric;
#endif

#ifndef __IZcadDimOrdinate_INTERFACE_DEFINED__
#define __IZcadDimOrdinate_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadDimOrdinate,0xEC923030,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923030-5A17-11E7-B72E-BC5FF42AC839")
    IZcadDimOrdinate : public IZcadDimension
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_AltUnits(
             VARIANT_BOOL *bAlternate) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnits(
             VARIANT_BOOL bAlternate) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnitsPrecision(
             ZcDimPrecision *Precision) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnitsPrecision(
             ZcDimPrecision Precision) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnitsScale(
             ZCAD_NOUNITS *Scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnitsScale(
             ZCAD_NOUNITS Scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltRoundDistance(
             double *Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltRoundDistance(
             double Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltTolerancePrecision(
             ZcDimPrecision *Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltTolerancePrecision(
             ZcDimPrecision Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnitsFormat(
             ZcDimUnits *Units) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnitsFormat(
             ZcDimUnits Units) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltTextPrefix(
             BSTR *Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltTextPrefix(
             BSTR Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltTextSuffix(
             BSTR *Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltTextSuffix(
             BSTR Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineColor(
             ZCAD_COLOR *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineColor(
             ZCAD_COLOR Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PrimaryUnitsPrecision(
             ZcDimPrecision *Prec) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PrimaryUnitsPrecision(
             ZcDimPrecision Prec) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_FractionFormat(
             ZcDimFractionType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_FractionFormat(
             ZcDimFractionType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LinearScaleFactor(
             ZCAD_NOUNITS *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LinearScaleFactor(
             ZCAD_NOUNITS type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UnitsFormat(
             ZcDimLUnits *format) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_UnitsFormat(
             ZcDimLUnits format) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineWeight(
             ZCAD_LWEIGHT *lweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineWeight(
             ZCAD_LWEIGHT lweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_RoundDistance(
             double *Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_RoundDistance(
             double Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineOffset(
             double *offset) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineOffset(
             double offset) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressLeadingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressLeadingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressTrailingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressTrailingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressLeadingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressLeadingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressTrailingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressTrailingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArrowheadSize(
             double *size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArrowheadSize(
             double size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Measurement(
             double *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLineFixedLenSuppress(
             VARIANT_BOOL *bFixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLineFixedLenSuppress(
             VARIANT_BOOL bFixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLineFixedLen(
             double *FixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLineFixedLen(
             double FixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SubUnitsSuffix(
             BSTR *suffix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SubUnitsSuffix(
             BSTR suffix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SubUnitsFactor(
             double *factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SubUnitsFactor(
             double factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSubUnitsSuffix(
             BSTR *suffix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSubUnitsSuffix(
             BSTR suffix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSubUnitsFactor(
             double *factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSubUnitsFactor(
             double factor) = 0;

    };

#else

    typedef struct IZcadDimOrdinateVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadDimOrdinate * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadDimOrdinate * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadDimOrdinate * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadDimOrdinate * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadDimOrdinate * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadDimOrdinate * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadDimOrdinate * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadDimOrdinate * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadDimOrdinate * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadDimOrdinate * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadDimOrdinate * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadDimOrdinate * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadDimOrdinate * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadDimOrdinate * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadDimOrdinate * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadDimOrdinate * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadDimOrdinate * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadDimOrdinate * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadDimOrdinate * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadDimOrdinate * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadDimOrdinate * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadDimOrdinate * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadDimOrdinate * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadDimOrdinate * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadDimOrdinate * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadDimOrdinate * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadDimOrdinate * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadDimOrdinate * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadDimOrdinate * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadDimOrdinate * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadDimOrdinate * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadDimOrdinate * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadDimOrdinate * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadDimOrdinate * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadDimOrdinate * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadDimOrdinate * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadDimOrdinate * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadDimOrdinate * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadDimOrdinate * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadDimOrdinate * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadDimOrdinate * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadDimOrdinate * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadDimOrdinate * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadDimOrdinate * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadDimOrdinate * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadDimOrdinate * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadDimOrdinate * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadDimOrdinate * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadDimOrdinate * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadDimOrdinate * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadDimOrdinate * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadDimOrdinate * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadDimOrdinate * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadDimOrdinate * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadDimOrdinate * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_Rotation )(
            IZcadDimOrdinate * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_Rotation )(
            IZcadDimOrdinate * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextPosition )(
            IZcadDimOrdinate * This,
             VARIANT *textPos);

         HRESULT ( STDMETHODCALLTYPE *put_TextPosition )(
            IZcadDimOrdinate * This,
             VARIANT textPos);

         HRESULT ( STDMETHODCALLTYPE *get_TextRotation )(
            IZcadDimOrdinate * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_TextRotation )(
            IZcadDimOrdinate * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextOverride )(
            IZcadDimOrdinate * This,
             BSTR *bstrText);

         HRESULT ( STDMETHODCALLTYPE *put_TextOverride )(
            IZcadDimOrdinate * This,
             BSTR bstrText);

         HRESULT ( STDMETHODCALLTYPE *get_StyleName )(
            IZcadDimOrdinate * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_StyleName )(
            IZcadDimOrdinate * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_TextColor )(
            IZcadDimOrdinate * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_TextColor )(
            IZcadDimOrdinate * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_DecimalSeparator )(
            IZcadDimOrdinate * This,
             BSTR *character);

         HRESULT ( STDMETHODCALLTYPE *put_DecimalSeparator )(
            IZcadDimOrdinate * This,
             BSTR character);

         HRESULT ( STDMETHODCALLTYPE *get_TextGap )(
            IZcadDimOrdinate * This,
             double *offset);

         HRESULT ( STDMETHODCALLTYPE *put_TextGap )(
            IZcadDimOrdinate * This,
             double offset);

         HRESULT ( STDMETHODCALLTYPE *get_TextPrefix )(
            IZcadDimOrdinate * This,
             BSTR *prefix);

         HRESULT ( STDMETHODCALLTYPE *put_TextPrefix )(
            IZcadDimOrdinate * This,
             BSTR prefix);

         HRESULT ( STDMETHODCALLTYPE *get_TextSuffix )(
            IZcadDimOrdinate * This,
             BSTR *suffix);

         HRESULT ( STDMETHODCALLTYPE *put_TextSuffix )(
            IZcadDimOrdinate * This,
             BSTR suffix);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )(
            IZcadDimOrdinate * This,
             ZCAD_NOUNITS *factor);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )(
            IZcadDimOrdinate * This,
             ZCAD_NOUNITS factor);

         HRESULT ( STDMETHODCALLTYPE *get_VerticalTextPosition )(
            IZcadDimOrdinate * This,
             ZcDimVerticalJustification *type);

         HRESULT ( STDMETHODCALLTYPE *put_VerticalTextPosition )(
            IZcadDimOrdinate * This,
             ZcDimVerticalJustification type);

         HRESULT ( STDMETHODCALLTYPE *get_TolerancePrecision )(
            IZcadDimOrdinate * This,
             ZcDimPrecision *precision);

         HRESULT ( STDMETHODCALLTYPE *put_TolerancePrecision )(
            IZcadDimOrdinate * This,
             ZcDimPrecision precision);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceHeightScale )(
            IZcadDimOrdinate * This,
             ZCAD_NOUNITS *scale);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceHeightScale )(
            IZcadDimOrdinate * This,
             ZCAD_NOUNITS scale);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceLowerLimit )(
            IZcadDimOrdinate * This,
             double *lower);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceLowerLimit )(
            IZcadDimOrdinate * This,
             double lower);

         HRESULT ( STDMETHODCALLTYPE *get_TextMovement )(
            IZcadDimOrdinate * This,
             ZcDimTextMovement *move);

         HRESULT ( STDMETHODCALLTYPE *put_TextMovement )(
            IZcadDimOrdinate * This,
             ZcDimTextMovement move);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceDisplay )(
            IZcadDimOrdinate * This,
             ZcDimToleranceMethod *method);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceDisplay )(
            IZcadDimOrdinate * This,
             ZcDimToleranceMethod method);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceJustification )(
            IZcadDimOrdinate * This,
             ZcDimToleranceJustify *method);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceJustification )(
            IZcadDimOrdinate * This,
             ZcDimToleranceJustify method);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceUpperLimit )(
            IZcadDimOrdinate * This,
             double *upper);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceUpperLimit )(
            IZcadDimOrdinate * This,
             double upper);

         HRESULT ( STDMETHODCALLTYPE *get_TextStyle )(
            IZcadDimOrdinate * This,
             BSTR *style);

         HRESULT ( STDMETHODCALLTYPE *put_TextStyle )(
            IZcadDimOrdinate * This,
             BSTR style);

         HRESULT ( STDMETHODCALLTYPE *get_TextHeight )(
            IZcadDimOrdinate * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_TextHeight )(
            IZcadDimOrdinate * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressLeadingZeros )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressLeadingZeros )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressTrailingZeros )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressTrailingZeros )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressLeadingZeros )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressLeadingZeros )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressTrailingZeros )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressTrailingZeros )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_TextFill )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_TextFill )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_TextFillColor )(
            IZcadDimOrdinate * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_TextFillColor )(
            IZcadDimOrdinate * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_DimTxtDirection )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_DimTxtDirection )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnits )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL *bAlternate);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnits )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL bAlternate);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnitsPrecision )(
            IZcadDimOrdinate * This,
             ZcDimPrecision *Precision);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnitsPrecision )(
            IZcadDimOrdinate * This,
             ZcDimPrecision Precision);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnitsScale )(
            IZcadDimOrdinate * This,
             ZCAD_NOUNITS *Scale);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnitsScale )(
            IZcadDimOrdinate * This,
             ZCAD_NOUNITS Scale);

         HRESULT ( STDMETHODCALLTYPE *get_AltRoundDistance )(
            IZcadDimOrdinate * This,
             double *Distance);

         HRESULT ( STDMETHODCALLTYPE *put_AltRoundDistance )(
            IZcadDimOrdinate * This,
             double Distance);

         HRESULT ( STDMETHODCALLTYPE *get_AltTolerancePrecision )(
            IZcadDimOrdinate * This,
             ZcDimPrecision *Distance);

         HRESULT ( STDMETHODCALLTYPE *put_AltTolerancePrecision )(
            IZcadDimOrdinate * This,
             ZcDimPrecision Distance);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnitsFormat )(
            IZcadDimOrdinate * This,
             ZcDimUnits *Units);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnitsFormat )(
            IZcadDimOrdinate * This,
             ZcDimUnits Units);

         HRESULT ( STDMETHODCALLTYPE *get_AltTextPrefix )(
            IZcadDimOrdinate * This,
             BSTR *Prefix);

         HRESULT ( STDMETHODCALLTYPE *put_AltTextPrefix )(
            IZcadDimOrdinate * This,
             BSTR Prefix);

         HRESULT ( STDMETHODCALLTYPE *get_AltTextSuffix )(
            IZcadDimOrdinate * This,
             BSTR *Prefix);

         HRESULT ( STDMETHODCALLTYPE *put_AltTextSuffix )(
            IZcadDimOrdinate * This,
             BSTR Prefix);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineColor )(
            IZcadDimOrdinate * This,
             ZCAD_COLOR *Type);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineColor )(
            IZcadDimOrdinate * This,
             ZCAD_COLOR Type);

         HRESULT ( STDMETHODCALLTYPE *get_PrimaryUnitsPrecision )(
            IZcadDimOrdinate * This,
             ZcDimPrecision *Prec);

         HRESULT ( STDMETHODCALLTYPE *put_PrimaryUnitsPrecision )(
            IZcadDimOrdinate * This,
             ZcDimPrecision Prec);

         HRESULT ( STDMETHODCALLTYPE *get_FractionFormat )(
            IZcadDimOrdinate * This,
             ZcDimFractionType *type);

         HRESULT ( STDMETHODCALLTYPE *put_FractionFormat )(
            IZcadDimOrdinate * This,
             ZcDimFractionType type);

         HRESULT ( STDMETHODCALLTYPE *get_LinearScaleFactor )(
            IZcadDimOrdinate * This,
             ZCAD_NOUNITS *type);

         HRESULT ( STDMETHODCALLTYPE *put_LinearScaleFactor )(
            IZcadDimOrdinate * This,
             ZCAD_NOUNITS type);

         HRESULT ( STDMETHODCALLTYPE *get_UnitsFormat )(
            IZcadDimOrdinate * This,
             ZcDimLUnits *format);

         HRESULT ( STDMETHODCALLTYPE *put_UnitsFormat )(
            IZcadDimOrdinate * This,
             ZcDimLUnits format);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineWeight )(
            IZcadDimOrdinate * This,
             ZCAD_LWEIGHT *lweight);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineWeight )(
            IZcadDimOrdinate * This,
             ZCAD_LWEIGHT lweight);

         HRESULT ( STDMETHODCALLTYPE *get_RoundDistance )(
            IZcadDimOrdinate * This,
             double *Distance);

         HRESULT ( STDMETHODCALLTYPE *put_RoundDistance )(
            IZcadDimOrdinate * This,
             double Distance);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineOffset )(
            IZcadDimOrdinate * This,
             double *offset);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineOffset )(
            IZcadDimOrdinate * This,
             double offset);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressLeadingZeros )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressLeadingZeros )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressTrailingZeros )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressTrailingZeros )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroFeet )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroFeet )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroInches )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroInches )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressLeadingZeros )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressLeadingZeros )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressTrailingZeros )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressTrailingZeros )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroFeet )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroFeet )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroInches )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroInches )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroFeet )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroFeet )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroInches )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroInches )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroFeet )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroFeet )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroInches )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroInches )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ArrowheadSize )(
            IZcadDimOrdinate * This,
             double *size);

         HRESULT ( STDMETHODCALLTYPE *put_ArrowheadSize )(
            IZcadDimOrdinate * This,
             double size);

         HRESULT ( STDMETHODCALLTYPE *get_Measurement )(
            IZcadDimOrdinate * This,
             double *bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLenSuppress )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL *bFixedLen);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLenSuppress )(
            IZcadDimOrdinate * This,
             VARIANT_BOOL bFixedLen);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLen )(
            IZcadDimOrdinate * This,
             double *FixedLen);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLen )(
            IZcadDimOrdinate * This,
             double FixedLen);

         HRESULT ( STDMETHODCALLTYPE *get_SubUnitsSuffix )(
            IZcadDimOrdinate * This,
             BSTR *suffix);

         HRESULT ( STDMETHODCALLTYPE *put_SubUnitsSuffix )(
            IZcadDimOrdinate * This,
             BSTR suffix);

         HRESULT ( STDMETHODCALLTYPE *get_SubUnitsFactor )(
            IZcadDimOrdinate * This,
             double *factor);

         HRESULT ( STDMETHODCALLTYPE *put_SubUnitsFactor )(
            IZcadDimOrdinate * This,
             double factor);

         HRESULT ( STDMETHODCALLTYPE *get_AltSubUnitsSuffix )(
            IZcadDimOrdinate * This,
             BSTR *suffix);

         HRESULT ( STDMETHODCALLTYPE *put_AltSubUnitsSuffix )(
            IZcadDimOrdinate * This,
             BSTR suffix);

         HRESULT ( STDMETHODCALLTYPE *get_AltSubUnitsFactor )(
            IZcadDimOrdinate * This,
             double *factor);

         HRESULT ( STDMETHODCALLTYPE *put_AltSubUnitsFactor )(
            IZcadDimOrdinate * This,
             double factor);

        END_INTERFACE
    } IZcadDimOrdinateVtbl;

    interface IZcadDimOrdinate
    {
        CONST_VTBL struct IZcadDimOrdinateVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadDimOrdinate_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadDimOrdinate_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadDimOrdinate_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadDimOrdinate_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadDimOrdinate_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadDimOrdinate_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadDimOrdinate_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadDimOrdinate_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadDimOrdinate_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadDimOrdinate_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadDimOrdinate_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadDimOrdinate_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadDimOrdinate_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadDimOrdinate_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadDimOrdinate_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadDimOrdinate_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadDimOrdinate_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadDimOrdinate_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadDimOrdinate_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadDimOrdinate_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadDimOrdinate_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadDimOrdinate_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadDimOrdinate_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadDimOrdinate_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadDimOrdinate_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadDimOrdinate_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadDimOrdinate_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadDimOrdinate_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadDimOrdinate_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadDimOrdinate_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadDimOrdinate_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadDimOrdinate_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadDimOrdinate_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadDimOrdinate_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadDimOrdinate_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadDimOrdinate_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadDimOrdinate_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadDimOrdinate_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadDimOrdinate_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadDimOrdinate_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadDimOrdinate_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadDimOrdinate_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadDimOrdinate_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadDimOrdinate_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadDimOrdinate_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadDimOrdinate_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadDimOrdinate_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadDimOrdinate_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadDimOrdinate_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadDimOrdinate_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadDimOrdinate_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadDimOrdinate_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadDimOrdinate_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadDimOrdinate_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadDimOrdinate_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadDimOrdinate_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadDimOrdinate_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadDimOrdinate_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadDimOrdinate_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadDimOrdinate_get_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_Rotation(This,rotAngle))

#define IZcadDimOrdinate_put_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_Rotation(This,rotAngle))

#define IZcadDimOrdinate_get_TextPosition(This,textPos)	\
    ((This)->lpVtbl -> get_TextPosition(This,textPos))

#define IZcadDimOrdinate_put_TextPosition(This,textPos)	\
    ((This)->lpVtbl -> put_TextPosition(This,textPos))

#define IZcadDimOrdinate_get_TextRotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_TextRotation(This,rotAngle))

#define IZcadDimOrdinate_put_TextRotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_TextRotation(This,rotAngle))

#define IZcadDimOrdinate_get_TextOverride(This,bstrText)	\
    ((This)->lpVtbl -> get_TextOverride(This,bstrText))

#define IZcadDimOrdinate_put_TextOverride(This,bstrText)	\
    ((This)->lpVtbl -> put_TextOverride(This,bstrText))

#define IZcadDimOrdinate_get_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> get_StyleName(This,bstrName))

#define IZcadDimOrdinate_put_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> put_StyleName(This,bstrName))

#define IZcadDimOrdinate_get_TextColor(This,Color)	\
    ((This)->lpVtbl -> get_TextColor(This,Color))

#define IZcadDimOrdinate_put_TextColor(This,Color)	\
    ((This)->lpVtbl -> put_TextColor(This,Color))

#define IZcadDimOrdinate_get_DecimalSeparator(This,character)	\
    ((This)->lpVtbl -> get_DecimalSeparator(This,character))

#define IZcadDimOrdinate_put_DecimalSeparator(This,character)	\
    ((This)->lpVtbl -> put_DecimalSeparator(This,character))

#define IZcadDimOrdinate_get_TextGap(This,offset)	\
    ((This)->lpVtbl -> get_TextGap(This,offset))

#define IZcadDimOrdinate_put_TextGap(This,offset)	\
    ((This)->lpVtbl -> put_TextGap(This,offset))

#define IZcadDimOrdinate_get_TextPrefix(This,prefix)	\
    ((This)->lpVtbl -> get_TextPrefix(This,prefix))

#define IZcadDimOrdinate_put_TextPrefix(This,prefix)	\
    ((This)->lpVtbl -> put_TextPrefix(This,prefix))

#define IZcadDimOrdinate_get_TextSuffix(This,suffix)	\
    ((This)->lpVtbl -> get_TextSuffix(This,suffix))

#define IZcadDimOrdinate_put_TextSuffix(This,suffix)	\
    ((This)->lpVtbl -> put_TextSuffix(This,suffix))

#define IZcadDimOrdinate_get_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> get_ScaleFactor(This,factor))

#define IZcadDimOrdinate_put_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> put_ScaleFactor(This,factor))

#define IZcadDimOrdinate_get_VerticalTextPosition(This,type)	\
    ((This)->lpVtbl -> get_VerticalTextPosition(This,type))

#define IZcadDimOrdinate_put_VerticalTextPosition(This,type)	\
    ((This)->lpVtbl -> put_VerticalTextPosition(This,type))

#define IZcadDimOrdinate_get_TolerancePrecision(This,precision)	\
    ((This)->lpVtbl -> get_TolerancePrecision(This,precision))

#define IZcadDimOrdinate_put_TolerancePrecision(This,precision)	\
    ((This)->lpVtbl -> put_TolerancePrecision(This,precision))

#define IZcadDimOrdinate_get_ToleranceHeightScale(This,scale)	\
    ((This)->lpVtbl -> get_ToleranceHeightScale(This,scale))

#define IZcadDimOrdinate_put_ToleranceHeightScale(This,scale)	\
    ((This)->lpVtbl -> put_ToleranceHeightScale(This,scale))

#define IZcadDimOrdinate_get_ToleranceLowerLimit(This,lower)	\
    ((This)->lpVtbl -> get_ToleranceLowerLimit(This,lower))

#define IZcadDimOrdinate_put_ToleranceLowerLimit(This,lower)	\
    ((This)->lpVtbl -> put_ToleranceLowerLimit(This,lower))

#define IZcadDimOrdinate_get_TextMovement(This,move)	\
    ((This)->lpVtbl -> get_TextMovement(This,move))

#define IZcadDimOrdinate_put_TextMovement(This,move)	\
    ((This)->lpVtbl -> put_TextMovement(This,move))

#define IZcadDimOrdinate_get_ToleranceDisplay(This,method)	\
    ((This)->lpVtbl -> get_ToleranceDisplay(This,method))

#define IZcadDimOrdinate_put_ToleranceDisplay(This,method)	\
    ((This)->lpVtbl -> put_ToleranceDisplay(This,method))

#define IZcadDimOrdinate_get_ToleranceJustification(This,method)	\
    ((This)->lpVtbl -> get_ToleranceJustification(This,method))

#define IZcadDimOrdinate_put_ToleranceJustification(This,method)	\
    ((This)->lpVtbl -> put_ToleranceJustification(This,method))

#define IZcadDimOrdinate_get_ToleranceUpperLimit(This,upper)	\
    ((This)->lpVtbl -> get_ToleranceUpperLimit(This,upper))

#define IZcadDimOrdinate_put_ToleranceUpperLimit(This,upper)	\
    ((This)->lpVtbl -> put_ToleranceUpperLimit(This,upper))

#define IZcadDimOrdinate_get_TextStyle(This,style)	\
    ((This)->lpVtbl -> get_TextStyle(This,style))

#define IZcadDimOrdinate_put_TextStyle(This,style)	\
    ((This)->lpVtbl -> put_TextStyle(This,style))

#define IZcadDimOrdinate_get_TextHeight(This,height)	\
    ((This)->lpVtbl -> get_TextHeight(This,height))

#define IZcadDimOrdinate_put_TextHeight(This,height)	\
    ((This)->lpVtbl -> put_TextHeight(This,height))

#define IZcadDimOrdinate_get_SuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressLeadingZeros(This,bVal))

#define IZcadDimOrdinate_put_SuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressLeadingZeros(This,bVal))

#define IZcadDimOrdinate_get_SuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressTrailingZeros(This,bVal))

#define IZcadDimOrdinate_put_SuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressTrailingZeros(This,bVal))

#define IZcadDimOrdinate_get_ToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimOrdinate_put_ToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimOrdinate_get_ToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimOrdinate_put_ToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimOrdinate_get_TextFill(This,bVal)	\
    ((This)->lpVtbl -> get_TextFill(This,bVal))

#define IZcadDimOrdinate_put_TextFill(This,bVal)	\
    ((This)->lpVtbl -> put_TextFill(This,bVal))

#define IZcadDimOrdinate_get_TextFillColor(This,Color)	\
    ((This)->lpVtbl -> get_TextFillColor(This,Color))

#define IZcadDimOrdinate_put_TextFillColor(This,Color)	\
    ((This)->lpVtbl -> put_TextFillColor(This,Color))

#define IZcadDimOrdinate_get_DimTxtDirection(This,bVal)	\
    ((This)->lpVtbl -> get_DimTxtDirection(This,bVal))

#define IZcadDimOrdinate_put_DimTxtDirection(This,bVal)	\
    ((This)->lpVtbl -> put_DimTxtDirection(This,bVal))


#define IZcadDimOrdinate_get_AltUnits(This,bAlternate)	\
    ((This)->lpVtbl -> get_AltUnits(This,bAlternate))

#define IZcadDimOrdinate_put_AltUnits(This,bAlternate)	\
    ((This)->lpVtbl -> put_AltUnits(This,bAlternate))

#define IZcadDimOrdinate_get_AltUnitsPrecision(This,Precision)	\
    ((This)->lpVtbl -> get_AltUnitsPrecision(This,Precision))

#define IZcadDimOrdinate_put_AltUnitsPrecision(This,Precision)	\
    ((This)->lpVtbl -> put_AltUnitsPrecision(This,Precision))

#define IZcadDimOrdinate_get_AltUnitsScale(This,Scale)	\
    ((This)->lpVtbl -> get_AltUnitsScale(This,Scale))

#define IZcadDimOrdinate_put_AltUnitsScale(This,Scale)	\
    ((This)->lpVtbl -> put_AltUnitsScale(This,Scale))

#define IZcadDimOrdinate_get_AltRoundDistance(This,Distance)	\
    ((This)->lpVtbl -> get_AltRoundDistance(This,Distance))

#define IZcadDimOrdinate_put_AltRoundDistance(This,Distance)	\
    ((This)->lpVtbl -> put_AltRoundDistance(This,Distance))

#define IZcadDimOrdinate_get_AltTolerancePrecision(This,Distance)	\
    ((This)->lpVtbl -> get_AltTolerancePrecision(This,Distance))

#define IZcadDimOrdinate_put_AltTolerancePrecision(This,Distance)	\
    ((This)->lpVtbl -> put_AltTolerancePrecision(This,Distance))

#define IZcadDimOrdinate_get_AltUnitsFormat(This,Units)	\
    ((This)->lpVtbl -> get_AltUnitsFormat(This,Units))

#define IZcadDimOrdinate_put_AltUnitsFormat(This,Units)	\
    ((This)->lpVtbl -> put_AltUnitsFormat(This,Units))

#define IZcadDimOrdinate_get_AltTextPrefix(This,Prefix)	\
    ((This)->lpVtbl -> get_AltTextPrefix(This,Prefix))

#define IZcadDimOrdinate_put_AltTextPrefix(This,Prefix)	\
    ((This)->lpVtbl -> put_AltTextPrefix(This,Prefix))

#define IZcadDimOrdinate_get_AltTextSuffix(This,Prefix)	\
    ((This)->lpVtbl -> get_AltTextSuffix(This,Prefix))

#define IZcadDimOrdinate_put_AltTextSuffix(This,Prefix)	\
    ((This)->lpVtbl -> put_AltTextSuffix(This,Prefix))

#define IZcadDimOrdinate_get_ExtensionLineColor(This,Type)	\
    ((This)->lpVtbl -> get_ExtensionLineColor(This,Type))

#define IZcadDimOrdinate_put_ExtensionLineColor(This,Type)	\
    ((This)->lpVtbl -> put_ExtensionLineColor(This,Type))

#define IZcadDimOrdinate_get_PrimaryUnitsPrecision(This,Prec)	\
    ((This)->lpVtbl -> get_PrimaryUnitsPrecision(This,Prec))

#define IZcadDimOrdinate_put_PrimaryUnitsPrecision(This,Prec)	\
    ((This)->lpVtbl -> put_PrimaryUnitsPrecision(This,Prec))

#define IZcadDimOrdinate_get_FractionFormat(This,type)	\
    ((This)->lpVtbl -> get_FractionFormat(This,type))

#define IZcadDimOrdinate_put_FractionFormat(This,type)	\
    ((This)->lpVtbl -> put_FractionFormat(This,type))

#define IZcadDimOrdinate_get_LinearScaleFactor(This,type)	\
    ((This)->lpVtbl -> get_LinearScaleFactor(This,type))

#define IZcadDimOrdinate_put_LinearScaleFactor(This,type)	\
    ((This)->lpVtbl -> put_LinearScaleFactor(This,type))

#define IZcadDimOrdinate_get_UnitsFormat(This,format)	\
    ((This)->lpVtbl -> get_UnitsFormat(This,format))

#define IZcadDimOrdinate_put_UnitsFormat(This,format)	\
    ((This)->lpVtbl -> put_UnitsFormat(This,format))

#define IZcadDimOrdinate_get_ExtensionLineWeight(This,lweight)	\
    ((This)->lpVtbl -> get_ExtensionLineWeight(This,lweight))

#define IZcadDimOrdinate_put_ExtensionLineWeight(This,lweight)	\
    ((This)->lpVtbl -> put_ExtensionLineWeight(This,lweight))

#define IZcadDimOrdinate_get_RoundDistance(This,Distance)	\
    ((This)->lpVtbl -> get_RoundDistance(This,Distance))

#define IZcadDimOrdinate_put_RoundDistance(This,Distance)	\
    ((This)->lpVtbl -> put_RoundDistance(This,Distance))

#define IZcadDimOrdinate_get_ExtensionLineOffset(This,offset)	\
    ((This)->lpVtbl -> get_ExtensionLineOffset(This,offset))

#define IZcadDimOrdinate_put_ExtensionLineOffset(This,offset)	\
    ((This)->lpVtbl -> put_ExtensionLineOffset(This,offset))

#define IZcadDimOrdinate_get_AltSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressLeadingZeros(This,bVal))

#define IZcadDimOrdinate_put_AltSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressLeadingZeros(This,bVal))

#define IZcadDimOrdinate_get_AltSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressTrailingZeros(This,bVal))

#define IZcadDimOrdinate_put_AltSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressTrailingZeros(This,bVal))

#define IZcadDimOrdinate_get_AltSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressZeroFeet(This,bVal))

#define IZcadDimOrdinate_put_AltSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressZeroFeet(This,bVal))

#define IZcadDimOrdinate_get_AltSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressZeroInches(This,bVal))

#define IZcadDimOrdinate_put_AltSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressZeroInches(This,bVal))

#define IZcadDimOrdinate_get_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimOrdinate_put_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimOrdinate_get_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimOrdinate_put_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimOrdinate_get_AltToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimOrdinate_put_AltToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimOrdinate_get_AltToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressZeroInches(This,bVal))

#define IZcadDimOrdinate_put_AltToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressZeroInches(This,bVal))

#define IZcadDimOrdinate_get_SuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressZeroFeet(This,bVal))

#define IZcadDimOrdinate_put_SuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressZeroFeet(This,bVal))

#define IZcadDimOrdinate_get_SuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressZeroInches(This,bVal))

#define IZcadDimOrdinate_put_SuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressZeroInches(This,bVal))

#define IZcadDimOrdinate_get_ToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimOrdinate_put_ToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimOrdinate_get_ToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressZeroInches(This,bVal))

#define IZcadDimOrdinate_put_ToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressZeroInches(This,bVal))

#define IZcadDimOrdinate_get_ArrowheadSize(This,size)	\
    ((This)->lpVtbl -> get_ArrowheadSize(This,size))

#define IZcadDimOrdinate_put_ArrowheadSize(This,size)	\
    ((This)->lpVtbl -> put_ArrowheadSize(This,size))

#define IZcadDimOrdinate_get_Measurement(This,bVal)	\
    ((This)->lpVtbl -> get_Measurement(This,bVal))

#define IZcadDimOrdinate_get_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ((This)->lpVtbl -> get_ExtLineFixedLenSuppress(This,bFixedLen))

#define IZcadDimOrdinate_put_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ((This)->lpVtbl -> put_ExtLineFixedLenSuppress(This,bFixedLen))

#define IZcadDimOrdinate_get_ExtLineFixedLen(This,FixedLen)	\
    ((This)->lpVtbl -> get_ExtLineFixedLen(This,FixedLen))

#define IZcadDimOrdinate_put_ExtLineFixedLen(This,FixedLen)	\
    ((This)->lpVtbl -> put_ExtLineFixedLen(This,FixedLen))

#define IZcadDimOrdinate_get_SubUnitsSuffix(This,suffix)	\
    ((This)->lpVtbl -> get_SubUnitsSuffix(This,suffix))

#define IZcadDimOrdinate_put_SubUnitsSuffix(This,suffix)	\
    ((This)->lpVtbl -> put_SubUnitsSuffix(This,suffix))

#define IZcadDimOrdinate_get_SubUnitsFactor(This,factor)	\
    ((This)->lpVtbl -> get_SubUnitsFactor(This,factor))

#define IZcadDimOrdinate_put_SubUnitsFactor(This,factor)	\
    ((This)->lpVtbl -> put_SubUnitsFactor(This,factor))

#define IZcadDimOrdinate_get_AltSubUnitsSuffix(This,suffix)	\
    ((This)->lpVtbl -> get_AltSubUnitsSuffix(This,suffix))

#define IZcadDimOrdinate_put_AltSubUnitsSuffix(This,suffix)	\
    ((This)->lpVtbl -> put_AltSubUnitsSuffix(This,suffix))

#define IZcadDimOrdinate_get_AltSubUnitsFactor(This,factor)	\
    ((This)->lpVtbl -> get_AltSubUnitsFactor(This,factor))

#define IZcadDimOrdinate_put_AltSubUnitsFactor(This,factor)	\
    ((This)->lpVtbl -> put_AltSubUnitsFactor(This,factor))

#endif
#endif


 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_AltTextPrefix_Proxy(
    IZcadDimOrdinate * This,
     BSTR Prefix);

void __RPC_STUB IZcadDimOrdinate_put_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_AltTextSuffix_Proxy(
    IZcadDimOrdinate * This,
     BSTR *Prefix);

void __RPC_STUB IZcadDimOrdinate_get_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_AltTextSuffix_Proxy(
    IZcadDimOrdinate * This,
     BSTR Prefix);

void __RPC_STUB IZcadDimOrdinate_put_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_ExtensionLineColor_Proxy(
    IZcadDimOrdinate * This,
     ZCAD_COLOR *Type);

void __RPC_STUB IZcadDimOrdinate_get_ExtensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_ExtensionLineColor_Proxy(
    IZcadDimOrdinate * This,
     ZCAD_COLOR Type);

void __RPC_STUB IZcadDimOrdinate_put_ExtensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_PrimaryUnitsPrecision_Proxy(
    IZcadDimOrdinate * This,
     ZcDimPrecision *Prec);

void __RPC_STUB IZcadDimOrdinate_get_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_PrimaryUnitsPrecision_Proxy(
    IZcadDimOrdinate * This,
     ZcDimPrecision Prec);

void __RPC_STUB IZcadDimOrdinate_put_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_FractionFormat_Proxy(
    IZcadDimOrdinate * This,
     ZcDimFractionType *type);

void __RPC_STUB IZcadDimOrdinate_get_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_FractionFormat_Proxy(
    IZcadDimOrdinate * This,
     ZcDimFractionType type);

void __RPC_STUB IZcadDimOrdinate_put_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_LinearScaleFactor_Proxy(
    IZcadDimOrdinate * This,
     ZCAD_NOUNITS *type);

void __RPC_STUB IZcadDimOrdinate_get_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_LinearScaleFactor_Proxy(
    IZcadDimOrdinate * This,
     ZCAD_NOUNITS type);

void __RPC_STUB IZcadDimOrdinate_put_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_UnitsFormat_Proxy(
    IZcadDimOrdinate * This,
     ZcDimLUnits *format);

void __RPC_STUB IZcadDimOrdinate_get_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_UnitsFormat_Proxy(
    IZcadDimOrdinate * This,
     ZcDimLUnits format);

void __RPC_STUB IZcadDimOrdinate_put_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_ExtensionLineWeight_Proxy(
    IZcadDimOrdinate * This,
     ZCAD_LWEIGHT *lweight);

void __RPC_STUB IZcadDimOrdinate_get_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_ExtensionLineWeight_Proxy(
    IZcadDimOrdinate * This,
     ZCAD_LWEIGHT lweight);

void __RPC_STUB IZcadDimOrdinate_put_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_RoundDistance_Proxy(
    IZcadDimOrdinate * This,
     double *Distance);

void __RPC_STUB IZcadDimOrdinate_get_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_RoundDistance_Proxy(
    IZcadDimOrdinate * This,
     double Distance);

void __RPC_STUB IZcadDimOrdinate_put_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_ExtensionLineOffset_Proxy(
    IZcadDimOrdinate * This,
     double *offset);

void __RPC_STUB IZcadDimOrdinate_get_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_ExtensionLineOffset_Proxy(
    IZcadDimOrdinate * This,
     double offset);

void __RPC_STUB IZcadDimOrdinate_put_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_AltSuppressLeadingZeros_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimOrdinate_get_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_AltSuppressLeadingZeros_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimOrdinate_put_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_AltSuppressTrailingZeros_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimOrdinate_get_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_AltSuppressTrailingZeros_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimOrdinate_put_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_AltSuppressZeroFeet_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimOrdinate_get_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_AltSuppressZeroFeet_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimOrdinate_put_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_AltSuppressZeroInches_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimOrdinate_get_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_AltSuppressZeroInches_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimOrdinate_put_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_AltToleranceSuppressLeadingZeros_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimOrdinate_get_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_AltToleranceSuppressLeadingZeros_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimOrdinate_put_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_AltToleranceSuppressTrailingZeros_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimOrdinate_get_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_AltToleranceSuppressTrailingZeros_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimOrdinate_put_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_AltToleranceSuppressZeroFeet_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimOrdinate_get_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_AltToleranceSuppressZeroFeet_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimOrdinate_put_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_AltToleranceSuppressZeroInches_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimOrdinate_get_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_AltToleranceSuppressZeroInches_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimOrdinate_put_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_SuppressZeroFeet_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimOrdinate_get_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_SuppressZeroFeet_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimOrdinate_put_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_SuppressZeroInches_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimOrdinate_get_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_SuppressZeroInches_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimOrdinate_put_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_ToleranceSuppressZeroFeet_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimOrdinate_get_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_ToleranceSuppressZeroFeet_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimOrdinate_put_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_ToleranceSuppressZeroInches_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimOrdinate_get_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_ToleranceSuppressZeroInches_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimOrdinate_put_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_ArrowheadSize_Proxy(
    IZcadDimOrdinate * This,
     double *size);

void __RPC_STUB IZcadDimOrdinate_get_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_ArrowheadSize_Proxy(
    IZcadDimOrdinate * This,
     double size);

void __RPC_STUB IZcadDimOrdinate_put_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_Measurement_Proxy(
    IZcadDimOrdinate * This,
     double *bVal);

void __RPC_STUB IZcadDimOrdinate_get_Measurement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_ExtLineFixedLenSuppress_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL *bFixedLen);

void __RPC_STUB IZcadDimOrdinate_get_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_ExtLineFixedLenSuppress_Proxy(
    IZcadDimOrdinate * This,
     VARIANT_BOOL bFixedLen);

void __RPC_STUB IZcadDimOrdinate_put_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_ExtLineFixedLen_Proxy(
    IZcadDimOrdinate * This,
     double *FixedLen);

void __RPC_STUB IZcadDimOrdinate_get_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_ExtLineFixedLen_Proxy(
    IZcadDimOrdinate * This,
     double FixedLen);

void __RPC_STUB IZcadDimOrdinate_put_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_SubUnitsSuffix_Proxy(
    IZcadDimOrdinate * This,
     BSTR *suffix);

void __RPC_STUB IZcadDimOrdinate_get_SubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_SubUnitsSuffix_Proxy(
    IZcadDimOrdinate * This,
     BSTR suffix);

void __RPC_STUB IZcadDimOrdinate_put_SubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_SubUnitsFactor_Proxy(
    IZcadDimOrdinate * This,
     double *factor);

void __RPC_STUB IZcadDimOrdinate_get_SubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_SubUnitsFactor_Proxy(
    IZcadDimOrdinate * This,
     double factor);

void __RPC_STUB IZcadDimOrdinate_put_SubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_AltSubUnitsSuffix_Proxy(
    IZcadDimOrdinate * This,
     BSTR *suffix);

void __RPC_STUB IZcadDimOrdinate_get_AltSubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_AltSubUnitsSuffix_Proxy(
    IZcadDimOrdinate * This,
     BSTR suffix);

void __RPC_STUB IZcadDimOrdinate_put_AltSubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_get_AltSubUnitsFactor_Proxy(
    IZcadDimOrdinate * This,
     double *factor);

void __RPC_STUB IZcadDimOrdinate_get_AltSubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimOrdinate_put_AltSubUnitsFactor_Proxy(
    IZcadDimOrdinate * This,
     double factor);

void __RPC_STUB IZcadDimOrdinate_put_AltSubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


#endif

DEFINE_GUID(CLSID_ZcadDimOrdinate,0xEC92313B,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC92313B-5A17-11E7-B72E-BC5FF42AC839")
ZcadDimOrdinate;
#endif

#ifndef __IZcadDimRadial_INTERFACE_DEFINED__
#define __IZcadDimRadial_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadDimRadial,0xEC923119,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923119-5A17-11E7-B72E-BC5FF42AC839")
    IZcadDimRadial : public IZcadDimension
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE put_LeaderLength(
             double Length) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnits(
             VARIANT_BOOL *bAlternate) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnits(
             VARIANT_BOOL bAlternate) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnitsPrecision(
             ZcDimPrecision *Precision) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnitsPrecision(
             ZcDimPrecision Precision) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnitsScale(
             ZCAD_NOUNITS *Scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnitsScale(
             ZCAD_NOUNITS Scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltRoundDistance(
             double *Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltRoundDistance(
             double Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltTolerancePrecision(
             ZcDimPrecision *Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltTolerancePrecision(
             ZcDimPrecision Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnitsFormat(
             ZcDimUnits *Units) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnitsFormat(
             ZcDimUnits Units) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltTextPrefix(
             BSTR *Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltTextPrefix(
             BSTR Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltTextSuffix(
             BSTR *Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltTextSuffix(
             BSTR Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_CenterType(
             ZcDimCenterType *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_CenterType(
             ZcDimCenterType Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_CenterMarkSize(
             double *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_CenterMarkSize(
             double Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLineColor(
             ZCAD_COLOR *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLineColor(
             ZCAD_COLOR Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PrimaryUnitsPrecision(
             ZcDimPrecision *Prec) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PrimaryUnitsPrecision(
             ZcDimPrecision Prec) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_FractionFormat(
             ZcDimFractionType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_FractionFormat(
             ZcDimFractionType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Fit(
             ZcDimFit *fittype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Fit(
             ZcDimFit fittype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LinearScaleFactor(
             ZCAD_NOUNITS *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LinearScaleFactor(
             ZCAD_NOUNITS type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UnitsFormat(
             ZcDimLUnits *format) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_UnitsFormat(
             ZcDimLUnits format) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_RoundDistance(
             double *Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_RoundDistance(
             double Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimLineSuppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimLineSuppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextInsideAlign(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextInsideAlign(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextInside(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextInside(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ForceLineInside(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ForceLineInside(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextOutsideAlign(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextOutsideAlign(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressLeadingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressLeadingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressTrailingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressTrailingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressLeadingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressLeadingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressTrailingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressTrailingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLineWeight(
             ZCAD_LWEIGHT *weight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLineWeight(
             ZCAD_LWEIGHT weight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArrowheadSize(
             double *size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArrowheadSize(
             double size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArrowheadType(
             ZcDimArrowheadType *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArrowheadType(
             ZcDimArrowheadType Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Measurement(
             double *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArrowheadBlock(
             BSTR *BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArrowheadBlock(
             BSTR BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLinetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLinetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrForm(
             VARIANT_BOOL *bIsDynamic) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrForm(
             VARIANT_BOOL bIsDynamic) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrReference(
             VARIANT_BOOL *bIsReference) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrReference(
             VARIANT_BOOL bIsReference) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrName(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrName(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrExpression(
             BSTR *bstrExpression) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrExpression(
             BSTR bstrExpression) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrValue(
             BSTR *value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrValue(
             BSTR value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrDesc(
             BSTR *bstrDescription) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrDesc(
             BSTR bstrDescription) = 0;

    };

#else

    typedef struct IZcadDimRadialVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadDimRadial * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadDimRadial * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadDimRadial * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadDimRadial * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadDimRadial * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadDimRadial * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadDimRadial * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadDimRadial * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadDimRadial * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadDimRadial * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadDimRadial * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadDimRadial * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadDimRadial * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadDimRadial * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadDimRadial * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadDimRadial * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadDimRadial * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadDimRadial * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadDimRadial * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadDimRadial * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadDimRadial * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadDimRadial * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadDimRadial * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadDimRadial * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadDimRadial * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadDimRadial * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadDimRadial * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadDimRadial * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadDimRadial * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadDimRadial * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadDimRadial * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadDimRadial * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadDimRadial * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadDimRadial * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadDimRadial * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadDimRadial * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadDimRadial * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadDimRadial * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadDimRadial * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadDimRadial * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadDimRadial * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadDimRadial * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadDimRadial * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadDimRadial * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadDimRadial * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadDimRadial * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadDimRadial * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadDimRadial * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadDimRadial * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadDimRadial * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadDimRadial * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadDimRadial * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadDimRadial * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadDimRadial * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadDimRadial * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadDimRadial * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadDimRadial * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_Rotation )(
            IZcadDimRadial * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_Rotation )(
            IZcadDimRadial * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextPosition )(
            IZcadDimRadial * This,
             VARIANT *textPos);

         HRESULT ( STDMETHODCALLTYPE *put_TextPosition )(
            IZcadDimRadial * This,
             VARIANT textPos);

         HRESULT ( STDMETHODCALLTYPE *get_TextRotation )(
            IZcadDimRadial * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_TextRotation )(
            IZcadDimRadial * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextOverride )(
            IZcadDimRadial * This,
             BSTR *bstrText);

         HRESULT ( STDMETHODCALLTYPE *put_TextOverride )(
            IZcadDimRadial * This,
             BSTR bstrText);

         HRESULT ( STDMETHODCALLTYPE *get_StyleName )(
            IZcadDimRadial * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_StyleName )(
            IZcadDimRadial * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_TextColor )(
            IZcadDimRadial * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_TextColor )(
            IZcadDimRadial * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_DecimalSeparator )(
            IZcadDimRadial * This,
             BSTR *character);

         HRESULT ( STDMETHODCALLTYPE *put_DecimalSeparator )(
            IZcadDimRadial * This,
             BSTR character);

         HRESULT ( STDMETHODCALLTYPE *get_TextGap )(
            IZcadDimRadial * This,
             double *offset);

         HRESULT ( STDMETHODCALLTYPE *put_TextGap )(
            IZcadDimRadial * This,
             double offset);

         HRESULT ( STDMETHODCALLTYPE *get_TextPrefix )(
            IZcadDimRadial * This,
             BSTR *prefix);

         HRESULT ( STDMETHODCALLTYPE *put_TextPrefix )(
            IZcadDimRadial * This,
             BSTR prefix);

         HRESULT ( STDMETHODCALLTYPE *get_TextSuffix )(
            IZcadDimRadial * This,
             BSTR *suffix);

         HRESULT ( STDMETHODCALLTYPE *put_TextSuffix )(
            IZcadDimRadial * This,
             BSTR suffix);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )(
            IZcadDimRadial * This,
             ZCAD_NOUNITS *factor);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )(
            IZcadDimRadial * This,
             ZCAD_NOUNITS factor);

         HRESULT ( STDMETHODCALLTYPE *get_VerticalTextPosition )(
            IZcadDimRadial * This,
             ZcDimVerticalJustification *type);

         HRESULT ( STDMETHODCALLTYPE *put_VerticalTextPosition )(
            IZcadDimRadial * This,
             ZcDimVerticalJustification type);

         HRESULT ( STDMETHODCALLTYPE *get_TolerancePrecision )(
            IZcadDimRadial * This,
             ZcDimPrecision *precision);

         HRESULT ( STDMETHODCALLTYPE *put_TolerancePrecision )(
            IZcadDimRadial * This,
             ZcDimPrecision precision);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceHeightScale )(
            IZcadDimRadial * This,
             ZCAD_NOUNITS *scale);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceHeightScale )(
            IZcadDimRadial * This,
             ZCAD_NOUNITS scale);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceLowerLimit )(
            IZcadDimRadial * This,
             double *lower);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceLowerLimit )(
            IZcadDimRadial * This,
             double lower);

         HRESULT ( STDMETHODCALLTYPE *get_TextMovement )(
            IZcadDimRadial * This,
             ZcDimTextMovement *move);

         HRESULT ( STDMETHODCALLTYPE *put_TextMovement )(
            IZcadDimRadial * This,
             ZcDimTextMovement move);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceDisplay )(
            IZcadDimRadial * This,
             ZcDimToleranceMethod *method);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceDisplay )(
            IZcadDimRadial * This,
             ZcDimToleranceMethod method);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceJustification )(
            IZcadDimRadial * This,
             ZcDimToleranceJustify *method);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceJustification )(
            IZcadDimRadial * This,
             ZcDimToleranceJustify method);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceUpperLimit )(
            IZcadDimRadial * This,
             double *upper);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceUpperLimit )(
            IZcadDimRadial * This,
             double upper);

         HRESULT ( STDMETHODCALLTYPE *get_TextStyle )(
            IZcadDimRadial * This,
             BSTR *style);

         HRESULT ( STDMETHODCALLTYPE *put_TextStyle )(
            IZcadDimRadial * This,
             BSTR style);

         HRESULT ( STDMETHODCALLTYPE *get_TextHeight )(
            IZcadDimRadial * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_TextHeight )(
            IZcadDimRadial * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressLeadingZeros )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressLeadingZeros )(
            IZcadDimRadial * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressTrailingZeros )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressTrailingZeros )(
            IZcadDimRadial * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressLeadingZeros )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressLeadingZeros )(
            IZcadDimRadial * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressTrailingZeros )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressTrailingZeros )(
            IZcadDimRadial * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_TextFill )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_TextFill )(
            IZcadDimRadial * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_TextFillColor )(
            IZcadDimRadial * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_TextFillColor )(
            IZcadDimRadial * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_DimTxtDirection )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_DimTxtDirection )(
            IZcadDimRadial * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *put_LeaderLength )(
            IZcadDimRadial * This,
             double Length);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnits )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bAlternate);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnits )(
            IZcadDimRadial * This,
             VARIANT_BOOL bAlternate);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnitsPrecision )(
            IZcadDimRadial * This,
             ZcDimPrecision *Precision);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnitsPrecision )(
            IZcadDimRadial * This,
             ZcDimPrecision Precision);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnitsScale )(
            IZcadDimRadial * This,
             ZCAD_NOUNITS *Scale);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnitsScale )(
            IZcadDimRadial * This,
             ZCAD_NOUNITS Scale);

         HRESULT ( STDMETHODCALLTYPE *get_AltRoundDistance )(
            IZcadDimRadial * This,
             double *Distance);

         HRESULT ( STDMETHODCALLTYPE *put_AltRoundDistance )(
            IZcadDimRadial * This,
             double Distance);

         HRESULT ( STDMETHODCALLTYPE *get_AltTolerancePrecision )(
            IZcadDimRadial * This,
             ZcDimPrecision *Distance);

         HRESULT ( STDMETHODCALLTYPE *put_AltTolerancePrecision )(
            IZcadDimRadial * This,
             ZcDimPrecision Distance);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnitsFormat )(
            IZcadDimRadial * This,
             ZcDimUnits *Units);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnitsFormat )(
            IZcadDimRadial * This,
             ZcDimUnits Units);

         HRESULT ( STDMETHODCALLTYPE *get_AltTextPrefix )(
            IZcadDimRadial * This,
             BSTR *Prefix);

         HRESULT ( STDMETHODCALLTYPE *put_AltTextPrefix )(
            IZcadDimRadial * This,
             BSTR Prefix);

         HRESULT ( STDMETHODCALLTYPE *get_AltTextSuffix )(
            IZcadDimRadial * This,
             BSTR *Prefix);

         HRESULT ( STDMETHODCALLTYPE *put_AltTextSuffix )(
            IZcadDimRadial * This,
             BSTR Prefix);

         HRESULT ( STDMETHODCALLTYPE *get_CenterType )(
            IZcadDimRadial * This,
             ZcDimCenterType *Type);

         HRESULT ( STDMETHODCALLTYPE *put_CenterType )(
            IZcadDimRadial * This,
             ZcDimCenterType Type);

         HRESULT ( STDMETHODCALLTYPE *get_CenterMarkSize )(
            IZcadDimRadial * This,
             double *Type);

         HRESULT ( STDMETHODCALLTYPE *put_CenterMarkSize )(
            IZcadDimRadial * This,
             double Type);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLineColor )(
            IZcadDimRadial * This,
             ZCAD_COLOR *Type);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLineColor )(
            IZcadDimRadial * This,
             ZCAD_COLOR Type);

         HRESULT ( STDMETHODCALLTYPE *get_PrimaryUnitsPrecision )(
            IZcadDimRadial * This,
             ZcDimPrecision *Prec);

         HRESULT ( STDMETHODCALLTYPE *put_PrimaryUnitsPrecision )(
            IZcadDimRadial * This,
             ZcDimPrecision Prec);

         HRESULT ( STDMETHODCALLTYPE *get_FractionFormat )(
            IZcadDimRadial * This,
             ZcDimFractionType *type);

         HRESULT ( STDMETHODCALLTYPE *put_FractionFormat )(
            IZcadDimRadial * This,
             ZcDimFractionType type);

         HRESULT ( STDMETHODCALLTYPE *get_Fit )(
            IZcadDimRadial * This,
             ZcDimFit *fittype);

         HRESULT ( STDMETHODCALLTYPE *put_Fit )(
            IZcadDimRadial * This,
             ZcDimFit fittype);

         HRESULT ( STDMETHODCALLTYPE *get_LinearScaleFactor )(
            IZcadDimRadial * This,
             ZCAD_NOUNITS *type);

         HRESULT ( STDMETHODCALLTYPE *put_LinearScaleFactor )(
            IZcadDimRadial * This,
             ZCAD_NOUNITS type);

         HRESULT ( STDMETHODCALLTYPE *get_UnitsFormat )(
            IZcadDimRadial * This,
             ZcDimLUnits *format);

         HRESULT ( STDMETHODCALLTYPE *put_UnitsFormat )(
            IZcadDimRadial * This,
             ZcDimLUnits format);

         HRESULT ( STDMETHODCALLTYPE *get_RoundDistance )(
            IZcadDimRadial * This,
             double *Distance);

         HRESULT ( STDMETHODCALLTYPE *put_RoundDistance )(
            IZcadDimRadial * This,
             double Distance);

         HRESULT ( STDMETHODCALLTYPE *get_DimLineSuppress )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_DimLineSuppress )(
            IZcadDimRadial * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_TextInsideAlign )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextInsideAlign )(
            IZcadDimRadial * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_TextInside )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextInside )(
            IZcadDimRadial * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_ForceLineInside )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_ForceLineInside )(
            IZcadDimRadial * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_TextOutsideAlign )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextOutsideAlign )(
            IZcadDimRadial * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressLeadingZeros )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressLeadingZeros )(
            IZcadDimRadial * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressTrailingZeros )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressTrailingZeros )(
            IZcadDimRadial * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroFeet )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroFeet )(
            IZcadDimRadial * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroInches )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroInches )(
            IZcadDimRadial * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressLeadingZeros )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressLeadingZeros )(
            IZcadDimRadial * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressTrailingZeros )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressTrailingZeros )(
            IZcadDimRadial * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroFeet )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroFeet )(
            IZcadDimRadial * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroInches )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroInches )(
            IZcadDimRadial * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroFeet )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroFeet )(
            IZcadDimRadial * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroInches )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroInches )(
            IZcadDimRadial * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroFeet )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroFeet )(
            IZcadDimRadial * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroInches )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroInches )(
            IZcadDimRadial * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLineWeight )(
            IZcadDimRadial * This,
             ZCAD_LWEIGHT *weight);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLineWeight )(
            IZcadDimRadial * This,
             ZCAD_LWEIGHT weight);

         HRESULT ( STDMETHODCALLTYPE *get_ArrowheadSize )(
            IZcadDimRadial * This,
             double *size);

         HRESULT ( STDMETHODCALLTYPE *put_ArrowheadSize )(
            IZcadDimRadial * This,
             double size);

         HRESULT ( STDMETHODCALLTYPE *get_ArrowheadType )(
            IZcadDimRadial * This,
             ZcDimArrowheadType *Type);

         HRESULT ( STDMETHODCALLTYPE *put_ArrowheadType )(
            IZcadDimRadial * This,
             ZcDimArrowheadType Type);

         HRESULT ( STDMETHODCALLTYPE *get_Measurement )(
            IZcadDimRadial * This,
             double *bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ArrowheadBlock )(
            IZcadDimRadial * This,
             BSTR *BlockName);

         HRESULT ( STDMETHODCALLTYPE *put_ArrowheadBlock )(
            IZcadDimRadial * This,
             BSTR BlockName);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLinetype )(
            IZcadDimRadial * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLinetype )(
            IZcadDimRadial * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrForm )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bIsDynamic);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrForm )(
            IZcadDimRadial * This,
             VARIANT_BOOL bIsDynamic);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrReference )(
            IZcadDimRadial * This,
             VARIANT_BOOL *bIsReference);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrReference )(
            IZcadDimRadial * This,
             VARIANT_BOOL bIsReference);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrName )(
            IZcadDimRadial * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrName )(
            IZcadDimRadial * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrExpression )(
            IZcadDimRadial * This,
             BSTR *bstrExpression);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrExpression )(
            IZcadDimRadial * This,
             BSTR bstrExpression);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrValue )(
            IZcadDimRadial * This,
             BSTR *value);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrValue )(
            IZcadDimRadial * This,
             BSTR value);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrDesc )(
            IZcadDimRadial * This,
             BSTR *bstrDescription);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrDesc )(
            IZcadDimRadial * This,
             BSTR bstrDescription);

        END_INTERFACE
    } IZcadDimRadialVtbl;

    interface IZcadDimRadial
    {
        CONST_VTBL struct IZcadDimRadialVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadDimRadial_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadDimRadial_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadDimRadial_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadDimRadial_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadDimRadial_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadDimRadial_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadDimRadial_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadDimRadial_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadDimRadial_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadDimRadial_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadDimRadial_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadDimRadial_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadDimRadial_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadDimRadial_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadDimRadial_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadDimRadial_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadDimRadial_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadDimRadial_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadDimRadial_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadDimRadial_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadDimRadial_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadDimRadial_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadDimRadial_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadDimRadial_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadDimRadial_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadDimRadial_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadDimRadial_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadDimRadial_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadDimRadial_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadDimRadial_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadDimRadial_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadDimRadial_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadDimRadial_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadDimRadial_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadDimRadial_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadDimRadial_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadDimRadial_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadDimRadial_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadDimRadial_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadDimRadial_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadDimRadial_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadDimRadial_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadDimRadial_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadDimRadial_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadDimRadial_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadDimRadial_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadDimRadial_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadDimRadial_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadDimRadial_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadDimRadial_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadDimRadial_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadDimRadial_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadDimRadial_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadDimRadial_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadDimRadial_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadDimRadial_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadDimRadial_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadDimRadial_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadDimRadial_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadDimRadial_get_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_Rotation(This,rotAngle))

#define IZcadDimRadial_put_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_Rotation(This,rotAngle))

#define IZcadDimRadial_get_TextPosition(This,textPos)	\
    ((This)->lpVtbl -> get_TextPosition(This,textPos))

#define IZcadDimRadial_put_TextPosition(This,textPos)	\
    ((This)->lpVtbl -> put_TextPosition(This,textPos))

#define IZcadDimRadial_get_TextRotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_TextRotation(This,rotAngle))

#define IZcadDimRadial_put_TextRotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_TextRotation(This,rotAngle))

#define IZcadDimRadial_get_TextOverride(This,bstrText)	\
    ((This)->lpVtbl -> get_TextOverride(This,bstrText))

#define IZcadDimRadial_put_TextOverride(This,bstrText)	\
    ((This)->lpVtbl -> put_TextOverride(This,bstrText))

#define IZcadDimRadial_get_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> get_StyleName(This,bstrName))

#define IZcadDimRadial_put_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> put_StyleName(This,bstrName))

#define IZcadDimRadial_get_TextColor(This,Color)	\
    ((This)->lpVtbl -> get_TextColor(This,Color))

#define IZcadDimRadial_put_TextColor(This,Color)	\
    ((This)->lpVtbl -> put_TextColor(This,Color))

#define IZcadDimRadial_get_DecimalSeparator(This,character)	\
    ((This)->lpVtbl -> get_DecimalSeparator(This,character))

#define IZcadDimRadial_put_DecimalSeparator(This,character)	\
    ((This)->lpVtbl -> put_DecimalSeparator(This,character))

#define IZcadDimRadial_get_TextGap(This,offset)	\
    ((This)->lpVtbl -> get_TextGap(This,offset))

#define IZcadDimRadial_put_TextGap(This,offset)	\
    ((This)->lpVtbl -> put_TextGap(This,offset))

#define IZcadDimRadial_get_TextPrefix(This,prefix)	\
    ((This)->lpVtbl -> get_TextPrefix(This,prefix))

#define IZcadDimRadial_put_TextPrefix(This,prefix)	\
    ((This)->lpVtbl -> put_TextPrefix(This,prefix))

#define IZcadDimRadial_get_TextSuffix(This,suffix)	\
    ((This)->lpVtbl -> get_TextSuffix(This,suffix))

#define IZcadDimRadial_put_TextSuffix(This,suffix)	\
    ((This)->lpVtbl -> put_TextSuffix(This,suffix))

#define IZcadDimRadial_get_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> get_ScaleFactor(This,factor))

#define IZcadDimRadial_put_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> put_ScaleFactor(This,factor))

#define IZcadDimRadial_get_VerticalTextPosition(This,type)	\
    ((This)->lpVtbl -> get_VerticalTextPosition(This,type))

#define IZcadDimRadial_put_VerticalTextPosition(This,type)	\
    ((This)->lpVtbl -> put_VerticalTextPosition(This,type))

#define IZcadDimRadial_get_TolerancePrecision(This,precision)	\
    ((This)->lpVtbl -> get_TolerancePrecision(This,precision))

#define IZcadDimRadial_put_TolerancePrecision(This,precision)	\
    ((This)->lpVtbl -> put_TolerancePrecision(This,precision))

#define IZcadDimRadial_get_ToleranceHeightScale(This,scale)	\
    ((This)->lpVtbl -> get_ToleranceHeightScale(This,scale))

#define IZcadDimRadial_put_ToleranceHeightScale(This,scale)	\
    ((This)->lpVtbl -> put_ToleranceHeightScale(This,scale))

#define IZcadDimRadial_get_ToleranceLowerLimit(This,lower)	\
    ((This)->lpVtbl -> get_ToleranceLowerLimit(This,lower))

#define IZcadDimRadial_put_ToleranceLowerLimit(This,lower)	\
    ((This)->lpVtbl -> put_ToleranceLowerLimit(This,lower))

#define IZcadDimRadial_get_TextMovement(This,move)	\
    ((This)->lpVtbl -> get_TextMovement(This,move))

#define IZcadDimRadial_put_TextMovement(This,move)	\
    ((This)->lpVtbl -> put_TextMovement(This,move))

#define IZcadDimRadial_get_ToleranceDisplay(This,method)	\
    ((This)->lpVtbl -> get_ToleranceDisplay(This,method))

#define IZcadDimRadial_put_ToleranceDisplay(This,method)	\
    ((This)->lpVtbl -> put_ToleranceDisplay(This,method))

#define IZcadDimRadial_get_ToleranceJustification(This,method)	\
    ((This)->lpVtbl -> get_ToleranceJustification(This,method))

#define IZcadDimRadial_put_ToleranceJustification(This,method)	\
    ((This)->lpVtbl -> put_ToleranceJustification(This,method))

#define IZcadDimRadial_get_ToleranceUpperLimit(This,upper)	\
    ((This)->lpVtbl -> get_ToleranceUpperLimit(This,upper))

#define IZcadDimRadial_put_ToleranceUpperLimit(This,upper)	\
    ((This)->lpVtbl -> put_ToleranceUpperLimit(This,upper))

#define IZcadDimRadial_get_TextStyle(This,style)	\
    ((This)->lpVtbl -> get_TextStyle(This,style))

#define IZcadDimRadial_put_TextStyle(This,style)	\
    ((This)->lpVtbl -> put_TextStyle(This,style))

#define IZcadDimRadial_get_TextHeight(This,height)	\
    ((This)->lpVtbl -> get_TextHeight(This,height))

#define IZcadDimRadial_put_TextHeight(This,height)	\
    ((This)->lpVtbl -> put_TextHeight(This,height))

#define IZcadDimRadial_get_SuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressLeadingZeros(This,bVal))

#define IZcadDimRadial_put_SuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressLeadingZeros(This,bVal))

#define IZcadDimRadial_get_SuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressTrailingZeros(This,bVal))

#define IZcadDimRadial_put_SuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressTrailingZeros(This,bVal))

#define IZcadDimRadial_get_ToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimRadial_put_ToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimRadial_get_ToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimRadial_put_ToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimRadial_get_TextFill(This,bVal)	\
    ((This)->lpVtbl -> get_TextFill(This,bVal))

#define IZcadDimRadial_put_TextFill(This,bVal)	\
    ((This)->lpVtbl -> put_TextFill(This,bVal))

#define IZcadDimRadial_get_TextFillColor(This,Color)	\
    ((This)->lpVtbl -> get_TextFillColor(This,Color))

#define IZcadDimRadial_put_TextFillColor(This,Color)	\
    ((This)->lpVtbl -> put_TextFillColor(This,Color))

#define IZcadDimRadial_get_DimTxtDirection(This,bVal)	\
    ((This)->lpVtbl -> get_DimTxtDirection(This,bVal))

#define IZcadDimRadial_put_DimTxtDirection(This,bVal)	\
    ((This)->lpVtbl -> put_DimTxtDirection(This,bVal))


#define IZcadDimRadial_put_LeaderLength(This,Length)	\
    ((This)->lpVtbl -> put_LeaderLength(This,Length))

#define IZcadDimRadial_get_AltUnits(This,bAlternate)	\
    ((This)->lpVtbl -> get_AltUnits(This,bAlternate))

#define IZcadDimRadial_put_AltUnits(This,bAlternate)	\
    ((This)->lpVtbl -> put_AltUnits(This,bAlternate))

#define IZcadDimRadial_get_AltUnitsPrecision(This,Precision)	\
    ((This)->lpVtbl -> get_AltUnitsPrecision(This,Precision))

#define IZcadDimRadial_put_AltUnitsPrecision(This,Precision)	\
    ((This)->lpVtbl -> put_AltUnitsPrecision(This,Precision))

#define IZcadDimRadial_get_AltUnitsScale(This,Scale)	\
    ((This)->lpVtbl -> get_AltUnitsScale(This,Scale))

#define IZcadDimRadial_put_AltUnitsScale(This,Scale)	\
    ((This)->lpVtbl -> put_AltUnitsScale(This,Scale))

#define IZcadDimRadial_get_AltRoundDistance(This,Distance)	\
    ((This)->lpVtbl -> get_AltRoundDistance(This,Distance))

#define IZcadDimRadial_put_AltRoundDistance(This,Distance)	\
    ((This)->lpVtbl -> put_AltRoundDistance(This,Distance))

#define IZcadDimRadial_get_AltTolerancePrecision(This,Distance)	\
    ((This)->lpVtbl -> get_AltTolerancePrecision(This,Distance))

#define IZcadDimRadial_put_AltTolerancePrecision(This,Distance)	\
    ((This)->lpVtbl -> put_AltTolerancePrecision(This,Distance))

#define IZcadDimRadial_get_AltUnitsFormat(This,Units)	\
    ((This)->lpVtbl -> get_AltUnitsFormat(This,Units))

#define IZcadDimRadial_put_AltUnitsFormat(This,Units)	\
    ((This)->lpVtbl -> put_AltUnitsFormat(This,Units))

#define IZcadDimRadial_get_AltTextPrefix(This,Prefix)	\
    ((This)->lpVtbl -> get_AltTextPrefix(This,Prefix))

#define IZcadDimRadial_put_AltTextPrefix(This,Prefix)	\
    ((This)->lpVtbl -> put_AltTextPrefix(This,Prefix))

#define IZcadDimRadial_get_AltTextSuffix(This,Prefix)	\
    ((This)->lpVtbl -> get_AltTextSuffix(This,Prefix))

#define IZcadDimRadial_put_AltTextSuffix(This,Prefix)	\
    ((This)->lpVtbl -> put_AltTextSuffix(This,Prefix))

#define IZcadDimRadial_get_CenterType(This,Type)	\
    ((This)->lpVtbl -> get_CenterType(This,Type))

#define IZcadDimRadial_put_CenterType(This,Type)	\
    ((This)->lpVtbl -> put_CenterType(This,Type))

#define IZcadDimRadial_get_CenterMarkSize(This,Type)	\
    ((This)->lpVtbl -> get_CenterMarkSize(This,Type))

#define IZcadDimRadial_put_CenterMarkSize(This,Type)	\
    ((This)->lpVtbl -> put_CenterMarkSize(This,Type))

#define IZcadDimRadial_get_DimensionLineColor(This,Type)	\
    ((This)->lpVtbl -> get_DimensionLineColor(This,Type))

#define IZcadDimRadial_put_DimensionLineColor(This,Type)	\
    ((This)->lpVtbl -> put_DimensionLineColor(This,Type))

#define IZcadDimRadial_get_PrimaryUnitsPrecision(This,Prec)	\
    ((This)->lpVtbl -> get_PrimaryUnitsPrecision(This,Prec))

#define IZcadDimRadial_put_PrimaryUnitsPrecision(This,Prec)	\
    ((This)->lpVtbl -> put_PrimaryUnitsPrecision(This,Prec))

#define IZcadDimRadial_get_FractionFormat(This,type)	\
    ((This)->lpVtbl -> get_FractionFormat(This,type))

#define IZcadDimRadial_put_FractionFormat(This,type)	\
    ((This)->lpVtbl -> put_FractionFormat(This,type))

#define IZcadDimRadial_get_Fit(This,fittype)	\
    ((This)->lpVtbl -> get_Fit(This,fittype))

#define IZcadDimRadial_put_Fit(This,fittype)	\
    ((This)->lpVtbl -> put_Fit(This,fittype))

#define IZcadDimRadial_get_LinearScaleFactor(This,type)	\
    ((This)->lpVtbl -> get_LinearScaleFactor(This,type))

#define IZcadDimRadial_put_LinearScaleFactor(This,type)	\
    ((This)->lpVtbl -> put_LinearScaleFactor(This,type))

#define IZcadDimRadial_get_UnitsFormat(This,format)	\
    ((This)->lpVtbl -> get_UnitsFormat(This,format))

#define IZcadDimRadial_put_UnitsFormat(This,format)	\
    ((This)->lpVtbl -> put_UnitsFormat(This,format))

#define IZcadDimRadial_get_RoundDistance(This,Distance)	\
    ((This)->lpVtbl -> get_RoundDistance(This,Distance))

#define IZcadDimRadial_put_RoundDistance(This,Distance)	\
    ((This)->lpVtbl -> put_RoundDistance(This,Distance))

#define IZcadDimRadial_get_DimLineSuppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_DimLineSuppress(This,bSuppress))

#define IZcadDimRadial_put_DimLineSuppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_DimLineSuppress(This,bSuppress))

#define IZcadDimRadial_get_TextInsideAlign(This,bInside)	\
    ((This)->lpVtbl -> get_TextInsideAlign(This,bInside))

#define IZcadDimRadial_put_TextInsideAlign(This,bInside)	\
    ((This)->lpVtbl -> put_TextInsideAlign(This,bInside))

#define IZcadDimRadial_get_TextInside(This,bInside)	\
    ((This)->lpVtbl -> get_TextInside(This,bInside))

#define IZcadDimRadial_put_TextInside(This,bInside)	\
    ((This)->lpVtbl -> put_TextInside(This,bInside))

#define IZcadDimRadial_get_ForceLineInside(This,bInside)	\
    ((This)->lpVtbl -> get_ForceLineInside(This,bInside))

#define IZcadDimRadial_put_ForceLineInside(This,bInside)	\
    ((This)->lpVtbl -> put_ForceLineInside(This,bInside))

#define IZcadDimRadial_get_TextOutsideAlign(This,bInside)	\
    ((This)->lpVtbl -> get_TextOutsideAlign(This,bInside))

#define IZcadDimRadial_put_TextOutsideAlign(This,bInside)	\
    ((This)->lpVtbl -> put_TextOutsideAlign(This,bInside))

#define IZcadDimRadial_get_AltSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressLeadingZeros(This,bVal))

#define IZcadDimRadial_put_AltSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressLeadingZeros(This,bVal))

#define IZcadDimRadial_get_AltSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressTrailingZeros(This,bVal))

#define IZcadDimRadial_put_AltSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressTrailingZeros(This,bVal))

#define IZcadDimRadial_get_AltSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressZeroFeet(This,bVal))

#define IZcadDimRadial_put_AltSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressZeroFeet(This,bVal))

#define IZcadDimRadial_get_AltSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressZeroInches(This,bVal))

#define IZcadDimRadial_put_AltSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressZeroInches(This,bVal))

#define IZcadDimRadial_get_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimRadial_put_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimRadial_get_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimRadial_put_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimRadial_get_AltToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimRadial_put_AltToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimRadial_get_AltToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressZeroInches(This,bVal))

#define IZcadDimRadial_put_AltToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressZeroInches(This,bVal))

#define IZcadDimRadial_get_SuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressZeroFeet(This,bVal))

#define IZcadDimRadial_put_SuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressZeroFeet(This,bVal))

#define IZcadDimRadial_get_SuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressZeroInches(This,bVal))

#define IZcadDimRadial_put_SuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressZeroInches(This,bVal))

#define IZcadDimRadial_get_ToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimRadial_put_ToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimRadial_get_ToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressZeroInches(This,bVal))

#define IZcadDimRadial_put_ToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressZeroInches(This,bVal))

#define IZcadDimRadial_get_DimensionLineWeight(This,weight)	\
    ((This)->lpVtbl -> get_DimensionLineWeight(This,weight))

#define IZcadDimRadial_put_DimensionLineWeight(This,weight)	\
    ((This)->lpVtbl -> put_DimensionLineWeight(This,weight))

#define IZcadDimRadial_get_ArrowheadSize(This,size)	\
    ((This)->lpVtbl -> get_ArrowheadSize(This,size))

#define IZcadDimRadial_put_ArrowheadSize(This,size)	\
    ((This)->lpVtbl -> put_ArrowheadSize(This,size))

#define IZcadDimRadial_get_ArrowheadType(This,Type)	\
    ((This)->lpVtbl -> get_ArrowheadType(This,Type))

#define IZcadDimRadial_put_ArrowheadType(This,Type)	\
    ((This)->lpVtbl -> put_ArrowheadType(This,Type))

#define IZcadDimRadial_get_Measurement(This,bVal)	\
    ((This)->lpVtbl -> get_Measurement(This,bVal))

#define IZcadDimRadial_get_ArrowheadBlock(This,BlockName)	\
    ((This)->lpVtbl -> get_ArrowheadBlock(This,BlockName))

#define IZcadDimRadial_put_ArrowheadBlock(This,BlockName)	\
    ((This)->lpVtbl -> put_ArrowheadBlock(This,BlockName))

#define IZcadDimRadial_get_DimensionLinetype(This,Linetype)	\
    ((This)->lpVtbl -> get_DimensionLinetype(This,Linetype))

#define IZcadDimRadial_put_DimensionLinetype(This,Linetype)	\
    ((This)->lpVtbl -> put_DimensionLinetype(This,Linetype))

#define IZcadDimRadial_get_DimConstrForm(This,bIsDynamic)	\
    ((This)->lpVtbl -> get_DimConstrForm(This,bIsDynamic))

#define IZcadDimRadial_put_DimConstrForm(This,bIsDynamic)	\
    ((This)->lpVtbl -> put_DimConstrForm(This,bIsDynamic))

#define IZcadDimRadial_get_DimConstrReference(This,bIsReference)	\
    ((This)->lpVtbl -> get_DimConstrReference(This,bIsReference))

#define IZcadDimRadial_put_DimConstrReference(This,bIsReference)	\
    ((This)->lpVtbl -> put_DimConstrReference(This,bIsReference))

#define IZcadDimRadial_get_DimConstrName(This,bstrName)	\
    ((This)->lpVtbl -> get_DimConstrName(This,bstrName))

#define IZcadDimRadial_put_DimConstrName(This,bstrName)	\
    ((This)->lpVtbl -> put_DimConstrName(This,bstrName))

#define IZcadDimRadial_get_DimConstrExpression(This,bstrExpression)	\
    ((This)->lpVtbl -> get_DimConstrExpression(This,bstrExpression))

#define IZcadDimRadial_put_DimConstrExpression(This,bstrExpression)	\
    ((This)->lpVtbl -> put_DimConstrExpression(This,bstrExpression))

#define IZcadDimRadial_get_DimConstrValue(This,value)	\
    ((This)->lpVtbl -> get_DimConstrValue(This,value))

#define IZcadDimRadial_put_DimConstrValue(This,value)	\
    ((This)->lpVtbl -> put_DimConstrValue(This,value))

#define IZcadDimRadial_get_DimConstrDesc(This,bstrDescription)	\
    ((This)->lpVtbl -> get_DimConstrDesc(This,bstrDescription))

#define IZcadDimRadial_put_DimConstrDesc(This,bstrDescription)	\
    ((This)->lpVtbl -> put_DimConstrDesc(This,bstrDescription))

#endif
#endif


 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_AltTextPrefix_Proxy(
    IZcadDimRadial * This,
     BSTR *Prefix);

void __RPC_STUB IZcadDimRadial_get_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_AltTextPrefix_Proxy(
    IZcadDimRadial * This,
     BSTR Prefix);

void __RPC_STUB IZcadDimRadial_put_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_AltTextSuffix_Proxy(
    IZcadDimRadial * This,
     BSTR *Prefix);

void __RPC_STUB IZcadDimRadial_get_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_AltTextSuffix_Proxy(
    IZcadDimRadial * This,
     BSTR Prefix);

void __RPC_STUB IZcadDimRadial_put_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_CenterType_Proxy(
    IZcadDimRadial * This,
     ZcDimCenterType *Type);

void __RPC_STUB IZcadDimRadial_get_CenterType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_CenterType_Proxy(
    IZcadDimRadial * This,
     ZcDimCenterType Type);

void __RPC_STUB IZcadDimRadial_put_CenterType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_CenterMarkSize_Proxy(
    IZcadDimRadial * This,
     double *Type);

void __RPC_STUB IZcadDimRadial_get_CenterMarkSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_CenterMarkSize_Proxy(
    IZcadDimRadial * This,
     double Type);

void __RPC_STUB IZcadDimRadial_put_CenterMarkSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_DimensionLineColor_Proxy(
    IZcadDimRadial * This,
     ZCAD_COLOR *Type);

void __RPC_STUB IZcadDimRadial_get_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_DimensionLineColor_Proxy(
    IZcadDimRadial * This,
     ZCAD_COLOR Type);

void __RPC_STUB IZcadDimRadial_put_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_PrimaryUnitsPrecision_Proxy(
    IZcadDimRadial * This,
     ZcDimPrecision *Prec);

void __RPC_STUB IZcadDimRadial_get_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_PrimaryUnitsPrecision_Proxy(
    IZcadDimRadial * This,
     ZcDimPrecision Prec);

void __RPC_STUB IZcadDimRadial_put_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_FractionFormat_Proxy(
    IZcadDimRadial * This,
     ZcDimFractionType *type);

void __RPC_STUB IZcadDimRadial_get_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_FractionFormat_Proxy(
    IZcadDimRadial * This,
     ZcDimFractionType type);

void __RPC_STUB IZcadDimRadial_put_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_Fit_Proxy(
    IZcadDimRadial * This,
     ZcDimFit *fittype);

void __RPC_STUB IZcadDimRadial_get_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_Fit_Proxy(
    IZcadDimRadial * This,
     ZcDimFit fittype);

void __RPC_STUB IZcadDimRadial_put_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_LinearScaleFactor_Proxy(
    IZcadDimRadial * This,
     ZCAD_NOUNITS *type);

void __RPC_STUB IZcadDimRadial_get_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_LinearScaleFactor_Proxy(
    IZcadDimRadial * This,
     ZCAD_NOUNITS type);

void __RPC_STUB IZcadDimRadial_put_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_UnitsFormat_Proxy(
    IZcadDimRadial * This,
     ZcDimLUnits *format);

void __RPC_STUB IZcadDimRadial_get_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_UnitsFormat_Proxy(
    IZcadDimRadial * This,
     ZcDimLUnits format);

void __RPC_STUB IZcadDimRadial_put_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_RoundDistance_Proxy(
    IZcadDimRadial * This,
     double *Distance);

void __RPC_STUB IZcadDimRadial_get_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_RoundDistance_Proxy(
    IZcadDimRadial * This,
     double Distance);

void __RPC_STUB IZcadDimRadial_put_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_DimLineSuppress_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDimRadial_get_DimLineSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_DimLineSuppress_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDimRadial_put_DimLineSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_TextInsideAlign_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimRadial_get_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_TextInsideAlign_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimRadial_put_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_TextInside_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimRadial_get_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_TextInside_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimRadial_put_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_ForceLineInside_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimRadial_get_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_ForceLineInside_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimRadial_put_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_TextOutsideAlign_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimRadial_get_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_TextOutsideAlign_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimRadial_put_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_AltSuppressLeadingZeros_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadial_get_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_AltSuppressLeadingZeros_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadial_put_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_AltSuppressTrailingZeros_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadial_get_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_AltSuppressTrailingZeros_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadial_put_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_AltSuppressZeroFeet_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadial_get_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_AltSuppressZeroFeet_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadial_put_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_AltSuppressZeroInches_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadial_get_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_AltSuppressZeroInches_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadial_put_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_AltToleranceSuppressLeadingZeros_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadial_get_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_AltToleranceSuppressLeadingZeros_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadial_put_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_AltToleranceSuppressTrailingZeros_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadial_get_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_AltToleranceSuppressTrailingZeros_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadial_put_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_AltToleranceSuppressZeroFeet_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadial_get_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_AltToleranceSuppressZeroFeet_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadial_put_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_AltToleranceSuppressZeroInches_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadial_get_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_AltToleranceSuppressZeroInches_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadial_put_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_SuppressZeroFeet_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadial_get_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_SuppressZeroFeet_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadial_put_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_SuppressZeroInches_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadial_get_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_SuppressZeroInches_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadial_put_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_ToleranceSuppressZeroFeet_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadial_get_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_ToleranceSuppressZeroFeet_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadial_put_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_ToleranceSuppressZeroInches_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadial_get_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_ToleranceSuppressZeroInches_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadial_put_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_DimensionLineWeight_Proxy(
    IZcadDimRadial * This,
     ZCAD_LWEIGHT *weight);

void __RPC_STUB IZcadDimRadial_get_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_DimensionLineWeight_Proxy(
    IZcadDimRadial * This,
     ZCAD_LWEIGHT weight);

void __RPC_STUB IZcadDimRadial_put_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_ArrowheadSize_Proxy(
    IZcadDimRadial * This,
     double *size);

void __RPC_STUB IZcadDimRadial_get_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_ArrowheadSize_Proxy(
    IZcadDimRadial * This,
     double size);

void __RPC_STUB IZcadDimRadial_put_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_ArrowheadType_Proxy(
    IZcadDimRadial * This,
     ZcDimArrowheadType *Type);

void __RPC_STUB IZcadDimRadial_get_ArrowheadType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_ArrowheadType_Proxy(
    IZcadDimRadial * This,
     ZcDimArrowheadType Type);

void __RPC_STUB IZcadDimRadial_put_ArrowheadType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_Measurement_Proxy(
    IZcadDimRadial * This,
     double *bVal);

void __RPC_STUB IZcadDimRadial_get_Measurement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_ArrowheadBlock_Proxy(
    IZcadDimRadial * This,
     BSTR *BlockName);

void __RPC_STUB IZcadDimRadial_get_ArrowheadBlock_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_ArrowheadBlock_Proxy(
    IZcadDimRadial * This,
     BSTR BlockName);

void __RPC_STUB IZcadDimRadial_put_ArrowheadBlock_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_DimensionLinetype_Proxy(
    IZcadDimRadial * This,
     BSTR *Linetype);

void __RPC_STUB IZcadDimRadial_get_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_DimensionLinetype_Proxy(
    IZcadDimRadial * This,
     BSTR Linetype);

void __RPC_STUB IZcadDimRadial_put_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_DimConstrForm_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL *bIsDynamic);

void __RPC_STUB IZcadDimRadial_get_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_DimConstrForm_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL bIsDynamic);

void __RPC_STUB IZcadDimRadial_put_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_DimConstrReference_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL *bIsReference);

void __RPC_STUB IZcadDimRadial_get_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_DimConstrReference_Proxy(
    IZcadDimRadial * This,
     VARIANT_BOOL bIsReference);

void __RPC_STUB IZcadDimRadial_put_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_DimConstrName_Proxy(
    IZcadDimRadial * This,
     BSTR *bstrName);

void __RPC_STUB IZcadDimRadial_get_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_DimConstrName_Proxy(
    IZcadDimRadial * This,
     BSTR bstrName);

void __RPC_STUB IZcadDimRadial_put_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_DimConstrExpression_Proxy(
    IZcadDimRadial * This,
     BSTR *bstrExpression);

void __RPC_STUB IZcadDimRadial_get_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_DimConstrExpression_Proxy(
    IZcadDimRadial * This,
     BSTR bstrExpression);

void __RPC_STUB IZcadDimRadial_put_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_DimConstrValue_Proxy(
    IZcadDimRadial * This,
     BSTR *value);

void __RPC_STUB IZcadDimRadial_get_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_DimConstrValue_Proxy(
    IZcadDimRadial * This,
     BSTR value);

void __RPC_STUB IZcadDimRadial_put_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_get_DimConstrDesc_Proxy(
    IZcadDimRadial * This,
     BSTR *bstrDescription);

void __RPC_STUB IZcadDimRadial_get_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadial_put_DimConstrDesc_Proxy(
    IZcadDimRadial * This,
     BSTR bstrDescription);

void __RPC_STUB IZcadDimRadial_put_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


#endif

DEFINE_GUID(CLSID_ZcadDimRadial,0xEC922FEA,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC922FEA-5A17-11E7-B72E-BC5FF42AC839")
ZcadDimRadial;
#endif

#ifndef __IZcadDimRotated_INTERFACE_DEFINED__
#define __IZcadDimRotated_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadDimRotated,0xEC922FDE,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC922FDE-5A17-11E7-B72E-BC5FF42AC839")
    IZcadDimRotated : public IZcadDimension
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_AltUnits(
             VARIANT_BOOL *bAlternate) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnits(
             VARIANT_BOOL bAlternate) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnitsPrecision(
             ZcDimPrecision *Precision) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnitsPrecision(
             ZcDimPrecision Precision) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnitsScale(
             ZCAD_NOUNITS *Scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnitsScale(
             ZCAD_NOUNITS Scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltRoundDistance(
             double *Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltRoundDistance(
             double Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltTolerancePrecision(
             ZcDimPrecision *Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltTolerancePrecision(
             ZcDimPrecision Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnitsFormat(
             ZcDimUnits *Units) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnitsFormat(
             ZcDimUnits Units) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltTextPrefix(
             BSTR *Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltTextPrefix(
             BSTR Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltTextSuffix(
             BSTR *Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltTextSuffix(
             BSTR Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLineColor(
             ZCAD_COLOR *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLineColor(
             ZCAD_COLOR Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineColor(
             ZCAD_COLOR *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineColor(
             ZCAD_COLOR Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PrimaryUnitsPrecision(
             ZcDimPrecision *Prec) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PrimaryUnitsPrecision(
             ZcDimPrecision Prec) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLineExtend(
             double *extend) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLineExtend(
             double extend) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineExtend(
             double *extend) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineExtend(
             double extend) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Fit(
             ZcDimFit *fittype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Fit(
             ZcDimFit fittype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_FractionFormat(
             ZcDimFractionType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_FractionFormat(
             ZcDimFractionType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_HorizontalTextPosition(
             ZcDimHorizontalJustification *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_HorizontalTextPosition(
             ZcDimHorizontalJustification type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LinearScaleFactor(
             ZCAD_NOUNITS *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LinearScaleFactor(
             ZCAD_NOUNITS type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UnitsFormat(
             ZcDimLUnits *format) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_UnitsFormat(
             ZcDimLUnits format) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineWeight(
             ZCAD_LWEIGHT *lweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineWeight(
             ZCAD_LWEIGHT lweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_RoundDistance(
             double *Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_RoundDistance(
             double Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimLine1Suppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimLine1Suppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimLine2Suppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimLine2Suppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine1Suppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine1Suppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine2Suppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine2Suppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimLineInside(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimLineInside(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextInsideAlign(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextInsideAlign(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextInside(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextInside(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ForceLineInside(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ForceLineInside(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextOutsideAlign(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextOutsideAlign(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineOffset(
             double *offset) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineOffset(
             double offset) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressLeadingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressLeadingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressTrailingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressTrailingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressLeadingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressLeadingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressTrailingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressTrailingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLineWeight(
             ZCAD_LWEIGHT *weight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLineWeight(
             ZCAD_LWEIGHT weight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArrowheadSize(
             double *size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArrowheadSize(
             double size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead1Type(
             ZcDimArrowheadType *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead1Type(
             ZcDimArrowheadType Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead2Type(
             ZcDimArrowheadType *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead2Type(
             ZcDimArrowheadType Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Measurement(
             double *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead1Block(
             BSTR *BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead1Block(
             BSTR BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead2Block(
             BSTR *BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead2Block(
             BSTR BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLinetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLinetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine1Linetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine1Linetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine2Linetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine2Linetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLineFixedLenSuppress(
             VARIANT_BOOL *bFixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLineFixedLenSuppress(
             VARIANT_BOOL bFixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLineFixedLen(
             double *FixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLineFixedLen(
             double FixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrForm(
             VARIANT_BOOL *bIsDynamic) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrForm(
             VARIANT_BOOL bIsDynamic) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrReference(
             VARIANT_BOOL *bIsReference) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrReference(
             VARIANT_BOOL bIsReference) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrName(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrName(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrExpression(
             BSTR *bstrExpression) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrExpression(
             BSTR bstrExpression) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrValue(
             BSTR *value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrValue(
             BSTR value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrDesc(
             BSTR *bstrDescription) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrDesc(
             BSTR bstrDescription) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SubUnitsSuffix(
             BSTR *suffix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SubUnitsSuffix(
             BSTR suffix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SubUnitsFactor(
             double *factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SubUnitsFactor(
             double factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSubUnitsSuffix(
             BSTR *suffix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSubUnitsSuffix(
             BSTR suffix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSubUnitsFactor(
             double *factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSubUnitsFactor(
             double factor) = 0;

    };

#else

    typedef struct IZcadDimRotatedVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadDimRotated * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadDimRotated * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadDimRotated * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadDimRotated * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadDimRotated * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadDimRotated * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadDimRotated * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadDimRotated * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadDimRotated * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadDimRotated * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadDimRotated * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadDimRotated * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadDimRotated * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadDimRotated * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadDimRotated * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadDimRotated * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadDimRotated * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadDimRotated * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadDimRotated * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadDimRotated * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadDimRotated * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadDimRotated * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadDimRotated * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadDimRotated * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadDimRotated * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadDimRotated * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadDimRotated * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadDimRotated * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadDimRotated * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadDimRotated * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadDimRotated * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadDimRotated * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadDimRotated * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadDimRotated * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadDimRotated * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadDimRotated * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadDimRotated * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadDimRotated * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadDimRotated * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadDimRotated * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadDimRotated * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadDimRotated * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadDimRotated * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadDimRotated * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadDimRotated * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadDimRotated * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadDimRotated * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadDimRotated * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadDimRotated * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadDimRotated * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadDimRotated * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadDimRotated * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadDimRotated * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadDimRotated * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadDimRotated * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadDimRotated * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadDimRotated * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_Rotation )(
            IZcadDimRotated * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_Rotation )(
            IZcadDimRotated * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextPosition )(
            IZcadDimRotated * This,
             VARIANT *textPos);

         HRESULT ( STDMETHODCALLTYPE *put_TextPosition )(
            IZcadDimRotated * This,
             VARIANT textPos);

         HRESULT ( STDMETHODCALLTYPE *get_TextRotation )(
            IZcadDimRotated * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_TextRotation )(
            IZcadDimRotated * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextOverride )(
            IZcadDimRotated * This,
             BSTR *bstrText);

         HRESULT ( STDMETHODCALLTYPE *put_TextOverride )(
            IZcadDimRotated * This,
             BSTR bstrText);

         HRESULT ( STDMETHODCALLTYPE *get_StyleName )(
            IZcadDimRotated * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_StyleName )(
            IZcadDimRotated * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_TextColor )(
            IZcadDimRotated * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_TextColor )(
            IZcadDimRotated * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_DecimalSeparator )(
            IZcadDimRotated * This,
             BSTR *character);

         HRESULT ( STDMETHODCALLTYPE *put_DecimalSeparator )(
            IZcadDimRotated * This,
             BSTR character);

         HRESULT ( STDMETHODCALLTYPE *get_TextGap )(
            IZcadDimRotated * This,
             double *offset);

         HRESULT ( STDMETHODCALLTYPE *put_TextGap )(
            IZcadDimRotated * This,
             double offset);

         HRESULT ( STDMETHODCALLTYPE *get_TextPrefix )(
            IZcadDimRotated * This,
             BSTR *prefix);

         HRESULT ( STDMETHODCALLTYPE *put_TextPrefix )(
            IZcadDimRotated * This,
             BSTR prefix);

         HRESULT ( STDMETHODCALLTYPE *get_TextSuffix )(
            IZcadDimRotated * This,
             BSTR *suffix);

         HRESULT ( STDMETHODCALLTYPE *put_TextSuffix )(
            IZcadDimRotated * This,
             BSTR suffix);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )(
            IZcadDimRotated * This,
             ZCAD_NOUNITS *factor);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )(
            IZcadDimRotated * This,
             ZCAD_NOUNITS factor);

         HRESULT ( STDMETHODCALLTYPE *get_VerticalTextPosition )(
            IZcadDimRotated * This,
             ZcDimVerticalJustification *type);

         HRESULT ( STDMETHODCALLTYPE *put_VerticalTextPosition )(
            IZcadDimRotated * This,
             ZcDimVerticalJustification type);

         HRESULT ( STDMETHODCALLTYPE *get_TolerancePrecision )(
            IZcadDimRotated * This,
             ZcDimPrecision *precision);

         HRESULT ( STDMETHODCALLTYPE *put_TolerancePrecision )(
            IZcadDimRotated * This,
             ZcDimPrecision precision);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceHeightScale )(
            IZcadDimRotated * This,
             ZCAD_NOUNITS *scale);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceHeightScale )(
            IZcadDimRotated * This,
             ZCAD_NOUNITS scale);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceLowerLimit )(
            IZcadDimRotated * This,
             double *lower);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceLowerLimit )(
            IZcadDimRotated * This,
             double lower);

         HRESULT ( STDMETHODCALLTYPE *get_TextMovement )(
            IZcadDimRotated * This,
             ZcDimTextMovement *move);

         HRESULT ( STDMETHODCALLTYPE *put_TextMovement )(
            IZcadDimRotated * This,
             ZcDimTextMovement move);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceDisplay )(
            IZcadDimRotated * This,
             ZcDimToleranceMethod *method);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceDisplay )(
            IZcadDimRotated * This,
             ZcDimToleranceMethod method);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceJustification )(
            IZcadDimRotated * This,
             ZcDimToleranceJustify *method);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceJustification )(
            IZcadDimRotated * This,
             ZcDimToleranceJustify method);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceUpperLimit )(
            IZcadDimRotated * This,
             double *upper);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceUpperLimit )(
            IZcadDimRotated * This,
             double upper);

         HRESULT ( STDMETHODCALLTYPE *get_TextStyle )(
            IZcadDimRotated * This,
             BSTR *style);

         HRESULT ( STDMETHODCALLTYPE *put_TextStyle )(
            IZcadDimRotated * This,
             BSTR style);

         HRESULT ( STDMETHODCALLTYPE *get_TextHeight )(
            IZcadDimRotated * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_TextHeight )(
            IZcadDimRotated * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressLeadingZeros )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressLeadingZeros )(
            IZcadDimRotated * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressTrailingZeros )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressTrailingZeros )(
            IZcadDimRotated * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressLeadingZeros )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressLeadingZeros )(
            IZcadDimRotated * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressTrailingZeros )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressTrailingZeros )(
            IZcadDimRotated * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_TextFill )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_TextFill )(
            IZcadDimRotated * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_TextFillColor )(
            IZcadDimRotated * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_TextFillColor )(
            IZcadDimRotated * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_DimTxtDirection )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_DimTxtDirection )(
            IZcadDimRotated * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnits )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bAlternate);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnits )(
            IZcadDimRotated * This,
             VARIANT_BOOL bAlternate);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnitsPrecision )(
            IZcadDimRotated * This,
             ZcDimPrecision *Precision);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnitsPrecision )(
            IZcadDimRotated * This,
             ZcDimPrecision Precision);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnitsScale )(
            IZcadDimRotated * This,
             ZCAD_NOUNITS *Scale);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnitsScale )(
            IZcadDimRotated * This,
             ZCAD_NOUNITS Scale);

         HRESULT ( STDMETHODCALLTYPE *get_AltRoundDistance )(
            IZcadDimRotated * This,
             double *Distance);

         HRESULT ( STDMETHODCALLTYPE *put_AltRoundDistance )(
            IZcadDimRotated * This,
             double Distance);

         HRESULT ( STDMETHODCALLTYPE *get_AltTolerancePrecision )(
            IZcadDimRotated * This,
             ZcDimPrecision *Distance);

         HRESULT ( STDMETHODCALLTYPE *put_AltTolerancePrecision )(
            IZcadDimRotated * This,
             ZcDimPrecision Distance);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnitsFormat )(
            IZcadDimRotated * This,
             ZcDimUnits *Units);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnitsFormat )(
            IZcadDimRotated * This,
             ZcDimUnits Units);

         HRESULT ( STDMETHODCALLTYPE *get_AltTextPrefix )(
            IZcadDimRotated * This,
             BSTR *Prefix);

         HRESULT ( STDMETHODCALLTYPE *put_AltTextPrefix )(
            IZcadDimRotated * This,
             BSTR Prefix);

         HRESULT ( STDMETHODCALLTYPE *get_AltTextSuffix )(
            IZcadDimRotated * This,
             BSTR *Prefix);

         HRESULT ( STDMETHODCALLTYPE *put_AltTextSuffix )(
            IZcadDimRotated * This,
             BSTR Prefix);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLineColor )(
            IZcadDimRotated * This,
             ZCAD_COLOR *Type);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLineColor )(
            IZcadDimRotated * This,
             ZCAD_COLOR Type);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineColor )(
            IZcadDimRotated * This,
             ZCAD_COLOR *Type);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineColor )(
            IZcadDimRotated * This,
             ZCAD_COLOR Type);

         HRESULT ( STDMETHODCALLTYPE *get_PrimaryUnitsPrecision )(
            IZcadDimRotated * This,
             ZcDimPrecision *Prec);

         HRESULT ( STDMETHODCALLTYPE *put_PrimaryUnitsPrecision )(
            IZcadDimRotated * This,
             ZcDimPrecision Prec);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLineExtend )(
            IZcadDimRotated * This,
             double *extend);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLineExtend )(
            IZcadDimRotated * This,
             double extend);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineExtend )(
            IZcadDimRotated * This,
             double *extend);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineExtend )(
            IZcadDimRotated * This,
             double extend);

         HRESULT ( STDMETHODCALLTYPE *get_Fit )(
            IZcadDimRotated * This,
             ZcDimFit *fittype);

         HRESULT ( STDMETHODCALLTYPE *put_Fit )(
            IZcadDimRotated * This,
             ZcDimFit fittype);

         HRESULT ( STDMETHODCALLTYPE *get_FractionFormat )(
            IZcadDimRotated * This,
             ZcDimFractionType *type);

         HRESULT ( STDMETHODCALLTYPE *put_FractionFormat )(
            IZcadDimRotated * This,
             ZcDimFractionType type);

         HRESULT ( STDMETHODCALLTYPE *get_HorizontalTextPosition )(
            IZcadDimRotated * This,
             ZcDimHorizontalJustification *type);

         HRESULT ( STDMETHODCALLTYPE *put_HorizontalTextPosition )(
            IZcadDimRotated * This,
             ZcDimHorizontalJustification type);

         HRESULT ( STDMETHODCALLTYPE *get_LinearScaleFactor )(
            IZcadDimRotated * This,
             ZCAD_NOUNITS *type);

         HRESULT ( STDMETHODCALLTYPE *put_LinearScaleFactor )(
            IZcadDimRotated * This,
             ZCAD_NOUNITS type);

         HRESULT ( STDMETHODCALLTYPE *get_UnitsFormat )(
            IZcadDimRotated * This,
             ZcDimLUnits *format);

         HRESULT ( STDMETHODCALLTYPE *put_UnitsFormat )(
            IZcadDimRotated * This,
             ZcDimLUnits format);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineWeight )(
            IZcadDimRotated * This,
             ZCAD_LWEIGHT *lweight);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineWeight )(
            IZcadDimRotated * This,
             ZCAD_LWEIGHT lweight);

         HRESULT ( STDMETHODCALLTYPE *get_RoundDistance )(
            IZcadDimRotated * This,
             double *Distance);

         HRESULT ( STDMETHODCALLTYPE *put_RoundDistance )(
            IZcadDimRotated * This,
             double Distance);

         HRESULT ( STDMETHODCALLTYPE *get_DimLine1Suppress )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_DimLine1Suppress )(
            IZcadDimRotated * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_DimLine2Suppress )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_DimLine2Suppress )(
            IZcadDimRotated * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Suppress )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Suppress )(
            IZcadDimRotated * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Suppress )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Suppress )(
            IZcadDimRotated * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_DimLineInside )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_DimLineInside )(
            IZcadDimRotated * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_TextInsideAlign )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextInsideAlign )(
            IZcadDimRotated * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_TextInside )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextInside )(
            IZcadDimRotated * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_ForceLineInside )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_ForceLineInside )(
            IZcadDimRotated * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_TextOutsideAlign )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextOutsideAlign )(
            IZcadDimRotated * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineOffset )(
            IZcadDimRotated * This,
             double *offset);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineOffset )(
            IZcadDimRotated * This,
             double offset);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressLeadingZeros )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressLeadingZeros )(
            IZcadDimRotated * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressTrailingZeros )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressTrailingZeros )(
            IZcadDimRotated * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroFeet )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroFeet )(
            IZcadDimRotated * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroInches )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroInches )(
            IZcadDimRotated * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressLeadingZeros )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressLeadingZeros )(
            IZcadDimRotated * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressTrailingZeros )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressTrailingZeros )(
            IZcadDimRotated * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroFeet )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroFeet )(
            IZcadDimRotated * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroInches )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroInches )(
            IZcadDimRotated * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroFeet )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroFeet )(
            IZcadDimRotated * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroInches )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroInches )(
            IZcadDimRotated * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroFeet )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroFeet )(
            IZcadDimRotated * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroInches )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroInches )(
            IZcadDimRotated * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLineWeight )(
            IZcadDimRotated * This,
             ZCAD_LWEIGHT *weight);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLineWeight )(
            IZcadDimRotated * This,
             ZCAD_LWEIGHT weight);

         HRESULT ( STDMETHODCALLTYPE *get_ArrowheadSize )(
            IZcadDimRotated * This,
             double *size);

         HRESULT ( STDMETHODCALLTYPE *put_ArrowheadSize )(
            IZcadDimRotated * This,
             double size);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Type )(
            IZcadDimRotated * This,
             ZcDimArrowheadType *Type);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Type )(
            IZcadDimRotated * This,
             ZcDimArrowheadType Type);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Type )(
            IZcadDimRotated * This,
             ZcDimArrowheadType *Type);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Type )(
            IZcadDimRotated * This,
             ZcDimArrowheadType Type);

         HRESULT ( STDMETHODCALLTYPE *get_Measurement )(
            IZcadDimRotated * This,
             double *bVal);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Block )(
            IZcadDimRotated * This,
             BSTR *BlockName);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Block )(
            IZcadDimRotated * This,
             BSTR BlockName);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Block )(
            IZcadDimRotated * This,
             BSTR *BlockName);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Block )(
            IZcadDimRotated * This,
             BSTR BlockName);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLinetype )(
            IZcadDimRotated * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLinetype )(
            IZcadDimRotated * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Linetype )(
            IZcadDimRotated * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Linetype )(
            IZcadDimRotated * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Linetype )(
            IZcadDimRotated * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Linetype )(
            IZcadDimRotated * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLenSuppress )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bFixedLen);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLenSuppress )(
            IZcadDimRotated * This,
             VARIANT_BOOL bFixedLen);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLen )(
            IZcadDimRotated * This,
             double *FixedLen);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLen )(
            IZcadDimRotated * This,
             double FixedLen);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrForm )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bIsDynamic);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrForm )(
            IZcadDimRotated * This,
             VARIANT_BOOL bIsDynamic);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrReference )(
            IZcadDimRotated * This,
             VARIANT_BOOL *bIsReference);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrReference )(
            IZcadDimRotated * This,
             VARIANT_BOOL bIsReference);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrName )(
            IZcadDimRotated * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrName )(
            IZcadDimRotated * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrExpression )(
            IZcadDimRotated * This,
             BSTR *bstrExpression);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrExpression )(
            IZcadDimRotated * This,
             BSTR bstrExpression);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrValue )(
            IZcadDimRotated * This,
             BSTR *value);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrValue )(
            IZcadDimRotated * This,
             BSTR value);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrDesc )(
            IZcadDimRotated * This,
             BSTR *bstrDescription);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrDesc )(
            IZcadDimRotated * This,
             BSTR bstrDescription);

         HRESULT ( STDMETHODCALLTYPE *get_SubUnitsSuffix )(
            IZcadDimRotated * This,
             BSTR *suffix);

         HRESULT ( STDMETHODCALLTYPE *put_SubUnitsSuffix )(
            IZcadDimRotated * This,
             BSTR suffix);

         HRESULT ( STDMETHODCALLTYPE *get_SubUnitsFactor )(
            IZcadDimRotated * This,
             double *factor);

         HRESULT ( STDMETHODCALLTYPE *put_SubUnitsFactor )(
            IZcadDimRotated * This,
             double factor);

         HRESULT ( STDMETHODCALLTYPE *get_AltSubUnitsSuffix )(
            IZcadDimRotated * This,
             BSTR *suffix);

         HRESULT ( STDMETHODCALLTYPE *put_AltSubUnitsSuffix )(
            IZcadDimRotated * This,
             BSTR suffix);

         HRESULT ( STDMETHODCALLTYPE *get_AltSubUnitsFactor )(
            IZcadDimRotated * This,
             double *factor);

         HRESULT ( STDMETHODCALLTYPE *put_AltSubUnitsFactor )(
            IZcadDimRotated * This,
             double factor);

        END_INTERFACE
    } IZcadDimRotatedVtbl;

    interface IZcadDimRotated
    {
        CONST_VTBL struct IZcadDimRotatedVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadDimRotated_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadDimRotated_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadDimRotated_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadDimRotated_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadDimRotated_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadDimRotated_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadDimRotated_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadDimRotated_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadDimRotated_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadDimRotated_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadDimRotated_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadDimRotated_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadDimRotated_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadDimRotated_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadDimRotated_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadDimRotated_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadDimRotated_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadDimRotated_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadDimRotated_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadDimRotated_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadDimRotated_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadDimRotated_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadDimRotated_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadDimRotated_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadDimRotated_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadDimRotated_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadDimRotated_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadDimRotated_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadDimRotated_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadDimRotated_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadDimRotated_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadDimRotated_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadDimRotated_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadDimRotated_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadDimRotated_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadDimRotated_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadDimRotated_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadDimRotated_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadDimRotated_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadDimRotated_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadDimRotated_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadDimRotated_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadDimRotated_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadDimRotated_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadDimRotated_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadDimRotated_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadDimRotated_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadDimRotated_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadDimRotated_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadDimRotated_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadDimRotated_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadDimRotated_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadDimRotated_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadDimRotated_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadDimRotated_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadDimRotated_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadDimRotated_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadDimRotated_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadDimRotated_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadDimRotated_get_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_Rotation(This,rotAngle))

#define IZcadDimRotated_put_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_Rotation(This,rotAngle))

#define IZcadDimRotated_get_TextPosition(This,textPos)	\
    ((This)->lpVtbl -> get_TextPosition(This,textPos))

#define IZcadDimRotated_put_TextPosition(This,textPos)	\
    ((This)->lpVtbl -> put_TextPosition(This,textPos))

#define IZcadDimRotated_get_TextRotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_TextRotation(This,rotAngle))

#define IZcadDimRotated_put_TextRotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_TextRotation(This,rotAngle))

#define IZcadDimRotated_get_TextOverride(This,bstrText)	\
    ((This)->lpVtbl -> get_TextOverride(This,bstrText))

#define IZcadDimRotated_put_TextOverride(This,bstrText)	\
    ((This)->lpVtbl -> put_TextOverride(This,bstrText))

#define IZcadDimRotated_get_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> get_StyleName(This,bstrName))

#define IZcadDimRotated_put_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> put_StyleName(This,bstrName))

#define IZcadDimRotated_get_TextColor(This,Color)	\
    ((This)->lpVtbl -> get_TextColor(This,Color))

#define IZcadDimRotated_put_TextColor(This,Color)	\
    ((This)->lpVtbl -> put_TextColor(This,Color))

#define IZcadDimRotated_get_DecimalSeparator(This,character)	\
    ((This)->lpVtbl -> get_DecimalSeparator(This,character))

#define IZcadDimRotated_put_DecimalSeparator(This,character)	\
    ((This)->lpVtbl -> put_DecimalSeparator(This,character))

#define IZcadDimRotated_get_TextGap(This,offset)	\
    ((This)->lpVtbl -> get_TextGap(This,offset))

#define IZcadDimRotated_put_TextGap(This,offset)	\
    ((This)->lpVtbl -> put_TextGap(This,offset))

#define IZcadDimRotated_get_TextPrefix(This,prefix)	\
    ((This)->lpVtbl -> get_TextPrefix(This,prefix))

#define IZcadDimRotated_put_TextPrefix(This,prefix)	\
    ((This)->lpVtbl -> put_TextPrefix(This,prefix))

#define IZcadDimRotated_get_TextSuffix(This,suffix)	\
    ((This)->lpVtbl -> get_TextSuffix(This,suffix))

#define IZcadDimRotated_put_TextSuffix(This,suffix)	\
    ((This)->lpVtbl -> put_TextSuffix(This,suffix))

#define IZcadDimRotated_get_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> get_ScaleFactor(This,factor))

#define IZcadDimRotated_put_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> put_ScaleFactor(This,factor))

#define IZcadDimRotated_get_VerticalTextPosition(This,type)	\
    ((This)->lpVtbl -> get_VerticalTextPosition(This,type))

#define IZcadDimRotated_put_VerticalTextPosition(This,type)	\
    ((This)->lpVtbl -> put_VerticalTextPosition(This,type))

#define IZcadDimRotated_get_TolerancePrecision(This,precision)	\
    ((This)->lpVtbl -> get_TolerancePrecision(This,precision))

#define IZcadDimRotated_put_TolerancePrecision(This,precision)	\
    ((This)->lpVtbl -> put_TolerancePrecision(This,precision))

#define IZcadDimRotated_get_ToleranceHeightScale(This,scale)	\
    ((This)->lpVtbl -> get_ToleranceHeightScale(This,scale))

#define IZcadDimRotated_put_ToleranceHeightScale(This,scale)	\
    ((This)->lpVtbl -> put_ToleranceHeightScale(This,scale))

#define IZcadDimRotated_get_ToleranceLowerLimit(This,lower)	\
    ((This)->lpVtbl -> get_ToleranceLowerLimit(This,lower))

#define IZcadDimRotated_put_ToleranceLowerLimit(This,lower)	\
    ((This)->lpVtbl -> put_ToleranceLowerLimit(This,lower))

#define IZcadDimRotated_get_TextMovement(This,move)	\
    ((This)->lpVtbl -> get_TextMovement(This,move))

#define IZcadDimRotated_put_TextMovement(This,move)	\
    ((This)->lpVtbl -> put_TextMovement(This,move))

#define IZcadDimRotated_get_ToleranceDisplay(This,method)	\
    ((This)->lpVtbl -> get_ToleranceDisplay(This,method))

#define IZcadDimRotated_put_ToleranceDisplay(This,method)	\
    ((This)->lpVtbl -> put_ToleranceDisplay(This,method))

#define IZcadDimRotated_get_ToleranceJustification(This,method)	\
    ((This)->lpVtbl -> get_ToleranceJustification(This,method))

#define IZcadDimRotated_put_ToleranceJustification(This,method)	\
    ((This)->lpVtbl -> put_ToleranceJustification(This,method))

#define IZcadDimRotated_get_ToleranceUpperLimit(This,upper)	\
    ((This)->lpVtbl -> get_ToleranceUpperLimit(This,upper))

#define IZcadDimRotated_put_ToleranceUpperLimit(This,upper)	\
    ((This)->lpVtbl -> put_ToleranceUpperLimit(This,upper))

#define IZcadDimRotated_get_TextStyle(This,style)	\
    ((This)->lpVtbl -> get_TextStyle(This,style))

#define IZcadDimRotated_put_TextStyle(This,style)	\
    ((This)->lpVtbl -> put_TextStyle(This,style))

#define IZcadDimRotated_get_TextHeight(This,height)	\
    ((This)->lpVtbl -> get_TextHeight(This,height))

#define IZcadDimRotated_put_TextHeight(This,height)	\
    ((This)->lpVtbl -> put_TextHeight(This,height))

#define IZcadDimRotated_get_SuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressLeadingZeros(This,bVal))

#define IZcadDimRotated_put_SuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressLeadingZeros(This,bVal))

#define IZcadDimRotated_get_SuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressTrailingZeros(This,bVal))

#define IZcadDimRotated_put_SuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressTrailingZeros(This,bVal))

#define IZcadDimRotated_get_ToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimRotated_put_ToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimRotated_get_ToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimRotated_put_ToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimRotated_get_TextFill(This,bVal)	\
    ((This)->lpVtbl -> get_TextFill(This,bVal))

#define IZcadDimRotated_put_TextFill(This,bVal)	\
    ((This)->lpVtbl -> put_TextFill(This,bVal))

#define IZcadDimRotated_get_TextFillColor(This,Color)	\
    ((This)->lpVtbl -> get_TextFillColor(This,Color))

#define IZcadDimRotated_put_TextFillColor(This,Color)	\
    ((This)->lpVtbl -> put_TextFillColor(This,Color))

#define IZcadDimRotated_get_DimTxtDirection(This,bVal)	\
    ((This)->lpVtbl -> get_DimTxtDirection(This,bVal))

#define IZcadDimRotated_put_DimTxtDirection(This,bVal)	\
    ((This)->lpVtbl -> put_DimTxtDirection(This,bVal))


#define IZcadDimRotated_get_AltUnits(This,bAlternate)	\
    ((This)->lpVtbl -> get_AltUnits(This,bAlternate))

#define IZcadDimRotated_put_AltUnits(This,bAlternate)	\
    ((This)->lpVtbl -> put_AltUnits(This,bAlternate))

#define IZcadDimRotated_get_AltUnitsPrecision(This,Precision)	\
    ((This)->lpVtbl -> get_AltUnitsPrecision(This,Precision))

#define IZcadDimRotated_put_AltUnitsPrecision(This,Precision)	\
    ((This)->lpVtbl -> put_AltUnitsPrecision(This,Precision))

#define IZcadDimRotated_get_AltUnitsScale(This,Scale)	\
    ((This)->lpVtbl -> get_AltUnitsScale(This,Scale))

#define IZcadDimRotated_put_AltUnitsScale(This,Scale)	\
    ((This)->lpVtbl -> put_AltUnitsScale(This,Scale))

#define IZcadDimRotated_get_AltRoundDistance(This,Distance)	\
    ((This)->lpVtbl -> get_AltRoundDistance(This,Distance))

#define IZcadDimRotated_put_AltRoundDistance(This,Distance)	\
    ((This)->lpVtbl -> put_AltRoundDistance(This,Distance))

#define IZcadDimRotated_get_AltTolerancePrecision(This,Distance)	\
    ((This)->lpVtbl -> get_AltTolerancePrecision(This,Distance))

#define IZcadDimRotated_put_AltTolerancePrecision(This,Distance)	\
    ((This)->lpVtbl -> put_AltTolerancePrecision(This,Distance))

#define IZcadDimRotated_get_AltUnitsFormat(This,Units)	\
    ((This)->lpVtbl -> get_AltUnitsFormat(This,Units))

#define IZcadDimRotated_put_AltUnitsFormat(This,Units)	\
    ((This)->lpVtbl -> put_AltUnitsFormat(This,Units))

#define IZcadDimRotated_get_AltTextPrefix(This,Prefix)	\
    ((This)->lpVtbl -> get_AltTextPrefix(This,Prefix))

#define IZcadDimRotated_put_AltTextPrefix(This,Prefix)	\
    ((This)->lpVtbl -> put_AltTextPrefix(This,Prefix))

#define IZcadDimRotated_get_AltTextSuffix(This,Prefix)	\
    ((This)->lpVtbl -> get_AltTextSuffix(This,Prefix))

#define IZcadDimRotated_put_AltTextSuffix(This,Prefix)	\
    ((This)->lpVtbl -> put_AltTextSuffix(This,Prefix))

#define IZcadDimRotated_get_DimensionLineColor(This,Type)	\
    ((This)->lpVtbl -> get_DimensionLineColor(This,Type))

#define IZcadDimRotated_put_DimensionLineColor(This,Type)	\
    ((This)->lpVtbl -> put_DimensionLineColor(This,Type))

#define IZcadDimRotated_get_ExtensionLineColor(This,Type)	\
    ((This)->lpVtbl -> get_ExtensionLineColor(This,Type))

#define IZcadDimRotated_put_ExtensionLineColor(This,Type)	\
    ((This)->lpVtbl -> put_ExtensionLineColor(This,Type))

#define IZcadDimRotated_get_PrimaryUnitsPrecision(This,Prec)	\
    ((This)->lpVtbl -> get_PrimaryUnitsPrecision(This,Prec))

#define IZcadDimRotated_put_PrimaryUnitsPrecision(This,Prec)	\
    ((This)->lpVtbl -> put_PrimaryUnitsPrecision(This,Prec))

#define IZcadDimRotated_get_DimensionLineExtend(This,extend)	\
    ((This)->lpVtbl -> get_DimensionLineExtend(This,extend))

#define IZcadDimRotated_put_DimensionLineExtend(This,extend)	\
    ((This)->lpVtbl -> put_DimensionLineExtend(This,extend))

#define IZcadDimRotated_get_ExtensionLineExtend(This,extend)	\
    ((This)->lpVtbl -> get_ExtensionLineExtend(This,extend))

#define IZcadDimRotated_put_ExtensionLineExtend(This,extend)	\
    ((This)->lpVtbl -> put_ExtensionLineExtend(This,extend))

#define IZcadDimRotated_get_Fit(This,fittype)	\
    ((This)->lpVtbl -> get_Fit(This,fittype))

#define IZcadDimRotated_put_Fit(This,fittype)	\
    ((This)->lpVtbl -> put_Fit(This,fittype))

#define IZcadDimRotated_get_FractionFormat(This,type)	\
    ((This)->lpVtbl -> get_FractionFormat(This,type))

#define IZcadDimRotated_put_FractionFormat(This,type)	\
    ((This)->lpVtbl -> put_FractionFormat(This,type))

#define IZcadDimRotated_get_HorizontalTextPosition(This,type)	\
    ((This)->lpVtbl -> get_HorizontalTextPosition(This,type))

#define IZcadDimRotated_put_HorizontalTextPosition(This,type)	\
    ((This)->lpVtbl -> put_HorizontalTextPosition(This,type))

#define IZcadDimRotated_get_LinearScaleFactor(This,type)	\
    ((This)->lpVtbl -> get_LinearScaleFactor(This,type))

#define IZcadDimRotated_put_LinearScaleFactor(This,type)	\
    ((This)->lpVtbl -> put_LinearScaleFactor(This,type))

#define IZcadDimRotated_get_UnitsFormat(This,format)	\
    ((This)->lpVtbl -> get_UnitsFormat(This,format))

#define IZcadDimRotated_put_UnitsFormat(This,format)	\
    ((This)->lpVtbl -> put_UnitsFormat(This,format))

#define IZcadDimRotated_get_ExtensionLineWeight(This,lweight)	\
    ((This)->lpVtbl -> get_ExtensionLineWeight(This,lweight))

#define IZcadDimRotated_put_ExtensionLineWeight(This,lweight)	\
    ((This)->lpVtbl -> put_ExtensionLineWeight(This,lweight))

#define IZcadDimRotated_get_RoundDistance(This,Distance)	\
    ((This)->lpVtbl -> get_RoundDistance(This,Distance))

#define IZcadDimRotated_put_RoundDistance(This,Distance)	\
    ((This)->lpVtbl -> put_RoundDistance(This,Distance))

#define IZcadDimRotated_get_DimLine1Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_DimLine1Suppress(This,bSuppress))

#define IZcadDimRotated_put_DimLine1Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_DimLine1Suppress(This,bSuppress))

#define IZcadDimRotated_get_DimLine2Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_DimLine2Suppress(This,bSuppress))

#define IZcadDimRotated_put_DimLine2Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_DimLine2Suppress(This,bSuppress))

#define IZcadDimRotated_get_ExtLine1Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_ExtLine1Suppress(This,bSuppress))

#define IZcadDimRotated_put_ExtLine1Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_ExtLine1Suppress(This,bSuppress))

#define IZcadDimRotated_get_ExtLine2Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_ExtLine2Suppress(This,bSuppress))

#define IZcadDimRotated_put_ExtLine2Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_ExtLine2Suppress(This,bSuppress))

#define IZcadDimRotated_get_DimLineInside(This,bInside)	\
    ((This)->lpVtbl -> get_DimLineInside(This,bInside))

#define IZcadDimRotated_put_DimLineInside(This,bInside)	\
    ((This)->lpVtbl -> put_DimLineInside(This,bInside))

#define IZcadDimRotated_get_TextInsideAlign(This,bInside)	\
    ((This)->lpVtbl -> get_TextInsideAlign(This,bInside))

#define IZcadDimRotated_put_TextInsideAlign(This,bInside)	\
    ((This)->lpVtbl -> put_TextInsideAlign(This,bInside))

#define IZcadDimRotated_get_TextInside(This,bInside)	\
    ((This)->lpVtbl -> get_TextInside(This,bInside))

#define IZcadDimRotated_put_TextInside(This,bInside)	\
    ((This)->lpVtbl -> put_TextInside(This,bInside))

#define IZcadDimRotated_get_ForceLineInside(This,bInside)	\
    ((This)->lpVtbl -> get_ForceLineInside(This,bInside))

#define IZcadDimRotated_put_ForceLineInside(This,bInside)	\
    ((This)->lpVtbl -> put_ForceLineInside(This,bInside))

#define IZcadDimRotated_get_TextOutsideAlign(This,bInside)	\
    ((This)->lpVtbl -> get_TextOutsideAlign(This,bInside))

#define IZcadDimRotated_put_TextOutsideAlign(This,bInside)	\
    ((This)->lpVtbl -> put_TextOutsideAlign(This,bInside))

#define IZcadDimRotated_get_ExtensionLineOffset(This,offset)	\
    ((This)->lpVtbl -> get_ExtensionLineOffset(This,offset))

#define IZcadDimRotated_put_ExtensionLineOffset(This,offset)	\
    ((This)->lpVtbl -> put_ExtensionLineOffset(This,offset))

#define IZcadDimRotated_get_AltSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressLeadingZeros(This,bVal))

#define IZcadDimRotated_put_AltSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressLeadingZeros(This,bVal))

#define IZcadDimRotated_get_AltSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressTrailingZeros(This,bVal))

#define IZcadDimRotated_put_AltSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressTrailingZeros(This,bVal))

#define IZcadDimRotated_get_AltSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressZeroFeet(This,bVal))

#define IZcadDimRotated_put_AltSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressZeroFeet(This,bVal))

#define IZcadDimRotated_get_AltSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressZeroInches(This,bVal))

#define IZcadDimRotated_put_AltSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressZeroInches(This,bVal))

#define IZcadDimRotated_get_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimRotated_put_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimRotated_get_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimRotated_put_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimRotated_get_AltToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimRotated_put_AltToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimRotated_get_AltToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressZeroInches(This,bVal))

#define IZcadDimRotated_put_AltToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressZeroInches(This,bVal))

#define IZcadDimRotated_get_SuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressZeroFeet(This,bVal))

#define IZcadDimRotated_put_SuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressZeroFeet(This,bVal))

#define IZcadDimRotated_get_SuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressZeroInches(This,bVal))

#define IZcadDimRotated_put_SuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressZeroInches(This,bVal))

#define IZcadDimRotated_get_ToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimRotated_put_ToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimRotated_get_ToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressZeroInches(This,bVal))

#define IZcadDimRotated_put_ToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressZeroInches(This,bVal))

#define IZcadDimRotated_get_DimensionLineWeight(This,weight)	\
    ((This)->lpVtbl -> get_DimensionLineWeight(This,weight))

#define IZcadDimRotated_put_DimensionLineWeight(This,weight)	\
    ((This)->lpVtbl -> put_DimensionLineWeight(This,weight))

#define IZcadDimRotated_get_ArrowheadSize(This,size)	\
    ((This)->lpVtbl -> get_ArrowheadSize(This,size))

#define IZcadDimRotated_put_ArrowheadSize(This,size)	\
    ((This)->lpVtbl -> put_ArrowheadSize(This,size))

#define IZcadDimRotated_get_Arrowhead1Type(This,Type)	\
    ((This)->lpVtbl -> get_Arrowhead1Type(This,Type))

#define IZcadDimRotated_put_Arrowhead1Type(This,Type)	\
    ((This)->lpVtbl -> put_Arrowhead1Type(This,Type))

#define IZcadDimRotated_get_Arrowhead2Type(This,Type)	\
    ((This)->lpVtbl -> get_Arrowhead2Type(This,Type))

#define IZcadDimRotated_put_Arrowhead2Type(This,Type)	\
    ((This)->lpVtbl -> put_Arrowhead2Type(This,Type))

#define IZcadDimRotated_get_Measurement(This,bVal)	\
    ((This)->lpVtbl -> get_Measurement(This,bVal))

#define IZcadDimRotated_get_Arrowhead1Block(This,BlockName)	\
    ((This)->lpVtbl -> get_Arrowhead1Block(This,BlockName))

#define IZcadDimRotated_put_Arrowhead1Block(This,BlockName)	\
    ((This)->lpVtbl -> put_Arrowhead1Block(This,BlockName))

#define IZcadDimRotated_get_Arrowhead2Block(This,BlockName)	\
    ((This)->lpVtbl -> get_Arrowhead2Block(This,BlockName))

#define IZcadDimRotated_put_Arrowhead2Block(This,BlockName)	\
    ((This)->lpVtbl -> put_Arrowhead2Block(This,BlockName))

#define IZcadDimRotated_get_DimensionLinetype(This,Linetype)	\
    ((This)->lpVtbl -> get_DimensionLinetype(This,Linetype))

#define IZcadDimRotated_put_DimensionLinetype(This,Linetype)	\
    ((This)->lpVtbl -> put_DimensionLinetype(This,Linetype))

#define IZcadDimRotated_get_ExtLine1Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_ExtLine1Linetype(This,Linetype))

#define IZcadDimRotated_put_ExtLine1Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_ExtLine1Linetype(This,Linetype))

#define IZcadDimRotated_get_ExtLine2Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_ExtLine2Linetype(This,Linetype))

#define IZcadDimRotated_put_ExtLine2Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_ExtLine2Linetype(This,Linetype))

#define IZcadDimRotated_get_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ((This)->lpVtbl -> get_ExtLineFixedLenSuppress(This,bFixedLen))

#define IZcadDimRotated_put_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ((This)->lpVtbl -> put_ExtLineFixedLenSuppress(This,bFixedLen))

#define IZcadDimRotated_get_ExtLineFixedLen(This,FixedLen)	\
    ((This)->lpVtbl -> get_ExtLineFixedLen(This,FixedLen))

#define IZcadDimRotated_put_ExtLineFixedLen(This,FixedLen)	\
    ((This)->lpVtbl -> put_ExtLineFixedLen(This,FixedLen))

#define IZcadDimRotated_get_DimConstrForm(This,bIsDynamic)	\
    ((This)->lpVtbl -> get_DimConstrForm(This,bIsDynamic))

#define IZcadDimRotated_put_DimConstrForm(This,bIsDynamic)	\
    ((This)->lpVtbl -> put_DimConstrForm(This,bIsDynamic))

#define IZcadDimRotated_get_DimConstrReference(This,bIsReference)	\
    ((This)->lpVtbl -> get_DimConstrReference(This,bIsReference))

#define IZcadDimRotated_put_DimConstrReference(This,bIsReference)	\
    ((This)->lpVtbl -> put_DimConstrReference(This,bIsReference))

#define IZcadDimRotated_get_DimConstrName(This,bstrName)	\
    ((This)->lpVtbl -> get_DimConstrName(This,bstrName))

#define IZcadDimRotated_put_DimConstrName(This,bstrName)	\
    ((This)->lpVtbl -> put_DimConstrName(This,bstrName))

#define IZcadDimRotated_get_DimConstrExpression(This,bstrExpression)	\
    ((This)->lpVtbl -> get_DimConstrExpression(This,bstrExpression))

#define IZcadDimRotated_put_DimConstrExpression(This,bstrExpression)	\
    ((This)->lpVtbl -> put_DimConstrExpression(This,bstrExpression))

#define IZcadDimRotated_get_DimConstrValue(This,value)	\
    ((This)->lpVtbl -> get_DimConstrValue(This,value))

#define IZcadDimRotated_put_DimConstrValue(This,value)	\
    ((This)->lpVtbl -> put_DimConstrValue(This,value))

#define IZcadDimRotated_get_DimConstrDesc(This,bstrDescription)	\
    ((This)->lpVtbl -> get_DimConstrDesc(This,bstrDescription))

#define IZcadDimRotated_put_DimConstrDesc(This,bstrDescription)	\
    ((This)->lpVtbl -> put_DimConstrDesc(This,bstrDescription))

#define IZcadDimRotated_get_SubUnitsSuffix(This,suffix)	\
    ((This)->lpVtbl -> get_SubUnitsSuffix(This,suffix))

#define IZcadDimRotated_put_SubUnitsSuffix(This,suffix)	\
    ((This)->lpVtbl -> put_SubUnitsSuffix(This,suffix))

#define IZcadDimRotated_get_SubUnitsFactor(This,factor)	\
    ((This)->lpVtbl -> get_SubUnitsFactor(This,factor))

#define IZcadDimRotated_put_SubUnitsFactor(This,factor)	\
    ((This)->lpVtbl -> put_SubUnitsFactor(This,factor))

#define IZcadDimRotated_get_AltSubUnitsSuffix(This,suffix)	\
    ((This)->lpVtbl -> get_AltSubUnitsSuffix(This,suffix))

#define IZcadDimRotated_put_AltSubUnitsSuffix(This,suffix)	\
    ((This)->lpVtbl -> put_AltSubUnitsSuffix(This,suffix))

#define IZcadDimRotated_get_AltSubUnitsFactor(This,factor)	\
    ((This)->lpVtbl -> get_AltSubUnitsFactor(This,factor))

#define IZcadDimRotated_put_AltSubUnitsFactor(This,factor)	\
    ((This)->lpVtbl -> put_AltSubUnitsFactor(This,factor))

#endif
#endif


 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_AltTextPrefix_Proxy(
    IZcadDimRotated * This,
     BSTR Prefix);

void __RPC_STUB IZcadDimRotated_put_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_AltTextSuffix_Proxy(
    IZcadDimRotated * This,
     BSTR *Prefix);

void __RPC_STUB IZcadDimRotated_get_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_AltTextSuffix_Proxy(
    IZcadDimRotated * This,
     BSTR Prefix);

void __RPC_STUB IZcadDimRotated_put_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_DimensionLineColor_Proxy(
    IZcadDimRotated * This,
     ZCAD_COLOR *Type);

void __RPC_STUB IZcadDimRotated_get_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_DimensionLineColor_Proxy(
    IZcadDimRotated * This,
     ZCAD_COLOR Type);

void __RPC_STUB IZcadDimRotated_put_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_ExtensionLineColor_Proxy(
    IZcadDimRotated * This,
     ZCAD_COLOR *Type);

void __RPC_STUB IZcadDimRotated_get_ExtensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_ExtensionLineColor_Proxy(
    IZcadDimRotated * This,
     ZCAD_COLOR Type);

void __RPC_STUB IZcadDimRotated_put_ExtensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_PrimaryUnitsPrecision_Proxy(
    IZcadDimRotated * This,
     ZcDimPrecision *Prec);

void __RPC_STUB IZcadDimRotated_get_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_PrimaryUnitsPrecision_Proxy(
    IZcadDimRotated * This,
     ZcDimPrecision Prec);

void __RPC_STUB IZcadDimRotated_put_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_DimensionLineExtend_Proxy(
    IZcadDimRotated * This,
     double *extend);

void __RPC_STUB IZcadDimRotated_get_DimensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_DimensionLineExtend_Proxy(
    IZcadDimRotated * This,
     double extend);

void __RPC_STUB IZcadDimRotated_put_DimensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_ExtensionLineExtend_Proxy(
    IZcadDimRotated * This,
     double *extend);

void __RPC_STUB IZcadDimRotated_get_ExtensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_ExtensionLineExtend_Proxy(
    IZcadDimRotated * This,
     double extend);

void __RPC_STUB IZcadDimRotated_put_ExtensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_Fit_Proxy(
    IZcadDimRotated * This,
     ZcDimFit *fittype);

void __RPC_STUB IZcadDimRotated_get_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_Fit_Proxy(
    IZcadDimRotated * This,
     ZcDimFit fittype);

void __RPC_STUB IZcadDimRotated_put_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_FractionFormat_Proxy(
    IZcadDimRotated * This,
     ZcDimFractionType *type);

void __RPC_STUB IZcadDimRotated_get_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_FractionFormat_Proxy(
    IZcadDimRotated * This,
     ZcDimFractionType type);

void __RPC_STUB IZcadDimRotated_put_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_HorizontalTextPosition_Proxy(
    IZcadDimRotated * This,
     ZcDimHorizontalJustification *type);

void __RPC_STUB IZcadDimRotated_get_HorizontalTextPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_HorizontalTextPosition_Proxy(
    IZcadDimRotated * This,
     ZcDimHorizontalJustification type);

void __RPC_STUB IZcadDimRotated_put_HorizontalTextPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_LinearScaleFactor_Proxy(
    IZcadDimRotated * This,
     ZCAD_NOUNITS *type);

void __RPC_STUB IZcadDimRotated_get_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_LinearScaleFactor_Proxy(
    IZcadDimRotated * This,
     ZCAD_NOUNITS type);

void __RPC_STUB IZcadDimRotated_put_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_UnitsFormat_Proxy(
    IZcadDimRotated * This,
     ZcDimLUnits *format);

void __RPC_STUB IZcadDimRotated_get_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_UnitsFormat_Proxy(
    IZcadDimRotated * This,
     ZcDimLUnits format);

void __RPC_STUB IZcadDimRotated_put_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_ExtensionLineWeight_Proxy(
    IZcadDimRotated * This,
     ZCAD_LWEIGHT *lweight);

void __RPC_STUB IZcadDimRotated_get_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_ExtensionLineWeight_Proxy(
    IZcadDimRotated * This,
     ZCAD_LWEIGHT lweight);

void __RPC_STUB IZcadDimRotated_put_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_RoundDistance_Proxy(
    IZcadDimRotated * This,
     double *Distance);

void __RPC_STUB IZcadDimRotated_get_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_RoundDistance_Proxy(
    IZcadDimRotated * This,
     double Distance);

void __RPC_STUB IZcadDimRotated_put_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_DimLine1Suppress_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDimRotated_get_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_DimLine1Suppress_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDimRotated_put_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_DimLine2Suppress_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDimRotated_get_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_DimLine2Suppress_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDimRotated_put_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_ExtLine1Suppress_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDimRotated_get_ExtLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_ExtLine1Suppress_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDimRotated_put_ExtLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_ExtLine2Suppress_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDimRotated_get_ExtLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_ExtLine2Suppress_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDimRotated_put_ExtLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_DimLineInside_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimRotated_get_DimLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_DimLineInside_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimRotated_put_DimLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_TextInsideAlign_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimRotated_get_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_TextInsideAlign_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimRotated_put_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_TextInside_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimRotated_get_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_TextInside_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimRotated_put_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_ForceLineInside_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimRotated_get_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_ForceLineInside_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimRotated_put_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_TextOutsideAlign_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimRotated_get_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_TextOutsideAlign_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimRotated_put_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_ExtensionLineOffset_Proxy(
    IZcadDimRotated * This,
     double *offset);

void __RPC_STUB IZcadDimRotated_get_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_ExtensionLineOffset_Proxy(
    IZcadDimRotated * This,
     double offset);

void __RPC_STUB IZcadDimRotated_put_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_AltSuppressLeadingZeros_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRotated_get_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_AltSuppressLeadingZeros_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRotated_put_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_AltSuppressTrailingZeros_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRotated_get_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_AltSuppressTrailingZeros_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRotated_put_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_AltSuppressZeroFeet_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRotated_get_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_AltSuppressZeroFeet_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRotated_put_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_AltSuppressZeroInches_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRotated_get_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_AltSuppressZeroInches_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRotated_put_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_AltToleranceSuppressLeadingZeros_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRotated_get_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_AltToleranceSuppressLeadingZeros_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRotated_put_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_AltToleranceSuppressTrailingZeros_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRotated_get_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_AltToleranceSuppressTrailingZeros_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRotated_put_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_AltToleranceSuppressZeroFeet_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRotated_get_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_AltToleranceSuppressZeroFeet_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRotated_put_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_AltToleranceSuppressZeroInches_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRotated_get_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_AltToleranceSuppressZeroInches_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRotated_put_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_SuppressZeroFeet_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRotated_get_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_SuppressZeroFeet_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRotated_put_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_SuppressZeroInches_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRotated_get_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_SuppressZeroInches_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRotated_put_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_ToleranceSuppressZeroFeet_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRotated_get_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_ToleranceSuppressZeroFeet_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRotated_put_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_ToleranceSuppressZeroInches_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRotated_get_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_ToleranceSuppressZeroInches_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRotated_put_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_DimensionLineWeight_Proxy(
    IZcadDimRotated * This,
     ZCAD_LWEIGHT *weight);

void __RPC_STUB IZcadDimRotated_get_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_DimensionLineWeight_Proxy(
    IZcadDimRotated * This,
     ZCAD_LWEIGHT weight);

void __RPC_STUB IZcadDimRotated_put_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_ArrowheadSize_Proxy(
    IZcadDimRotated * This,
     double *size);

void __RPC_STUB IZcadDimRotated_get_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_ArrowheadSize_Proxy(
    IZcadDimRotated * This,
     double size);

void __RPC_STUB IZcadDimRotated_put_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_Arrowhead1Type_Proxy(
    IZcadDimRotated * This,
     ZcDimArrowheadType *Type);

void __RPC_STUB IZcadDimRotated_get_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_Arrowhead1Type_Proxy(
    IZcadDimRotated * This,
     ZcDimArrowheadType Type);

void __RPC_STUB IZcadDimRotated_put_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_Arrowhead2Type_Proxy(
    IZcadDimRotated * This,
     ZcDimArrowheadType *Type);

void __RPC_STUB IZcadDimRotated_get_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_Arrowhead2Type_Proxy(
    IZcadDimRotated * This,
     ZcDimArrowheadType Type);

void __RPC_STUB IZcadDimRotated_put_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_Measurement_Proxy(
    IZcadDimRotated * This,
     double *bVal);

void __RPC_STUB IZcadDimRotated_get_Measurement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_Arrowhead1Block_Proxy(
    IZcadDimRotated * This,
     BSTR *BlockName);

void __RPC_STUB IZcadDimRotated_get_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_Arrowhead1Block_Proxy(
    IZcadDimRotated * This,
     BSTR BlockName);

void __RPC_STUB IZcadDimRotated_put_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_Arrowhead2Block_Proxy(
    IZcadDimRotated * This,
     BSTR *BlockName);

void __RPC_STUB IZcadDimRotated_get_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_Arrowhead2Block_Proxy(
    IZcadDimRotated * This,
     BSTR BlockName);

void __RPC_STUB IZcadDimRotated_put_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_DimensionLinetype_Proxy(
    IZcadDimRotated * This,
     BSTR *Linetype);

void __RPC_STUB IZcadDimRotated_get_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_DimensionLinetype_Proxy(
    IZcadDimRotated * This,
     BSTR Linetype);

void __RPC_STUB IZcadDimRotated_put_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_ExtLine1Linetype_Proxy(
    IZcadDimRotated * This,
     BSTR *Linetype);

void __RPC_STUB IZcadDimRotated_get_ExtLine1Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_ExtLine1Linetype_Proxy(
    IZcadDimRotated * This,
     BSTR Linetype);

void __RPC_STUB IZcadDimRotated_put_ExtLine1Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_ExtLine2Linetype_Proxy(
    IZcadDimRotated * This,
     BSTR *Linetype);

void __RPC_STUB IZcadDimRotated_get_ExtLine2Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_ExtLine2Linetype_Proxy(
    IZcadDimRotated * This,
     BSTR Linetype);

void __RPC_STUB IZcadDimRotated_put_ExtLine2Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_ExtLineFixedLenSuppress_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bFixedLen);

void __RPC_STUB IZcadDimRotated_get_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_ExtLineFixedLenSuppress_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bFixedLen);

void __RPC_STUB IZcadDimRotated_put_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_ExtLineFixedLen_Proxy(
    IZcadDimRotated * This,
     double *FixedLen);

void __RPC_STUB IZcadDimRotated_get_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_ExtLineFixedLen_Proxy(
    IZcadDimRotated * This,
     double FixedLen);

void __RPC_STUB IZcadDimRotated_put_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_DimConstrForm_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bIsDynamic);

void __RPC_STUB IZcadDimRotated_get_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_DimConstrForm_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bIsDynamic);

void __RPC_STUB IZcadDimRotated_put_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_DimConstrReference_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL *bIsReference);

void __RPC_STUB IZcadDimRotated_get_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_DimConstrReference_Proxy(
    IZcadDimRotated * This,
     VARIANT_BOOL bIsReference);

void __RPC_STUB IZcadDimRotated_put_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_DimConstrName_Proxy(
    IZcadDimRotated * This,
     BSTR *bstrName);

void __RPC_STUB IZcadDimRotated_get_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_DimConstrName_Proxy(
    IZcadDimRotated * This,
     BSTR bstrName);

void __RPC_STUB IZcadDimRotated_put_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_DimConstrExpression_Proxy(
    IZcadDimRotated * This,
     BSTR *bstrExpression);

void __RPC_STUB IZcadDimRotated_get_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_DimConstrExpression_Proxy(
    IZcadDimRotated * This,
     BSTR bstrExpression);

void __RPC_STUB IZcadDimRotated_put_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_DimConstrValue_Proxy(
    IZcadDimRotated * This,
     BSTR *value);

void __RPC_STUB IZcadDimRotated_get_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_DimConstrValue_Proxy(
    IZcadDimRotated * This,
     BSTR value);

void __RPC_STUB IZcadDimRotated_put_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_DimConstrDesc_Proxy(
    IZcadDimRotated * This,
     BSTR *bstrDescription);

void __RPC_STUB IZcadDimRotated_get_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_DimConstrDesc_Proxy(
    IZcadDimRotated * This,
     BSTR bstrDescription);

void __RPC_STUB IZcadDimRotated_put_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_SubUnitsSuffix_Proxy(
    IZcadDimRotated * This,
     BSTR *suffix);

void __RPC_STUB IZcadDimRotated_get_SubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_SubUnitsSuffix_Proxy(
    IZcadDimRotated * This,
     BSTR suffix);

void __RPC_STUB IZcadDimRotated_put_SubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_SubUnitsFactor_Proxy(
    IZcadDimRotated * This,
     double *factor);

void __RPC_STUB IZcadDimRotated_get_SubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_SubUnitsFactor_Proxy(
    IZcadDimRotated * This,
     double factor);

void __RPC_STUB IZcadDimRotated_put_SubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_AltSubUnitsSuffix_Proxy(
    IZcadDimRotated * This,
     BSTR *suffix);

void __RPC_STUB IZcadDimRotated_get_AltSubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_AltSubUnitsSuffix_Proxy(
    IZcadDimRotated * This,
     BSTR suffix);

void __RPC_STUB IZcadDimRotated_put_AltSubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_get_AltSubUnitsFactor_Proxy(
    IZcadDimRotated * This,
     double *factor);

void __RPC_STUB IZcadDimRotated_get_AltSubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRotated_put_AltSubUnitsFactor_Proxy(
    IZcadDimRotated * This,
     double factor);

void __RPC_STUB IZcadDimRotated_put_AltSubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


#endif

DEFINE_GUID(CLSID_ZcadDimRotated,0xEC923179,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923179-5A17-11E7-B72E-BC5FF42AC839")
ZcadDimRotated;
#endif

#ifndef __IZcadDim3PointAngular_INTERFACE_DEFINED__
#define __IZcadDim3PointAngular_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadDim3PointAngular,0xEC923174,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923174-5A17-11E7-B72E-BC5FF42AC839")
    IZcadDim3PointAngular : public IZcadDimension
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine1EndPoint(
             VARIANT *xLine1Point) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine1EndPoint(
             VARIANT xLine1Point) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine2EndPoint(
             VARIANT *xLine2Point) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine2EndPoint(
             VARIANT xLine2Point) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AngleVertex(
             VARIANT *AngleVertex) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AngleVertex(
             VARIANT AngleVertex) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextPrecision(
             ZcDimPrecision *AngleVertex) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextPrecision(
             ZcDimPrecision AngleVertex) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AngleFormat(
             ZcAngleUnits *format) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AngleFormat(
             ZcAngleUnits format) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLineColor(
             ZCAD_COLOR *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLineColor(
             ZCAD_COLOR Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineColor(
             ZCAD_COLOR *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineColor(
             ZCAD_COLOR Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineExtend(
             double *extend) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineExtend(
             double extend) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Fit(
             ZcDimFit *fittype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Fit(
             ZcDimFit fittype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_HorizontalTextPosition(
             ZcDimHorizontalJustification *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_HorizontalTextPosition(
             ZcDimHorizontalJustification type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineWeight(
             ZCAD_LWEIGHT *lweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineWeight(
             ZCAD_LWEIGHT lweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimLine1Suppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimLine1Suppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimLine2Suppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimLine2Suppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine1Suppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine1Suppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine2Suppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine2Suppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimLineInside(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimLineInside(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextInsideAlign(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextInsideAlign(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextInside(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextInside(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ForceLineInside(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ForceLineInside(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextOutsideAlign(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextOutsideAlign(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineOffset(
             double *offset) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineOffset(
             double offset) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLineWeight(
             ZCAD_LWEIGHT *weight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLineWeight(
             ZCAD_LWEIGHT weight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArrowheadSize(
             double *size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArrowheadSize(
             double size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead1Type(
             ZcDimArrowheadType *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead1Type(
             ZcDimArrowheadType Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead2Type(
             ZcDimArrowheadType *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead2Type(
             ZcDimArrowheadType Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Measurement(
             ZCAD_ANGLE *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead1Block(
             BSTR *BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead1Block(
             BSTR BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead2Block(
             BSTR *BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead2Block(
             BSTR BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLinetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLinetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine1Linetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine1Linetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine2Linetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine2Linetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLineFixedLenSuppress(
             VARIANT_BOOL *bFixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLineFixedLenSuppress(
             VARIANT_BOOL bFixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLineFixedLen(
             double *FixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLineFixedLen(
             double FixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrForm(
             VARIANT_BOOL *bIsDynamic) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrForm(
             VARIANT_BOOL bIsDynamic) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrReference(
             VARIANT_BOOL *bIsReference) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrReference(
             VARIANT_BOOL bIsReference) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrName(
             BSTR *bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrName(
             BSTR bstrName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrExpression(
             BSTR *bstrExpression) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrExpression(
             BSTR bstrExpression) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrValue(
             BSTR *value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrValue(
             BSTR value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimConstrDesc(
             BSTR *bstrDescription) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimConstrDesc(
             BSTR bstrDescription) = 0;

    };

#else

    typedef struct IZcadDim3PointAngularVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadDim3PointAngular * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadDim3PointAngular * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadDim3PointAngular * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadDim3PointAngular * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadDim3PointAngular * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadDim3PointAngular * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadDim3PointAngular * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadDim3PointAngular * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadDim3PointAngular * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadDim3PointAngular * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadDim3PointAngular * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadDim3PointAngular * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadDim3PointAngular * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadDim3PointAngular * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadDim3PointAngular * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadDim3PointAngular * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadDim3PointAngular * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadDim3PointAngular * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadDim3PointAngular * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadDim3PointAngular * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadDim3PointAngular * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadDim3PointAngular * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadDim3PointAngular * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadDim3PointAngular * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadDim3PointAngular * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadDim3PointAngular * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadDim3PointAngular * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadDim3PointAngular * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadDim3PointAngular * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadDim3PointAngular * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadDim3PointAngular * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadDim3PointAngular * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadDim3PointAngular * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadDim3PointAngular * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadDim3PointAngular * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadDim3PointAngular * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadDim3PointAngular * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadDim3PointAngular * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadDim3PointAngular * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadDim3PointAngular * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadDim3PointAngular * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadDim3PointAngular * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadDim3PointAngular * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadDim3PointAngular * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadDim3PointAngular * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadDim3PointAngular * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadDim3PointAngular * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadDim3PointAngular * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadDim3PointAngular * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadDim3PointAngular * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadDim3PointAngular * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadDim3PointAngular * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadDim3PointAngular * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadDim3PointAngular * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadDim3PointAngular * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_Rotation )(
            IZcadDim3PointAngular * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_Rotation )(
            IZcadDim3PointAngular * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextPosition )(
            IZcadDim3PointAngular * This,
             VARIANT *textPos);

         HRESULT ( STDMETHODCALLTYPE *put_TextPosition )(
            IZcadDim3PointAngular * This,
             VARIANT textPos);

         HRESULT ( STDMETHODCALLTYPE *get_TextRotation )(
            IZcadDim3PointAngular * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_TextRotation )(
            IZcadDim3PointAngular * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextOverride )(
            IZcadDim3PointAngular * This,
             BSTR *bstrText);

         HRESULT ( STDMETHODCALLTYPE *put_TextOverride )(
            IZcadDim3PointAngular * This,
             BSTR bstrText);

         HRESULT ( STDMETHODCALLTYPE *get_StyleName )(
            IZcadDim3PointAngular * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_StyleName )(
            IZcadDim3PointAngular * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_TextColor )(
            IZcadDim3PointAngular * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_TextColor )(
            IZcadDim3PointAngular * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_DecimalSeparator )(
            IZcadDim3PointAngular * This,
             BSTR *character);

         HRESULT ( STDMETHODCALLTYPE *put_DecimalSeparator )(
            IZcadDim3PointAngular * This,
             BSTR character);

         HRESULT ( STDMETHODCALLTYPE *get_TextGap )(
            IZcadDim3PointAngular * This,
             double *offset);

         HRESULT ( STDMETHODCALLTYPE *put_TextGap )(
            IZcadDim3PointAngular * This,
             double offset);

         HRESULT ( STDMETHODCALLTYPE *get_TextPrefix )(
            IZcadDim3PointAngular * This,
             BSTR *prefix);

         HRESULT ( STDMETHODCALLTYPE *put_TextPrefix )(
            IZcadDim3PointAngular * This,
             BSTR prefix);

         HRESULT ( STDMETHODCALLTYPE *get_TextSuffix )(
            IZcadDim3PointAngular * This,
             BSTR *suffix);

         HRESULT ( STDMETHODCALLTYPE *put_TextSuffix )(
            IZcadDim3PointAngular * This,
             BSTR suffix);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )(
            IZcadDim3PointAngular * This,
             ZCAD_NOUNITS *factor);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )(
            IZcadDim3PointAngular * This,
             ZCAD_NOUNITS factor);

         HRESULT ( STDMETHODCALLTYPE *get_VerticalTextPosition )(
            IZcadDim3PointAngular * This,
             ZcDimVerticalJustification *type);

         HRESULT ( STDMETHODCALLTYPE *put_VerticalTextPosition )(
            IZcadDim3PointAngular * This,
             ZcDimVerticalJustification type);

         HRESULT ( STDMETHODCALLTYPE *get_TolerancePrecision )(
            IZcadDim3PointAngular * This,
             ZcDimPrecision *precision);

         HRESULT ( STDMETHODCALLTYPE *put_TolerancePrecision )(
            IZcadDim3PointAngular * This,
             ZcDimPrecision precision);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceHeightScale )(
            IZcadDim3PointAngular * This,
             ZCAD_NOUNITS *scale);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceHeightScale )(
            IZcadDim3PointAngular * This,
             ZCAD_NOUNITS scale);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceLowerLimit )(
            IZcadDim3PointAngular * This,
             double *lower);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceLowerLimit )(
            IZcadDim3PointAngular * This,
             double lower);

         HRESULT ( STDMETHODCALLTYPE *get_TextMovement )(
            IZcadDim3PointAngular * This,
             ZcDimTextMovement *move);

         HRESULT ( STDMETHODCALLTYPE *put_TextMovement )(
            IZcadDim3PointAngular * This,
             ZcDimTextMovement move);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceDisplay )(
            IZcadDim3PointAngular * This,
             ZcDimToleranceMethod *method);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceDisplay )(
            IZcadDim3PointAngular * This,
             ZcDimToleranceMethod method);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceJustification )(
            IZcadDim3PointAngular * This,
             ZcDimToleranceJustify *method);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceJustification )(
            IZcadDim3PointAngular * This,
             ZcDimToleranceJustify method);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceUpperLimit )(
            IZcadDim3PointAngular * This,
             double *upper);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceUpperLimit )(
            IZcadDim3PointAngular * This,
             double upper);

         HRESULT ( STDMETHODCALLTYPE *get_TextStyle )(
            IZcadDim3PointAngular * This,
             BSTR *style);

         HRESULT ( STDMETHODCALLTYPE *put_TextStyle )(
            IZcadDim3PointAngular * This,
             BSTR style);

         HRESULT ( STDMETHODCALLTYPE *get_TextHeight )(
            IZcadDim3PointAngular * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_TextHeight )(
            IZcadDim3PointAngular * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressLeadingZeros )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressLeadingZeros )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressTrailingZeros )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressTrailingZeros )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressLeadingZeros )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressLeadingZeros )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressTrailingZeros )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressTrailingZeros )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_TextFill )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_TextFill )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_TextFillColor )(
            IZcadDim3PointAngular * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_TextFillColor )(
            IZcadDim3PointAngular * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_DimTxtDirection )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_DimTxtDirection )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine1EndPoint )(
            IZcadDim3PointAngular * This,
             VARIANT *xLine1Point);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine1EndPoint )(
            IZcadDim3PointAngular * This,
             VARIANT xLine1Point);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine2EndPoint )(
            IZcadDim3PointAngular * This,
             VARIANT *xLine2Point);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine2EndPoint )(
            IZcadDim3PointAngular * This,
             VARIANT xLine2Point);

         HRESULT ( STDMETHODCALLTYPE *get_AngleVertex )(
            IZcadDim3PointAngular * This,
             VARIANT *AngleVertex);

         HRESULT ( STDMETHODCALLTYPE *put_AngleVertex )(
            IZcadDim3PointAngular * This,
             VARIANT AngleVertex);

         HRESULT ( STDMETHODCALLTYPE *get_TextPrecision )(
            IZcadDim3PointAngular * This,
             ZcDimPrecision *AngleVertex);

         HRESULT ( STDMETHODCALLTYPE *put_TextPrecision )(
            IZcadDim3PointAngular * This,
             ZcDimPrecision AngleVertex);

         HRESULT ( STDMETHODCALLTYPE *get_AngleFormat )(
            IZcadDim3PointAngular * This,
             ZcAngleUnits *format);

         HRESULT ( STDMETHODCALLTYPE *put_AngleFormat )(
            IZcadDim3PointAngular * This,
             ZcAngleUnits format);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLineColor )(
            IZcadDim3PointAngular * This,
             ZCAD_COLOR *Type);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLineColor )(
            IZcadDim3PointAngular * This,
             ZCAD_COLOR Type);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineColor )(
            IZcadDim3PointAngular * This,
             ZCAD_COLOR *Type);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineColor )(
            IZcadDim3PointAngular * This,
             ZCAD_COLOR Type);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineExtend )(
            IZcadDim3PointAngular * This,
             double *extend);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineExtend )(
            IZcadDim3PointAngular * This,
             double extend);

         HRESULT ( STDMETHODCALLTYPE *get_Fit )(
            IZcadDim3PointAngular * This,
             ZcDimFit *fittype);

         HRESULT ( STDMETHODCALLTYPE *put_Fit )(
            IZcadDim3PointAngular * This,
             ZcDimFit fittype);

         HRESULT ( STDMETHODCALLTYPE *get_HorizontalTextPosition )(
            IZcadDim3PointAngular * This,
             ZcDimHorizontalJustification *type);

         HRESULT ( STDMETHODCALLTYPE *put_HorizontalTextPosition )(
            IZcadDim3PointAngular * This,
             ZcDimHorizontalJustification type);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineWeight )(
            IZcadDim3PointAngular * This,
             ZCAD_LWEIGHT *lweight);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineWeight )(
            IZcadDim3PointAngular * This,
             ZCAD_LWEIGHT lweight);

         HRESULT ( STDMETHODCALLTYPE *get_DimLine1Suppress )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_DimLine1Suppress )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_DimLine2Suppress )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_DimLine2Suppress )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Suppress )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Suppress )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Suppress )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Suppress )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_DimLineInside )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_DimLineInside )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_TextInsideAlign )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextInsideAlign )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_TextInside )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextInside )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_ForceLineInside )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_ForceLineInside )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_TextOutsideAlign )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextOutsideAlign )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineOffset )(
            IZcadDim3PointAngular * This,
             double *offset);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineOffset )(
            IZcadDim3PointAngular * This,
             double offset);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLineWeight )(
            IZcadDim3PointAngular * This,
             ZCAD_LWEIGHT *weight);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLineWeight )(
            IZcadDim3PointAngular * This,
             ZCAD_LWEIGHT weight);

         HRESULT ( STDMETHODCALLTYPE *get_ArrowheadSize )(
            IZcadDim3PointAngular * This,
             double *size);

         HRESULT ( STDMETHODCALLTYPE *put_ArrowheadSize )(
            IZcadDim3PointAngular * This,
             double size);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Type )(
            IZcadDim3PointAngular * This,
             ZcDimArrowheadType *Type);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Type )(
            IZcadDim3PointAngular * This,
             ZcDimArrowheadType Type);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Type )(
            IZcadDim3PointAngular * This,
             ZcDimArrowheadType *Type);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Type )(
            IZcadDim3PointAngular * This,
             ZcDimArrowheadType Type);

         HRESULT ( STDMETHODCALLTYPE *get_Measurement )(
            IZcadDim3PointAngular * This,
             ZCAD_ANGLE *bVal);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Block )(
            IZcadDim3PointAngular * This,
             BSTR *BlockName);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Block )(
            IZcadDim3PointAngular * This,
             BSTR BlockName);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Block )(
            IZcadDim3PointAngular * This,
             BSTR *BlockName);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Block )(
            IZcadDim3PointAngular * This,
             BSTR BlockName);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLinetype )(
            IZcadDim3PointAngular * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLinetype )(
            IZcadDim3PointAngular * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Linetype )(
            IZcadDim3PointAngular * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Linetype )(
            IZcadDim3PointAngular * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Linetype )(
            IZcadDim3PointAngular * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Linetype )(
            IZcadDim3PointAngular * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLenSuppress )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL *bFixedLen);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLenSuppress )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL bFixedLen);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLen )(
            IZcadDim3PointAngular * This,
             double *FixedLen);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLen )(
            IZcadDim3PointAngular * This,
             double FixedLen);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrForm )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL *bIsDynamic);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrForm )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL bIsDynamic);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrReference )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL *bIsReference);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrReference )(
            IZcadDim3PointAngular * This,
             VARIANT_BOOL bIsReference);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrName )(
            IZcadDim3PointAngular * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrName )(
            IZcadDim3PointAngular * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrExpression )(
            IZcadDim3PointAngular * This,
             BSTR *bstrExpression);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrExpression )(
            IZcadDim3PointAngular * This,
             BSTR bstrExpression);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrValue )(
            IZcadDim3PointAngular * This,
             BSTR *value);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrValue )(
            IZcadDim3PointAngular * This,
             BSTR value);

         HRESULT ( STDMETHODCALLTYPE *get_DimConstrDesc )(
            IZcadDim3PointAngular * This,
             BSTR *bstrDescription);

         HRESULT ( STDMETHODCALLTYPE *put_DimConstrDesc )(
            IZcadDim3PointAngular * This,
             BSTR bstrDescription);

        END_INTERFACE
    } IZcadDim3PointAngularVtbl;

    interface IZcadDim3PointAngular
    {
        CONST_VTBL struct IZcadDim3PointAngularVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadDim3PointAngular_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadDim3PointAngular_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadDim3PointAngular_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadDim3PointAngular_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadDim3PointAngular_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadDim3PointAngular_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadDim3PointAngular_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadDim3PointAngular_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadDim3PointAngular_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadDim3PointAngular_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadDim3PointAngular_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadDim3PointAngular_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadDim3PointAngular_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadDim3PointAngular_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadDim3PointAngular_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadDim3PointAngular_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadDim3PointAngular_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadDim3PointAngular_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadDim3PointAngular_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadDim3PointAngular_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadDim3PointAngular_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadDim3PointAngular_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadDim3PointAngular_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadDim3PointAngular_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadDim3PointAngular_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadDim3PointAngular_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadDim3PointAngular_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadDim3PointAngular_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadDim3PointAngular_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadDim3PointAngular_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadDim3PointAngular_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadDim3PointAngular_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadDim3PointAngular_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadDim3PointAngular_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadDim3PointAngular_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadDim3PointAngular_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadDim3PointAngular_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadDim3PointAngular_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadDim3PointAngular_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadDim3PointAngular_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadDim3PointAngular_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadDim3PointAngular_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadDim3PointAngular_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadDim3PointAngular_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadDim3PointAngular_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadDim3PointAngular_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadDim3PointAngular_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadDim3PointAngular_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadDim3PointAngular_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadDim3PointAngular_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadDim3PointAngular_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadDim3PointAngular_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadDim3PointAngular_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadDim3PointAngular_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadDim3PointAngular_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadDim3PointAngular_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadDim3PointAngular_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadDim3PointAngular_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadDim3PointAngular_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadDim3PointAngular_get_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_Rotation(This,rotAngle))

#define IZcadDim3PointAngular_put_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_Rotation(This,rotAngle))

#define IZcadDim3PointAngular_get_TextPosition(This,textPos)	\
    ((This)->lpVtbl -> get_TextPosition(This,textPos))

#define IZcadDim3PointAngular_put_TextPosition(This,textPos)	\
    ((This)->lpVtbl -> put_TextPosition(This,textPos))

#define IZcadDim3PointAngular_get_TextRotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_TextRotation(This,rotAngle))

#define IZcadDim3PointAngular_put_TextRotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_TextRotation(This,rotAngle))

#define IZcadDim3PointAngular_get_TextOverride(This,bstrText)	\
    ((This)->lpVtbl -> get_TextOverride(This,bstrText))

#define IZcadDim3PointAngular_put_TextOverride(This,bstrText)	\
    ((This)->lpVtbl -> put_TextOverride(This,bstrText))

#define IZcadDim3PointAngular_get_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> get_StyleName(This,bstrName))

#define IZcadDim3PointAngular_put_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> put_StyleName(This,bstrName))

#define IZcadDim3PointAngular_get_TextColor(This,Color)	\
    ((This)->lpVtbl -> get_TextColor(This,Color))

#define IZcadDim3PointAngular_put_TextColor(This,Color)	\
    ((This)->lpVtbl -> put_TextColor(This,Color))

#define IZcadDim3PointAngular_get_DecimalSeparator(This,character)	\
    ((This)->lpVtbl -> get_DecimalSeparator(This,character))

#define IZcadDim3PointAngular_put_DecimalSeparator(This,character)	\
    ((This)->lpVtbl -> put_DecimalSeparator(This,character))

#define IZcadDim3PointAngular_get_TextGap(This,offset)	\
    ((This)->lpVtbl -> get_TextGap(This,offset))

#define IZcadDim3PointAngular_put_TextGap(This,offset)	\
    ((This)->lpVtbl -> put_TextGap(This,offset))

#define IZcadDim3PointAngular_get_TextPrefix(This,prefix)	\
    ((This)->lpVtbl -> get_TextPrefix(This,prefix))

#define IZcadDim3PointAngular_put_TextPrefix(This,prefix)	\
    ((This)->lpVtbl -> put_TextPrefix(This,prefix))

#define IZcadDim3PointAngular_get_TextSuffix(This,suffix)	\
    ((This)->lpVtbl -> get_TextSuffix(This,suffix))

#define IZcadDim3PointAngular_put_TextSuffix(This,suffix)	\
    ((This)->lpVtbl -> put_TextSuffix(This,suffix))

#define IZcadDim3PointAngular_get_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> get_ScaleFactor(This,factor))

#define IZcadDim3PointAngular_put_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> put_ScaleFactor(This,factor))

#define IZcadDim3PointAngular_get_VerticalTextPosition(This,type)	\
    ((This)->lpVtbl -> get_VerticalTextPosition(This,type))

#define IZcadDim3PointAngular_put_VerticalTextPosition(This,type)	\
    ((This)->lpVtbl -> put_VerticalTextPosition(This,type))

#define IZcadDim3PointAngular_get_TolerancePrecision(This,precision)	\
    ((This)->lpVtbl -> get_TolerancePrecision(This,precision))

#define IZcadDim3PointAngular_put_TolerancePrecision(This,precision)	\
    ((This)->lpVtbl -> put_TolerancePrecision(This,precision))

#define IZcadDim3PointAngular_get_ToleranceHeightScale(This,scale)	\
    ((This)->lpVtbl -> get_ToleranceHeightScale(This,scale))

#define IZcadDim3PointAngular_put_ToleranceHeightScale(This,scale)	\
    ((This)->lpVtbl -> put_ToleranceHeightScale(This,scale))

#define IZcadDim3PointAngular_get_ToleranceLowerLimit(This,lower)	\
    ((This)->lpVtbl -> get_ToleranceLowerLimit(This,lower))

#define IZcadDim3PointAngular_put_ToleranceLowerLimit(This,lower)	\
    ((This)->lpVtbl -> put_ToleranceLowerLimit(This,lower))

#define IZcadDim3PointAngular_get_TextMovement(This,move)	\
    ((This)->lpVtbl -> get_TextMovement(This,move))

#define IZcadDim3PointAngular_put_TextMovement(This,move)	\
    ((This)->lpVtbl -> put_TextMovement(This,move))

#define IZcadDim3PointAngular_get_ToleranceDisplay(This,method)	\
    ((This)->lpVtbl -> get_ToleranceDisplay(This,method))

#define IZcadDim3PointAngular_put_ToleranceDisplay(This,method)	\
    ((This)->lpVtbl -> put_ToleranceDisplay(This,method))

#define IZcadDim3PointAngular_get_ToleranceJustification(This,method)	\
    ((This)->lpVtbl -> get_ToleranceJustification(This,method))

#define IZcadDim3PointAngular_put_ToleranceJustification(This,method)	\
    ((This)->lpVtbl -> put_ToleranceJustification(This,method))

#define IZcadDim3PointAngular_get_ToleranceUpperLimit(This,upper)	\
    ((This)->lpVtbl -> get_ToleranceUpperLimit(This,upper))

#define IZcadDim3PointAngular_put_ToleranceUpperLimit(This,upper)	\
    ((This)->lpVtbl -> put_ToleranceUpperLimit(This,upper))

#define IZcadDim3PointAngular_get_TextStyle(This,style)	\
    ((This)->lpVtbl -> get_TextStyle(This,style))

#define IZcadDim3PointAngular_put_TextStyle(This,style)	\
    ((This)->lpVtbl -> put_TextStyle(This,style))

#define IZcadDim3PointAngular_get_TextHeight(This,height)	\
    ((This)->lpVtbl -> get_TextHeight(This,height))

#define IZcadDim3PointAngular_put_TextHeight(This,height)	\
    ((This)->lpVtbl -> put_TextHeight(This,height))

#define IZcadDim3PointAngular_get_SuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressLeadingZeros(This,bVal))

#define IZcadDim3PointAngular_put_SuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressLeadingZeros(This,bVal))

#define IZcadDim3PointAngular_get_SuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressTrailingZeros(This,bVal))

#define IZcadDim3PointAngular_put_SuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressTrailingZeros(This,bVal))

#define IZcadDim3PointAngular_get_ToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDim3PointAngular_put_ToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDim3PointAngular_get_ToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDim3PointAngular_put_ToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDim3PointAngular_get_TextFill(This,bVal)	\
    ((This)->lpVtbl -> get_TextFill(This,bVal))

#define IZcadDim3PointAngular_put_TextFill(This,bVal)	\
    ((This)->lpVtbl -> put_TextFill(This,bVal))

#define IZcadDim3PointAngular_get_TextFillColor(This,Color)	\
    ((This)->lpVtbl -> get_TextFillColor(This,Color))

#define IZcadDim3PointAngular_put_TextFillColor(This,Color)	\
    ((This)->lpVtbl -> put_TextFillColor(This,Color))

#define IZcadDim3PointAngular_get_DimTxtDirection(This,bVal)	\
    ((This)->lpVtbl -> get_DimTxtDirection(This,bVal))

#define IZcadDim3PointAngular_put_DimTxtDirection(This,bVal)	\
    ((This)->lpVtbl -> put_DimTxtDirection(This,bVal))


#define IZcadDim3PointAngular_get_ExtLine1EndPoint(This,xLine1Point)	\
    ((This)->lpVtbl -> get_ExtLine1EndPoint(This,xLine1Point))

#define IZcadDim3PointAngular_put_ExtLine1EndPoint(This,xLine1Point)	\
    ((This)->lpVtbl -> put_ExtLine1EndPoint(This,xLine1Point))

#define IZcadDim3PointAngular_get_ExtLine2EndPoint(This,xLine2Point)	\
    ((This)->lpVtbl -> get_ExtLine2EndPoint(This,xLine2Point))

#define IZcadDim3PointAngular_put_ExtLine2EndPoint(This,xLine2Point)	\
    ((This)->lpVtbl -> put_ExtLine2EndPoint(This,xLine2Point))

#define IZcadDim3PointAngular_get_AngleVertex(This,AngleVertex)	\
    ((This)->lpVtbl -> get_AngleVertex(This,AngleVertex))

#define IZcadDim3PointAngular_put_AngleVertex(This,AngleVertex)	\
    ((This)->lpVtbl -> put_AngleVertex(This,AngleVertex))

#define IZcadDim3PointAngular_get_TextPrecision(This,AngleVertex)	\
    ((This)->lpVtbl -> get_TextPrecision(This,AngleVertex))

#define IZcadDim3PointAngular_put_TextPrecision(This,AngleVertex)	\
    ((This)->lpVtbl -> put_TextPrecision(This,AngleVertex))

#define IZcadDim3PointAngular_get_AngleFormat(This,format)	\
    ((This)->lpVtbl -> get_AngleFormat(This,format))

#define IZcadDim3PointAngular_put_AngleFormat(This,format)	\
    ((This)->lpVtbl -> put_AngleFormat(This,format))

#define IZcadDim3PointAngular_get_DimensionLineColor(This,Type)	\
    ((This)->lpVtbl -> get_DimensionLineColor(This,Type))

#define IZcadDim3PointAngular_put_DimensionLineColor(This,Type)	\
    ((This)->lpVtbl -> put_DimensionLineColor(This,Type))

#define IZcadDim3PointAngular_get_ExtensionLineColor(This,Type)	\
    ((This)->lpVtbl -> get_ExtensionLineColor(This,Type))

#define IZcadDim3PointAngular_put_ExtensionLineColor(This,Type)	\
    ((This)->lpVtbl -> put_ExtensionLineColor(This,Type))

#define IZcadDim3PointAngular_get_ExtensionLineExtend(This,extend)	\
    ((This)->lpVtbl -> get_ExtensionLineExtend(This,extend))

#define IZcadDim3PointAngular_put_ExtensionLineExtend(This,extend)	\
    ((This)->lpVtbl -> put_ExtensionLineExtend(This,extend))

#define IZcadDim3PointAngular_get_Fit(This,fittype)	\
    ((This)->lpVtbl -> get_Fit(This,fittype))

#define IZcadDim3PointAngular_put_Fit(This,fittype)	\
    ((This)->lpVtbl -> put_Fit(This,fittype))

#define IZcadDim3PointAngular_get_HorizontalTextPosition(This,type)	\
    ((This)->lpVtbl -> get_HorizontalTextPosition(This,type))

#define IZcadDim3PointAngular_put_HorizontalTextPosition(This,type)	\
    ((This)->lpVtbl -> put_HorizontalTextPosition(This,type))

#define IZcadDim3PointAngular_get_ExtensionLineWeight(This,lweight)	\
    ((This)->lpVtbl -> get_ExtensionLineWeight(This,lweight))

#define IZcadDim3PointAngular_put_ExtensionLineWeight(This,lweight)	\
    ((This)->lpVtbl -> put_ExtensionLineWeight(This,lweight))

#define IZcadDim3PointAngular_get_DimLine1Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_DimLine1Suppress(This,bSuppress))

#define IZcadDim3PointAngular_put_DimLine1Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_DimLine1Suppress(This,bSuppress))

#define IZcadDim3PointAngular_get_DimLine2Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_DimLine2Suppress(This,bSuppress))

#define IZcadDim3PointAngular_put_DimLine2Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_DimLine2Suppress(This,bSuppress))

#define IZcadDim3PointAngular_get_ExtLine1Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_ExtLine1Suppress(This,bSuppress))

#define IZcadDim3PointAngular_put_ExtLine1Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_ExtLine1Suppress(This,bSuppress))

#define IZcadDim3PointAngular_get_ExtLine2Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_ExtLine2Suppress(This,bSuppress))

#define IZcadDim3PointAngular_put_ExtLine2Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_ExtLine2Suppress(This,bSuppress))

#define IZcadDim3PointAngular_get_DimLineInside(This,bInside)	\
    ((This)->lpVtbl -> get_DimLineInside(This,bInside))

#define IZcadDim3PointAngular_put_DimLineInside(This,bInside)	\
    ((This)->lpVtbl -> put_DimLineInside(This,bInside))

#define IZcadDim3PointAngular_get_TextInsideAlign(This,bInside)	\
    ((This)->lpVtbl -> get_TextInsideAlign(This,bInside))

#define IZcadDim3PointAngular_put_TextInsideAlign(This,bInside)	\
    ((This)->lpVtbl -> put_TextInsideAlign(This,bInside))

#define IZcadDim3PointAngular_get_TextInside(This,bInside)	\
    ((This)->lpVtbl -> get_TextInside(This,bInside))

#define IZcadDim3PointAngular_put_TextInside(This,bInside)	\
    ((This)->lpVtbl -> put_TextInside(This,bInside))

#define IZcadDim3PointAngular_get_ForceLineInside(This,bInside)	\
    ((This)->lpVtbl -> get_ForceLineInside(This,bInside))

#define IZcadDim3PointAngular_put_ForceLineInside(This,bInside)	\
    ((This)->lpVtbl -> put_ForceLineInside(This,bInside))

#define IZcadDim3PointAngular_get_TextOutsideAlign(This,bInside)	\
    ((This)->lpVtbl -> get_TextOutsideAlign(This,bInside))

#define IZcadDim3PointAngular_put_TextOutsideAlign(This,bInside)	\
    ((This)->lpVtbl -> put_TextOutsideAlign(This,bInside))

#define IZcadDim3PointAngular_get_ExtensionLineOffset(This,offset)	\
    ((This)->lpVtbl -> get_ExtensionLineOffset(This,offset))

#define IZcadDim3PointAngular_put_ExtensionLineOffset(This,offset)	\
    ((This)->lpVtbl -> put_ExtensionLineOffset(This,offset))

#define IZcadDim3PointAngular_get_DimensionLineWeight(This,weight)	\
    ((This)->lpVtbl -> get_DimensionLineWeight(This,weight))

#define IZcadDim3PointAngular_put_DimensionLineWeight(This,weight)	\
    ((This)->lpVtbl -> put_DimensionLineWeight(This,weight))

#define IZcadDim3PointAngular_get_ArrowheadSize(This,size)	\
    ((This)->lpVtbl -> get_ArrowheadSize(This,size))

#define IZcadDim3PointAngular_put_ArrowheadSize(This,size)	\
    ((This)->lpVtbl -> put_ArrowheadSize(This,size))

#define IZcadDim3PointAngular_get_Arrowhead1Type(This,Type)	\
    ((This)->lpVtbl -> get_Arrowhead1Type(This,Type))

#define IZcadDim3PointAngular_put_Arrowhead1Type(This,Type)	\
    ((This)->lpVtbl -> put_Arrowhead1Type(This,Type))

#define IZcadDim3PointAngular_get_Arrowhead2Type(This,Type)	\
    ((This)->lpVtbl -> get_Arrowhead2Type(This,Type))

#define IZcadDim3PointAngular_put_Arrowhead2Type(This,Type)	\
    ((This)->lpVtbl -> put_Arrowhead2Type(This,Type))

#define IZcadDim3PointAngular_get_Measurement(This,bVal)	\
    ((This)->lpVtbl -> get_Measurement(This,bVal))

#define IZcadDim3PointAngular_get_Arrowhead1Block(This,BlockName)	\
    ((This)->lpVtbl -> get_Arrowhead1Block(This,BlockName))

#define IZcadDim3PointAngular_put_Arrowhead1Block(This,BlockName)	\
    ((This)->lpVtbl -> put_Arrowhead1Block(This,BlockName))

#define IZcadDim3PointAngular_get_Arrowhead2Block(This,BlockName)	\
    ((This)->lpVtbl -> get_Arrowhead2Block(This,BlockName))

#define IZcadDim3PointAngular_put_Arrowhead2Block(This,BlockName)	\
    ((This)->lpVtbl -> put_Arrowhead2Block(This,BlockName))

#define IZcadDim3PointAngular_get_DimensionLinetype(This,Linetype)	\
    ((This)->lpVtbl -> get_DimensionLinetype(This,Linetype))

#define IZcadDim3PointAngular_put_DimensionLinetype(This,Linetype)	\
    ((This)->lpVtbl -> put_DimensionLinetype(This,Linetype))

#define IZcadDim3PointAngular_get_ExtLine1Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_ExtLine1Linetype(This,Linetype))

#define IZcadDim3PointAngular_put_ExtLine1Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_ExtLine1Linetype(This,Linetype))

#define IZcadDim3PointAngular_get_ExtLine2Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_ExtLine2Linetype(This,Linetype))

#define IZcadDim3PointAngular_put_ExtLine2Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_ExtLine2Linetype(This,Linetype))

#define IZcadDim3PointAngular_get_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ((This)->lpVtbl -> get_ExtLineFixedLenSuppress(This,bFixedLen))

#define IZcadDim3PointAngular_put_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ((This)->lpVtbl -> put_ExtLineFixedLenSuppress(This,bFixedLen))

#define IZcadDim3PointAngular_get_ExtLineFixedLen(This,FixedLen)	\
    ((This)->lpVtbl -> get_ExtLineFixedLen(This,FixedLen))

#define IZcadDim3PointAngular_put_ExtLineFixedLen(This,FixedLen)	\
    ((This)->lpVtbl -> put_ExtLineFixedLen(This,FixedLen))

#define IZcadDim3PointAngular_get_DimConstrForm(This,bIsDynamic)	\
    ((This)->lpVtbl -> get_DimConstrForm(This,bIsDynamic))

#define IZcadDim3PointAngular_put_DimConstrForm(This,bIsDynamic)	\
    ((This)->lpVtbl -> put_DimConstrForm(This,bIsDynamic))

#define IZcadDim3PointAngular_get_DimConstrReference(This,bIsReference)	\
    ((This)->lpVtbl -> get_DimConstrReference(This,bIsReference))

#define IZcadDim3PointAngular_put_DimConstrReference(This,bIsReference)	\
    ((This)->lpVtbl -> put_DimConstrReference(This,bIsReference))

#define IZcadDim3PointAngular_get_DimConstrName(This,bstrName)	\
    ((This)->lpVtbl -> get_DimConstrName(This,bstrName))

#define IZcadDim3PointAngular_put_DimConstrName(This,bstrName)	\
    ((This)->lpVtbl -> put_DimConstrName(This,bstrName))

#define IZcadDim3PointAngular_get_DimConstrExpression(This,bstrExpression)	\
    ((This)->lpVtbl -> get_DimConstrExpression(This,bstrExpression))

#define IZcadDim3PointAngular_put_DimConstrExpression(This,bstrExpression)	\
    ((This)->lpVtbl -> put_DimConstrExpression(This,bstrExpression))

#define IZcadDim3PointAngular_get_DimConstrValue(This,value)	\
    ((This)->lpVtbl -> get_DimConstrValue(This,value))

#define IZcadDim3PointAngular_put_DimConstrValue(This,value)	\
    ((This)->lpVtbl -> put_DimConstrValue(This,value))

#define IZcadDim3PointAngular_get_DimConstrDesc(This,bstrDescription)	\
    ((This)->lpVtbl -> get_DimConstrDesc(This,bstrDescription))

#define IZcadDim3PointAngular_put_DimConstrDesc(This,bstrDescription)	\
    ((This)->lpVtbl -> put_DimConstrDesc(This,bstrDescription))

#endif
#endif


 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_ExtensionLineColor_Proxy(
    IZcadDim3PointAngular * This,
     ZCAD_COLOR Type);

void __RPC_STUB IZcadDim3PointAngular_put_ExtensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_ExtensionLineExtend_Proxy(
    IZcadDim3PointAngular * This,
     double *extend);

void __RPC_STUB IZcadDim3PointAngular_get_ExtensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_ExtensionLineExtend_Proxy(
    IZcadDim3PointAngular * This,
     double extend);

void __RPC_STUB IZcadDim3PointAngular_put_ExtensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_Fit_Proxy(
    IZcadDim3PointAngular * This,
     ZcDimFit *fittype);

void __RPC_STUB IZcadDim3PointAngular_get_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_Fit_Proxy(
    IZcadDim3PointAngular * This,
     ZcDimFit fittype);

void __RPC_STUB IZcadDim3PointAngular_put_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_HorizontalTextPosition_Proxy(
    IZcadDim3PointAngular * This,
     ZcDimHorizontalJustification *type);

void __RPC_STUB IZcadDim3PointAngular_get_HorizontalTextPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_HorizontalTextPosition_Proxy(
    IZcadDim3PointAngular * This,
     ZcDimHorizontalJustification type);

void __RPC_STUB IZcadDim3PointAngular_put_HorizontalTextPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_ExtensionLineWeight_Proxy(
    IZcadDim3PointAngular * This,
     ZCAD_LWEIGHT *lweight);

void __RPC_STUB IZcadDim3PointAngular_get_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_ExtensionLineWeight_Proxy(
    IZcadDim3PointAngular * This,
     ZCAD_LWEIGHT lweight);

void __RPC_STUB IZcadDim3PointAngular_put_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_DimLine1Suppress_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDim3PointAngular_get_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_DimLine1Suppress_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDim3PointAngular_put_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_DimLine2Suppress_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDim3PointAngular_get_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_DimLine2Suppress_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDim3PointAngular_put_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_ExtLine1Suppress_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDim3PointAngular_get_ExtLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_ExtLine1Suppress_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDim3PointAngular_put_ExtLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_ExtLine2Suppress_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDim3PointAngular_get_ExtLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_ExtLine2Suppress_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDim3PointAngular_put_ExtLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_DimLineInside_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDim3PointAngular_get_DimLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_DimLineInside_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDim3PointAngular_put_DimLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_TextInsideAlign_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDim3PointAngular_get_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_TextInsideAlign_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDim3PointAngular_put_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_TextInside_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDim3PointAngular_get_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_TextInside_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDim3PointAngular_put_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_ForceLineInside_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDim3PointAngular_get_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_ForceLineInside_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDim3PointAngular_put_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_TextOutsideAlign_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDim3PointAngular_get_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_TextOutsideAlign_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDim3PointAngular_put_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_ExtensionLineOffset_Proxy(
    IZcadDim3PointAngular * This,
     double *offset);

void __RPC_STUB IZcadDim3PointAngular_get_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_ExtensionLineOffset_Proxy(
    IZcadDim3PointAngular * This,
     double offset);

void __RPC_STUB IZcadDim3PointAngular_put_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_DimensionLineWeight_Proxy(
    IZcadDim3PointAngular * This,
     ZCAD_LWEIGHT *weight);

void __RPC_STUB IZcadDim3PointAngular_get_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_DimensionLineWeight_Proxy(
    IZcadDim3PointAngular * This,
     ZCAD_LWEIGHT weight);

void __RPC_STUB IZcadDim3PointAngular_put_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_ArrowheadSize_Proxy(
    IZcadDim3PointAngular * This,
     double *size);

void __RPC_STUB IZcadDim3PointAngular_get_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_ArrowheadSize_Proxy(
    IZcadDim3PointAngular * This,
     double size);

void __RPC_STUB IZcadDim3PointAngular_put_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_Arrowhead1Type_Proxy(
    IZcadDim3PointAngular * This,
     ZcDimArrowheadType *Type);

void __RPC_STUB IZcadDim3PointAngular_get_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_Arrowhead1Type_Proxy(
    IZcadDim3PointAngular * This,
     ZcDimArrowheadType Type);

void __RPC_STUB IZcadDim3PointAngular_put_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_Arrowhead2Type_Proxy(
    IZcadDim3PointAngular * This,
     ZcDimArrowheadType *Type);

void __RPC_STUB IZcadDim3PointAngular_get_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_Arrowhead2Type_Proxy(
    IZcadDim3PointAngular * This,
     ZcDimArrowheadType Type);

void __RPC_STUB IZcadDim3PointAngular_put_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_Measurement_Proxy(
    IZcadDim3PointAngular * This,
     ZCAD_ANGLE *bVal);

void __RPC_STUB IZcadDim3PointAngular_get_Measurement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_Arrowhead1Block_Proxy(
    IZcadDim3PointAngular * This,
     BSTR *BlockName);

void __RPC_STUB IZcadDim3PointAngular_get_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_Arrowhead1Block_Proxy(
    IZcadDim3PointAngular * This,
     BSTR BlockName);

void __RPC_STUB IZcadDim3PointAngular_put_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_Arrowhead2Block_Proxy(
    IZcadDim3PointAngular * This,
     BSTR *BlockName);

void __RPC_STUB IZcadDim3PointAngular_get_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_Arrowhead2Block_Proxy(
    IZcadDim3PointAngular * This,
     BSTR BlockName);

void __RPC_STUB IZcadDim3PointAngular_put_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_DimensionLinetype_Proxy(
    IZcadDim3PointAngular * This,
     BSTR *Linetype);

void __RPC_STUB IZcadDim3PointAngular_get_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_DimensionLinetype_Proxy(
    IZcadDim3PointAngular * This,
     BSTR Linetype);

void __RPC_STUB IZcadDim3PointAngular_put_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_ExtLine1Linetype_Proxy(
    IZcadDim3PointAngular * This,
     BSTR *Linetype);

void __RPC_STUB IZcadDim3PointAngular_get_ExtLine1Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_ExtLine1Linetype_Proxy(
    IZcadDim3PointAngular * This,
     BSTR Linetype);

void __RPC_STUB IZcadDim3PointAngular_put_ExtLine1Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_ExtLine2Linetype_Proxy(
    IZcadDim3PointAngular * This,
     BSTR *Linetype);

void __RPC_STUB IZcadDim3PointAngular_get_ExtLine2Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_ExtLine2Linetype_Proxy(
    IZcadDim3PointAngular * This,
     BSTR Linetype);

void __RPC_STUB IZcadDim3PointAngular_put_ExtLine2Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_ExtLineFixedLenSuppress_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL *bFixedLen);

void __RPC_STUB IZcadDim3PointAngular_get_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_ExtLineFixedLenSuppress_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL bFixedLen);

void __RPC_STUB IZcadDim3PointAngular_put_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_ExtLineFixedLen_Proxy(
    IZcadDim3PointAngular * This,
     double *FixedLen);

void __RPC_STUB IZcadDim3PointAngular_get_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_ExtLineFixedLen_Proxy(
    IZcadDim3PointAngular * This,
     double FixedLen);

void __RPC_STUB IZcadDim3PointAngular_put_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_DimConstrForm_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL *bIsDynamic);

void __RPC_STUB IZcadDim3PointAngular_get_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_DimConstrForm_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL bIsDynamic);

void __RPC_STUB IZcadDim3PointAngular_put_DimConstrForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_DimConstrReference_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL *bIsReference);

void __RPC_STUB IZcadDim3PointAngular_get_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_DimConstrReference_Proxy(
    IZcadDim3PointAngular * This,
     VARIANT_BOOL bIsReference);

void __RPC_STUB IZcadDim3PointAngular_put_DimConstrReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_DimConstrName_Proxy(
    IZcadDim3PointAngular * This,
     BSTR *bstrName);

void __RPC_STUB IZcadDim3PointAngular_get_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_DimConstrName_Proxy(
    IZcadDim3PointAngular * This,
     BSTR bstrName);

void __RPC_STUB IZcadDim3PointAngular_put_DimConstrName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_DimConstrExpression_Proxy(
    IZcadDim3PointAngular * This,
     BSTR *bstrExpression);

void __RPC_STUB IZcadDim3PointAngular_get_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_DimConstrExpression_Proxy(
    IZcadDim3PointAngular * This,
     BSTR bstrExpression);

void __RPC_STUB IZcadDim3PointAngular_put_DimConstrExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_DimConstrValue_Proxy(
    IZcadDim3PointAngular * This,
     BSTR *value);

void __RPC_STUB IZcadDim3PointAngular_get_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_DimConstrValue_Proxy(
    IZcadDim3PointAngular * This,
     BSTR value);

void __RPC_STUB IZcadDim3PointAngular_put_DimConstrValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_get_DimConstrDesc_Proxy(
    IZcadDim3PointAngular * This,
     BSTR *bstrDescription);

void __RPC_STUB IZcadDim3PointAngular_get_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDim3PointAngular_put_DimConstrDesc_Proxy(
    IZcadDim3PointAngular * This,
     BSTR bstrDescription);

void __RPC_STUB IZcadDim3PointAngular_put_DimConstrDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


#endif

DEFINE_GUID(CLSID_ZcadDim3PointAngular,0xEC923072,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923072-5A17-11E7-B72E-BC5FF42AC839")
ZcadDim3PointAngular;
#endif

#ifndef __IZcadDimArcLength_INTERFACE_DEFINED__
#define __IZcadDimArcLength_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadDimArcLength,0xEC923167,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923167-5A17-11E7-B72E-BC5FF42AC839")
    IZcadDimArcLength : public IZcadDimension
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_AltUnits(
             VARIANT_BOOL *bAlternate) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnits(
             VARIANT_BOOL bAlternate) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnitsPrecision(
             ZcDimPrecision *Precision) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnitsPrecision(
             ZcDimPrecision Precision) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnitsScale(
             ZCAD_NOUNITS *Scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnitsScale(
             ZCAD_NOUNITS Scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltRoundDistance(
             double *Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltRoundDistance(
             double Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltTolerancePrecision(
             ZcDimPrecision *Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltTolerancePrecision(
             ZcDimPrecision Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnitsFormat(
             ZcDimUnits *Units) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnitsFormat(
             ZcDimUnits Units) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltTextPrefix(
             BSTR *Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltTextPrefix(
             BSTR Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltTextSuffix(
             BSTR *Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltTextSuffix(
             BSTR Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLineColor(
             ZCAD_COLOR *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLineColor(
             ZCAD_COLOR Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineColor(
             ZCAD_COLOR *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineColor(
             ZCAD_COLOR Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PrimaryUnitsPrecision(
             ZcDimPrecision *Prec) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PrimaryUnitsPrecision(
             ZcDimPrecision Prec) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLineExtend(
             double *extend) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLineExtend(
             double extend) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineExtend(
             double *extend) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineExtend(
             double extend) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Fit(
             ZcDimFit *fittype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Fit(
             ZcDimFit fittype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_FractionFormat(
             ZcDimFractionType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_FractionFormat(
             ZcDimFractionType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_HorizontalTextPosition(
             ZcDimHorizontalJustification *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_HorizontalTextPosition(
             ZcDimHorizontalJustification type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LinearScaleFactor(
             ZCAD_NOUNITS *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LinearScaleFactor(
             ZCAD_NOUNITS type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UnitsFormat(
             ZcDimLUnits *format) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_UnitsFormat(
             ZcDimLUnits format) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineWeight(
             ZCAD_LWEIGHT *lweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineWeight(
             ZCAD_LWEIGHT lweight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_RoundDistance(
             double *Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_RoundDistance(
             double Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimLine1Suppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimLine1Suppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimLine2Suppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimLine2Suppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine1Suppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine1Suppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine2Suppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine2Suppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimLineInside(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimLineInside(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextInsideAlign(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextInsideAlign(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextInside(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextInside(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ForceLineInside(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ForceLineInside(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextOutsideAlign(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextOutsideAlign(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtensionLineOffset(
             double *offset) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtensionLineOffset(
             double offset) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressLeadingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressLeadingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressTrailingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressTrailingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressLeadingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressLeadingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressTrailingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressTrailingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLineWeight(
             ZCAD_LWEIGHT *weight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLineWeight(
             ZCAD_LWEIGHT weight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArrowheadSize(
             double *size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArrowheadSize(
             double size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead1Type(
             ZcDimArrowheadType *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead1Type(
             ZcDimArrowheadType Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead2Type(
             ZcDimArrowheadType *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead2Type(
             ZcDimArrowheadType Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Measurement(
             double *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead1Block(
             BSTR *BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead1Block(
             BSTR BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Arrowhead2Block(
             BSTR *BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Arrowhead2Block(
             BSTR BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArcPoint(
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArcPoint(
             VARIANT newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine1Point(
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine1Point(
             VARIANT newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine2Point(
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine2Point(
             VARIANT newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_CenterPoint(
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_CenterPoint(
             VARIANT newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Leader1Point(
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Leader1Point(
             VARIANT newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Leader2Point(
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Leader2Point(
             VARIANT newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_IsPartial(
             VARIANT_BOOL *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_IsPartial(
             VARIANT_BOOL newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArcStartParam(
             double *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArcStartParam(
             double newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArcEndParam(
             double *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArcEndParam(
             double newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_HasLeader(
             VARIANT_BOOL *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_HasLeader(
             VARIANT_BOOL newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SymbolPosition(
             ZcDimArcLengthSymbol *position) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SymbolPosition(
             ZcDimArcLengthSymbol position) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLinetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLinetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine1Linetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine1Linetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLine2Linetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLine2Linetype(
             BSTR Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLineFixedLenSuppress(
             VARIANT_BOOL *bFixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLineFixedLenSuppress(
             VARIANT_BOOL bFixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ExtLineFixedLen(
             double *FixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ExtLineFixedLen(
             double FixedLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SubUnitsSuffix(
             BSTR *suffix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SubUnitsSuffix(
             BSTR suffix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SubUnitsFactor(
             double *factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SubUnitsFactor(
             double factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSubUnitsSuffix(
             BSTR *suffix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSubUnitsSuffix(
             BSTR suffix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSubUnitsFactor(
             double *factor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSubUnitsFactor(
             double factor) = 0;

    };

#else

    typedef struct IZcadDimArcLengthVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadDimArcLength * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadDimArcLength * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadDimArcLength * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadDimArcLength * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadDimArcLength * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadDimArcLength * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadDimArcLength * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadDimArcLength * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadDimArcLength * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadDimArcLength * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadDimArcLength * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadDimArcLength * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadDimArcLength * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadDimArcLength * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadDimArcLength * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadDimArcLength * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadDimArcLength * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadDimArcLength * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadDimArcLength * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadDimArcLength * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadDimArcLength * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadDimArcLength * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadDimArcLength * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadDimArcLength * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadDimArcLength * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadDimArcLength * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadDimArcLength * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadDimArcLength * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadDimArcLength * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadDimArcLength * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadDimArcLength * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadDimArcLength * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadDimArcLength * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadDimArcLength * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadDimArcLength * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadDimArcLength * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadDimArcLength * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadDimArcLength * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadDimArcLength * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadDimArcLength * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadDimArcLength * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadDimArcLength * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadDimArcLength * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadDimArcLength * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadDimArcLength * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadDimArcLength * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadDimArcLength * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadDimArcLength * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadDimArcLength * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadDimArcLength * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadDimArcLength * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadDimArcLength * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadDimArcLength * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadDimArcLength * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadDimArcLength * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadDimArcLength * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_Rotation )(
            IZcadDimArcLength * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_Rotation )(
            IZcadDimArcLength * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextPosition )(
            IZcadDimArcLength * This,
             VARIANT *textPos);

         HRESULT ( STDMETHODCALLTYPE *put_TextPosition )(
            IZcadDimArcLength * This,
             VARIANT textPos);

         HRESULT ( STDMETHODCALLTYPE *get_TextRotation )(
            IZcadDimArcLength * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_TextRotation )(
            IZcadDimArcLength * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextOverride )(
            IZcadDimArcLength * This,
             BSTR *bstrText);

         HRESULT ( STDMETHODCALLTYPE *put_TextOverride )(
            IZcadDimArcLength * This,
             BSTR bstrText);

         HRESULT ( STDMETHODCALLTYPE *get_StyleName )(
            IZcadDimArcLength * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_StyleName )(
            IZcadDimArcLength * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_TextColor )(
            IZcadDimArcLength * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_TextColor )(
            IZcadDimArcLength * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_DecimalSeparator )(
            IZcadDimArcLength * This,
             BSTR *character);

         HRESULT ( STDMETHODCALLTYPE *put_DecimalSeparator )(
            IZcadDimArcLength * This,
             BSTR character);

         HRESULT ( STDMETHODCALLTYPE *get_TextGap )(
            IZcadDimArcLength * This,
             double *offset);

         HRESULT ( STDMETHODCALLTYPE *put_TextGap )(
            IZcadDimArcLength * This,
             double offset);

         HRESULT ( STDMETHODCALLTYPE *get_TextPrefix )(
            IZcadDimArcLength * This,
             BSTR *prefix);

         HRESULT ( STDMETHODCALLTYPE *put_TextPrefix )(
            IZcadDimArcLength * This,
             BSTR prefix);

         HRESULT ( STDMETHODCALLTYPE *get_TextSuffix )(
            IZcadDimArcLength * This,
             BSTR *suffix);

         HRESULT ( STDMETHODCALLTYPE *put_TextSuffix )(
            IZcadDimArcLength * This,
             BSTR suffix);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )(
            IZcadDimArcLength * This,
             ZCAD_NOUNITS *factor);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )(
            IZcadDimArcLength * This,
             ZCAD_NOUNITS factor);

         HRESULT ( STDMETHODCALLTYPE *get_VerticalTextPosition )(
            IZcadDimArcLength * This,
             ZcDimVerticalJustification *type);

         HRESULT ( STDMETHODCALLTYPE *put_VerticalTextPosition )(
            IZcadDimArcLength * This,
             ZcDimVerticalJustification type);

         HRESULT ( STDMETHODCALLTYPE *get_TolerancePrecision )(
            IZcadDimArcLength * This,
             ZcDimPrecision *precision);

         HRESULT ( STDMETHODCALLTYPE *put_TolerancePrecision )(
            IZcadDimArcLength * This,
             ZcDimPrecision precision);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceHeightScale )(
            IZcadDimArcLength * This,
             ZCAD_NOUNITS *scale);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceHeightScale )(
            IZcadDimArcLength * This,
             ZCAD_NOUNITS scale);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceLowerLimit )(
            IZcadDimArcLength * This,
             double *lower);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceLowerLimit )(
            IZcadDimArcLength * This,
             double lower);

         HRESULT ( STDMETHODCALLTYPE *get_TextMovement )(
            IZcadDimArcLength * This,
             ZcDimTextMovement *move);

         HRESULT ( STDMETHODCALLTYPE *put_TextMovement )(
            IZcadDimArcLength * This,
             ZcDimTextMovement move);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceDisplay )(
            IZcadDimArcLength * This,
             ZcDimToleranceMethod *method);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceDisplay )(
            IZcadDimArcLength * This,
             ZcDimToleranceMethod method);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceJustification )(
            IZcadDimArcLength * This,
             ZcDimToleranceJustify *method);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceJustification )(
            IZcadDimArcLength * This,
             ZcDimToleranceJustify method);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceUpperLimit )(
            IZcadDimArcLength * This,
             double *upper);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceUpperLimit )(
            IZcadDimArcLength * This,
             double upper);

         HRESULT ( STDMETHODCALLTYPE *get_TextStyle )(
            IZcadDimArcLength * This,
             BSTR *style);

         HRESULT ( STDMETHODCALLTYPE *put_TextStyle )(
            IZcadDimArcLength * This,
             BSTR style);

         HRESULT ( STDMETHODCALLTYPE *get_TextHeight )(
            IZcadDimArcLength * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_TextHeight )(
            IZcadDimArcLength * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressLeadingZeros )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressLeadingZeros )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressTrailingZeros )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressTrailingZeros )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressLeadingZeros )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressLeadingZeros )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressTrailingZeros )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressTrailingZeros )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_TextFill )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_TextFill )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_TextFillColor )(
            IZcadDimArcLength * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_TextFillColor )(
            IZcadDimArcLength * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_DimTxtDirection )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_DimTxtDirection )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnits )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bAlternate);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnits )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bAlternate);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnitsPrecision )(
            IZcadDimArcLength * This,
             ZcDimPrecision *Precision);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnitsPrecision )(
            IZcadDimArcLength * This,
             ZcDimPrecision Precision);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnitsScale )(
            IZcadDimArcLength * This,
             ZCAD_NOUNITS *Scale);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnitsScale )(
            IZcadDimArcLength * This,
             ZCAD_NOUNITS Scale);

         HRESULT ( STDMETHODCALLTYPE *get_AltRoundDistance )(
            IZcadDimArcLength * This,
             double *Distance);

         HRESULT ( STDMETHODCALLTYPE *put_AltRoundDistance )(
            IZcadDimArcLength * This,
             double Distance);

         HRESULT ( STDMETHODCALLTYPE *get_AltTolerancePrecision )(
            IZcadDimArcLength * This,
             ZcDimPrecision *Distance);

         HRESULT ( STDMETHODCALLTYPE *put_AltTolerancePrecision )(
            IZcadDimArcLength * This,
             ZcDimPrecision Distance);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnitsFormat )(
            IZcadDimArcLength * This,
             ZcDimUnits *Units);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnitsFormat )(
            IZcadDimArcLength * This,
             ZcDimUnits Units);

         HRESULT ( STDMETHODCALLTYPE *get_AltTextPrefix )(
            IZcadDimArcLength * This,
             BSTR *Prefix);

         HRESULT ( STDMETHODCALLTYPE *put_AltTextPrefix )(
            IZcadDimArcLength * This,
             BSTR Prefix);

         HRESULT ( STDMETHODCALLTYPE *get_AltTextSuffix )(
            IZcadDimArcLength * This,
             BSTR *Prefix);

         HRESULT ( STDMETHODCALLTYPE *put_AltTextSuffix )(
            IZcadDimArcLength * This,
             BSTR Prefix);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLineColor )(
            IZcadDimArcLength * This,
             ZCAD_COLOR *Type);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLineColor )(
            IZcadDimArcLength * This,
             ZCAD_COLOR Type);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineColor )(
            IZcadDimArcLength * This,
             ZCAD_COLOR *Type);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineColor )(
            IZcadDimArcLength * This,
             ZCAD_COLOR Type);

         HRESULT ( STDMETHODCALLTYPE *get_PrimaryUnitsPrecision )(
            IZcadDimArcLength * This,
             ZcDimPrecision *Prec);

         HRESULT ( STDMETHODCALLTYPE *put_PrimaryUnitsPrecision )(
            IZcadDimArcLength * This,
             ZcDimPrecision Prec);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLineExtend )(
            IZcadDimArcLength * This,
             double *extend);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLineExtend )(
            IZcadDimArcLength * This,
             double extend);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineExtend )(
            IZcadDimArcLength * This,
             double *extend);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineExtend )(
            IZcadDimArcLength * This,
             double extend);

         HRESULT ( STDMETHODCALLTYPE *get_Fit )(
            IZcadDimArcLength * This,
             ZcDimFit *fittype);

         HRESULT ( STDMETHODCALLTYPE *put_Fit )(
            IZcadDimArcLength * This,
             ZcDimFit fittype);

         HRESULT ( STDMETHODCALLTYPE *get_FractionFormat )(
            IZcadDimArcLength * This,
             ZcDimFractionType *type);

         HRESULT ( STDMETHODCALLTYPE *put_FractionFormat )(
            IZcadDimArcLength * This,
             ZcDimFractionType type);

         HRESULT ( STDMETHODCALLTYPE *get_HorizontalTextPosition )(
            IZcadDimArcLength * This,
             ZcDimHorizontalJustification *type);

         HRESULT ( STDMETHODCALLTYPE *put_HorizontalTextPosition )(
            IZcadDimArcLength * This,
             ZcDimHorizontalJustification type);

         HRESULT ( STDMETHODCALLTYPE *get_LinearScaleFactor )(
            IZcadDimArcLength * This,
             ZCAD_NOUNITS *type);

         HRESULT ( STDMETHODCALLTYPE *put_LinearScaleFactor )(
            IZcadDimArcLength * This,
             ZCAD_NOUNITS type);

         HRESULT ( STDMETHODCALLTYPE *get_UnitsFormat )(
            IZcadDimArcLength * This,
             ZcDimLUnits *format);

         HRESULT ( STDMETHODCALLTYPE *put_UnitsFormat )(
            IZcadDimArcLength * This,
             ZcDimLUnits format);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineWeight )(
            IZcadDimArcLength * This,
             ZCAD_LWEIGHT *lweight);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineWeight )(
            IZcadDimArcLength * This,
             ZCAD_LWEIGHT lweight);

         HRESULT ( STDMETHODCALLTYPE *get_RoundDistance )(
            IZcadDimArcLength * This,
             double *Distance);

         HRESULT ( STDMETHODCALLTYPE *put_RoundDistance )(
            IZcadDimArcLength * This,
             double Distance);

         HRESULT ( STDMETHODCALLTYPE *get_DimLine1Suppress )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_DimLine1Suppress )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_DimLine2Suppress )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_DimLine2Suppress )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Suppress )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Suppress )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Suppress )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Suppress )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_DimLineInside )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_DimLineInside )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_TextInsideAlign )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextInsideAlign )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_TextInside )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextInside )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_ForceLineInside )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_ForceLineInside )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_TextOutsideAlign )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextOutsideAlign )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_ExtensionLineOffset )(
            IZcadDimArcLength * This,
             double *offset);

         HRESULT ( STDMETHODCALLTYPE *put_ExtensionLineOffset )(
            IZcadDimArcLength * This,
             double offset);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressLeadingZeros )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressLeadingZeros )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressTrailingZeros )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressTrailingZeros )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroFeet )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroFeet )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroInches )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroInches )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressLeadingZeros )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressLeadingZeros )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressTrailingZeros )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressTrailingZeros )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroFeet )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroFeet )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroInches )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroInches )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroFeet )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroFeet )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroInches )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroInches )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroFeet )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroFeet )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroInches )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroInches )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLineWeight )(
            IZcadDimArcLength * This,
             ZCAD_LWEIGHT *weight);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLineWeight )(
            IZcadDimArcLength * This,
             ZCAD_LWEIGHT weight);

         HRESULT ( STDMETHODCALLTYPE *get_ArrowheadSize )(
            IZcadDimArcLength * This,
             double *size);

         HRESULT ( STDMETHODCALLTYPE *put_ArrowheadSize )(
            IZcadDimArcLength * This,
             double size);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Type )(
            IZcadDimArcLength * This,
             ZcDimArrowheadType *Type);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Type )(
            IZcadDimArcLength * This,
             ZcDimArrowheadType Type);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Type )(
            IZcadDimArcLength * This,
             ZcDimArrowheadType *Type);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Type )(
            IZcadDimArcLength * This,
             ZcDimArrowheadType Type);

         HRESULT ( STDMETHODCALLTYPE *get_Measurement )(
            IZcadDimArcLength * This,
             double *bVal);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead1Block )(
            IZcadDimArcLength * This,
             BSTR *BlockName);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead1Block )(
            IZcadDimArcLength * This,
             BSTR BlockName);

         HRESULT ( STDMETHODCALLTYPE *get_Arrowhead2Block )(
            IZcadDimArcLength * This,
             BSTR *BlockName);

         HRESULT ( STDMETHODCALLTYPE *put_Arrowhead2Block )(
            IZcadDimArcLength * This,
             BSTR BlockName);

         HRESULT ( STDMETHODCALLTYPE *get_ArcPoint )(
            IZcadDimArcLength * This,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_ArcPoint )(
            IZcadDimArcLength * This,
             VARIANT newVal);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Point )(
            IZcadDimArcLength * This,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Point )(
            IZcadDimArcLength * This,
             VARIANT newVal);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Point )(
            IZcadDimArcLength * This,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Point )(
            IZcadDimArcLength * This,
             VARIANT newVal);

         HRESULT ( STDMETHODCALLTYPE *get_CenterPoint )(
            IZcadDimArcLength * This,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_CenterPoint )(
            IZcadDimArcLength * This,
             VARIANT newVal);

         HRESULT ( STDMETHODCALLTYPE *get_Leader1Point )(
            IZcadDimArcLength * This,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_Leader1Point )(
            IZcadDimArcLength * This,
             VARIANT newVal);

         HRESULT ( STDMETHODCALLTYPE *get_Leader2Point )(
            IZcadDimArcLength * This,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_Leader2Point )(
            IZcadDimArcLength * This,
             VARIANT newVal);

         HRESULT ( STDMETHODCALLTYPE *get_IsPartial )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_IsPartial )(
            IZcadDimArcLength * This,
             VARIANT_BOOL newVal);

         HRESULT ( STDMETHODCALLTYPE *get_ArcStartParam )(
            IZcadDimArcLength * This,
             double *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_ArcStartParam )(
            IZcadDimArcLength * This,
             double newVal);

         HRESULT ( STDMETHODCALLTYPE *get_ArcEndParam )(
            IZcadDimArcLength * This,
             double *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_ArcEndParam )(
            IZcadDimArcLength * This,
             double newVal);

         HRESULT ( STDMETHODCALLTYPE *get_HasLeader )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_HasLeader )(
            IZcadDimArcLength * This,
             VARIANT_BOOL newVal);

         HRESULT ( STDMETHODCALLTYPE *get_SymbolPosition )(
            IZcadDimArcLength * This,
             ZcDimArcLengthSymbol *position);

         HRESULT ( STDMETHODCALLTYPE *put_SymbolPosition )(
            IZcadDimArcLength * This,
             ZcDimArcLengthSymbol position);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLinetype )(
            IZcadDimArcLength * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLinetype )(
            IZcadDimArcLength * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine1Linetype )(
            IZcadDimArcLength * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine1Linetype )(
            IZcadDimArcLength * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLine2Linetype )(
            IZcadDimArcLength * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLine2Linetype )(
            IZcadDimArcLength * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLenSuppress )(
            IZcadDimArcLength * This,
             VARIANT_BOOL *bFixedLen);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLenSuppress )(
            IZcadDimArcLength * This,
             VARIANT_BOOL bFixedLen);

         HRESULT ( STDMETHODCALLTYPE *get_ExtLineFixedLen )(
            IZcadDimArcLength * This,
             double *FixedLen);

         HRESULT ( STDMETHODCALLTYPE *put_ExtLineFixedLen )(
            IZcadDimArcLength * This,
             double FixedLen);

         HRESULT ( STDMETHODCALLTYPE *get_SubUnitsSuffix )(
            IZcadDimArcLength * This,
             BSTR *suffix);

         HRESULT ( STDMETHODCALLTYPE *put_SubUnitsSuffix )(
            IZcadDimArcLength * This,
             BSTR suffix);

         HRESULT ( STDMETHODCALLTYPE *get_SubUnitsFactor )(
            IZcadDimArcLength * This,
             double *factor);

         HRESULT ( STDMETHODCALLTYPE *put_SubUnitsFactor )(
            IZcadDimArcLength * This,
             double factor);

         HRESULT ( STDMETHODCALLTYPE *get_AltSubUnitsSuffix )(
            IZcadDimArcLength * This,
             BSTR *suffix);

         HRESULT ( STDMETHODCALLTYPE *put_AltSubUnitsSuffix )(
            IZcadDimArcLength * This,
             BSTR suffix);

         HRESULT ( STDMETHODCALLTYPE *get_AltSubUnitsFactor )(
            IZcadDimArcLength * This,
             double *factor);

         HRESULT ( STDMETHODCALLTYPE *put_AltSubUnitsFactor )(
            IZcadDimArcLength * This,
             double factor);

        END_INTERFACE
    } IZcadDimArcLengthVtbl;

    interface IZcadDimArcLength
    {
        CONST_VTBL struct IZcadDimArcLengthVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadDimArcLength_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadDimArcLength_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadDimArcLength_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadDimArcLength_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadDimArcLength_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadDimArcLength_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadDimArcLength_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadDimArcLength_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadDimArcLength_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadDimArcLength_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadDimArcLength_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadDimArcLength_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadDimArcLength_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadDimArcLength_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadDimArcLength_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadDimArcLength_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadDimArcLength_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadDimArcLength_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadDimArcLength_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadDimArcLength_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadDimArcLength_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadDimArcLength_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadDimArcLength_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadDimArcLength_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadDimArcLength_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadDimArcLength_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadDimArcLength_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadDimArcLength_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadDimArcLength_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadDimArcLength_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadDimArcLength_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadDimArcLength_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadDimArcLength_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadDimArcLength_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadDimArcLength_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadDimArcLength_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadDimArcLength_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadDimArcLength_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadDimArcLength_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadDimArcLength_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadDimArcLength_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadDimArcLength_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadDimArcLength_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadDimArcLength_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadDimArcLength_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadDimArcLength_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadDimArcLength_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadDimArcLength_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadDimArcLength_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadDimArcLength_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadDimArcLength_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadDimArcLength_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadDimArcLength_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadDimArcLength_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadDimArcLength_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadDimArcLength_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadDimArcLength_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadDimArcLength_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadDimArcLength_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadDimArcLength_get_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_Rotation(This,rotAngle))

#define IZcadDimArcLength_put_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_Rotation(This,rotAngle))

#define IZcadDimArcLength_get_TextPosition(This,textPos)	\
    ((This)->lpVtbl -> get_TextPosition(This,textPos))

#define IZcadDimArcLength_put_TextPosition(This,textPos)	\
    ((This)->lpVtbl -> put_TextPosition(This,textPos))

#define IZcadDimArcLength_get_TextRotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_TextRotation(This,rotAngle))

#define IZcadDimArcLength_put_TextRotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_TextRotation(This,rotAngle))

#define IZcadDimArcLength_get_TextOverride(This,bstrText)	\
    ((This)->lpVtbl -> get_TextOverride(This,bstrText))

#define IZcadDimArcLength_put_TextOverride(This,bstrText)	\
    ((This)->lpVtbl -> put_TextOverride(This,bstrText))

#define IZcadDimArcLength_get_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> get_StyleName(This,bstrName))

#define IZcadDimArcLength_put_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> put_StyleName(This,bstrName))

#define IZcadDimArcLength_get_TextColor(This,Color)	\
    ((This)->lpVtbl -> get_TextColor(This,Color))

#define IZcadDimArcLength_put_TextColor(This,Color)	\
    ((This)->lpVtbl -> put_TextColor(This,Color))

#define IZcadDimArcLength_get_DecimalSeparator(This,character)	\
    ((This)->lpVtbl -> get_DecimalSeparator(This,character))

#define IZcadDimArcLength_put_DecimalSeparator(This,character)	\
    ((This)->lpVtbl -> put_DecimalSeparator(This,character))

#define IZcadDimArcLength_get_TextGap(This,offset)	\
    ((This)->lpVtbl -> get_TextGap(This,offset))

#define IZcadDimArcLength_put_TextGap(This,offset)	\
    ((This)->lpVtbl -> put_TextGap(This,offset))

#define IZcadDimArcLength_get_TextPrefix(This,prefix)	\
    ((This)->lpVtbl -> get_TextPrefix(This,prefix))

#define IZcadDimArcLength_put_TextPrefix(This,prefix)	\
    ((This)->lpVtbl -> put_TextPrefix(This,prefix))

#define IZcadDimArcLength_get_TextSuffix(This,suffix)	\
    ((This)->lpVtbl -> get_TextSuffix(This,suffix))

#define IZcadDimArcLength_put_TextSuffix(This,suffix)	\
    ((This)->lpVtbl -> put_TextSuffix(This,suffix))

#define IZcadDimArcLength_get_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> get_ScaleFactor(This,factor))

#define IZcadDimArcLength_put_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> put_ScaleFactor(This,factor))

#define IZcadDimArcLength_get_VerticalTextPosition(This,type)	\
    ((This)->lpVtbl -> get_VerticalTextPosition(This,type))

#define IZcadDimArcLength_put_VerticalTextPosition(This,type)	\
    ((This)->lpVtbl -> put_VerticalTextPosition(This,type))

#define IZcadDimArcLength_get_TolerancePrecision(This,precision)	\
    ((This)->lpVtbl -> get_TolerancePrecision(This,precision))

#define IZcadDimArcLength_put_TolerancePrecision(This,precision)	\
    ((This)->lpVtbl -> put_TolerancePrecision(This,precision))

#define IZcadDimArcLength_get_ToleranceHeightScale(This,scale)	\
    ((This)->lpVtbl -> get_ToleranceHeightScale(This,scale))

#define IZcadDimArcLength_put_ToleranceHeightScale(This,scale)	\
    ((This)->lpVtbl -> put_ToleranceHeightScale(This,scale))

#define IZcadDimArcLength_get_ToleranceLowerLimit(This,lower)	\
    ((This)->lpVtbl -> get_ToleranceLowerLimit(This,lower))

#define IZcadDimArcLength_put_ToleranceLowerLimit(This,lower)	\
    ((This)->lpVtbl -> put_ToleranceLowerLimit(This,lower))

#define IZcadDimArcLength_get_TextMovement(This,move)	\
    ((This)->lpVtbl -> get_TextMovement(This,move))

#define IZcadDimArcLength_put_TextMovement(This,move)	\
    ((This)->lpVtbl -> put_TextMovement(This,move))

#define IZcadDimArcLength_get_ToleranceDisplay(This,method)	\
    ((This)->lpVtbl -> get_ToleranceDisplay(This,method))

#define IZcadDimArcLength_put_ToleranceDisplay(This,method)	\
    ((This)->lpVtbl -> put_ToleranceDisplay(This,method))

#define IZcadDimArcLength_get_ToleranceJustification(This,method)	\
    ((This)->lpVtbl -> get_ToleranceJustification(This,method))

#define IZcadDimArcLength_put_ToleranceJustification(This,method)	\
    ((This)->lpVtbl -> put_ToleranceJustification(This,method))

#define IZcadDimArcLength_get_ToleranceUpperLimit(This,upper)	\
    ((This)->lpVtbl -> get_ToleranceUpperLimit(This,upper))

#define IZcadDimArcLength_put_ToleranceUpperLimit(This,upper)	\
    ((This)->lpVtbl -> put_ToleranceUpperLimit(This,upper))

#define IZcadDimArcLength_get_TextStyle(This,style)	\
    ((This)->lpVtbl -> get_TextStyle(This,style))

#define IZcadDimArcLength_put_TextStyle(This,style)	\
    ((This)->lpVtbl -> put_TextStyle(This,style))

#define IZcadDimArcLength_get_TextHeight(This,height)	\
    ((This)->lpVtbl -> get_TextHeight(This,height))

#define IZcadDimArcLength_put_TextHeight(This,height)	\
    ((This)->lpVtbl -> put_TextHeight(This,height))

#define IZcadDimArcLength_get_SuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressLeadingZeros(This,bVal))

#define IZcadDimArcLength_put_SuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressLeadingZeros(This,bVal))

#define IZcadDimArcLength_get_SuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressTrailingZeros(This,bVal))

#define IZcadDimArcLength_put_SuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressTrailingZeros(This,bVal))

#define IZcadDimArcLength_get_ToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimArcLength_put_ToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimArcLength_get_ToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimArcLength_put_ToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimArcLength_get_TextFill(This,bVal)	\
    ((This)->lpVtbl -> get_TextFill(This,bVal))

#define IZcadDimArcLength_put_TextFill(This,bVal)	\
    ((This)->lpVtbl -> put_TextFill(This,bVal))

#define IZcadDimArcLength_get_TextFillColor(This,Color)	\
    ((This)->lpVtbl -> get_TextFillColor(This,Color))

#define IZcadDimArcLength_put_TextFillColor(This,Color)	\
    ((This)->lpVtbl -> put_TextFillColor(This,Color))

#define IZcadDimArcLength_get_DimTxtDirection(This,bVal)	\
    ((This)->lpVtbl -> get_DimTxtDirection(This,bVal))

#define IZcadDimArcLength_put_DimTxtDirection(This,bVal)	\
    ((This)->lpVtbl -> put_DimTxtDirection(This,bVal))


#define IZcadDimArcLength_get_AltUnits(This,bAlternate)	\
    ((This)->lpVtbl -> get_AltUnits(This,bAlternate))

#define IZcadDimArcLength_put_AltUnits(This,bAlternate)	\
    ((This)->lpVtbl -> put_AltUnits(This,bAlternate))

#define IZcadDimArcLength_get_AltUnitsPrecision(This,Precision)	\
    ((This)->lpVtbl -> get_AltUnitsPrecision(This,Precision))

#define IZcadDimArcLength_put_AltUnitsPrecision(This,Precision)	\
    ((This)->lpVtbl -> put_AltUnitsPrecision(This,Precision))

#define IZcadDimArcLength_get_AltUnitsScale(This,Scale)	\
    ((This)->lpVtbl -> get_AltUnitsScale(This,Scale))

#define IZcadDimArcLength_put_AltUnitsScale(This,Scale)	\
    ((This)->lpVtbl -> put_AltUnitsScale(This,Scale))

#define IZcadDimArcLength_get_AltRoundDistance(This,Distance)	\
    ((This)->lpVtbl -> get_AltRoundDistance(This,Distance))

#define IZcadDimArcLength_put_AltRoundDistance(This,Distance)	\
    ((This)->lpVtbl -> put_AltRoundDistance(This,Distance))

#define IZcadDimArcLength_get_AltTolerancePrecision(This,Distance)	\
    ((This)->lpVtbl -> get_AltTolerancePrecision(This,Distance))

#define IZcadDimArcLength_put_AltTolerancePrecision(This,Distance)	\
    ((This)->lpVtbl -> put_AltTolerancePrecision(This,Distance))

#define IZcadDimArcLength_get_AltUnitsFormat(This,Units)	\
    ((This)->lpVtbl -> get_AltUnitsFormat(This,Units))

#define IZcadDimArcLength_put_AltUnitsFormat(This,Units)	\
    ((This)->lpVtbl -> put_AltUnitsFormat(This,Units))

#define IZcadDimArcLength_get_AltTextPrefix(This,Prefix)	\
    ((This)->lpVtbl -> get_AltTextPrefix(This,Prefix))

#define IZcadDimArcLength_put_AltTextPrefix(This,Prefix)	\
    ((This)->lpVtbl -> put_AltTextPrefix(This,Prefix))

#define IZcadDimArcLength_get_AltTextSuffix(This,Prefix)	\
    ((This)->lpVtbl -> get_AltTextSuffix(This,Prefix))

#define IZcadDimArcLength_put_AltTextSuffix(This,Prefix)	\
    ((This)->lpVtbl -> put_AltTextSuffix(This,Prefix))

#define IZcadDimArcLength_get_DimensionLineColor(This,Type)	\
    ((This)->lpVtbl -> get_DimensionLineColor(This,Type))

#define IZcadDimArcLength_put_DimensionLineColor(This,Type)	\
    ((This)->lpVtbl -> put_DimensionLineColor(This,Type))

#define IZcadDimArcLength_get_ExtensionLineColor(This,Type)	\
    ((This)->lpVtbl -> get_ExtensionLineColor(This,Type))

#define IZcadDimArcLength_put_ExtensionLineColor(This,Type)	\
    ((This)->lpVtbl -> put_ExtensionLineColor(This,Type))

#define IZcadDimArcLength_get_PrimaryUnitsPrecision(This,Prec)	\
    ((This)->lpVtbl -> get_PrimaryUnitsPrecision(This,Prec))

#define IZcadDimArcLength_put_PrimaryUnitsPrecision(This,Prec)	\
    ((This)->lpVtbl -> put_PrimaryUnitsPrecision(This,Prec))

#define IZcadDimArcLength_get_DimensionLineExtend(This,extend)	\
    ((This)->lpVtbl -> get_DimensionLineExtend(This,extend))

#define IZcadDimArcLength_put_DimensionLineExtend(This,extend)	\
    ((This)->lpVtbl -> put_DimensionLineExtend(This,extend))

#define IZcadDimArcLength_get_ExtensionLineExtend(This,extend)	\
    ((This)->lpVtbl -> get_ExtensionLineExtend(This,extend))

#define IZcadDimArcLength_put_ExtensionLineExtend(This,extend)	\
    ((This)->lpVtbl -> put_ExtensionLineExtend(This,extend))

#define IZcadDimArcLength_get_Fit(This,fittype)	\
    ((This)->lpVtbl -> get_Fit(This,fittype))

#define IZcadDimArcLength_put_Fit(This,fittype)	\
    ((This)->lpVtbl -> put_Fit(This,fittype))

#define IZcadDimArcLength_get_FractionFormat(This,type)	\
    ((This)->lpVtbl -> get_FractionFormat(This,type))

#define IZcadDimArcLength_put_FractionFormat(This,type)	\
    ((This)->lpVtbl -> put_FractionFormat(This,type))

#define IZcadDimArcLength_get_HorizontalTextPosition(This,type)	\
    ((This)->lpVtbl -> get_HorizontalTextPosition(This,type))

#define IZcadDimArcLength_put_HorizontalTextPosition(This,type)	\
    ((This)->lpVtbl -> put_HorizontalTextPosition(This,type))

#define IZcadDimArcLength_get_LinearScaleFactor(This,type)	\
    ((This)->lpVtbl -> get_LinearScaleFactor(This,type))

#define IZcadDimArcLength_put_LinearScaleFactor(This,type)	\
    ((This)->lpVtbl -> put_LinearScaleFactor(This,type))

#define IZcadDimArcLength_get_UnitsFormat(This,format)	\
    ((This)->lpVtbl -> get_UnitsFormat(This,format))

#define IZcadDimArcLength_put_UnitsFormat(This,format)	\
    ((This)->lpVtbl -> put_UnitsFormat(This,format))

#define IZcadDimArcLength_get_ExtensionLineWeight(This,lweight)	\
    ((This)->lpVtbl -> get_ExtensionLineWeight(This,lweight))

#define IZcadDimArcLength_put_ExtensionLineWeight(This,lweight)	\
    ((This)->lpVtbl -> put_ExtensionLineWeight(This,lweight))

#define IZcadDimArcLength_get_RoundDistance(This,Distance)	\
    ((This)->lpVtbl -> get_RoundDistance(This,Distance))

#define IZcadDimArcLength_put_RoundDistance(This,Distance)	\
    ((This)->lpVtbl -> put_RoundDistance(This,Distance))

#define IZcadDimArcLength_get_DimLine1Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_DimLine1Suppress(This,bSuppress))

#define IZcadDimArcLength_put_DimLine1Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_DimLine1Suppress(This,bSuppress))

#define IZcadDimArcLength_get_DimLine2Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_DimLine2Suppress(This,bSuppress))

#define IZcadDimArcLength_put_DimLine2Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_DimLine2Suppress(This,bSuppress))

#define IZcadDimArcLength_get_ExtLine1Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_ExtLine1Suppress(This,bSuppress))

#define IZcadDimArcLength_put_ExtLine1Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_ExtLine1Suppress(This,bSuppress))

#define IZcadDimArcLength_get_ExtLine2Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_ExtLine2Suppress(This,bSuppress))

#define IZcadDimArcLength_put_ExtLine2Suppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_ExtLine2Suppress(This,bSuppress))

#define IZcadDimArcLength_get_DimLineInside(This,bInside)	\
    ((This)->lpVtbl -> get_DimLineInside(This,bInside))

#define IZcadDimArcLength_put_DimLineInside(This,bInside)	\
    ((This)->lpVtbl -> put_DimLineInside(This,bInside))

#define IZcadDimArcLength_get_TextInsideAlign(This,bInside)	\
    ((This)->lpVtbl -> get_TextInsideAlign(This,bInside))

#define IZcadDimArcLength_put_TextInsideAlign(This,bInside)	\
    ((This)->lpVtbl -> put_TextInsideAlign(This,bInside))

#define IZcadDimArcLength_get_TextInside(This,bInside)	\
    ((This)->lpVtbl -> get_TextInside(This,bInside))

#define IZcadDimArcLength_put_TextInside(This,bInside)	\
    ((This)->lpVtbl -> put_TextInside(This,bInside))

#define IZcadDimArcLength_get_ForceLineInside(This,bInside)	\
    ((This)->lpVtbl -> get_ForceLineInside(This,bInside))

#define IZcadDimArcLength_put_ForceLineInside(This,bInside)	\
    ((This)->lpVtbl -> put_ForceLineInside(This,bInside))

#define IZcadDimArcLength_get_TextOutsideAlign(This,bInside)	\
    ((This)->lpVtbl -> get_TextOutsideAlign(This,bInside))

#define IZcadDimArcLength_put_TextOutsideAlign(This,bInside)	\
    ((This)->lpVtbl -> put_TextOutsideAlign(This,bInside))

#define IZcadDimArcLength_get_ExtensionLineOffset(This,offset)	\
    ((This)->lpVtbl -> get_ExtensionLineOffset(This,offset))

#define IZcadDimArcLength_put_ExtensionLineOffset(This,offset)	\
    ((This)->lpVtbl -> put_ExtensionLineOffset(This,offset))

#define IZcadDimArcLength_get_AltSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressLeadingZeros(This,bVal))

#define IZcadDimArcLength_put_AltSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressLeadingZeros(This,bVal))

#define IZcadDimArcLength_get_AltSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressTrailingZeros(This,bVal))

#define IZcadDimArcLength_put_AltSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressTrailingZeros(This,bVal))

#define IZcadDimArcLength_get_AltSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressZeroFeet(This,bVal))

#define IZcadDimArcLength_put_AltSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressZeroFeet(This,bVal))

#define IZcadDimArcLength_get_AltSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressZeroInches(This,bVal))

#define IZcadDimArcLength_put_AltSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressZeroInches(This,bVal))

#define IZcadDimArcLength_get_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimArcLength_put_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimArcLength_get_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimArcLength_put_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimArcLength_get_AltToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimArcLength_put_AltToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimArcLength_get_AltToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressZeroInches(This,bVal))

#define IZcadDimArcLength_put_AltToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressZeroInches(This,bVal))

#define IZcadDimArcLength_get_SuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressZeroFeet(This,bVal))

#define IZcadDimArcLength_put_SuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressZeroFeet(This,bVal))

#define IZcadDimArcLength_get_SuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressZeroInches(This,bVal))

#define IZcadDimArcLength_put_SuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressZeroInches(This,bVal))

#define IZcadDimArcLength_get_ToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimArcLength_put_ToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimArcLength_get_ToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressZeroInches(This,bVal))

#define IZcadDimArcLength_put_ToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressZeroInches(This,bVal))

#define IZcadDimArcLength_get_DimensionLineWeight(This,weight)	\
    ((This)->lpVtbl -> get_DimensionLineWeight(This,weight))

#define IZcadDimArcLength_put_DimensionLineWeight(This,weight)	\
    ((This)->lpVtbl -> put_DimensionLineWeight(This,weight))

#define IZcadDimArcLength_get_ArrowheadSize(This,size)	\
    ((This)->lpVtbl -> get_ArrowheadSize(This,size))

#define IZcadDimArcLength_put_ArrowheadSize(This,size)	\
    ((This)->lpVtbl -> put_ArrowheadSize(This,size))

#define IZcadDimArcLength_get_Arrowhead1Type(This,Type)	\
    ((This)->lpVtbl -> get_Arrowhead1Type(This,Type))

#define IZcadDimArcLength_put_Arrowhead1Type(This,Type)	\
    ((This)->lpVtbl -> put_Arrowhead1Type(This,Type))

#define IZcadDimArcLength_get_Arrowhead2Type(This,Type)	\
    ((This)->lpVtbl -> get_Arrowhead2Type(This,Type))

#define IZcadDimArcLength_put_Arrowhead2Type(This,Type)	\
    ((This)->lpVtbl -> put_Arrowhead2Type(This,Type))

#define IZcadDimArcLength_get_Measurement(This,bVal)	\
    ((This)->lpVtbl -> get_Measurement(This,bVal))

#define IZcadDimArcLength_get_Arrowhead1Block(This,BlockName)	\
    ((This)->lpVtbl -> get_Arrowhead1Block(This,BlockName))

#define IZcadDimArcLength_put_Arrowhead1Block(This,BlockName)	\
    ((This)->lpVtbl -> put_Arrowhead1Block(This,BlockName))

#define IZcadDimArcLength_get_Arrowhead2Block(This,BlockName)	\
    ((This)->lpVtbl -> get_Arrowhead2Block(This,BlockName))

#define IZcadDimArcLength_put_Arrowhead2Block(This,BlockName)	\
    ((This)->lpVtbl -> put_Arrowhead2Block(This,BlockName))

#define IZcadDimArcLength_get_ArcPoint(This,pVal)	\
    ((This)->lpVtbl -> get_ArcPoint(This,pVal))

#define IZcadDimArcLength_put_ArcPoint(This,newVal)	\
    ((This)->lpVtbl -> put_ArcPoint(This,newVal))

#define IZcadDimArcLength_get_ExtLine1Point(This,pVal)	\
    ((This)->lpVtbl -> get_ExtLine1Point(This,pVal))

#define IZcadDimArcLength_put_ExtLine1Point(This,newVal)	\
    ((This)->lpVtbl -> put_ExtLine1Point(This,newVal))

#define IZcadDimArcLength_get_ExtLine2Point(This,pVal)	\
    ((This)->lpVtbl -> get_ExtLine2Point(This,pVal))

#define IZcadDimArcLength_put_ExtLine2Point(This,newVal)	\
    ((This)->lpVtbl -> put_ExtLine2Point(This,newVal))

#define IZcadDimArcLength_get_CenterPoint(This,pVal)	\
    ((This)->lpVtbl -> get_CenterPoint(This,pVal))

#define IZcadDimArcLength_put_CenterPoint(This,newVal)	\
    ((This)->lpVtbl -> put_CenterPoint(This,newVal))

#define IZcadDimArcLength_get_Leader1Point(This,pVal)	\
    ((This)->lpVtbl -> get_Leader1Point(This,pVal))

#define IZcadDimArcLength_put_Leader1Point(This,newVal)	\
    ((This)->lpVtbl -> put_Leader1Point(This,newVal))

#define IZcadDimArcLength_get_Leader2Point(This,pVal)	\
    ((This)->lpVtbl -> get_Leader2Point(This,pVal))

#define IZcadDimArcLength_put_Leader2Point(This,newVal)	\
    ((This)->lpVtbl -> put_Leader2Point(This,newVal))

#define IZcadDimArcLength_get_IsPartial(This,pVal)	\
    ((This)->lpVtbl -> get_IsPartial(This,pVal))

#define IZcadDimArcLength_put_IsPartial(This,newVal)	\
    ((This)->lpVtbl -> put_IsPartial(This,newVal))

#define IZcadDimArcLength_get_ArcStartParam(This,pVal)	\
    ((This)->lpVtbl -> get_ArcStartParam(This,pVal))

#define IZcadDimArcLength_put_ArcStartParam(This,newVal)	\
    ((This)->lpVtbl -> put_ArcStartParam(This,newVal))

#define IZcadDimArcLength_get_ArcEndParam(This,pVal)	\
    ((This)->lpVtbl -> get_ArcEndParam(This,pVal))

#define IZcadDimArcLength_put_ArcEndParam(This,newVal)	\
    ((This)->lpVtbl -> put_ArcEndParam(This,newVal))

#define IZcadDimArcLength_get_HasLeader(This,pVal)	\
    ((This)->lpVtbl -> get_HasLeader(This,pVal))

#define IZcadDimArcLength_put_HasLeader(This,newVal)	\
    ((This)->lpVtbl -> put_HasLeader(This,newVal))

#define IZcadDimArcLength_get_SymbolPosition(This,position)	\
    ((This)->lpVtbl -> get_SymbolPosition(This,position))

#define IZcadDimArcLength_put_SymbolPosition(This,position)	\
    ((This)->lpVtbl -> put_SymbolPosition(This,position))

#define IZcadDimArcLength_get_DimensionLinetype(This,Linetype)	\
    ((This)->lpVtbl -> get_DimensionLinetype(This,Linetype))

#define IZcadDimArcLength_put_DimensionLinetype(This,Linetype)	\
    ((This)->lpVtbl -> put_DimensionLinetype(This,Linetype))

#define IZcadDimArcLength_get_ExtLine1Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_ExtLine1Linetype(This,Linetype))

#define IZcadDimArcLength_put_ExtLine1Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_ExtLine1Linetype(This,Linetype))

#define IZcadDimArcLength_get_ExtLine2Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_ExtLine2Linetype(This,Linetype))

#define IZcadDimArcLength_put_ExtLine2Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_ExtLine2Linetype(This,Linetype))

#define IZcadDimArcLength_get_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ((This)->lpVtbl -> get_ExtLineFixedLenSuppress(This,bFixedLen))

#define IZcadDimArcLength_put_ExtLineFixedLenSuppress(This,bFixedLen)	\
    ((This)->lpVtbl -> put_ExtLineFixedLenSuppress(This,bFixedLen))

#define IZcadDimArcLength_get_ExtLineFixedLen(This,FixedLen)	\
    ((This)->lpVtbl -> get_ExtLineFixedLen(This,FixedLen))

#define IZcadDimArcLength_put_ExtLineFixedLen(This,FixedLen)	\
    ((This)->lpVtbl -> put_ExtLineFixedLen(This,FixedLen))

#define IZcadDimArcLength_get_SubUnitsSuffix(This,suffix)	\
    ((This)->lpVtbl -> get_SubUnitsSuffix(This,suffix))

#define IZcadDimArcLength_put_SubUnitsSuffix(This,suffix)	\
    ((This)->lpVtbl -> put_SubUnitsSuffix(This,suffix))

#define IZcadDimArcLength_get_SubUnitsFactor(This,factor)	\
    ((This)->lpVtbl -> get_SubUnitsFactor(This,factor))

#define IZcadDimArcLength_put_SubUnitsFactor(This,factor)	\
    ((This)->lpVtbl -> put_SubUnitsFactor(This,factor))

#define IZcadDimArcLength_get_AltSubUnitsSuffix(This,suffix)	\
    ((This)->lpVtbl -> get_AltSubUnitsSuffix(This,suffix))

#define IZcadDimArcLength_put_AltSubUnitsSuffix(This,suffix)	\
    ((This)->lpVtbl -> put_AltSubUnitsSuffix(This,suffix))

#define IZcadDimArcLength_get_AltSubUnitsFactor(This,factor)	\
    ((This)->lpVtbl -> get_AltSubUnitsFactor(This,factor))

#define IZcadDimArcLength_put_AltSubUnitsFactor(This,factor)	\
    ((This)->lpVtbl -> put_AltSubUnitsFactor(This,factor))

#endif
#endif


 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_AltTextPrefix_Proxy(
    IZcadDimArcLength * This,
     BSTR Prefix);

void __RPC_STUB IZcadDimArcLength_put_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_AltTextSuffix_Proxy(
    IZcadDimArcLength * This,
     BSTR *Prefix);

void __RPC_STUB IZcadDimArcLength_get_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_AltTextSuffix_Proxy(
    IZcadDimArcLength * This,
     BSTR Prefix);

void __RPC_STUB IZcadDimArcLength_put_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_DimensionLineColor_Proxy(
    IZcadDimArcLength * This,
     ZCAD_COLOR *Type);

void __RPC_STUB IZcadDimArcLength_get_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_DimensionLineColor_Proxy(
    IZcadDimArcLength * This,
     ZCAD_COLOR Type);

void __RPC_STUB IZcadDimArcLength_put_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_ExtensionLineColor_Proxy(
    IZcadDimArcLength * This,
     ZCAD_COLOR *Type);

void __RPC_STUB IZcadDimArcLength_get_ExtensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_ExtensionLineColor_Proxy(
    IZcadDimArcLength * This,
     ZCAD_COLOR Type);

void __RPC_STUB IZcadDimArcLength_put_ExtensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_PrimaryUnitsPrecision_Proxy(
    IZcadDimArcLength * This,
     ZcDimPrecision *Prec);

void __RPC_STUB IZcadDimArcLength_get_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_PrimaryUnitsPrecision_Proxy(
    IZcadDimArcLength * This,
     ZcDimPrecision Prec);

void __RPC_STUB IZcadDimArcLength_put_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_DimensionLineExtend_Proxy(
    IZcadDimArcLength * This,
     double *extend);

void __RPC_STUB IZcadDimArcLength_get_DimensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_DimensionLineExtend_Proxy(
    IZcadDimArcLength * This,
     double extend);

void __RPC_STUB IZcadDimArcLength_put_DimensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_ExtensionLineExtend_Proxy(
    IZcadDimArcLength * This,
     double *extend);

void __RPC_STUB IZcadDimArcLength_get_ExtensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_ExtensionLineExtend_Proxy(
    IZcadDimArcLength * This,
     double extend);

void __RPC_STUB IZcadDimArcLength_put_ExtensionLineExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_Fit_Proxy(
    IZcadDimArcLength * This,
     ZcDimFit *fittype);

void __RPC_STUB IZcadDimArcLength_get_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_Fit_Proxy(
    IZcadDimArcLength * This,
     ZcDimFit fittype);

void __RPC_STUB IZcadDimArcLength_put_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_FractionFormat_Proxy(
    IZcadDimArcLength * This,
     ZcDimFractionType *type);

void __RPC_STUB IZcadDimArcLength_get_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_FractionFormat_Proxy(
    IZcadDimArcLength * This,
     ZcDimFractionType type);

void __RPC_STUB IZcadDimArcLength_put_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_HorizontalTextPosition_Proxy(
    IZcadDimArcLength * This,
     ZcDimHorizontalJustification *type);

void __RPC_STUB IZcadDimArcLength_get_HorizontalTextPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_HorizontalTextPosition_Proxy(
    IZcadDimArcLength * This,
     ZcDimHorizontalJustification type);

void __RPC_STUB IZcadDimArcLength_put_HorizontalTextPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_LinearScaleFactor_Proxy(
    IZcadDimArcLength * This,
     ZCAD_NOUNITS *type);

void __RPC_STUB IZcadDimArcLength_get_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_LinearScaleFactor_Proxy(
    IZcadDimArcLength * This,
     ZCAD_NOUNITS type);

void __RPC_STUB IZcadDimArcLength_put_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_UnitsFormat_Proxy(
    IZcadDimArcLength * This,
     ZcDimLUnits *format);

void __RPC_STUB IZcadDimArcLength_get_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_UnitsFormat_Proxy(
    IZcadDimArcLength * This,
     ZcDimLUnits format);

void __RPC_STUB IZcadDimArcLength_put_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_ExtensionLineWeight_Proxy(
    IZcadDimArcLength * This,
     ZCAD_LWEIGHT *lweight);

void __RPC_STUB IZcadDimArcLength_get_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_ExtensionLineWeight_Proxy(
    IZcadDimArcLength * This,
     ZCAD_LWEIGHT lweight);

void __RPC_STUB IZcadDimArcLength_put_ExtensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_RoundDistance_Proxy(
    IZcadDimArcLength * This,
     double *Distance);

void __RPC_STUB IZcadDimArcLength_get_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_RoundDistance_Proxy(
    IZcadDimArcLength * This,
     double Distance);

void __RPC_STUB IZcadDimArcLength_put_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_DimLine1Suppress_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDimArcLength_get_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_DimLine1Suppress_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDimArcLength_put_DimLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_DimLine2Suppress_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDimArcLength_get_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_DimLine2Suppress_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDimArcLength_put_DimLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_ExtLine1Suppress_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDimArcLength_get_ExtLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_ExtLine1Suppress_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDimArcLength_put_ExtLine1Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_ExtLine2Suppress_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDimArcLength_get_ExtLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_ExtLine2Suppress_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDimArcLength_put_ExtLine2Suppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_DimLineInside_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimArcLength_get_DimLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_DimLineInside_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimArcLength_put_DimLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_TextInsideAlign_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimArcLength_get_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_TextInsideAlign_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimArcLength_put_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_TextInside_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimArcLength_get_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_TextInside_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimArcLength_put_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_ForceLineInside_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimArcLength_get_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_ForceLineInside_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimArcLength_put_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_TextOutsideAlign_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimArcLength_get_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_TextOutsideAlign_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimArcLength_put_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_ExtensionLineOffset_Proxy(
    IZcadDimArcLength * This,
     double *offset);

void __RPC_STUB IZcadDimArcLength_get_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_ExtensionLineOffset_Proxy(
    IZcadDimArcLength * This,
     double offset);

void __RPC_STUB IZcadDimArcLength_put_ExtensionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_AltSuppressLeadingZeros_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimArcLength_get_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_AltSuppressLeadingZeros_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimArcLength_put_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_AltSuppressTrailingZeros_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimArcLength_get_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_AltSuppressTrailingZeros_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimArcLength_put_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_AltSuppressZeroFeet_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimArcLength_get_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_AltSuppressZeroFeet_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimArcLength_put_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_AltSuppressZeroInches_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimArcLength_get_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_AltSuppressZeroInches_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimArcLength_put_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_AltToleranceSuppressLeadingZeros_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimArcLength_get_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_AltToleranceSuppressLeadingZeros_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimArcLength_put_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_AltToleranceSuppressTrailingZeros_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimArcLength_get_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_AltToleranceSuppressTrailingZeros_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimArcLength_put_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_AltToleranceSuppressZeroFeet_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimArcLength_get_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_AltToleranceSuppressZeroFeet_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimArcLength_put_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_AltToleranceSuppressZeroInches_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimArcLength_get_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_AltToleranceSuppressZeroInches_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimArcLength_put_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_SuppressZeroFeet_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimArcLength_get_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_SuppressZeroFeet_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimArcLength_put_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_SuppressZeroInches_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimArcLength_get_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_SuppressZeroInches_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimArcLength_put_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_ToleranceSuppressZeroFeet_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimArcLength_get_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_ToleranceSuppressZeroFeet_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimArcLength_put_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_ToleranceSuppressZeroInches_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimArcLength_get_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_ToleranceSuppressZeroInches_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimArcLength_put_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_DimensionLineWeight_Proxy(
    IZcadDimArcLength * This,
     ZCAD_LWEIGHT *weight);

void __RPC_STUB IZcadDimArcLength_get_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_DimensionLineWeight_Proxy(
    IZcadDimArcLength * This,
     ZCAD_LWEIGHT weight);

void __RPC_STUB IZcadDimArcLength_put_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_ArrowheadSize_Proxy(
    IZcadDimArcLength * This,
     double *size);

void __RPC_STUB IZcadDimArcLength_get_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_ArrowheadSize_Proxy(
    IZcadDimArcLength * This,
     double size);

void __RPC_STUB IZcadDimArcLength_put_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_Arrowhead1Type_Proxy(
    IZcadDimArcLength * This,
     ZcDimArrowheadType *Type);

void __RPC_STUB IZcadDimArcLength_get_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_Arrowhead1Type_Proxy(
    IZcadDimArcLength * This,
     ZcDimArrowheadType Type);

void __RPC_STUB IZcadDimArcLength_put_Arrowhead1Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_Arrowhead2Type_Proxy(
    IZcadDimArcLength * This,
     ZcDimArrowheadType *Type);

void __RPC_STUB IZcadDimArcLength_get_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_Arrowhead2Type_Proxy(
    IZcadDimArcLength * This,
     ZcDimArrowheadType Type);

void __RPC_STUB IZcadDimArcLength_put_Arrowhead2Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_Measurement_Proxy(
    IZcadDimArcLength * This,
     double *bVal);

void __RPC_STUB IZcadDimArcLength_get_Measurement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_Arrowhead1Block_Proxy(
    IZcadDimArcLength * This,
     BSTR *BlockName);

void __RPC_STUB IZcadDimArcLength_get_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_Arrowhead1Block_Proxy(
    IZcadDimArcLength * This,
     BSTR BlockName);

void __RPC_STUB IZcadDimArcLength_put_Arrowhead1Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_Arrowhead2Block_Proxy(
    IZcadDimArcLength * This,
     BSTR *BlockName);

void __RPC_STUB IZcadDimArcLength_get_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_Arrowhead2Block_Proxy(
    IZcadDimArcLength * This,
     BSTR BlockName);

void __RPC_STUB IZcadDimArcLength_put_Arrowhead2Block_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_ArcPoint_Proxy(
    IZcadDimArcLength * This,
     VARIANT *pVal);

void __RPC_STUB IZcadDimArcLength_get_ArcPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_ArcPoint_Proxy(
    IZcadDimArcLength * This,
     VARIANT newVal);

void __RPC_STUB IZcadDimArcLength_put_ArcPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_ExtLine1Point_Proxy(
    IZcadDimArcLength * This,
     VARIANT *pVal);

void __RPC_STUB IZcadDimArcLength_get_ExtLine1Point_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_ExtLine1Point_Proxy(
    IZcadDimArcLength * This,
     VARIANT newVal);

void __RPC_STUB IZcadDimArcLength_put_ExtLine1Point_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_ExtLine2Point_Proxy(
    IZcadDimArcLength * This,
     VARIANT *pVal);

void __RPC_STUB IZcadDimArcLength_get_ExtLine2Point_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_ExtLine2Point_Proxy(
    IZcadDimArcLength * This,
     VARIANT newVal);

void __RPC_STUB IZcadDimArcLength_put_ExtLine2Point_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_CenterPoint_Proxy(
    IZcadDimArcLength * This,
     VARIANT *pVal);

void __RPC_STUB IZcadDimArcLength_get_CenterPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_CenterPoint_Proxy(
    IZcadDimArcLength * This,
     VARIANT newVal);

void __RPC_STUB IZcadDimArcLength_put_CenterPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_Leader1Point_Proxy(
    IZcadDimArcLength * This,
     VARIANT *pVal);

void __RPC_STUB IZcadDimArcLength_get_Leader1Point_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_Leader1Point_Proxy(
    IZcadDimArcLength * This,
     VARIANT newVal);

void __RPC_STUB IZcadDimArcLength_put_Leader1Point_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_Leader2Point_Proxy(
    IZcadDimArcLength * This,
     VARIANT *pVal);

void __RPC_STUB IZcadDimArcLength_get_Leader2Point_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_Leader2Point_Proxy(
    IZcadDimArcLength * This,
     VARIANT newVal);

void __RPC_STUB IZcadDimArcLength_put_Leader2Point_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_IsPartial_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *pVal);

void __RPC_STUB IZcadDimArcLength_get_IsPartial_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_IsPartial_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL newVal);

void __RPC_STUB IZcadDimArcLength_put_IsPartial_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_ArcStartParam_Proxy(
    IZcadDimArcLength * This,
     double *pVal);

void __RPC_STUB IZcadDimArcLength_get_ArcStartParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_ArcStartParam_Proxy(
    IZcadDimArcLength * This,
     double newVal);

void __RPC_STUB IZcadDimArcLength_put_ArcStartParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_ArcEndParam_Proxy(
    IZcadDimArcLength * This,
     double *pVal);

void __RPC_STUB IZcadDimArcLength_get_ArcEndParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_ArcEndParam_Proxy(
    IZcadDimArcLength * This,
     double newVal);

void __RPC_STUB IZcadDimArcLength_put_ArcEndParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_HasLeader_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *pVal);

void __RPC_STUB IZcadDimArcLength_get_HasLeader_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_HasLeader_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL newVal);

void __RPC_STUB IZcadDimArcLength_put_HasLeader_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_SymbolPosition_Proxy(
    IZcadDimArcLength * This,
     ZcDimArcLengthSymbol *position);

void __RPC_STUB IZcadDimArcLength_get_SymbolPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_SymbolPosition_Proxy(
    IZcadDimArcLength * This,
     ZcDimArcLengthSymbol position);

void __RPC_STUB IZcadDimArcLength_put_SymbolPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_DimensionLinetype_Proxy(
    IZcadDimArcLength * This,
     BSTR *Linetype);

void __RPC_STUB IZcadDimArcLength_get_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_DimensionLinetype_Proxy(
    IZcadDimArcLength * This,
     BSTR Linetype);

void __RPC_STUB IZcadDimArcLength_put_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_ExtLine1Linetype_Proxy(
    IZcadDimArcLength * This,
     BSTR *Linetype);

void __RPC_STUB IZcadDimArcLength_get_ExtLine1Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_ExtLine1Linetype_Proxy(
    IZcadDimArcLength * This,
     BSTR Linetype);

void __RPC_STUB IZcadDimArcLength_put_ExtLine1Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_ExtLine2Linetype_Proxy(
    IZcadDimArcLength * This,
     BSTR *Linetype);

void __RPC_STUB IZcadDimArcLength_get_ExtLine2Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_ExtLine2Linetype_Proxy(
    IZcadDimArcLength * This,
     BSTR Linetype);

void __RPC_STUB IZcadDimArcLength_put_ExtLine2Linetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_ExtLineFixedLenSuppress_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL *bFixedLen);

void __RPC_STUB IZcadDimArcLength_get_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_ExtLineFixedLenSuppress_Proxy(
    IZcadDimArcLength * This,
     VARIANT_BOOL bFixedLen);

void __RPC_STUB IZcadDimArcLength_put_ExtLineFixedLenSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_ExtLineFixedLen_Proxy(
    IZcadDimArcLength * This,
     double *FixedLen);

void __RPC_STUB IZcadDimArcLength_get_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_ExtLineFixedLen_Proxy(
    IZcadDimArcLength * This,
     double FixedLen);

void __RPC_STUB IZcadDimArcLength_put_ExtLineFixedLen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_SubUnitsSuffix_Proxy(
    IZcadDimArcLength * This,
     BSTR *suffix);

void __RPC_STUB IZcadDimArcLength_get_SubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_SubUnitsSuffix_Proxy(
    IZcadDimArcLength * This,
     BSTR suffix);

void __RPC_STUB IZcadDimArcLength_put_SubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_SubUnitsFactor_Proxy(
    IZcadDimArcLength * This,
     double *factor);

void __RPC_STUB IZcadDimArcLength_get_SubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_SubUnitsFactor_Proxy(
    IZcadDimArcLength * This,
     double factor);

void __RPC_STUB IZcadDimArcLength_put_SubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_AltSubUnitsSuffix_Proxy(
    IZcadDimArcLength * This,
     BSTR *suffix);

void __RPC_STUB IZcadDimArcLength_get_AltSubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_AltSubUnitsSuffix_Proxy(
    IZcadDimArcLength * This,
     BSTR suffix);

void __RPC_STUB IZcadDimArcLength_put_AltSubUnitsSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_get_AltSubUnitsFactor_Proxy(
    IZcadDimArcLength * This,
     double *factor);

void __RPC_STUB IZcadDimArcLength_get_AltSubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimArcLength_put_AltSubUnitsFactor_Proxy(
    IZcadDimArcLength * This,
     double factor);

void __RPC_STUB IZcadDimArcLength_put_AltSubUnitsFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


#endif

DEFINE_GUID(CLSID_ZcadDimArcLength,0xEC92301D,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC92301D-5A17-11E7-B72E-BC5FF42AC839")
ZcadDimArcLength;
#endif

#ifndef __IZcadDimRadialLarge_INTERFACE_DEFINED__
#define __IZcadDimRadialLarge_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadDimRadialLarge,0xEC922FE2,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC922FE2-5A17-11E7-B72E-BC5FF42AC839")
    IZcadDimRadialLarge : public IZcadDimension
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_AltUnits(
             VARIANT_BOOL *bAlternate) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnits(
             VARIANT_BOOL bAlternate) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnitsPrecision(
             ZcDimPrecision *Precision) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnitsPrecision(
             ZcDimPrecision Precision) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnitsScale(
             ZCAD_NOUNITS *Scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnitsScale(
             ZCAD_NOUNITS Scale) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltRoundDistance(
             double *Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltRoundDistance(
             double Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltTolerancePrecision(
             ZcDimPrecision *Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltTolerancePrecision(
             ZcDimPrecision Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltUnitsFormat(
             ZcDimUnits *Units) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltUnitsFormat(
             ZcDimUnits Units) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltTextPrefix(
             BSTR *Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltTextPrefix(
             BSTR Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltTextSuffix(
             BSTR *Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltTextSuffix(
             BSTR Prefix) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_CenterType(
             ZcDimCenterType *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_CenterType(
             ZcDimCenterType Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_CenterMarkSize(
             double *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_CenterMarkSize(
             double Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLineColor(
             ZCAD_COLOR *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLineColor(
             ZCAD_COLOR Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_PrimaryUnitsPrecision(
             ZcDimPrecision *Prec) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_PrimaryUnitsPrecision(
             ZcDimPrecision Prec) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_FractionFormat(
             ZcDimFractionType *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_FractionFormat(
             ZcDimFractionType type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Fit(
             ZcDimFit *fittype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Fit(
             ZcDimFit fittype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LinearScaleFactor(
             ZCAD_NOUNITS *type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LinearScaleFactor(
             ZCAD_NOUNITS type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_UnitsFormat(
             ZcDimLUnits *format) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_UnitsFormat(
             ZcDimLUnits format) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_RoundDistance(
             double *Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_RoundDistance(
             double Distance) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimLineSuppress(
             VARIANT_BOOL *bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimLineSuppress(
             VARIANT_BOOL bSuppress) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextInsideAlign(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextInsideAlign(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextInside(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextInside(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ForceLineInside(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ForceLineInside(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextOutsideAlign(
             VARIANT_BOOL *bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextOutsideAlign(
             VARIANT_BOOL bInside) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressLeadingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressLeadingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressTrailingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressTrailingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltSuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltSuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressLeadingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressLeadingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressTrailingZeros(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressTrailingZeros(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AltToleranceSuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AltToleranceSuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroFeet(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroFeet(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ToleranceSuppressZeroInches(
             VARIANT_BOOL *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ToleranceSuppressZeroInches(
             VARIANT_BOOL bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLineWeight(
             ZCAD_LWEIGHT *weight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLineWeight(
             ZCAD_LWEIGHT weight) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArrowheadSize(
             double *size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArrowheadSize(
             double size) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArrowheadType(
             ZcDimArrowheadType *Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArrowheadType(
             ZcDimArrowheadType Type) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Measurement(
             double *bVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ArrowheadBlock(
             BSTR *BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ArrowheadBlock(
             BSTR BlockName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_OverrideCenter(
             VARIANT *overrideCenterPos) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_OverrideCenter(
             VARIANT overrideCenterPos) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_JogLocation(
             VARIANT *jogPos) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_JogLocation(
             VARIANT jogPos) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_JogAngle(
             ZCAD_ANGLE *jogAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_JogAngle(
             ZCAD_ANGLE rotAngle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Center(
             VARIANT *pVar) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Center(
             VARIANT newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ChordPoint(
             VARIANT *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ChordPoint(
             VARIANT newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DimensionLinetype(
             BSTR *Linetype) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DimensionLinetype(
             BSTR Linetype) = 0;

    };

#else

    typedef struct IZcadDimRadialLargeVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadDimRadialLarge * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadDimRadialLarge * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadDimRadialLarge * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadDimRadialLarge * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadDimRadialLarge * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadDimRadialLarge * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadDimRadialLarge * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadDimRadialLarge * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadDimRadialLarge * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadDimRadialLarge * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadDimRadialLarge * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadDimRadialLarge * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadDimRadialLarge * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadDimRadialLarge * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadDimRadialLarge * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadDimRadialLarge * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadDimRadialLarge * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadDimRadialLarge * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadDimRadialLarge * This);

         HRESULT ( STDMETHODCALLTYPE *get_TrueColor )(
            IZcadDimRadialLarge * This,
             IZcadZcCmColor **pColor);

         HRESULT ( STDMETHODCALLTYPE *put_TrueColor )(
            IZcadDimRadialLarge * This,
             IZcadZcCmColor *pColor);

         HRESULT ( STDMETHODCALLTYPE *get_Layer )(
            IZcadDimRadialLarge * This,
             BSTR *Layer);

         HRESULT ( STDMETHODCALLTYPE *put_Layer )(
            IZcadDimRadialLarge * This,
             BSTR Layer);

         HRESULT ( STDMETHODCALLTYPE *get_Linetype )(
            IZcadDimRadialLarge * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_Linetype )(
            IZcadDimRadialLarge * This,
             BSTR Linetype);

         HRESULT ( STDMETHODCALLTYPE *get_LinetypeScale )(
            IZcadDimRadialLarge * This,
             ZCAD_NOUNITS *ltScale);

         HRESULT ( STDMETHODCALLTYPE *put_LinetypeScale )(
            IZcadDimRadialLarge * This,
             ZCAD_NOUNITS ltScale);

         HRESULT ( STDMETHODCALLTYPE *get_Visible )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bVisible);

         HRESULT ( STDMETHODCALLTYPE *put_Visible )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bVisible);

         HRESULT ( STDMETHODCALLTYPE *ArrayPolar )(
            IZcadDimRadialLarge * This,
             int NumberOfObjects,
             double AngleToFill,
             VARIANT CenterPoint,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *ArrayRectangular )(
            IZcadDimRadialLarge * This,
             int NumberOfRows,
             int NumberOfColumns,
             int NumberOfLevels,
             double DistBetweenRows,
             double DistBetweenCols,
             double DistBetweenLevels,
             VARIANT *pArrayObjs);

         HRESULT ( STDMETHODCALLTYPE *Highlight )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL HighlightFlag);

         HRESULT ( STDMETHODCALLTYPE *Copy )(
            IZcadDimRadialLarge * This,
             LPDISPATCH *pCopyObj);

         HRESULT ( STDMETHODCALLTYPE *Move )(
            IZcadDimRadialLarge * This,
             VARIANT FromPoint,
             VARIANT ToPoint);

         HRESULT ( STDMETHODCALLTYPE *Rotate )(
            IZcadDimRadialLarge * This,
             VARIANT BasePoint,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Rotate3D )(
            IZcadDimRadialLarge * This,
             VARIANT Point1,
             VARIANT Point2,
             double RotationAngle);

         HRESULT ( STDMETHODCALLTYPE *Mirror )(
            IZcadDimRadialLarge * This,
             VARIANT Point1,
             VARIANT Point2,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *Mirror3D )(
            IZcadDimRadialLarge * This,
             VARIANT point1,
             VARIANT point2,
             VARIANT point3,
             LPDISPATCH *pMirrorObj);

         HRESULT ( STDMETHODCALLTYPE *ScaleEntity )(
            IZcadDimRadialLarge * This,
             VARIANT BasePoint,
             double ScaleFactor);

         HRESULT ( STDMETHODCALLTYPE *TransformBy )(
            IZcadDimRadialLarge * This,
             VARIANT TransformationMatrix);

         HRESULT ( STDMETHODCALLTYPE *Update )(
            IZcadDimRadialLarge * This);

         HRESULT ( STDMETHODCALLTYPE *GetBoundingBox )(
            IZcadDimRadialLarge * This,
             VARIANT *MinPoint,
             VARIANT *MaxPoint);

         HRESULT ( STDMETHODCALLTYPE *IntersectWith )(
            IZcadDimRadialLarge * This,
             LPDISPATCH IntersectObject,
             ZcExtendOption option,
             VARIANT *intPoints);

         HRESULT ( STDMETHODCALLTYPE *get_PlotStyleName )(
            IZcadDimRadialLarge * This,
             BSTR *plotStyle);

         HRESULT ( STDMETHODCALLTYPE *put_PlotStyleName )(
            IZcadDimRadialLarge * This,
             BSTR plotStyle);

         HRESULT ( STDMETHODCALLTYPE *get_Lineweight )(
            IZcadDimRadialLarge * This,
             ZCAD_LWEIGHT *lineweight);

         HRESULT ( STDMETHODCALLTYPE *put_Lineweight )(
            IZcadDimRadialLarge * This,
             ZCAD_LWEIGHT lineweight);

         HRESULT ( STDMETHODCALLTYPE *get_EntityTransparency )(
            IZcadDimRadialLarge * This,
             BSTR *transparency);

         HRESULT ( STDMETHODCALLTYPE *put_EntityTransparency )(
            IZcadDimRadialLarge * This,
             BSTR transparency);

         HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )(
            IZcadDimRadialLarge * This,
             IZcadHyperlinks **HyperLinks);

         HRESULT ( STDMETHODCALLTYPE *get_Material )(
            IZcadDimRadialLarge * This,
             BSTR *Material);

         HRESULT ( STDMETHODCALLTYPE *put_Material )(
            IZcadDimRadialLarge * This,
             BSTR Material);

         HRESULT ( STDMETHODCALLTYPE *get_EntityName )(
            IZcadDimRadialLarge * This,
             BSTR *EntityName);

         HRESULT ( STDMETHODCALLTYPE *get_EntityType )(
            IZcadDimRadialLarge * This,
             long *entType);

         HRESULT ( STDMETHODCALLTYPE *get_Color )(
            IZcadDimRadialLarge * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_Color )(
            IZcadDimRadialLarge * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_Normal )(
            IZcadDimRadialLarge * This,
             VARIANT *normal);

         HRESULT ( STDMETHODCALLTYPE *put_Normal )(
            IZcadDimRadialLarge * This,
             VARIANT normal);

         HRESULT ( STDMETHODCALLTYPE *get_Rotation )(
            IZcadDimRadialLarge * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_Rotation )(
            IZcadDimRadialLarge * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextPosition )(
            IZcadDimRadialLarge * This,
             VARIANT *textPos);

         HRESULT ( STDMETHODCALLTYPE *put_TextPosition )(
            IZcadDimRadialLarge * This,
             VARIANT textPos);

         HRESULT ( STDMETHODCALLTYPE *get_TextRotation )(
            IZcadDimRadialLarge * This,
             ZCAD_ANGLE *rotAngle);

         HRESULT ( STDMETHODCALLTYPE *put_TextRotation )(
            IZcadDimRadialLarge * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_TextOverride )(
            IZcadDimRadialLarge * This,
             BSTR *bstrText);

         HRESULT ( STDMETHODCALLTYPE *put_TextOverride )(
            IZcadDimRadialLarge * This,
             BSTR bstrText);

         HRESULT ( STDMETHODCALLTYPE *get_StyleName )(
            IZcadDimRadialLarge * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_StyleName )(
            IZcadDimRadialLarge * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_TextColor )(
            IZcadDimRadialLarge * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_TextColor )(
            IZcadDimRadialLarge * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_DecimalSeparator )(
            IZcadDimRadialLarge * This,
             BSTR *character);

         HRESULT ( STDMETHODCALLTYPE *put_DecimalSeparator )(
            IZcadDimRadialLarge * This,
             BSTR character);

         HRESULT ( STDMETHODCALLTYPE *get_TextGap )(
            IZcadDimRadialLarge * This,
             double *offset);

         HRESULT ( STDMETHODCALLTYPE *put_TextGap )(
            IZcadDimRadialLarge * This,
             double offset);

         HRESULT ( STDMETHODCALLTYPE *get_TextPrefix )(
            IZcadDimRadialLarge * This,
             BSTR *prefix);

         HRESULT ( STDMETHODCALLTYPE *put_TextPrefix )(
            IZcadDimRadialLarge * This,
             BSTR prefix);

         HRESULT ( STDMETHODCALLTYPE *get_TextSuffix )(
            IZcadDimRadialLarge * This,
             BSTR *suffix);

         HRESULT ( STDMETHODCALLTYPE *put_TextSuffix )(
            IZcadDimRadialLarge * This,
             BSTR suffix);

         HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )(
            IZcadDimRadialLarge * This,
             ZCAD_NOUNITS *factor);

         HRESULT ( STDMETHODCALLTYPE *put_ScaleFactor )(
            IZcadDimRadialLarge * This,
             ZCAD_NOUNITS factor);

         HRESULT ( STDMETHODCALLTYPE *get_VerticalTextPosition )(
            IZcadDimRadialLarge * This,
             ZcDimVerticalJustification *type);

         HRESULT ( STDMETHODCALLTYPE *put_VerticalTextPosition )(
            IZcadDimRadialLarge * This,
             ZcDimVerticalJustification type);

         HRESULT ( STDMETHODCALLTYPE *get_TolerancePrecision )(
            IZcadDimRadialLarge * This,
             ZcDimPrecision *precision);

         HRESULT ( STDMETHODCALLTYPE *put_TolerancePrecision )(
            IZcadDimRadialLarge * This,
             ZcDimPrecision precision);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceHeightScale )(
            IZcadDimRadialLarge * This,
             ZCAD_NOUNITS *scale);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceHeightScale )(
            IZcadDimRadialLarge * This,
             ZCAD_NOUNITS scale);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceLowerLimit )(
            IZcadDimRadialLarge * This,
             double *lower);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceLowerLimit )(
            IZcadDimRadialLarge * This,
             double lower);

         HRESULT ( STDMETHODCALLTYPE *get_TextMovement )(
            IZcadDimRadialLarge * This,
             ZcDimTextMovement *move);

         HRESULT ( STDMETHODCALLTYPE *put_TextMovement )(
            IZcadDimRadialLarge * This,
             ZcDimTextMovement move);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceDisplay )(
            IZcadDimRadialLarge * This,
             ZcDimToleranceMethod *method);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceDisplay )(
            IZcadDimRadialLarge * This,
             ZcDimToleranceMethod method);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceJustification )(
            IZcadDimRadialLarge * This,
             ZcDimToleranceJustify *method);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceJustification )(
            IZcadDimRadialLarge * This,
             ZcDimToleranceJustify method);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceUpperLimit )(
            IZcadDimRadialLarge * This,
             double *upper);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceUpperLimit )(
            IZcadDimRadialLarge * This,
             double upper);

         HRESULT ( STDMETHODCALLTYPE *get_TextStyle )(
            IZcadDimRadialLarge * This,
             BSTR *style);

         HRESULT ( STDMETHODCALLTYPE *put_TextStyle )(
            IZcadDimRadialLarge * This,
             BSTR style);

         HRESULT ( STDMETHODCALLTYPE *get_TextHeight )(
            IZcadDimRadialLarge * This,
             double *height);

         HRESULT ( STDMETHODCALLTYPE *put_TextHeight )(
            IZcadDimRadialLarge * This,
             double height);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressLeadingZeros )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressLeadingZeros )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressTrailingZeros )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressTrailingZeros )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressLeadingZeros )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressLeadingZeros )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressTrailingZeros )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressTrailingZeros )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_TextFill )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_TextFill )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_TextFillColor )(
            IZcadDimRadialLarge * This,
             ZCAD_COLOR *Color);

         HRESULT ( STDMETHODCALLTYPE *put_TextFillColor )(
            IZcadDimRadialLarge * This,
             ZCAD_COLOR Color);

         HRESULT ( STDMETHODCALLTYPE *get_DimTxtDirection )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_DimTxtDirection )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnits )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bAlternate);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnits )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bAlternate);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnitsPrecision )(
            IZcadDimRadialLarge * This,
             ZcDimPrecision *Precision);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnitsPrecision )(
            IZcadDimRadialLarge * This,
             ZcDimPrecision Precision);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnitsScale )(
            IZcadDimRadialLarge * This,
             ZCAD_NOUNITS *Scale);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnitsScale )(
            IZcadDimRadialLarge * This,
             ZCAD_NOUNITS Scale);

         HRESULT ( STDMETHODCALLTYPE *get_AltRoundDistance )(
            IZcadDimRadialLarge * This,
             double *Distance);

         HRESULT ( STDMETHODCALLTYPE *put_AltRoundDistance )(
            IZcadDimRadialLarge * This,
             double Distance);

         HRESULT ( STDMETHODCALLTYPE *get_AltTolerancePrecision )(
            IZcadDimRadialLarge * This,
             ZcDimPrecision *Distance);

         HRESULT ( STDMETHODCALLTYPE *put_AltTolerancePrecision )(
            IZcadDimRadialLarge * This,
             ZcDimPrecision Distance);

         HRESULT ( STDMETHODCALLTYPE *get_AltUnitsFormat )(
            IZcadDimRadialLarge * This,
             ZcDimUnits *Units);

         HRESULT ( STDMETHODCALLTYPE *put_AltUnitsFormat )(
            IZcadDimRadialLarge * This,
             ZcDimUnits Units);

         HRESULT ( STDMETHODCALLTYPE *get_AltTextPrefix )(
            IZcadDimRadialLarge * This,
             BSTR *Prefix);

         HRESULT ( STDMETHODCALLTYPE *put_AltTextPrefix )(
            IZcadDimRadialLarge * This,
             BSTR Prefix);

         HRESULT ( STDMETHODCALLTYPE *get_AltTextSuffix )(
            IZcadDimRadialLarge * This,
             BSTR *Prefix);

         HRESULT ( STDMETHODCALLTYPE *put_AltTextSuffix )(
            IZcadDimRadialLarge * This,
             BSTR Prefix);

         HRESULT ( STDMETHODCALLTYPE *get_CenterType )(
            IZcadDimRadialLarge * This,
             ZcDimCenterType *Type);

         HRESULT ( STDMETHODCALLTYPE *put_CenterType )(
            IZcadDimRadialLarge * This,
             ZcDimCenterType Type);

         HRESULT ( STDMETHODCALLTYPE *get_CenterMarkSize )(
            IZcadDimRadialLarge * This,
             double *Type);

         HRESULT ( STDMETHODCALLTYPE *put_CenterMarkSize )(
            IZcadDimRadialLarge * This,
             double Type);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLineColor )(
            IZcadDimRadialLarge * This,
             ZCAD_COLOR *Type);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLineColor )(
            IZcadDimRadialLarge * This,
             ZCAD_COLOR Type);

         HRESULT ( STDMETHODCALLTYPE *get_PrimaryUnitsPrecision )(
            IZcadDimRadialLarge * This,
             ZcDimPrecision *Prec);

         HRESULT ( STDMETHODCALLTYPE *put_PrimaryUnitsPrecision )(
            IZcadDimRadialLarge * This,
             ZcDimPrecision Prec);

         HRESULT ( STDMETHODCALLTYPE *get_FractionFormat )(
            IZcadDimRadialLarge * This,
             ZcDimFractionType *type);

         HRESULT ( STDMETHODCALLTYPE *put_FractionFormat )(
            IZcadDimRadialLarge * This,
             ZcDimFractionType type);

         HRESULT ( STDMETHODCALLTYPE *get_Fit )(
            IZcadDimRadialLarge * This,
             ZcDimFit *fittype);

         HRESULT ( STDMETHODCALLTYPE *put_Fit )(
            IZcadDimRadialLarge * This,
             ZcDimFit fittype);

         HRESULT ( STDMETHODCALLTYPE *get_LinearScaleFactor )(
            IZcadDimRadialLarge * This,
             ZCAD_NOUNITS *type);

         HRESULT ( STDMETHODCALLTYPE *put_LinearScaleFactor )(
            IZcadDimRadialLarge * This,
             ZCAD_NOUNITS type);

         HRESULT ( STDMETHODCALLTYPE *get_UnitsFormat )(
            IZcadDimRadialLarge * This,
             ZcDimLUnits *format);

         HRESULT ( STDMETHODCALLTYPE *put_UnitsFormat )(
            IZcadDimRadialLarge * This,
             ZcDimLUnits format);

         HRESULT ( STDMETHODCALLTYPE *get_RoundDistance )(
            IZcadDimRadialLarge * This,
             double *Distance);

         HRESULT ( STDMETHODCALLTYPE *put_RoundDistance )(
            IZcadDimRadialLarge * This,
             double Distance);

         HRESULT ( STDMETHODCALLTYPE *get_DimLineSuppress )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bSuppress);

         HRESULT ( STDMETHODCALLTYPE *put_DimLineSuppress )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bSuppress);

         HRESULT ( STDMETHODCALLTYPE *get_TextInsideAlign )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextInsideAlign )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_TextInside )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextInside )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_ForceLineInside )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_ForceLineInside )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_TextOutsideAlign )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bInside);

         HRESULT ( STDMETHODCALLTYPE *put_TextOutsideAlign )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bInside);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressLeadingZeros )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressLeadingZeros )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressTrailingZeros )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressTrailingZeros )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroFeet )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroFeet )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltSuppressZeroInches )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltSuppressZeroInches )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressLeadingZeros )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressLeadingZeros )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressTrailingZeros )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressTrailingZeros )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroFeet )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroFeet )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_AltToleranceSuppressZeroInches )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_AltToleranceSuppressZeroInches )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroFeet )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroFeet )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_SuppressZeroInches )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_SuppressZeroInches )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroFeet )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroFeet )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ToleranceSuppressZeroInches )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL *bVal);

         HRESULT ( STDMETHODCALLTYPE *put_ToleranceSuppressZeroInches )(
            IZcadDimRadialLarge * This,
             VARIANT_BOOL bVal);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLineWeight )(
            IZcadDimRadialLarge * This,
             ZCAD_LWEIGHT *weight);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLineWeight )(
            IZcadDimRadialLarge * This,
             ZCAD_LWEIGHT weight);

         HRESULT ( STDMETHODCALLTYPE *get_ArrowheadSize )(
            IZcadDimRadialLarge * This,
             double *size);

         HRESULT ( STDMETHODCALLTYPE *put_ArrowheadSize )(
            IZcadDimRadialLarge * This,
             double size);

         HRESULT ( STDMETHODCALLTYPE *get_ArrowheadType )(
            IZcadDimRadialLarge * This,
             ZcDimArrowheadType *Type);

         HRESULT ( STDMETHODCALLTYPE *put_ArrowheadType )(
            IZcadDimRadialLarge * This,
             ZcDimArrowheadType Type);

         HRESULT ( STDMETHODCALLTYPE *get_Measurement )(
            IZcadDimRadialLarge * This,
             double *bVal);

         HRESULT ( STDMETHODCALLTYPE *get_ArrowheadBlock )(
            IZcadDimRadialLarge * This,
             BSTR *BlockName);

         HRESULT ( STDMETHODCALLTYPE *put_ArrowheadBlock )(
            IZcadDimRadialLarge * This,
             BSTR BlockName);

         HRESULT ( STDMETHODCALLTYPE *get_OverrideCenter )(
            IZcadDimRadialLarge * This,
             VARIANT *overrideCenterPos);

         HRESULT ( STDMETHODCALLTYPE *put_OverrideCenter )(
            IZcadDimRadialLarge * This,
             VARIANT overrideCenterPos);

         HRESULT ( STDMETHODCALLTYPE *get_JogLocation )(
            IZcadDimRadialLarge * This,
             VARIANT *jogPos);

         HRESULT ( STDMETHODCALLTYPE *put_JogLocation )(
            IZcadDimRadialLarge * This,
             VARIANT jogPos);

         HRESULT ( STDMETHODCALLTYPE *get_JogAngle )(
            IZcadDimRadialLarge * This,
             ZCAD_ANGLE *jogAngle);

         HRESULT ( STDMETHODCALLTYPE *put_JogAngle )(
            IZcadDimRadialLarge * This,
             ZCAD_ANGLE rotAngle);

         HRESULT ( STDMETHODCALLTYPE *get_Center )(
            IZcadDimRadialLarge * This,
             VARIANT *pVar);

         HRESULT ( STDMETHODCALLTYPE *put_Center )(
            IZcadDimRadialLarge * This,
             VARIANT newVal);

         HRESULT ( STDMETHODCALLTYPE *get_ChordPoint )(
            IZcadDimRadialLarge * This,
             VARIANT *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_ChordPoint )(
            IZcadDimRadialLarge * This,
             VARIANT newVal);

         HRESULT ( STDMETHODCALLTYPE *get_DimensionLinetype )(
            IZcadDimRadialLarge * This,
             BSTR *Linetype);

         HRESULT ( STDMETHODCALLTYPE *put_DimensionLinetype )(
            IZcadDimRadialLarge * This,
             BSTR Linetype);

        END_INTERFACE
    } IZcadDimRadialLargeVtbl;

    interface IZcadDimRadialLarge
    {
        CONST_VTBL struct IZcadDimRadialLargeVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadDimRadialLarge_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadDimRadialLarge_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadDimRadialLarge_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadDimRadialLarge_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadDimRadialLarge_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadDimRadialLarge_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadDimRadialLarge_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadDimRadialLarge_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadDimRadialLarge_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadDimRadialLarge_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadDimRadialLarge_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadDimRadialLarge_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadDimRadialLarge_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadDimRadialLarge_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadDimRadialLarge_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadDimRadialLarge_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadDimRadialLarge_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadDimRadialLarge_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadDimRadialLarge_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadDimRadialLarge_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadDimRadialLarge_get_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> get_TrueColor(This,pColor))

#define IZcadDimRadialLarge_put_TrueColor(This,pColor)	\
    ((This)->lpVtbl -> put_TrueColor(This,pColor))

#define IZcadDimRadialLarge_get_Layer(This,Layer)	\
    ((This)->lpVtbl -> get_Layer(This,Layer))

#define IZcadDimRadialLarge_put_Layer(This,Layer)	\
    ((This)->lpVtbl -> put_Layer(This,Layer))

#define IZcadDimRadialLarge_get_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> get_Linetype(This,Linetype))

#define IZcadDimRadialLarge_put_Linetype(This,Linetype)	\
    ((This)->lpVtbl -> put_Linetype(This,Linetype))

#define IZcadDimRadialLarge_get_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> get_LinetypeScale(This,ltScale))

#define IZcadDimRadialLarge_put_LinetypeScale(This,ltScale)	\
    ((This)->lpVtbl -> put_LinetypeScale(This,ltScale))

#define IZcadDimRadialLarge_get_Visible(This,bVisible)	\
    ((This)->lpVtbl -> get_Visible(This,bVisible))

#define IZcadDimRadialLarge_put_Visible(This,bVisible)	\
    ((This)->lpVtbl -> put_Visible(This,bVisible))

#define IZcadDimRadialLarge_ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayPolar(This,NumberOfObjects,AngleToFill,CenterPoint,pArrayObjs))

#define IZcadDimRadialLarge_ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs)	\
    ((This)->lpVtbl -> ArrayRectangular(This,NumberOfRows,NumberOfColumns,NumberOfLevels,DistBetweenRows,DistBetweenCols,DistBetweenLevels,pArrayObjs))

#define IZcadDimRadialLarge_Highlight(This,HighlightFlag)	\
    ((This)->lpVtbl -> Highlight(This,HighlightFlag))

#define IZcadDimRadialLarge_Copy(This,pCopyObj)	\
    ((This)->lpVtbl -> Copy(This,pCopyObj))

#define IZcadDimRadialLarge_Move(This,FromPoint,ToPoint)	\
    ((This)->lpVtbl -> Move(This,FromPoint,ToPoint))

#define IZcadDimRadialLarge_Rotate(This,BasePoint,RotationAngle)	\
    ((This)->lpVtbl -> Rotate(This,BasePoint,RotationAngle))

#define IZcadDimRadialLarge_Rotate3D(This,Point1,Point2,RotationAngle)	\
    ((This)->lpVtbl -> Rotate3D(This,Point1,Point2,RotationAngle))

#define IZcadDimRadialLarge_Mirror(This,Point1,Point2,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror(This,Point1,Point2,pMirrorObj))

#define IZcadDimRadialLarge_Mirror3D(This,point1,point2,point3,pMirrorObj)	\
    ((This)->lpVtbl -> Mirror3D(This,point1,point2,point3,pMirrorObj))

#define IZcadDimRadialLarge_ScaleEntity(This,BasePoint,ScaleFactor)	\
    ((This)->lpVtbl -> ScaleEntity(This,BasePoint,ScaleFactor))

#define IZcadDimRadialLarge_TransformBy(This,TransformationMatrix)	\
    ((This)->lpVtbl -> TransformBy(This,TransformationMatrix))

#define IZcadDimRadialLarge_Update(This)	\
    ((This)->lpVtbl -> Update(This))

#define IZcadDimRadialLarge_GetBoundingBox(This,MinPoint,MaxPoint)	\
    ((This)->lpVtbl -> GetBoundingBox(This,MinPoint,MaxPoint))

#define IZcadDimRadialLarge_IntersectWith(This,IntersectObject,option,intPoints)	\
    ((This)->lpVtbl -> IntersectWith(This,IntersectObject,option,intPoints))

#define IZcadDimRadialLarge_get_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> get_PlotStyleName(This,plotStyle))

#define IZcadDimRadialLarge_put_PlotStyleName(This,plotStyle)	\
    ((This)->lpVtbl -> put_PlotStyleName(This,plotStyle))

#define IZcadDimRadialLarge_get_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> get_Lineweight(This,lineweight))

#define IZcadDimRadialLarge_put_Lineweight(This,lineweight)	\
    ((This)->lpVtbl -> put_Lineweight(This,lineweight))

#define IZcadDimRadialLarge_get_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> get_EntityTransparency(This,transparency))

#define IZcadDimRadialLarge_put_EntityTransparency(This,transparency)	\
    ((This)->lpVtbl -> put_EntityTransparency(This,transparency))

#define IZcadDimRadialLarge_get_Hyperlinks(This,HyperLinks)	\
    ((This)->lpVtbl -> get_Hyperlinks(This,HyperLinks))

#define IZcadDimRadialLarge_get_Material(This,Material)	\
    ((This)->lpVtbl -> get_Material(This,Material))

#define IZcadDimRadialLarge_put_Material(This,Material)	\
    ((This)->lpVtbl -> put_Material(This,Material))

#define IZcadDimRadialLarge_get_EntityName(This,EntityName)	\
    ((This)->lpVtbl -> get_EntityName(This,EntityName))

#define IZcadDimRadialLarge_get_EntityType(This,entType)	\
    ((This)->lpVtbl -> get_EntityType(This,entType))

#define IZcadDimRadialLarge_get_Color(This,Color)	\
    ((This)->lpVtbl -> get_Color(This,Color))

#define IZcadDimRadialLarge_put_Color(This,Color)	\
    ((This)->lpVtbl -> put_Color(This,Color))


#define IZcadDimRadialLarge_get_Normal(This,normal)	\
    ((This)->lpVtbl -> get_Normal(This,normal))

#define IZcadDimRadialLarge_put_Normal(This,normal)	\
    ((This)->lpVtbl -> put_Normal(This,normal))

#define IZcadDimRadialLarge_get_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_Rotation(This,rotAngle))

#define IZcadDimRadialLarge_put_Rotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_Rotation(This,rotAngle))

#define IZcadDimRadialLarge_get_TextPosition(This,textPos)	\
    ((This)->lpVtbl -> get_TextPosition(This,textPos))

#define IZcadDimRadialLarge_put_TextPosition(This,textPos)	\
    ((This)->lpVtbl -> put_TextPosition(This,textPos))

#define IZcadDimRadialLarge_get_TextRotation(This,rotAngle)	\
    ((This)->lpVtbl -> get_TextRotation(This,rotAngle))

#define IZcadDimRadialLarge_put_TextRotation(This,rotAngle)	\
    ((This)->lpVtbl -> put_TextRotation(This,rotAngle))

#define IZcadDimRadialLarge_get_TextOverride(This,bstrText)	\
    ((This)->lpVtbl -> get_TextOverride(This,bstrText))

#define IZcadDimRadialLarge_put_TextOverride(This,bstrText)	\
    ((This)->lpVtbl -> put_TextOverride(This,bstrText))

#define IZcadDimRadialLarge_get_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> get_StyleName(This,bstrName))

#define IZcadDimRadialLarge_put_StyleName(This,bstrName)	\
    ((This)->lpVtbl -> put_StyleName(This,bstrName))

#define IZcadDimRadialLarge_get_TextColor(This,Color)	\
    ((This)->lpVtbl -> get_TextColor(This,Color))

#define IZcadDimRadialLarge_put_TextColor(This,Color)	\
    ((This)->lpVtbl -> put_TextColor(This,Color))

#define IZcadDimRadialLarge_get_DecimalSeparator(This,character)	\
    ((This)->lpVtbl -> get_DecimalSeparator(This,character))

#define IZcadDimRadialLarge_put_DecimalSeparator(This,character)	\
    ((This)->lpVtbl -> put_DecimalSeparator(This,character))

#define IZcadDimRadialLarge_get_TextGap(This,offset)	\
    ((This)->lpVtbl -> get_TextGap(This,offset))

#define IZcadDimRadialLarge_put_TextGap(This,offset)	\
    ((This)->lpVtbl -> put_TextGap(This,offset))

#define IZcadDimRadialLarge_get_TextPrefix(This,prefix)	\
    ((This)->lpVtbl -> get_TextPrefix(This,prefix))

#define IZcadDimRadialLarge_put_TextPrefix(This,prefix)	\
    ((This)->lpVtbl -> put_TextPrefix(This,prefix))

#define IZcadDimRadialLarge_get_TextSuffix(This,suffix)	\
    ((This)->lpVtbl -> get_TextSuffix(This,suffix))

#define IZcadDimRadialLarge_put_TextSuffix(This,suffix)	\
    ((This)->lpVtbl -> put_TextSuffix(This,suffix))

#define IZcadDimRadialLarge_get_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> get_ScaleFactor(This,factor))

#define IZcadDimRadialLarge_put_ScaleFactor(This,factor)	\
    ((This)->lpVtbl -> put_ScaleFactor(This,factor))

#define IZcadDimRadialLarge_get_VerticalTextPosition(This,type)	\
    ((This)->lpVtbl -> get_VerticalTextPosition(This,type))

#define IZcadDimRadialLarge_put_VerticalTextPosition(This,type)	\
    ((This)->lpVtbl -> put_VerticalTextPosition(This,type))

#define IZcadDimRadialLarge_get_TolerancePrecision(This,precision)	\
    ((This)->lpVtbl -> get_TolerancePrecision(This,precision))

#define IZcadDimRadialLarge_put_TolerancePrecision(This,precision)	\
    ((This)->lpVtbl -> put_TolerancePrecision(This,precision))

#define IZcadDimRadialLarge_get_ToleranceHeightScale(This,scale)	\
    ((This)->lpVtbl -> get_ToleranceHeightScale(This,scale))

#define IZcadDimRadialLarge_put_ToleranceHeightScale(This,scale)	\
    ((This)->lpVtbl -> put_ToleranceHeightScale(This,scale))

#define IZcadDimRadialLarge_get_ToleranceLowerLimit(This,lower)	\
    ((This)->lpVtbl -> get_ToleranceLowerLimit(This,lower))

#define IZcadDimRadialLarge_put_ToleranceLowerLimit(This,lower)	\
    ((This)->lpVtbl -> put_ToleranceLowerLimit(This,lower))

#define IZcadDimRadialLarge_get_TextMovement(This,move)	\
    ((This)->lpVtbl -> get_TextMovement(This,move))

#define IZcadDimRadialLarge_put_TextMovement(This,move)	\
    ((This)->lpVtbl -> put_TextMovement(This,move))

#define IZcadDimRadialLarge_get_ToleranceDisplay(This,method)	\
    ((This)->lpVtbl -> get_ToleranceDisplay(This,method))

#define IZcadDimRadialLarge_put_ToleranceDisplay(This,method)	\
    ((This)->lpVtbl -> put_ToleranceDisplay(This,method))

#define IZcadDimRadialLarge_get_ToleranceJustification(This,method)	\
    ((This)->lpVtbl -> get_ToleranceJustification(This,method))

#define IZcadDimRadialLarge_put_ToleranceJustification(This,method)	\
    ((This)->lpVtbl -> put_ToleranceJustification(This,method))

#define IZcadDimRadialLarge_get_ToleranceUpperLimit(This,upper)	\
    ((This)->lpVtbl -> get_ToleranceUpperLimit(This,upper))

#define IZcadDimRadialLarge_put_ToleranceUpperLimit(This,upper)	\
    ((This)->lpVtbl -> put_ToleranceUpperLimit(This,upper))

#define IZcadDimRadialLarge_get_TextStyle(This,style)	\
    ((This)->lpVtbl -> get_TextStyle(This,style))

#define IZcadDimRadialLarge_put_TextStyle(This,style)	\
    ((This)->lpVtbl -> put_TextStyle(This,style))

#define IZcadDimRadialLarge_get_TextHeight(This,height)	\
    ((This)->lpVtbl -> get_TextHeight(This,height))

#define IZcadDimRadialLarge_put_TextHeight(This,height)	\
    ((This)->lpVtbl -> put_TextHeight(This,height))

#define IZcadDimRadialLarge_get_SuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressLeadingZeros(This,bVal))

#define IZcadDimRadialLarge_put_SuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressLeadingZeros(This,bVal))

#define IZcadDimRadialLarge_get_SuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressTrailingZeros(This,bVal))

#define IZcadDimRadialLarge_put_SuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressTrailingZeros(This,bVal))

#define IZcadDimRadialLarge_get_ToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimRadialLarge_put_ToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimRadialLarge_get_ToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimRadialLarge_put_ToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimRadialLarge_get_TextFill(This,bVal)	\
    ((This)->lpVtbl -> get_TextFill(This,bVal))

#define IZcadDimRadialLarge_put_TextFill(This,bVal)	\
    ((This)->lpVtbl -> put_TextFill(This,bVal))

#define IZcadDimRadialLarge_get_TextFillColor(This,Color)	\
    ((This)->lpVtbl -> get_TextFillColor(This,Color))

#define IZcadDimRadialLarge_put_TextFillColor(This,Color)	\
    ((This)->lpVtbl -> put_TextFillColor(This,Color))

#define IZcadDimRadialLarge_get_DimTxtDirection(This,bVal)	\
    ((This)->lpVtbl -> get_DimTxtDirection(This,bVal))

#define IZcadDimRadialLarge_put_DimTxtDirection(This,bVal)	\
    ((This)->lpVtbl -> put_DimTxtDirection(This,bVal))


#define IZcadDimRadialLarge_get_AltUnits(This,bAlternate)	\
    ((This)->lpVtbl -> get_AltUnits(This,bAlternate))

#define IZcadDimRadialLarge_put_AltUnits(This,bAlternate)	\
    ((This)->lpVtbl -> put_AltUnits(This,bAlternate))

#define IZcadDimRadialLarge_get_AltUnitsPrecision(This,Precision)	\
    ((This)->lpVtbl -> get_AltUnitsPrecision(This,Precision))

#define IZcadDimRadialLarge_put_AltUnitsPrecision(This,Precision)	\
    ((This)->lpVtbl -> put_AltUnitsPrecision(This,Precision))

#define IZcadDimRadialLarge_get_AltUnitsScale(This,Scale)	\
    ((This)->lpVtbl -> get_AltUnitsScale(This,Scale))

#define IZcadDimRadialLarge_put_AltUnitsScale(This,Scale)	\
    ((This)->lpVtbl -> put_AltUnitsScale(This,Scale))

#define IZcadDimRadialLarge_get_AltRoundDistance(This,Distance)	\
    ((This)->lpVtbl -> get_AltRoundDistance(This,Distance))

#define IZcadDimRadialLarge_put_AltRoundDistance(This,Distance)	\
    ((This)->lpVtbl -> put_AltRoundDistance(This,Distance))

#define IZcadDimRadialLarge_get_AltTolerancePrecision(This,Distance)	\
    ((This)->lpVtbl -> get_AltTolerancePrecision(This,Distance))

#define IZcadDimRadialLarge_put_AltTolerancePrecision(This,Distance)	\
    ((This)->lpVtbl -> put_AltTolerancePrecision(This,Distance))

#define IZcadDimRadialLarge_get_AltUnitsFormat(This,Units)	\
    ((This)->lpVtbl -> get_AltUnitsFormat(This,Units))

#define IZcadDimRadialLarge_put_AltUnitsFormat(This,Units)	\
    ((This)->lpVtbl -> put_AltUnitsFormat(This,Units))

#define IZcadDimRadialLarge_get_AltTextPrefix(This,Prefix)	\
    ((This)->lpVtbl -> get_AltTextPrefix(This,Prefix))

#define IZcadDimRadialLarge_put_AltTextPrefix(This,Prefix)	\
    ((This)->lpVtbl -> put_AltTextPrefix(This,Prefix))

#define IZcadDimRadialLarge_get_AltTextSuffix(This,Prefix)	\
    ((This)->lpVtbl -> get_AltTextSuffix(This,Prefix))

#define IZcadDimRadialLarge_put_AltTextSuffix(This,Prefix)	\
    ((This)->lpVtbl -> put_AltTextSuffix(This,Prefix))

#define IZcadDimRadialLarge_get_CenterType(This,Type)	\
    ((This)->lpVtbl -> get_CenterType(This,Type))

#define IZcadDimRadialLarge_put_CenterType(This,Type)	\
    ((This)->lpVtbl -> put_CenterType(This,Type))

#define IZcadDimRadialLarge_get_CenterMarkSize(This,Type)	\
    ((This)->lpVtbl -> get_CenterMarkSize(This,Type))

#define IZcadDimRadialLarge_put_CenterMarkSize(This,Type)	\
    ((This)->lpVtbl -> put_CenterMarkSize(This,Type))

#define IZcadDimRadialLarge_get_DimensionLineColor(This,Type)	\
    ((This)->lpVtbl -> get_DimensionLineColor(This,Type))

#define IZcadDimRadialLarge_put_DimensionLineColor(This,Type)	\
    ((This)->lpVtbl -> put_DimensionLineColor(This,Type))

#define IZcadDimRadialLarge_get_PrimaryUnitsPrecision(This,Prec)	\
    ((This)->lpVtbl -> get_PrimaryUnitsPrecision(This,Prec))

#define IZcadDimRadialLarge_put_PrimaryUnitsPrecision(This,Prec)	\
    ((This)->lpVtbl -> put_PrimaryUnitsPrecision(This,Prec))

#define IZcadDimRadialLarge_get_FractionFormat(This,type)	\
    ((This)->lpVtbl -> get_FractionFormat(This,type))

#define IZcadDimRadialLarge_put_FractionFormat(This,type)	\
    ((This)->lpVtbl -> put_FractionFormat(This,type))

#define IZcadDimRadialLarge_get_Fit(This,fittype)	\
    ((This)->lpVtbl -> get_Fit(This,fittype))

#define IZcadDimRadialLarge_put_Fit(This,fittype)	\
    ((This)->lpVtbl -> put_Fit(This,fittype))

#define IZcadDimRadialLarge_get_LinearScaleFactor(This,type)	\
    ((This)->lpVtbl -> get_LinearScaleFactor(This,type))

#define IZcadDimRadialLarge_put_LinearScaleFactor(This,type)	\
    ((This)->lpVtbl -> put_LinearScaleFactor(This,type))

#define IZcadDimRadialLarge_get_UnitsFormat(This,format)	\
    ((This)->lpVtbl -> get_UnitsFormat(This,format))

#define IZcadDimRadialLarge_put_UnitsFormat(This,format)	\
    ((This)->lpVtbl -> put_UnitsFormat(This,format))

#define IZcadDimRadialLarge_get_RoundDistance(This,Distance)	\
    ((This)->lpVtbl -> get_RoundDistance(This,Distance))

#define IZcadDimRadialLarge_put_RoundDistance(This,Distance)	\
    ((This)->lpVtbl -> put_RoundDistance(This,Distance))

#define IZcadDimRadialLarge_get_DimLineSuppress(This,bSuppress)	\
    ((This)->lpVtbl -> get_DimLineSuppress(This,bSuppress))

#define IZcadDimRadialLarge_put_DimLineSuppress(This,bSuppress)	\
    ((This)->lpVtbl -> put_DimLineSuppress(This,bSuppress))

#define IZcadDimRadialLarge_get_TextInsideAlign(This,bInside)	\
    ((This)->lpVtbl -> get_TextInsideAlign(This,bInside))

#define IZcadDimRadialLarge_put_TextInsideAlign(This,bInside)	\
    ((This)->lpVtbl -> put_TextInsideAlign(This,bInside))

#define IZcadDimRadialLarge_get_TextInside(This,bInside)	\
    ((This)->lpVtbl -> get_TextInside(This,bInside))

#define IZcadDimRadialLarge_put_TextInside(This,bInside)	\
    ((This)->lpVtbl -> put_TextInside(This,bInside))

#define IZcadDimRadialLarge_get_ForceLineInside(This,bInside)	\
    ((This)->lpVtbl -> get_ForceLineInside(This,bInside))

#define IZcadDimRadialLarge_put_ForceLineInside(This,bInside)	\
    ((This)->lpVtbl -> put_ForceLineInside(This,bInside))

#define IZcadDimRadialLarge_get_TextOutsideAlign(This,bInside)	\
    ((This)->lpVtbl -> get_TextOutsideAlign(This,bInside))

#define IZcadDimRadialLarge_put_TextOutsideAlign(This,bInside)	\
    ((This)->lpVtbl -> put_TextOutsideAlign(This,bInside))

#define IZcadDimRadialLarge_get_AltSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressLeadingZeros(This,bVal))

#define IZcadDimRadialLarge_put_AltSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressLeadingZeros(This,bVal))

#define IZcadDimRadialLarge_get_AltSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressTrailingZeros(This,bVal))

#define IZcadDimRadialLarge_put_AltSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressTrailingZeros(This,bVal))

#define IZcadDimRadialLarge_get_AltSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressZeroFeet(This,bVal))

#define IZcadDimRadialLarge_put_AltSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressZeroFeet(This,bVal))

#define IZcadDimRadialLarge_get_AltSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_AltSuppressZeroInches(This,bVal))

#define IZcadDimRadialLarge_put_AltSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_AltSuppressZeroInches(This,bVal))

#define IZcadDimRadialLarge_get_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimRadialLarge_put_AltToleranceSuppressLeadingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressLeadingZeros(This,bVal))

#define IZcadDimRadialLarge_get_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimRadialLarge_put_AltToleranceSuppressTrailingZeros(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressTrailingZeros(This,bVal))

#define IZcadDimRadialLarge_get_AltToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimRadialLarge_put_AltToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimRadialLarge_get_AltToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_AltToleranceSuppressZeroInches(This,bVal))

#define IZcadDimRadialLarge_put_AltToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_AltToleranceSuppressZeroInches(This,bVal))

#define IZcadDimRadialLarge_get_SuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressZeroFeet(This,bVal))

#define IZcadDimRadialLarge_put_SuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressZeroFeet(This,bVal))

#define IZcadDimRadialLarge_get_SuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_SuppressZeroInches(This,bVal))

#define IZcadDimRadialLarge_put_SuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_SuppressZeroInches(This,bVal))

#define IZcadDimRadialLarge_get_ToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimRadialLarge_put_ToleranceSuppressZeroFeet(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressZeroFeet(This,bVal))

#define IZcadDimRadialLarge_get_ToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> get_ToleranceSuppressZeroInches(This,bVal))

#define IZcadDimRadialLarge_put_ToleranceSuppressZeroInches(This,bVal)	\
    ((This)->lpVtbl -> put_ToleranceSuppressZeroInches(This,bVal))

#define IZcadDimRadialLarge_get_DimensionLineWeight(This,weight)	\
    ((This)->lpVtbl -> get_DimensionLineWeight(This,weight))

#define IZcadDimRadialLarge_put_DimensionLineWeight(This,weight)	\
    ((This)->lpVtbl -> put_DimensionLineWeight(This,weight))

#define IZcadDimRadialLarge_get_ArrowheadSize(This,size)	\
    ((This)->lpVtbl -> get_ArrowheadSize(This,size))

#define IZcadDimRadialLarge_put_ArrowheadSize(This,size)	\
    ((This)->lpVtbl -> put_ArrowheadSize(This,size))

#define IZcadDimRadialLarge_get_ArrowheadType(This,Type)	\
    ((This)->lpVtbl -> get_ArrowheadType(This,Type))

#define IZcadDimRadialLarge_put_ArrowheadType(This,Type)	\
    ((This)->lpVtbl -> put_ArrowheadType(This,Type))

#define IZcadDimRadialLarge_get_Measurement(This,bVal)	\
    ((This)->lpVtbl -> get_Measurement(This,bVal))

#define IZcadDimRadialLarge_get_ArrowheadBlock(This,BlockName)	\
    ((This)->lpVtbl -> get_ArrowheadBlock(This,BlockName))

#define IZcadDimRadialLarge_put_ArrowheadBlock(This,BlockName)	\
    ((This)->lpVtbl -> put_ArrowheadBlock(This,BlockName))

#define IZcadDimRadialLarge_get_OverrideCenter(This,overrideCenterPos)	\
    ((This)->lpVtbl -> get_OverrideCenter(This,overrideCenterPos))

#define IZcadDimRadialLarge_put_OverrideCenter(This,overrideCenterPos)	\
    ((This)->lpVtbl -> put_OverrideCenter(This,overrideCenterPos))

#define IZcadDimRadialLarge_get_JogLocation(This,jogPos)	\
    ((This)->lpVtbl -> get_JogLocation(This,jogPos))

#define IZcadDimRadialLarge_put_JogLocation(This,jogPos)	\
    ((This)->lpVtbl -> put_JogLocation(This,jogPos))

#define IZcadDimRadialLarge_get_JogAngle(This,jogAngle)	\
    ((This)->lpVtbl -> get_JogAngle(This,jogAngle))

#define IZcadDimRadialLarge_put_JogAngle(This,rotAngle)	\
    ((This)->lpVtbl -> put_JogAngle(This,rotAngle))

#define IZcadDimRadialLarge_get_Center(This,pVar)	\
    ((This)->lpVtbl -> get_Center(This,pVar))

#define IZcadDimRadialLarge_put_Center(This,newVal)	\
    ((This)->lpVtbl -> put_Center(This,newVal))

#define IZcadDimRadialLarge_get_ChordPoint(This,pVal)	\
    ((This)->lpVtbl -> get_ChordPoint(This,pVal))

#define IZcadDimRadialLarge_put_ChordPoint(This,newVal)	\
    ((This)->lpVtbl -> put_ChordPoint(This,newVal))

#define IZcadDimRadialLarge_get_DimensionLinetype(This,Linetype)	\
    ((This)->lpVtbl -> get_DimensionLinetype(This,Linetype))

#define IZcadDimRadialLarge_put_DimensionLinetype(This,Linetype)	\
    ((This)->lpVtbl -> put_DimensionLinetype(This,Linetype))

#endif
#endif


 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_AltTextPrefix_Proxy(
    IZcadDimRadialLarge * This,
     BSTR Prefix);

void __RPC_STUB IZcadDimRadialLarge_put_AltTextPrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_AltTextSuffix_Proxy(
    IZcadDimRadialLarge * This,
     BSTR *Prefix);

void __RPC_STUB IZcadDimRadialLarge_get_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_AltTextSuffix_Proxy(
    IZcadDimRadialLarge * This,
     BSTR Prefix);

void __RPC_STUB IZcadDimRadialLarge_put_AltTextSuffix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_CenterType_Proxy(
    IZcadDimRadialLarge * This,
     ZcDimCenterType *Type);

void __RPC_STUB IZcadDimRadialLarge_get_CenterType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_CenterType_Proxy(
    IZcadDimRadialLarge * This,
     ZcDimCenterType Type);

void __RPC_STUB IZcadDimRadialLarge_put_CenterType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_CenterMarkSize_Proxy(
    IZcadDimRadialLarge * This,
     double *Type);

void __RPC_STUB IZcadDimRadialLarge_get_CenterMarkSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_CenterMarkSize_Proxy(
    IZcadDimRadialLarge * This,
     double Type);

void __RPC_STUB IZcadDimRadialLarge_put_CenterMarkSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_DimensionLineColor_Proxy(
    IZcadDimRadialLarge * This,
     ZCAD_COLOR *Type);

void __RPC_STUB IZcadDimRadialLarge_get_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_DimensionLineColor_Proxy(
    IZcadDimRadialLarge * This,
     ZCAD_COLOR Type);

void __RPC_STUB IZcadDimRadialLarge_put_DimensionLineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_PrimaryUnitsPrecision_Proxy(
    IZcadDimRadialLarge * This,
     ZcDimPrecision *Prec);

void __RPC_STUB IZcadDimRadialLarge_get_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_PrimaryUnitsPrecision_Proxy(
    IZcadDimRadialLarge * This,
     ZcDimPrecision Prec);

void __RPC_STUB IZcadDimRadialLarge_put_PrimaryUnitsPrecision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_FractionFormat_Proxy(
    IZcadDimRadialLarge * This,
     ZcDimFractionType *type);

void __RPC_STUB IZcadDimRadialLarge_get_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_FractionFormat_Proxy(
    IZcadDimRadialLarge * This,
     ZcDimFractionType type);

void __RPC_STUB IZcadDimRadialLarge_put_FractionFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_Fit_Proxy(
    IZcadDimRadialLarge * This,
     ZcDimFit *fittype);

void __RPC_STUB IZcadDimRadialLarge_get_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_Fit_Proxy(
    IZcadDimRadialLarge * This,
     ZcDimFit fittype);

void __RPC_STUB IZcadDimRadialLarge_put_Fit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_LinearScaleFactor_Proxy(
    IZcadDimRadialLarge * This,
     ZCAD_NOUNITS *type);

void __RPC_STUB IZcadDimRadialLarge_get_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_LinearScaleFactor_Proxy(
    IZcadDimRadialLarge * This,
     ZCAD_NOUNITS type);

void __RPC_STUB IZcadDimRadialLarge_put_LinearScaleFactor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_UnitsFormat_Proxy(
    IZcadDimRadialLarge * This,
     ZcDimLUnits *format);

void __RPC_STUB IZcadDimRadialLarge_get_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_UnitsFormat_Proxy(
    IZcadDimRadialLarge * This,
     ZcDimLUnits format);

void __RPC_STUB IZcadDimRadialLarge_put_UnitsFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_RoundDistance_Proxy(
    IZcadDimRadialLarge * This,
     double *Distance);

void __RPC_STUB IZcadDimRadialLarge_get_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_RoundDistance_Proxy(
    IZcadDimRadialLarge * This,
     double Distance);

void __RPC_STUB IZcadDimRadialLarge_put_RoundDistance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_DimLineSuppress_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL *bSuppress);

void __RPC_STUB IZcadDimRadialLarge_get_DimLineSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_DimLineSuppress_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL bSuppress);

void __RPC_STUB IZcadDimRadialLarge_put_DimLineSuppress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_TextInsideAlign_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimRadialLarge_get_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_TextInsideAlign_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimRadialLarge_put_TextInsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_TextInside_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimRadialLarge_get_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_TextInside_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimRadialLarge_put_TextInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_ForceLineInside_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimRadialLarge_get_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_ForceLineInside_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimRadialLarge_put_ForceLineInside_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_TextOutsideAlign_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL *bInside);

void __RPC_STUB IZcadDimRadialLarge_get_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_TextOutsideAlign_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL bInside);

void __RPC_STUB IZcadDimRadialLarge_put_TextOutsideAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_AltSuppressLeadingZeros_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadialLarge_get_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_AltSuppressLeadingZeros_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadialLarge_put_AltSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_AltSuppressTrailingZeros_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadialLarge_get_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_AltSuppressTrailingZeros_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadialLarge_put_AltSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_AltSuppressZeroFeet_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadialLarge_get_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_AltSuppressZeroFeet_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadialLarge_put_AltSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_AltSuppressZeroInches_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadialLarge_get_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_AltSuppressZeroInches_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadialLarge_put_AltSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_AltToleranceSuppressLeadingZeros_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadialLarge_get_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_AltToleranceSuppressLeadingZeros_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadialLarge_put_AltToleranceSuppressLeadingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_AltToleranceSuppressTrailingZeros_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadialLarge_get_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_AltToleranceSuppressTrailingZeros_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadialLarge_put_AltToleranceSuppressTrailingZeros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_AltToleranceSuppressZeroFeet_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadialLarge_get_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_AltToleranceSuppressZeroFeet_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadialLarge_put_AltToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_AltToleranceSuppressZeroInches_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadialLarge_get_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_AltToleranceSuppressZeroInches_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadialLarge_put_AltToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_SuppressZeroFeet_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadialLarge_get_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_SuppressZeroFeet_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadialLarge_put_SuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_SuppressZeroInches_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadialLarge_get_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_SuppressZeroInches_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadialLarge_put_SuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_ToleranceSuppressZeroFeet_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadialLarge_get_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_ToleranceSuppressZeroFeet_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadialLarge_put_ToleranceSuppressZeroFeet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_ToleranceSuppressZeroInches_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL *bVal);

void __RPC_STUB IZcadDimRadialLarge_get_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_ToleranceSuppressZeroInches_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT_BOOL bVal);

void __RPC_STUB IZcadDimRadialLarge_put_ToleranceSuppressZeroInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_DimensionLineWeight_Proxy(
    IZcadDimRadialLarge * This,
     ZCAD_LWEIGHT *weight);

void __RPC_STUB IZcadDimRadialLarge_get_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_DimensionLineWeight_Proxy(
    IZcadDimRadialLarge * This,
     ZCAD_LWEIGHT weight);

void __RPC_STUB IZcadDimRadialLarge_put_DimensionLineWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_ArrowheadSize_Proxy(
    IZcadDimRadialLarge * This,
     double *size);

void __RPC_STUB IZcadDimRadialLarge_get_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_ArrowheadSize_Proxy(
    IZcadDimRadialLarge * This,
     double size);

void __RPC_STUB IZcadDimRadialLarge_put_ArrowheadSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_ArrowheadType_Proxy(
    IZcadDimRadialLarge * This,
     ZcDimArrowheadType *Type);

void __RPC_STUB IZcadDimRadialLarge_get_ArrowheadType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_ArrowheadType_Proxy(
    IZcadDimRadialLarge * This,
     ZcDimArrowheadType Type);

void __RPC_STUB IZcadDimRadialLarge_put_ArrowheadType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_Measurement_Proxy(
    IZcadDimRadialLarge * This,
     double *bVal);

void __RPC_STUB IZcadDimRadialLarge_get_Measurement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_ArrowheadBlock_Proxy(
    IZcadDimRadialLarge * This,
     BSTR *BlockName);

void __RPC_STUB IZcadDimRadialLarge_get_ArrowheadBlock_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_ArrowheadBlock_Proxy(
    IZcadDimRadialLarge * This,
     BSTR BlockName);

void __RPC_STUB IZcadDimRadialLarge_put_ArrowheadBlock_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_OverrideCenter_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT *overrideCenterPos);

void __RPC_STUB IZcadDimRadialLarge_get_OverrideCenter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_OverrideCenter_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT overrideCenterPos);

void __RPC_STUB IZcadDimRadialLarge_put_OverrideCenter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_JogLocation_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT *jogPos);

void __RPC_STUB IZcadDimRadialLarge_get_JogLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_JogLocation_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT jogPos);

void __RPC_STUB IZcadDimRadialLarge_put_JogLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_JogAngle_Proxy(
    IZcadDimRadialLarge * This,
     ZCAD_ANGLE *jogAngle);

void __RPC_STUB IZcadDimRadialLarge_get_JogAngle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_JogAngle_Proxy(
    IZcadDimRadialLarge * This,
     ZCAD_ANGLE rotAngle);

void __RPC_STUB IZcadDimRadialLarge_put_JogAngle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_Center_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT *pVar);

void __RPC_STUB IZcadDimRadialLarge_get_Center_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_Center_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT newVal);

void __RPC_STUB IZcadDimRadialLarge_put_Center_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_ChordPoint_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT *pVal);

void __RPC_STUB IZcadDimRadialLarge_get_ChordPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_ChordPoint_Proxy(
    IZcadDimRadialLarge * This,
     VARIANT newVal);

void __RPC_STUB IZcadDimRadialLarge_put_ChordPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_get_DimensionLinetype_Proxy(
    IZcadDimRadialLarge * This,
     BSTR *Linetype);

void __RPC_STUB IZcadDimRadialLarge_get_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);

 HRESULT STDMETHODCALLTYPE IZcadDimRadialLarge_put_DimensionLinetype_Proxy(
    IZcadDimRadialLarge * This,
     BSTR Linetype);

void __RPC_STUB IZcadDimRadialLarge_put_DimensionLinetype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


#endif

DEFINE_GUID(CLSID_ZcadDimRadialLarge,0xEC923110,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923110-5A17-11E7-B72E-BC5FF42AC839")
ZcadDimRadialLarge;
#endif

DEFINE_GUID(CLSID_ZcadBlock,0xEC923016,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC923016-5A17-11E7-B72E-BC5FF42AC839")
ZcadBlock;
#endif

#ifndef __IZcadModelSpace_INTERFACE_DEFINED__
#define __IZcadModelSpace_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadModelSpace,0xEC9231E6,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9231E6-5A17-11E7-B72E-BC5FF42AC839")
    IZcadModelSpace : public IZcadBlock
    {
    public:
    };

#else

    typedef struct IZcadModelSpaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadModelSpace * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadModelSpace * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadModelSpace * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadModelSpace * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadModelSpace * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadModelSpace * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadModelSpace * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadModelSpace * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadModelSpace * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadModelSpace * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadModelSpace * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadModelSpace * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadModelSpace * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadModelSpace * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadModelSpace * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadModelSpace * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadModelSpace * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadModelSpace * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadModelSpace * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadModelSpace * This);

         HRESULT ( STDMETHODCALLTYPE *Item )(
            IZcadModelSpace * This,
             VARIANT Index,
             IZcadEntity **pItem);

         HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            IZcadModelSpace * This,
             LPUNKNOWN *pVal);

         HRESULT ( STDMETHODCALLTYPE *get_Count )(
            IZcadModelSpace * This,
             long *pVal);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadModelSpace * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadModelSpace * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_Origin )(
            IZcadModelSpace * This,
             VARIANT *origin);

         HRESULT ( STDMETHODCALLTYPE *put_Origin )(
            IZcadModelSpace * This,
             VARIANT origin);

         HRESULT ( STDMETHODCALLTYPE *AddCustomObject )(
            IZcadModelSpace * This,
             BSTR ClassName,
             LPDISPATCH *pObject);

         HRESULT ( STDMETHODCALLTYPE *Add3DFace )(
            IZcadModelSpace * This,
             VARIANT Point1,
             VARIANT Point2,
             VARIANT Point3,
             VARIANT Point4,
             IZcad3DFace **pFace3d);

         HRESULT ( STDMETHODCALLTYPE *Add3DMesh )(
            IZcadModelSpace * This,
             int M,
             int N,
             VARIANT PointsMatrix,
             IZcadPolygonMesh **pMesh3d);

         HRESULT ( STDMETHODCALLTYPE *Add3DPoly )(
            IZcadModelSpace * This,
             VARIANT PointsArray,
             IZcad3DPolyline **pPoly3d);

         HRESULT ( STDMETHODCALLTYPE *AddArc )(
            IZcadModelSpace * This,
             VARIANT Center,
             double Radius,
             double StartAngle,
             double EndAngle,
             IZcadArc **pArc);

         HRESULT ( STDMETHODCALLTYPE *AddAttribute )(
            IZcadModelSpace * This,
             double Height,
             ZcAttributeMode Mode,
             BSTR Prompt,
             VARIANT InsertionPoint,
             BSTR Tag,
             BSTR Value,
             IZcadAttribute **pAttr);

         HRESULT ( STDMETHODCALLTYPE *AddBox )(
            IZcadModelSpace * This,
             VARIANT Origin,
             double Length,
             double Width,
             double Height,
             IZcad3DSolid **pBox);

         HRESULT ( STDMETHODCALLTYPE *AddCircle )(
            IZcadModelSpace * This,
             VARIANT center,
             double radius,
             IZcadCircle **pCircle);

         HRESULT ( STDMETHODCALLTYPE *AddCone )(
            IZcadModelSpace * This,
             VARIANT Center,
             double BaseRadius,
             double Height,
             IZcad3DSolid **pCone);

         HRESULT ( STDMETHODCALLTYPE *AddCylinder )(
            IZcadModelSpace * This,
             VARIANT Center,
             double Radius,
             double Height,
             IZcad3DSolid **pCyl);

         HRESULT ( STDMETHODCALLTYPE *AddDimAligned )(
            IZcadModelSpace * This,
             VARIANT ExtLine1Point,
             VARIANT ExtLine2Point,
             VARIANT TextPosition,
             IZcadDimAligned **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddDimAngular )(
            IZcadModelSpace * This,
             VARIANT AngleVertex,
             VARIANT FirstEndPoint,
             VARIANT SecondEndPoint,
             VARIANT TextPoint,
             IZcadDimAngular **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddDimDiametric )(
            IZcadModelSpace * This,
             VARIANT ChordPoint,
             VARIANT FarChordPoint,
             double LeaderLength,
             IZcadDimDiametric **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddDimRotated )(
            IZcadModelSpace * This,
             VARIANT ExtLine1Point,
             VARIANT ExtLine2Point,
             VARIANT DimLineLocation,
             double RotationAngle,
             IZcadDimRotated **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddDimOrdinate )(
            IZcadModelSpace * This,
             VARIANT DefinitionPoint,
             VARIANT LeaderEndPoint,
             int UseXAxis,
             IZcadDimOrdinate **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddDimRadial )(
            IZcadModelSpace * This,
             VARIANT Center,
             VARIANT ChordPoint,
             double LeaderLength,
             IZcadDimRadial **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddEllipse )(
            IZcadModelSpace * This,
             VARIANT Center,
             VARIANT MajorAxis,
             double RadiusRatio,
             IZcadEllipse **pEllipse);

         HRESULT ( STDMETHODCALLTYPE *AddEllipticalCone )(
            IZcadModelSpace * This,
             VARIANT Center,
             double MajorRadius,
             double MinorRadius,
             double Height,
             IZcad3DSolid **pEllipCone);

         HRESULT ( STDMETHODCALLTYPE *AddEllipticalCylinder )(
            IZcadModelSpace * This,
             VARIANT Center,
             double MajorRadius,
             double MinorRadius,
             double Height,
             IZcad3DSolid **pEllipCyl);

         HRESULT ( STDMETHODCALLTYPE *AddExtrudedSolid )(
            IZcadModelSpace * This,
             IZcadRegion *Profile,
             double Height,
             double TaperAngle,
             IZcad3DSolid **pExtrSolid);

         HRESULT ( STDMETHODCALLTYPE *AddExtrudedSolidAlongPath )(
            IZcadModelSpace * This,
             IZcadRegion *Profile,
             IDispatch *Path,
             IZcad3DSolid **pExtrSolid);

         HRESULT ( STDMETHODCALLTYPE *AddLeader )(
            IZcadModelSpace * This,
             VARIANT PointsArray,
             IZcadEntity *Annotation,
             ZcLeaderType Type,
             IZcadLeader **pLeader);

         HRESULT ( STDMETHODCALLTYPE *AddMText )(
            IZcadModelSpace * This,
             VARIANT InsertionPoint,
             double Width,
             BSTR Text,
             IZcadMText **pMtext);

         HRESULT ( STDMETHODCALLTYPE *AddPoint )(
            IZcadModelSpace * This,
             VARIANT Point,
             IZcadPoint **pPoint);

         HRESULT ( STDMETHODCALLTYPE *AddLightWeightPolyline )(
            IZcadModelSpace * This,
             VARIANT VerticesList,
             IZcadLWPolyline **pLWPolyline);

         HRESULT ( STDMETHODCALLTYPE *AddPolyline )(
            IZcadModelSpace * This,
             VARIANT VerticesList,
             IZcadPolyline **pPolyline);

         HRESULT ( STDMETHODCALLTYPE *AddRay )(
            IZcadModelSpace * This,
             VARIANT Point1,
             VARIANT Point2,
             IZcadRay **pRay);

         HRESULT ( STDMETHODCALLTYPE *AddRegion )(
            IZcadModelSpace * This,
             VARIANT ObjectList,
             VARIANT *pRegions);

         HRESULT ( STDMETHODCALLTYPE *AddRevolvedSolid )(
            IZcadModelSpace * This,
             IZcadRegion *Profile,
             VARIANT AxisPoint,
             VARIANT AxisDir,
             double Angle,
             IZcad3DSolid **pRevolSolid);

         HRESULT ( STDMETHODCALLTYPE *AddShape )(
            IZcadModelSpace * This,
             BSTR Name,
             VARIANT InsertionPoint,
             double scaleFactor,
             double rotationAngle,
             IZcadShape **pShape);

         HRESULT ( STDMETHODCALLTYPE *AddSolid )(
            IZcadModelSpace * This,
             VARIANT Point1,
             VARIANT Point2,
             VARIANT Point3,
             VARIANT Point4,
             IZcadSolid **pSolid);

         HRESULT ( STDMETHODCALLTYPE *AddSphere )(
            IZcadModelSpace * This,
             VARIANT Center,
             double Radius,
             IZcad3DSolid **pSphere);

         HRESULT ( STDMETHODCALLTYPE *AddSpline )(
            IZcadModelSpace * This,
             VARIANT PointsArray,
             VARIANT StartTangent,
             VARIANT EndTangent,
             IZcadSpline **pSpline);

         HRESULT ( STDMETHODCALLTYPE *AddText )(
            IZcadModelSpace * This,
             BSTR TextString,
             VARIANT InsertionPoint,
             double Height,
             IZcadText **pText);

         HRESULT ( STDMETHODCALLTYPE *AddTolerance )(
            IZcadModelSpace * This,
             BSTR Text,
             VARIANT InsertionPoint,
             VARIANT Direction,
             IZcadTolerance **pTolerance);

         HRESULT ( STDMETHODCALLTYPE *AddTorus )(
            IZcadModelSpace * This,
             VARIANT Center,
             double TorusRadius,
             double TubeRadius,
             IZcad3DSolid **pTorus);

         HRESULT ( STDMETHODCALLTYPE *AddTrace )(
            IZcadModelSpace * This,
             VARIANT PointsArray,
             IZcadTrace **pTrace);

         HRESULT ( STDMETHODCALLTYPE *AddWedge )(
            IZcadModelSpace * This,
             VARIANT Center,
             double Length,
             double Width,
             double Height,
             IZcad3DSolid **pWedge);

         HRESULT ( STDMETHODCALLTYPE *AddXline )(
            IZcadModelSpace * This,
             VARIANT Point1,
             VARIANT Point2,
             IZcadXline **pXline);

         HRESULT ( STDMETHODCALLTYPE *InsertBlock )(
            IZcadModelSpace * This,
             VARIANT InsertionPoint,
             BSTR Name,
             double Xscale,
             double Yscale,
             double Zscale,
             double Rotation,
             VARIANT Password,
             IZcadBlockReference **pBlkRef);

         HRESULT ( STDMETHODCALLTYPE *AddHatch )(
            IZcadModelSpace * This,
             int PatternType,
             BSTR PatternName,
             VARIANT_BOOL Associativity,
             VARIANT HatchObjectType,
             IZcadHatch **pHatch);

         HRESULT ( STDMETHODCALLTYPE *AddRaster )(
            IZcadModelSpace * This,
             BSTR ImageFileName,
             VARIANT InsertionPoint,
             double ScaleFactor,
             double RotationAngle,
             IZcadRasterImage **pRaster);

         HRESULT ( STDMETHODCALLTYPE *AddLine )(
            IZcadModelSpace * This,
             VARIANT StartPoint,
             VARIANT EndPoint,
             IZcadLine **pLine);

         HRESULT ( STDMETHODCALLTYPE *get_IsLayout )(
            IZcadModelSpace * This,
             VARIANT_BOOL *bIsLayout);

         HRESULT ( STDMETHODCALLTYPE *get_Layout )(
            IZcadModelSpace * This,
             IZcadLayout **pLayout);

         HRESULT ( STDMETHODCALLTYPE *get_IsXRef )(
            IZcadModelSpace * This,
             VARIANT_BOOL *pIsXRref);

         HRESULT ( STDMETHODCALLTYPE *AddMInsertBlock )(
            IZcadModelSpace * This,
             VARIANT InsertionPoint,
             BSTR Name,
             double Xscale,
             double Yscale,
             double Zscale,
             double Rotation,
             long NumRows,
             long NumColumns,
             long RowSpacing,
             long ColumnSpacing,
             VARIANT Password,
             IZcadMInsertBlock **pMInsertBlk);

         HRESULT ( STDMETHODCALLTYPE *AddPolyfaceMesh )(
            IZcadModelSpace * This,
             VARIANT VertexList,
             VARIANT FaceList,
             IZcadPolyfaceMesh **pPFMesh);

         HRESULT ( STDMETHODCALLTYPE *AddMLine )(
            IZcadModelSpace * This,
             VARIANT VertexList,
             IZcadMLine **pMLine);

         HRESULT ( STDMETHODCALLTYPE *AddDim3PointAngular )(
            IZcadModelSpace * This,
             VARIANT AngleVertex,
             VARIANT FirstEndPoint,
             VARIANT SecondEndPoint,
             VARIANT TextPoint,
             IZcadDim3PointAngular **pDim);

         HRESULT ( STDMETHODCALLTYPE *get_XRefDatabase )(
            IZcadModelSpace * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *AttachExternalReference )(
            IZcadModelSpace * This,
             BSTR PathName,
             BSTR Name,
             VARIANT InsertionPoint,
             double Xscale,
             double Yscale,
             double Zscale,
             double Rotation,
             VARIANT_BOOL bOverlay,
             VARIANT Password,
             IZcadExternalReference **pXRef);

         HRESULT ( STDMETHODCALLTYPE *Unload )(
            IZcadModelSpace * This);

         HRESULT ( STDMETHODCALLTYPE *Reload )(
            IZcadModelSpace * This);

         HRESULT ( STDMETHODCALLTYPE *Bind )(
            IZcadModelSpace * This,
             VARIANT_BOOL bPrefixName);

         HRESULT ( STDMETHODCALLTYPE *Detach )(
            IZcadModelSpace * This);

         HRESULT ( STDMETHODCALLTYPE *AddTable )(
            IZcadModelSpace * This,
             VARIANT InsertionPoint,
             int NumRows,
             int NumColumns,
             double RowHeight,
             double ColWidth,
             IZcadTable **pTable);

         HRESULT ( STDMETHODCALLTYPE *get_Path )(
            IZcadModelSpace * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Path )(
            IZcadModelSpace * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_Comments )(
            IZcadModelSpace * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Comments )(
            IZcadModelSpace * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_Units )(
            IZcadModelSpace * This,
             ZcInsertUnits *pIU);

         HRESULT ( STDMETHODCALLTYPE *put_Units )(
            IZcadModelSpace * This,
             ZcInsertUnits IU);

         HRESULT ( STDMETHODCALLTYPE *get_Explodable )(
            IZcadModelSpace * This,
             VARIANT_BOOL *bExplodable);

         HRESULT ( STDMETHODCALLTYPE *put_Explodable )(
            IZcadModelSpace * This,
             VARIANT_BOOL bExplodable);

         HRESULT ( STDMETHODCALLTYPE *get_BlockScaling )(
            IZcadModelSpace * This,
             ZcBlockScaling *pBS);

         HRESULT ( STDMETHODCALLTYPE *put_BlockScaling )(
            IZcadModelSpace * This,
             ZcBlockScaling BS);

         HRESULT ( STDMETHODCALLTYPE *get_IsDynamicBlock )(
            IZcadModelSpace * This,
             VARIANT_BOOL *pDynamicBlock);

         HRESULT ( STDMETHODCALLTYPE *AddDimArc )(
            IZcadModelSpace * This,
             VARIANT ArcCenter,
             VARIANT FirstEndPoint,
             VARIANT SecondEndPoint,
             VARIANT ArcPoint,
             IZcadDimArcLength **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddDimRadialLarge )(
            IZcadModelSpace * This,
             VARIANT Center,
             VARIANT ChordPoint,
             VARIANT OverrideCenter,
             VARIANT JogPoint,
             double JogAngle,
             IZcadDimRadialLarge **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddSection )(
            IZcadModelSpace * This,
             VARIANT fromPoint,
             VARIANT toPoint,
             VARIANT planeVector,
             IZcadSection **ppSecPlane);

         HRESULT ( STDMETHODCALLTYPE *AddMLeader )(
            IZcadModelSpace * This,
             VARIANT pointsArray,
             int *leaderLineIndex,
             IZcadMLeader **pMLeader);

        END_INTERFACE
    } IZcadModelSpaceVtbl;

    interface IZcadModelSpace
    {
        CONST_VTBL struct IZcadModelSpaceVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadModelSpace_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadModelSpace_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadModelSpace_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadModelSpace_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadModelSpace_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadModelSpace_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadModelSpace_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadModelSpace_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadModelSpace_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadModelSpace_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadModelSpace_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadModelSpace_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadModelSpace_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadModelSpace_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadModelSpace_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadModelSpace_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadModelSpace_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadModelSpace_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadModelSpace_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadModelSpace_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadModelSpace_Item(This,Index,pItem)	\
    ((This)->lpVtbl -> Item(This,Index,pItem))

#define IZcadModelSpace_get__NewEnum(This,pVal)	\
    ((This)->lpVtbl -> get__NewEnum(This,pVal))

#define IZcadModelSpace_get_Count(This,pVal)	\
    ((This)->lpVtbl -> get_Count(This,pVal))

#define IZcadModelSpace_get_Name(This,bstrName)	\
    ((This)->lpVtbl -> get_Name(This,bstrName))

#define IZcadModelSpace_put_Name(This,bstrName)	\
    ((This)->lpVtbl -> put_Name(This,bstrName))

#define IZcadModelSpace_get_Origin(This,origin)	\
    ((This)->lpVtbl -> get_Origin(This,origin))

#define IZcadModelSpace_put_Origin(This,origin)	\
    ((This)->lpVtbl -> put_Origin(This,origin))

#define IZcadModelSpace_AddCustomObject(This,ClassName,pObject)	\
    ((This)->lpVtbl -> AddCustomObject(This,ClassName,pObject))

#define IZcadModelSpace_Add3DFace(This,Point1,Point2,Point3,Point4,pFace3d)	\
    ((This)->lpVtbl -> Add3DFace(This,Point1,Point2,Point3,Point4,pFace3d))

#define IZcadModelSpace_Add3DMesh(This,M,N,PointsMatrix,pMesh3d)	\
    ((This)->lpVtbl -> Add3DMesh(This,M,N,PointsMatrix,pMesh3d))

#define IZcadModelSpace_Add3DPoly(This,PointsArray,pPoly3d)	\
    ((This)->lpVtbl -> Add3DPoly(This,PointsArray,pPoly3d))

#define IZcadModelSpace_AddArc(This,Center,Radius,StartAngle,EndAngle,pArc)	\
    ((This)->lpVtbl -> AddArc(This,Center,Radius,StartAngle,EndAngle,pArc))

#define IZcadModelSpace_AddAttribute(This,Height,Mode,Prompt,InsertionPoint,Tag,Value,pAttr)	\
    ((This)->lpVtbl -> AddAttribute(This,Height,Mode,Prompt,InsertionPoint,Tag,Value,pAttr))

#define IZcadModelSpace_AddBox(This,Origin,Length,Width,Height,pBox)	\
    ((This)->lpVtbl -> AddBox(This,Origin,Length,Width,Height,pBox))

#define IZcadModelSpace_AddCircle(This,center,radius,pCircle)	\
    ((This)->lpVtbl -> AddCircle(This,center,radius,pCircle))

#define IZcadModelSpace_AddCone(This,Center,BaseRadius,Height,pCone)	\
    ((This)->lpVtbl -> AddCone(This,Center,BaseRadius,Height,pCone))

#define IZcadModelSpace_AddCylinder(This,Center,Radius,Height,pCyl)	\
    ((This)->lpVtbl -> AddCylinder(This,Center,Radius,Height,pCyl))

#define IZcadModelSpace_AddDimAligned(This,ExtLine1Point,ExtLine2Point,TextPosition,pDim)	\
    ((This)->lpVtbl -> AddDimAligned(This,ExtLine1Point,ExtLine2Point,TextPosition,pDim))

#define IZcadModelSpace_AddDimAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim)	\
    ((This)->lpVtbl -> AddDimAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim))

#define IZcadModelSpace_AddDimDiametric(This,ChordPoint,FarChordPoint,LeaderLength,pDim)	\
    ((This)->lpVtbl -> AddDimDiametric(This,ChordPoint,FarChordPoint,LeaderLength,pDim))

#define IZcadModelSpace_AddDimRotated(This,ExtLine1Point,ExtLine2Point,DimLineLocation,RotationAngle,pDim)	\
    ((This)->lpVtbl -> AddDimRotated(This,ExtLine1Point,ExtLine2Point,DimLineLocation,RotationAngle,pDim))

#define IZcadModelSpace_AddDimOrdinate(This,DefinitionPoint,LeaderEndPoint,UseXAxis,pDim)	\
    ((This)->lpVtbl -> AddDimOrdinate(This,DefinitionPoint,LeaderEndPoint,UseXAxis,pDim))

#define IZcadModelSpace_AddDimRadial(This,Center,ChordPoint,LeaderLength,pDim)	\
    ((This)->lpVtbl -> AddDimRadial(This,Center,ChordPoint,LeaderLength,pDim))

#define IZcadModelSpace_AddEllipse(This,Center,MajorAxis,RadiusRatio,pEllipse)	\
    ((This)->lpVtbl -> AddEllipse(This,Center,MajorAxis,RadiusRatio,pEllipse))

#define IZcadModelSpace_AddEllipticalCone(This,Center,MajorRadius,MinorRadius,Height,pEllipCone)	\
    ((This)->lpVtbl -> AddEllipticalCone(This,Center,MajorRadius,MinorRadius,Height,pEllipCone))

#define IZcadModelSpace_AddEllipticalCylinder(This,Center,MajorRadius,MinorRadius,Height,pEllipCyl)	\
    ((This)->lpVtbl -> AddEllipticalCylinder(This,Center,MajorRadius,MinorRadius,Height,pEllipCyl))

#define IZcadModelSpace_AddExtrudedSolid(This,Profile,Height,TaperAngle,pExtrSolid)	\
    ((This)->lpVtbl -> AddExtrudedSolid(This,Profile,Height,TaperAngle,pExtrSolid))

#define IZcadModelSpace_AddExtrudedSolidAlongPath(This,Profile,Path,pExtrSolid)	\
    ((This)->lpVtbl -> AddExtrudedSolidAlongPath(This,Profile,Path,pExtrSolid))

#define IZcadModelSpace_AddLeader(This,PointsArray,Annotation,Type,pLeader)	\
    ((This)->lpVtbl -> AddLeader(This,PointsArray,Annotation,Type,pLeader))

#define IZcadModelSpace_AddMText(This,InsertionPoint,Width,Text,pMtext)	\
    ((This)->lpVtbl -> AddMText(This,InsertionPoint,Width,Text,pMtext))

#define IZcadModelSpace_AddPoint(This,Point,pPoint)	\
    ((This)->lpVtbl -> AddPoint(This,Point,pPoint))

#define IZcadModelSpace_AddLightWeightPolyline(This,VerticesList,pLWPolyline)	\
    ((This)->lpVtbl -> AddLightWeightPolyline(This,VerticesList,pLWPolyline))

#define IZcadModelSpace_AddPolyline(This,VerticesList,pPolyline)	\
    ((This)->lpVtbl -> AddPolyline(This,VerticesList,pPolyline))

#define IZcadModelSpace_AddRay(This,Point1,Point2,pRay)	\
    ((This)->lpVtbl -> AddRay(This,Point1,Point2,pRay))

#define IZcadModelSpace_AddRegion(This,ObjectList,pRegions)	\
    ((This)->lpVtbl -> AddRegion(This,ObjectList,pRegions))

#define IZcadModelSpace_AddRevolvedSolid(This,Profile,AxisPoint,AxisDir,Angle,pRevolSolid)	\
    ((This)->lpVtbl -> AddRevolvedSolid(This,Profile,AxisPoint,AxisDir,Angle,pRevolSolid))

#define IZcadModelSpace_AddShape(This,Name,InsertionPoint,scaleFactor,rotationAngle,pShape)	\
    ((This)->lpVtbl -> AddShape(This,Name,InsertionPoint,scaleFactor,rotationAngle,pShape))

#define IZcadModelSpace_AddSolid(This,Point1,Point2,Point3,Point4,pSolid)	\
    ((This)->lpVtbl -> AddSolid(This,Point1,Point2,Point3,Point4,pSolid))

#define IZcadModelSpace_AddSphere(This,Center,Radius,pSphere)	\
    ((This)->lpVtbl -> AddSphere(This,Center,Radius,pSphere))

#define IZcadModelSpace_AddSpline(This,PointsArray,StartTangent,EndTangent,pSpline)	\
    ((This)->lpVtbl -> AddSpline(This,PointsArray,StartTangent,EndTangent,pSpline))

#define IZcadModelSpace_AddText(This,TextString,InsertionPoint,Height,pText)	\
    ((This)->lpVtbl -> AddText(This,TextString,InsertionPoint,Height,pText))

#define IZcadModelSpace_AddTolerance(This,Text,InsertionPoint,Direction,pTolerance)	\
    ((This)->lpVtbl -> AddTolerance(This,Text,InsertionPoint,Direction,pTolerance))

#define IZcadModelSpace_AddTorus(This,Center,TorusRadius,TubeRadius,pTorus)	\
    ((This)->lpVtbl -> AddTorus(This,Center,TorusRadius,TubeRadius,pTorus))

#define IZcadModelSpace_AddTrace(This,PointsArray,pTrace)	\
    ((This)->lpVtbl -> AddTrace(This,PointsArray,pTrace))

#define IZcadModelSpace_AddWedge(This,Center,Length,Width,Height,pWedge)	\
    ((This)->lpVtbl -> AddWedge(This,Center,Length,Width,Height,pWedge))

#define IZcadModelSpace_AddXline(This,Point1,Point2,pXline)	\
    ((This)->lpVtbl -> AddXline(This,Point1,Point2,pXline))

#define IZcadModelSpace_InsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,Password,pBlkRef)	\
    ((This)->lpVtbl -> InsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,Password,pBlkRef))

#define IZcadModelSpace_AddHatch(This,PatternType,PatternName,Associativity,HatchObjectType,pHatch)	\
    ((This)->lpVtbl -> AddHatch(This,PatternType,PatternName,Associativity,HatchObjectType,pHatch))

#define IZcadModelSpace_AddRaster(This,ImageFileName,InsertionPoint,ScaleFactor,RotationAngle,pRaster)	\
    ((This)->lpVtbl -> AddRaster(This,ImageFileName,InsertionPoint,ScaleFactor,RotationAngle,pRaster))

#define IZcadModelSpace_AddLine(This,StartPoint,EndPoint,pLine)	\
    ((This)->lpVtbl -> AddLine(This,StartPoint,EndPoint,pLine))

#define IZcadModelSpace_get_IsLayout(This,bIsLayout)	\
    ((This)->lpVtbl -> get_IsLayout(This,bIsLayout))

#define IZcadModelSpace_get_Layout(This,pLayout)	\
    ((This)->lpVtbl -> get_Layout(This,pLayout))

#define IZcadModelSpace_get_IsXRef(This,pIsXRref)	\
    ((This)->lpVtbl -> get_IsXRef(This,pIsXRref))

#define IZcadModelSpace_AddMInsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,NumRows,NumColumns,RowSpacing,ColumnSpacing,Password,pMInsertBlk)	\
    ((This)->lpVtbl -> AddMInsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,NumRows,NumColumns,RowSpacing,ColumnSpacing,Password,pMInsertBlk))

#define IZcadModelSpace_AddPolyfaceMesh(This,VertexList,FaceList,pPFMesh)	\
    ((This)->lpVtbl -> AddPolyfaceMesh(This,VertexList,FaceList,pPFMesh))

#define IZcadModelSpace_AddMLine(This,VertexList,pMLine)	\
    ((This)->lpVtbl -> AddMLine(This,VertexList,pMLine))

#define IZcadModelSpace_AddDim3PointAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim)	\
    ((This)->lpVtbl -> AddDim3PointAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim))

#define IZcadModelSpace_get_XRefDatabase(This,pDatabase)	\
    ((This)->lpVtbl -> get_XRefDatabase(This,pDatabase))

#define IZcadModelSpace_AttachExternalReference(This,PathName,Name,InsertionPoint,Xscale,Yscale,Zscale,Rotation,bOverlay,Password,pXRef)	\
    ((This)->lpVtbl -> AttachExternalReference(This,PathName,Name,InsertionPoint,Xscale,Yscale,Zscale,Rotation,bOverlay,Password,pXRef))

#define IZcadModelSpace_Unload(This)	\
    ((This)->lpVtbl -> Unload(This))

#define IZcadModelSpace_Reload(This)	\
    ((This)->lpVtbl -> Reload(This))

#define IZcadModelSpace_Bind(This,bPrefixName)	\
    ((This)->lpVtbl -> Bind(This,bPrefixName))

#define IZcadModelSpace_Detach(This)	\
    ((This)->lpVtbl -> Detach(This))

#define IZcadModelSpace_AddTable(This,InsertionPoint,NumRows,NumColumns,RowHeight,ColWidth,pTable)	\
    ((This)->lpVtbl -> AddTable(This,InsertionPoint,NumRows,NumColumns,RowHeight,ColWidth,pTable))

#define IZcadModelSpace_get_Path(This,bstrName)	\
    ((This)->lpVtbl -> get_Path(This,bstrName))

#define IZcadModelSpace_put_Path(This,bstrName)	\
    ((This)->lpVtbl -> put_Path(This,bstrName))

#define IZcadModelSpace_get_Comments(This,bstrName)	\
    ((This)->lpVtbl -> get_Comments(This,bstrName))

#define IZcadModelSpace_put_Comments(This,bstrName)	\
    ((This)->lpVtbl -> put_Comments(This,bstrName))

#define IZcadModelSpace_get_Units(This,pIU)	\
    ((This)->lpVtbl -> get_Units(This,pIU))

#define IZcadModelSpace_put_Units(This,IU)	\
    ((This)->lpVtbl -> put_Units(This,IU))

#define IZcadModelSpace_get_Explodable(This,bExplodable)	\
    ((This)->lpVtbl -> get_Explodable(This,bExplodable))

#define IZcadModelSpace_put_Explodable(This,bExplodable)	\
    ((This)->lpVtbl -> put_Explodable(This,bExplodable))

#define IZcadModelSpace_get_BlockScaling(This,pBS)	\
    ((This)->lpVtbl -> get_BlockScaling(This,pBS))

#define IZcadModelSpace_put_BlockScaling(This,BS)	\
    ((This)->lpVtbl -> put_BlockScaling(This,BS))

#define IZcadModelSpace_get_IsDynamicBlock(This,pDynamicBlock)	\
    ((This)->lpVtbl -> get_IsDynamicBlock(This,pDynamicBlock))

#define IZcadModelSpace_AddDimArc(This,ArcCenter,FirstEndPoint,SecondEndPoint,ArcPoint,pDim)	\
    ((This)->lpVtbl -> AddDimArc(This,ArcCenter,FirstEndPoint,SecondEndPoint,ArcPoint,pDim))

#define IZcadModelSpace_AddDimRadialLarge(This,Center,ChordPoint,OverrideCenter,JogPoint,JogAngle,pDim)	\
    ((This)->lpVtbl -> AddDimRadialLarge(This,Center,ChordPoint,OverrideCenter,JogPoint,JogAngle,pDim))

#define IZcadModelSpace_AddSection(This,fromPoint,toPoint,planeVector,ppSecPlane)	\
    ((This)->lpVtbl -> AddSection(This,fromPoint,toPoint,planeVector,ppSecPlane))

#define IZcadModelSpace_AddMLeader(This,pointsArray,leaderLineIndex,pMLeader)	\
    ((This)->lpVtbl -> AddMLeader(This,pointsArray,leaderLineIndex,pMLeader))


#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadModelSpace,0xEC9231A1,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9231A1-5A17-11E7-B72E-BC5FF42AC839")
ZcadModelSpace;
#endif

#ifndef __IZcadPaperSpace_INTERFACE_DEFINED__
#define __IZcadPaperSpace_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadPaperSpace,0xEC9230E3,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9230E3-5A17-11E7-B72E-BC5FF42AC839")
    IZcadPaperSpace : public IZcadBlock
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE AddPViewport(
             VARIANT center,
             double width,
             double height,
             IZcadPViewport **pPViewport) = 0;

    };

#else

    typedef struct IZcadPaperSpaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadPaperSpace * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadPaperSpace * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadPaperSpace * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadPaperSpace * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadPaperSpace * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadPaperSpace * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadPaperSpace * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Handle )(
            IZcadPaperSpace * This,
             BSTR *Handle);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectName )(
            IZcadPaperSpace * This,
             BSTR *ObjectName);

         HRESULT ( STDMETHODCALLTYPE *GetXData )(
            IZcadPaperSpace * This,
             BSTR AppName,
             VARIANT *XDataType,
             VARIANT *XDataValue);

         HRESULT ( STDMETHODCALLTYPE *SetXData )(
            IZcadPaperSpace * This,
             VARIANT XDataType,
             VARIANT XDataValue);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadPaperSpace * This);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectID )(
            IZcadPaperSpace * This,
             LONG_PTR *ObjectId);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadPaperSpace * This,
             LPDISPATCH *ApplicationObject);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZcadPaperSpace * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *get_HasExtensionDictionary )(
            IZcadPaperSpace * This,
             VARIANT_BOOL *bHasDictionary);

         HRESULT ( STDMETHODCALLTYPE *GetExtensionDictionary )(
            IZcadPaperSpace * This,
             IZcadDictionary **pExtDictionary);

         HRESULT ( STDMETHODCALLTYPE *get_OwnerID )(
            IZcadPaperSpace * This,
             LONG_PTR *OwnerId);

         HRESULT ( STDMETHODCALLTYPE *get_Document )(
            IZcadPaperSpace * This,
             LPDISPATCH *pDocument);

         HRESULT ( STDMETHODCALLTYPE *Erase )(
            IZcadPaperSpace * This);

         HRESULT ( STDMETHODCALLTYPE *Item )(
            IZcadPaperSpace * This,
             VARIANT Index,
             IZcadEntity **pItem);

         HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            IZcadPaperSpace * This,
             LPUNKNOWN *pVal);

         HRESULT ( STDMETHODCALLTYPE *get_Count )(
            IZcadPaperSpace * This,
             long *pVal);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZcadPaperSpace * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZcadPaperSpace * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_Origin )(
            IZcadPaperSpace * This,
             VARIANT *origin);

         HRESULT ( STDMETHODCALLTYPE *put_Origin )(
            IZcadPaperSpace * This,
             VARIANT origin);

         HRESULT ( STDMETHODCALLTYPE *AddCustomObject )(
            IZcadPaperSpace * This,
             BSTR ClassName,
             LPDISPATCH *pObject);

         HRESULT ( STDMETHODCALLTYPE *Add3DFace )(
            IZcadPaperSpace * This,
             VARIANT Point1,
             VARIANT Point2,
             VARIANT Point3,
             VARIANT Point4,
             IZcad3DFace **pFace3d);

         HRESULT ( STDMETHODCALLTYPE *Add3DMesh )(
            IZcadPaperSpace * This,
             int M,
             int N,
             VARIANT PointsMatrix,
             IZcadPolygonMesh **pMesh3d);

         HRESULT ( STDMETHODCALLTYPE *Add3DPoly )(
            IZcadPaperSpace * This,
             VARIANT PointsArray,
             IZcad3DPolyline **pPoly3d);

         HRESULT ( STDMETHODCALLTYPE *AddArc )(
            IZcadPaperSpace * This,
             VARIANT Center,
             double Radius,
             double StartAngle,
             double EndAngle,
             IZcadArc **pArc);

         HRESULT ( STDMETHODCALLTYPE *AddAttribute )(
            IZcadPaperSpace * This,
             double Height,
             ZcAttributeMode Mode,
             BSTR Prompt,
             VARIANT InsertionPoint,
             BSTR Tag,
             BSTR Value,
             IZcadAttribute **pAttr);

         HRESULT ( STDMETHODCALLTYPE *AddBox )(
            IZcadPaperSpace * This,
             VARIANT Origin,
             double Length,
             double Width,
             double Height,
             IZcad3DSolid **pBox);

         HRESULT ( STDMETHODCALLTYPE *AddCircle )(
            IZcadPaperSpace * This,
             VARIANT center,
             double radius,
             IZcadCircle **pCircle);

         HRESULT ( STDMETHODCALLTYPE *AddCone )(
            IZcadPaperSpace * This,
             VARIANT Center,
             double BaseRadius,
             double Height,
             IZcad3DSolid **pCone);

         HRESULT ( STDMETHODCALLTYPE *AddCylinder )(
            IZcadPaperSpace * This,
             VARIANT Center,
             double Radius,
             double Height,
             IZcad3DSolid **pCyl);

         HRESULT ( STDMETHODCALLTYPE *AddDimAligned )(
            IZcadPaperSpace * This,
             VARIANT ExtLine1Point,
             VARIANT ExtLine2Point,
             VARIANT TextPosition,
             IZcadDimAligned **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddDimAngular )(
            IZcadPaperSpace * This,
             VARIANT AngleVertex,
             VARIANT FirstEndPoint,
             VARIANT SecondEndPoint,
             VARIANT TextPoint,
             IZcadDimAngular **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddDimDiametric )(
            IZcadPaperSpace * This,
             VARIANT ChordPoint,
             VARIANT FarChordPoint,
             double LeaderLength,
             IZcadDimDiametric **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddDimRotated )(
            IZcadPaperSpace * This,
             VARIANT ExtLine1Point,
             VARIANT ExtLine2Point,
             VARIANT DimLineLocation,
             double RotationAngle,
             IZcadDimRotated **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddDimOrdinate )(
            IZcadPaperSpace * This,
             VARIANT DefinitionPoint,
             VARIANT LeaderEndPoint,
             int UseXAxis,
             IZcadDimOrdinate **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddDimRadial )(
            IZcadPaperSpace * This,
             VARIANT Center,
             VARIANT ChordPoint,
             double LeaderLength,
             IZcadDimRadial **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddEllipse )(
            IZcadPaperSpace * This,
             VARIANT Center,
             VARIANT MajorAxis,
             double RadiusRatio,
             IZcadEllipse **pEllipse);

         HRESULT ( STDMETHODCALLTYPE *AddEllipticalCone )(
            IZcadPaperSpace * This,
             VARIANT Center,
             double MajorRadius,
             double MinorRadius,
             double Height,
             IZcad3DSolid **pEllipCone);

         HRESULT ( STDMETHODCALLTYPE *AddEllipticalCylinder )(
            IZcadPaperSpace * This,
             VARIANT Center,
             double MajorRadius,
             double MinorRadius,
             double Height,
             IZcad3DSolid **pEllipCyl);

         HRESULT ( STDMETHODCALLTYPE *AddExtrudedSolid )(
            IZcadPaperSpace * This,
             IZcadRegion *Profile,
             double Height,
             double TaperAngle,
             IZcad3DSolid **pExtrSolid);

         HRESULT ( STDMETHODCALLTYPE *AddExtrudedSolidAlongPath )(
            IZcadPaperSpace * This,
             IZcadRegion *Profile,
             IDispatch *Path,
             IZcad3DSolid **pExtrSolid);

         HRESULT ( STDMETHODCALLTYPE *AddLeader )(
            IZcadPaperSpace * This,
             VARIANT PointsArray,
             IZcadEntity *Annotation,
             ZcLeaderType Type,
             IZcadLeader **pLeader);

         HRESULT ( STDMETHODCALLTYPE *AddMText )(
            IZcadPaperSpace * This,
             VARIANT InsertionPoint,
             double Width,
             BSTR Text,
             IZcadMText **pMtext);

         HRESULT ( STDMETHODCALLTYPE *AddPoint )(
            IZcadPaperSpace * This,
             VARIANT Point,
             IZcadPoint **pPoint);

         HRESULT ( STDMETHODCALLTYPE *AddLightWeightPolyline )(
            IZcadPaperSpace * This,
             VARIANT VerticesList,
             IZcadLWPolyline **pLWPolyline);

         HRESULT ( STDMETHODCALLTYPE *AddPolyline )(
            IZcadPaperSpace * This,
             VARIANT VerticesList,
             IZcadPolyline **pPolyline);

         HRESULT ( STDMETHODCALLTYPE *AddRay )(
            IZcadPaperSpace * This,
             VARIANT Point1,
             VARIANT Point2,
             IZcadRay **pRay);

         HRESULT ( STDMETHODCALLTYPE *AddRegion )(
            IZcadPaperSpace * This,
             VARIANT ObjectList,
             VARIANT *pRegions);

         HRESULT ( STDMETHODCALLTYPE *AddRevolvedSolid )(
            IZcadPaperSpace * This,
             IZcadRegion *Profile,
             VARIANT AxisPoint,
             VARIANT AxisDir,
             double Angle,
             IZcad3DSolid **pRevolSolid);

         HRESULT ( STDMETHODCALLTYPE *AddShape )(
            IZcadPaperSpace * This,
             BSTR Name,
             VARIANT InsertionPoint,
             double scaleFactor,
             double rotationAngle,
             IZcadShape **pShape);

         HRESULT ( STDMETHODCALLTYPE *AddSolid )(
            IZcadPaperSpace * This,
             VARIANT Point1,
             VARIANT Point2,
             VARIANT Point3,
             VARIANT Point4,
             IZcadSolid **pSolid);

         HRESULT ( STDMETHODCALLTYPE *AddSphere )(
            IZcadPaperSpace * This,
             VARIANT Center,
             double Radius,
             IZcad3DSolid **pSphere);

         HRESULT ( STDMETHODCALLTYPE *AddSpline )(
            IZcadPaperSpace * This,
             VARIANT PointsArray,
             VARIANT StartTangent,
             VARIANT EndTangent,
             IZcadSpline **pSpline);

         HRESULT ( STDMETHODCALLTYPE *AddText )(
            IZcadPaperSpace * This,
             BSTR TextString,
             VARIANT InsertionPoint,
             double Height,
             IZcadText **pText);

         HRESULT ( STDMETHODCALLTYPE *AddTolerance )(
            IZcadPaperSpace * This,
             BSTR Text,
             VARIANT InsertionPoint,
             VARIANT Direction,
             IZcadTolerance **pTolerance);

         HRESULT ( STDMETHODCALLTYPE *AddTorus )(
            IZcadPaperSpace * This,
             VARIANT Center,
             double TorusRadius,
             double TubeRadius,
             IZcad3DSolid **pTorus);

         HRESULT ( STDMETHODCALLTYPE *AddTrace )(
            IZcadPaperSpace * This,
             VARIANT PointsArray,
             IZcadTrace **pTrace);

         HRESULT ( STDMETHODCALLTYPE *AddWedge )(
            IZcadPaperSpace * This,
             VARIANT Center,
             double Length,
             double Width,
             double Height,
             IZcad3DSolid **pWedge);

         HRESULT ( STDMETHODCALLTYPE *AddXline )(
            IZcadPaperSpace * This,
             VARIANT Point1,
             VARIANT Point2,
             IZcadXline **pXline);

         HRESULT ( STDMETHODCALLTYPE *InsertBlock )(
            IZcadPaperSpace * This,
             VARIANT InsertionPoint,
             BSTR Name,
             double Xscale,
             double Yscale,
             double Zscale,
             double Rotation,
             VARIANT Password,
             IZcadBlockReference **pBlkRef);

         HRESULT ( STDMETHODCALLTYPE *AddHatch )(
            IZcadPaperSpace * This,
             int PatternType,
             BSTR PatternName,
             VARIANT_BOOL Associativity,
             VARIANT HatchObjectType,
             IZcadHatch **pHatch);

         HRESULT ( STDMETHODCALLTYPE *AddRaster )(
            IZcadPaperSpace * This,
             BSTR ImageFileName,
             VARIANT InsertionPoint,
             double ScaleFactor,
             double RotationAngle,
             IZcadRasterImage **pRaster);

         HRESULT ( STDMETHODCALLTYPE *AddLine )(
            IZcadPaperSpace * This,
             VARIANT StartPoint,
             VARIANT EndPoint,
             IZcadLine **pLine);

         HRESULT ( STDMETHODCALLTYPE *get_IsLayout )(
            IZcadPaperSpace * This,
             VARIANT_BOOL *bIsLayout);

         HRESULT ( STDMETHODCALLTYPE *get_Layout )(
            IZcadPaperSpace * This,
             IZcadLayout **pLayout);

         HRESULT ( STDMETHODCALLTYPE *get_IsXRef )(
            IZcadPaperSpace * This,
             VARIANT_BOOL *pIsXRref);

         HRESULT ( STDMETHODCALLTYPE *AddMInsertBlock )(
            IZcadPaperSpace * This,
             VARIANT InsertionPoint,
             BSTR Name,
             double Xscale,
             double Yscale,
             double Zscale,
             double Rotation,
             long NumRows,
             long NumColumns,
             long RowSpacing,
             long ColumnSpacing,
             VARIANT Password,
             IZcadMInsertBlock **pMInsertBlk);

         HRESULT ( STDMETHODCALLTYPE *AddPolyfaceMesh )(
            IZcadPaperSpace * This,
             VARIANT VertexList,
             VARIANT FaceList,
             IZcadPolyfaceMesh **pPFMesh);

         HRESULT ( STDMETHODCALLTYPE *AddMLine )(
            IZcadPaperSpace * This,
             VARIANT VertexList,
             IZcadMLine **pMLine);

         HRESULT ( STDMETHODCALLTYPE *AddDim3PointAngular )(
            IZcadPaperSpace * This,
             VARIANT AngleVertex,
             VARIANT FirstEndPoint,
             VARIANT SecondEndPoint,
             VARIANT TextPoint,
             IZcadDim3PointAngular **pDim);

         HRESULT ( STDMETHODCALLTYPE *get_XRefDatabase )(
            IZcadPaperSpace * This,
             IZcadDatabase **pDatabase);

         HRESULT ( STDMETHODCALLTYPE *AttachExternalReference )(
            IZcadPaperSpace * This,
             BSTR PathName,
             BSTR Name,
             VARIANT InsertionPoint,
             double Xscale,
             double Yscale,
             double Zscale,
             double Rotation,
             VARIANT_BOOL bOverlay,
             VARIANT Password,
             IZcadExternalReference **pXRef);

         HRESULT ( STDMETHODCALLTYPE *Unload )(
            IZcadPaperSpace * This);

         HRESULT ( STDMETHODCALLTYPE *Reload )(
            IZcadPaperSpace * This);

         HRESULT ( STDMETHODCALLTYPE *Bind )(
            IZcadPaperSpace * This,
             VARIANT_BOOL bPrefixName);

         HRESULT ( STDMETHODCALLTYPE *Detach )(
            IZcadPaperSpace * This);

         HRESULT ( STDMETHODCALLTYPE *AddTable )(
            IZcadPaperSpace * This,
             VARIANT InsertionPoint,
             int NumRows,
             int NumColumns,
             double RowHeight,
             double ColWidth,
             IZcadTable **pTable);

         HRESULT ( STDMETHODCALLTYPE *get_Path )(
            IZcadPaperSpace * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Path )(
            IZcadPaperSpace * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_Comments )(
            IZcadPaperSpace * This,
             BSTR *bstrName);

         HRESULT ( STDMETHODCALLTYPE *put_Comments )(
            IZcadPaperSpace * This,
             BSTR bstrName);

         HRESULT ( STDMETHODCALLTYPE *get_Units )(
            IZcadPaperSpace * This,
             ZcInsertUnits *pIU);

         HRESULT ( STDMETHODCALLTYPE *put_Units )(
            IZcadPaperSpace * This,
             ZcInsertUnits IU);

         HRESULT ( STDMETHODCALLTYPE *get_Explodable )(
            IZcadPaperSpace * This,
             VARIANT_BOOL *bExplodable);

         HRESULT ( STDMETHODCALLTYPE *put_Explodable )(
            IZcadPaperSpace * This,
             VARIANT_BOOL bExplodable);

         HRESULT ( STDMETHODCALLTYPE *get_BlockScaling )(
            IZcadPaperSpace * This,
             ZcBlockScaling *pBS);

         HRESULT ( STDMETHODCALLTYPE *put_BlockScaling )(
            IZcadPaperSpace * This,
             ZcBlockScaling BS);

         HRESULT ( STDMETHODCALLTYPE *get_IsDynamicBlock )(
            IZcadPaperSpace * This,
             VARIANT_BOOL *pDynamicBlock);

         HRESULT ( STDMETHODCALLTYPE *AddDimArc )(
            IZcadPaperSpace * This,
             VARIANT ArcCenter,
             VARIANT FirstEndPoint,
             VARIANT SecondEndPoint,
             VARIANT ArcPoint,
             IZcadDimArcLength **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddDimRadialLarge )(
            IZcadPaperSpace * This,
             VARIANT Center,
             VARIANT ChordPoint,
             VARIANT OverrideCenter,
             VARIANT JogPoint,
             double JogAngle,
             IZcadDimRadialLarge **pDim);

         HRESULT ( STDMETHODCALLTYPE *AddSection )(
            IZcadPaperSpace * This,
             VARIANT fromPoint,
             VARIANT toPoint,
             VARIANT planeVector,
             IZcadSection **ppSecPlane);

         HRESULT ( STDMETHODCALLTYPE *AddMLeader )(
            IZcadPaperSpace * This,
             VARIANT pointsArray,
             int *leaderLineIndex,
             IZcadMLeader **pMLeader);

         HRESULT ( STDMETHODCALLTYPE *AddPViewport )(
            IZcadPaperSpace * This,
             VARIANT center,
             double width,
             double height,
             IZcadPViewport **pPViewport);

        END_INTERFACE
    } IZcadPaperSpaceVtbl;

    interface IZcadPaperSpace
    {
        CONST_VTBL struct IZcadPaperSpaceVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadPaperSpace_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadPaperSpace_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadPaperSpace_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadPaperSpace_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadPaperSpace_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadPaperSpace_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadPaperSpace_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadPaperSpace_get_Handle(This,Handle)	\
    ((This)->lpVtbl -> get_Handle(This,Handle))

#define IZcadPaperSpace_get_ObjectName(This,ObjectName)	\
    ((This)->lpVtbl -> get_ObjectName(This,ObjectName))

#define IZcadPaperSpace_GetXData(This,AppName,XDataType,XDataValue)	\
    ((This)->lpVtbl -> GetXData(This,AppName,XDataType,XDataValue))

#define IZcadPaperSpace_SetXData(This,XDataType,XDataValue)	\
    ((This)->lpVtbl -> SetXData(This,XDataType,XDataValue))

#define IZcadPaperSpace_Delete(This)	\
    ((This)->lpVtbl -> Delete(This))

#define IZcadPaperSpace_get_ObjectID(This,ObjectId)	\
    ((This)->lpVtbl -> get_ObjectID(This,ObjectId))

#define IZcadPaperSpace_get_Application(This,ApplicationObject)	\
    ((This)->lpVtbl -> get_Application(This,ApplicationObject))

#define IZcadPaperSpace_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#define IZcadPaperSpace_get_HasExtensionDictionary(This,bHasDictionary)	\
    ((This)->lpVtbl -> get_HasExtensionDictionary(This,bHasDictionary))

#define IZcadPaperSpace_GetExtensionDictionary(This,pExtDictionary)	\
    ((This)->lpVtbl -> GetExtensionDictionary(This,pExtDictionary))

#define IZcadPaperSpace_get_OwnerID(This,OwnerId)	\
    ((This)->lpVtbl -> get_OwnerID(This,OwnerId))

#define IZcadPaperSpace_get_Document(This,pDocument)	\
    ((This)->lpVtbl -> get_Document(This,pDocument))

#define IZcadPaperSpace_Erase(This)	\
    ((This)->lpVtbl -> Erase(This))


#define IZcadPaperSpace_Item(This,Index,pItem)	\
    ((This)->lpVtbl -> Item(This,Index,pItem))

#define IZcadPaperSpace_get__NewEnum(This,pVal)	\
    ((This)->lpVtbl -> get__NewEnum(This,pVal))

#define IZcadPaperSpace_get_Count(This,pVal)	\
    ((This)->lpVtbl -> get_Count(This,pVal))

#define IZcadPaperSpace_get_Name(This,bstrName)	\
    ((This)->lpVtbl -> get_Name(This,bstrName))

#define IZcadPaperSpace_put_Name(This,bstrName)	\
    ((This)->lpVtbl -> put_Name(This,bstrName))

#define IZcadPaperSpace_get_Origin(This,origin)	\
    ((This)->lpVtbl -> get_Origin(This,origin))

#define IZcadPaperSpace_put_Origin(This,origin)	\
    ((This)->lpVtbl -> put_Origin(This,origin))

#define IZcadPaperSpace_AddCustomObject(This,ClassName,pObject)	\
    ((This)->lpVtbl -> AddCustomObject(This,ClassName,pObject))

#define IZcadPaperSpace_Add3DFace(This,Point1,Point2,Point3,Point4,pFace3d)	\
    ((This)->lpVtbl -> Add3DFace(This,Point1,Point2,Point3,Point4,pFace3d))

#define IZcadPaperSpace_Add3DMesh(This,M,N,PointsMatrix,pMesh3d)	\
    ((This)->lpVtbl -> Add3DMesh(This,M,N,PointsMatrix,pMesh3d))

#define IZcadPaperSpace_Add3DPoly(This,PointsArray,pPoly3d)	\
    ((This)->lpVtbl -> Add3DPoly(This,PointsArray,pPoly3d))

#define IZcadPaperSpace_AddArc(This,Center,Radius,StartAngle,EndAngle,pArc)	\
    ((This)->lpVtbl -> AddArc(This,Center,Radius,StartAngle,EndAngle,pArc))

#define IZcadPaperSpace_AddAttribute(This,Height,Mode,Prompt,InsertionPoint,Tag,Value,pAttr)	\
    ((This)->lpVtbl -> AddAttribute(This,Height,Mode,Prompt,InsertionPoint,Tag,Value,pAttr))

#define IZcadPaperSpace_AddBox(This,Origin,Length,Width,Height,pBox)	\
    ((This)->lpVtbl -> AddBox(This,Origin,Length,Width,Height,pBox))

#define IZcadPaperSpace_AddCircle(This,center,radius,pCircle)	\
    ((This)->lpVtbl -> AddCircle(This,center,radius,pCircle))

#define IZcadPaperSpace_AddCone(This,Center,BaseRadius,Height,pCone)	\
    ((This)->lpVtbl -> AddCone(This,Center,BaseRadius,Height,pCone))

#define IZcadPaperSpace_AddCylinder(This,Center,Radius,Height,pCyl)	\
    ((This)->lpVtbl -> AddCylinder(This,Center,Radius,Height,pCyl))

#define IZcadPaperSpace_AddDimAligned(This,ExtLine1Point,ExtLine2Point,TextPosition,pDim)	\
    ((This)->lpVtbl -> AddDimAligned(This,ExtLine1Point,ExtLine2Point,TextPosition,pDim))

#define IZcadPaperSpace_AddDimAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim)	\
    ((This)->lpVtbl -> AddDimAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim))

#define IZcadPaperSpace_AddDimDiametric(This,ChordPoint,FarChordPoint,LeaderLength,pDim)	\
    ((This)->lpVtbl -> AddDimDiametric(This,ChordPoint,FarChordPoint,LeaderLength,pDim))

#define IZcadPaperSpace_AddDimRotated(This,ExtLine1Point,ExtLine2Point,DimLineLocation,RotationAngle,pDim)	\
    ((This)->lpVtbl -> AddDimRotated(This,ExtLine1Point,ExtLine2Point,DimLineLocation,RotationAngle,pDim))

#define IZcadPaperSpace_AddDimOrdinate(This,DefinitionPoint,LeaderEndPoint,UseXAxis,pDim)	\
    ((This)->lpVtbl -> AddDimOrdinate(This,DefinitionPoint,LeaderEndPoint,UseXAxis,pDim))

#define IZcadPaperSpace_AddDimRadial(This,Center,ChordPoint,LeaderLength,pDim)	\
    ((This)->lpVtbl -> AddDimRadial(This,Center,ChordPoint,LeaderLength,pDim))

#define IZcadPaperSpace_AddEllipse(This,Center,MajorAxis,RadiusRatio,pEllipse)	\
    ((This)->lpVtbl -> AddEllipse(This,Center,MajorAxis,RadiusRatio,pEllipse))

#define IZcadPaperSpace_AddEllipticalCone(This,Center,MajorRadius,MinorRadius,Height,pEllipCone)	\
    ((This)->lpVtbl -> AddEllipticalCone(This,Center,MajorRadius,MinorRadius,Height,pEllipCone))

#define IZcadPaperSpace_AddEllipticalCylinder(This,Center,MajorRadius,MinorRadius,Height,pEllipCyl)	\
    ((This)->lpVtbl -> AddEllipticalCylinder(This,Center,MajorRadius,MinorRadius,Height,pEllipCyl))

#define IZcadPaperSpace_AddExtrudedSolid(This,Profile,Height,TaperAngle,pExtrSolid)	\
    ((This)->lpVtbl -> AddExtrudedSolid(This,Profile,Height,TaperAngle,pExtrSolid))

#define IZcadPaperSpace_AddExtrudedSolidAlongPath(This,Profile,Path,pExtrSolid)	\
    ((This)->lpVtbl -> AddExtrudedSolidAlongPath(This,Profile,Path,pExtrSolid))

#define IZcadPaperSpace_AddLeader(This,PointsArray,Annotation,Type,pLeader)	\
    ((This)->lpVtbl -> AddLeader(This,PointsArray,Annotation,Type,pLeader))

#define IZcadPaperSpace_AddMText(This,InsertionPoint,Width,Text,pMtext)	\
    ((This)->lpVtbl -> AddMText(This,InsertionPoint,Width,Text,pMtext))

#define IZcadPaperSpace_AddPoint(This,Point,pPoint)	\
    ((This)->lpVtbl -> AddPoint(This,Point,pPoint))

#define IZcadPaperSpace_AddLightWeightPolyline(This,VerticesList,pLWPolyline)	\
    ((This)->lpVtbl -> AddLightWeightPolyline(This,VerticesList,pLWPolyline))

#define IZcadPaperSpace_AddPolyline(This,VerticesList,pPolyline)	\
    ((This)->lpVtbl -> AddPolyline(This,VerticesList,pPolyline))

#define IZcadPaperSpace_AddRay(This,Point1,Point2,pRay)	\
    ((This)->lpVtbl -> AddRay(This,Point1,Point2,pRay))

#define IZcadPaperSpace_AddRegion(This,ObjectList,pRegions)	\
    ((This)->lpVtbl -> AddRegion(This,ObjectList,pRegions))

#define IZcadPaperSpace_AddRevolvedSolid(This,Profile,AxisPoint,AxisDir,Angle,pRevolSolid)	\
    ((This)->lpVtbl -> AddRevolvedSolid(This,Profile,AxisPoint,AxisDir,Angle,pRevolSolid))

#define IZcadPaperSpace_AddShape(This,Name,InsertionPoint,scaleFactor,rotationAngle,pShape)	\
    ((This)->lpVtbl -> AddShape(This,Name,InsertionPoint,scaleFactor,rotationAngle,pShape))

#define IZcadPaperSpace_AddSolid(This,Point1,Point2,Point3,Point4,pSolid)	\
    ((This)->lpVtbl -> AddSolid(This,Point1,Point2,Point3,Point4,pSolid))

#define IZcadPaperSpace_AddSphere(This,Center,Radius,pSphere)	\
    ((This)->lpVtbl -> AddSphere(This,Center,Radius,pSphere))

#define IZcadPaperSpace_AddSpline(This,PointsArray,StartTangent,EndTangent,pSpline)	\
    ((This)->lpVtbl -> AddSpline(This,PointsArray,StartTangent,EndTangent,pSpline))

#define IZcadPaperSpace_AddText(This,TextString,InsertionPoint,Height,pText)	\
    ((This)->lpVtbl -> AddText(This,TextString,InsertionPoint,Height,pText))

#define IZcadPaperSpace_AddTolerance(This,Text,InsertionPoint,Direction,pTolerance)	\
    ((This)->lpVtbl -> AddTolerance(This,Text,InsertionPoint,Direction,pTolerance))

#define IZcadPaperSpace_AddTorus(This,Center,TorusRadius,TubeRadius,pTorus)	\
    ((This)->lpVtbl -> AddTorus(This,Center,TorusRadius,TubeRadius,pTorus))

#define IZcadPaperSpace_AddTrace(This,PointsArray,pTrace)	\
    ((This)->lpVtbl -> AddTrace(This,PointsArray,pTrace))

#define IZcadPaperSpace_AddWedge(This,Center,Length,Width,Height,pWedge)	\
    ((This)->lpVtbl -> AddWedge(This,Center,Length,Width,Height,pWedge))

#define IZcadPaperSpace_AddXline(This,Point1,Point2,pXline)	\
    ((This)->lpVtbl -> AddXline(This,Point1,Point2,pXline))

#define IZcadPaperSpace_InsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,Password,pBlkRef)	\
    ((This)->lpVtbl -> InsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,Password,pBlkRef))

#define IZcadPaperSpace_AddHatch(This,PatternType,PatternName,Associativity,HatchObjectType,pHatch)	\
    ((This)->lpVtbl -> AddHatch(This,PatternType,PatternName,Associativity,HatchObjectType,pHatch))

#define IZcadPaperSpace_AddRaster(This,ImageFileName,InsertionPoint,ScaleFactor,RotationAngle,pRaster)	\
    ((This)->lpVtbl -> AddRaster(This,ImageFileName,InsertionPoint,ScaleFactor,RotationAngle,pRaster))

#define IZcadPaperSpace_AddLine(This,StartPoint,EndPoint,pLine)	\
    ((This)->lpVtbl -> AddLine(This,StartPoint,EndPoint,pLine))

#define IZcadPaperSpace_get_IsLayout(This,bIsLayout)	\
    ((This)->lpVtbl -> get_IsLayout(This,bIsLayout))

#define IZcadPaperSpace_get_Layout(This,pLayout)	\
    ((This)->lpVtbl -> get_Layout(This,pLayout))

#define IZcadPaperSpace_get_IsXRef(This,pIsXRref)	\
    ((This)->lpVtbl -> get_IsXRef(This,pIsXRref))

#define IZcadPaperSpace_AddMInsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,NumRows,NumColumns,RowSpacing,ColumnSpacing,Password,pMInsertBlk)	\
    ((This)->lpVtbl -> AddMInsertBlock(This,InsertionPoint,Name,Xscale,Yscale,Zscale,Rotation,NumRows,NumColumns,RowSpacing,ColumnSpacing,Password,pMInsertBlk))

#define IZcadPaperSpace_AddPolyfaceMesh(This,VertexList,FaceList,pPFMesh)	\
    ((This)->lpVtbl -> AddPolyfaceMesh(This,VertexList,FaceList,pPFMesh))

#define IZcadPaperSpace_AddMLine(This,VertexList,pMLine)	\
    ((This)->lpVtbl -> AddMLine(This,VertexList,pMLine))

#define IZcadPaperSpace_AddDim3PointAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim)	\
    ((This)->lpVtbl -> AddDim3PointAngular(This,AngleVertex,FirstEndPoint,SecondEndPoint,TextPoint,pDim))

#define IZcadPaperSpace_get_XRefDatabase(This,pDatabase)	\
    ((This)->lpVtbl -> get_XRefDatabase(This,pDatabase))

#define IZcadPaperSpace_AttachExternalReference(This,PathName,Name,InsertionPoint,Xscale,Yscale,Zscale,Rotation,bOverlay,Password,pXRef)	\
    ((This)->lpVtbl -> AttachExternalReference(This,PathName,Name,InsertionPoint,Xscale,Yscale,Zscale,Rotation,bOverlay,Password,pXRef))

#define IZcadPaperSpace_Unload(This)	\
    ((This)->lpVtbl -> Unload(This))

#define IZcadPaperSpace_Reload(This)	\
    ((This)->lpVtbl -> Reload(This))

#define IZcadPaperSpace_Bind(This,bPrefixName)	\
    ((This)->lpVtbl -> Bind(This,bPrefixName))

#define IZcadPaperSpace_Detach(This)	\
    ((This)->lpVtbl -> Detach(This))

#define IZcadPaperSpace_AddTable(This,InsertionPoint,NumRows,NumColumns,RowHeight,ColWidth,pTable)	\
    ((This)->lpVtbl -> AddTable(This,InsertionPoint,NumRows,NumColumns,RowHeight,ColWidth,pTable))

#define IZcadPaperSpace_get_Path(This,bstrName)	\
    ((This)->lpVtbl -> get_Path(This,bstrName))

#define IZcadPaperSpace_put_Path(This,bstrName)	\
    ((This)->lpVtbl -> put_Path(This,bstrName))

#define IZcadPaperSpace_get_Comments(This,bstrName)	\
    ((This)->lpVtbl -> get_Comments(This,bstrName))

#define IZcadPaperSpace_put_Comments(This,bstrName)	\
    ((This)->lpVtbl -> put_Comments(This,bstrName))

#define IZcadPaperSpace_get_Units(This,pIU)	\
    ((This)->lpVtbl -> get_Units(This,pIU))

#define IZcadPaperSpace_put_Units(This,IU)	\
    ((This)->lpVtbl -> put_Units(This,IU))

#define IZcadPaperSpace_get_Explodable(This,bExplodable)	\
    ((This)->lpVtbl -> get_Explodable(This,bExplodable))

#define IZcadPaperSpace_put_Explodable(This,bExplodable)	\
    ((This)->lpVtbl -> put_Explodable(This,bExplodable))

#define IZcadPaperSpace_get_BlockScaling(This,pBS)	\
    ((This)->lpVtbl -> get_BlockScaling(This,pBS))

#define IZcadPaperSpace_put_BlockScaling(This,BS)	\
    ((This)->lpVtbl -> put_BlockScaling(This,BS))

#define IZcadPaperSpace_get_IsDynamicBlock(This,pDynamicBlock)	\
    ((This)->lpVtbl -> get_IsDynamicBlock(This,pDynamicBlock))

#define IZcadPaperSpace_AddDimArc(This,ArcCenter,FirstEndPoint,SecondEndPoint,ArcPoint,pDim)	\
    ((This)->lpVtbl -> AddDimArc(This,ArcCenter,FirstEndPoint,SecondEndPoint,ArcPoint,pDim))

#define IZcadPaperSpace_AddDimRadialLarge(This,Center,ChordPoint,OverrideCenter,JogPoint,JogAngle,pDim)	\
    ((This)->lpVtbl -> AddDimRadialLarge(This,Center,ChordPoint,OverrideCenter,JogPoint,JogAngle,pDim))

#define IZcadPaperSpace_AddSection(This,fromPoint,toPoint,planeVector,ppSecPlane)	\
    ((This)->lpVtbl -> AddSection(This,fromPoint,toPoint,planeVector,ppSecPlane))

#define IZcadPaperSpace_AddMLeader(This,pointsArray,leaderLineIndex,pMLeader)	\
    ((This)->lpVtbl -> AddMLeader(This,pointsArray,leaderLineIndex,pMLeader))


#define IZcadPaperSpace_AddPViewport(This,center,width,height,pPViewport)	\
    ((This)->lpVtbl -> AddPViewport(This,center,width,height,pPViewport))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadPaperSpace,0xEC9231E4,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9231E4-5A17-11E7-B72E-BC5FF42AC839")
ZcadPaperSpace;
#endif




DEFINE_GUID(CLSID_ZcadFileDependency,0xEC9231C4,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9231C4-5A17-11E7-B72E-BC5FF42AC839")
ZcadFileDependency;
#endif

#ifndef __IZcadFileDependencies_INTERFACE_DEFINED__
#define __IZcadFileDependencies_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadFileDependencies,0xEC92302A,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC92302A-5A17-11E7-B72E-BC5FF42AC839")
    IZcadFileDependencies : public IDispatch
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE Item(
             VARIANT Index,
             IZcadFileDependency **pItem) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get__NewEnum(
             LPUNKNOWN *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Application(
             LPDISPATCH *pAppObj) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Count(
             long *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE CreateEntry(
             BSTR feature,
             BSTR fullFileName,
             VARIANT_BOOL affectsGraphics,
             VARIANT_BOOL noIncrement,
             long *index) = 0;

        virtual  HRESULT STDMETHODCALLTYPE IndexOf(
             BSTR feature,
             BSTR fullFileName,
             long *index) = 0;

        virtual  HRESULT STDMETHODCALLTYPE RemoveEntry(
             long index,
             VARIANT_BOOL forceRemove) = 0;

        virtual  HRESULT STDMETHODCALLTYPE UpdateEntry(
             long index) = 0;

    };

#else

    typedef struct IZcadFileDependenciesVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadFileDependencies * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadFileDependencies * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadFileDependencies * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadFileDependencies * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadFileDependencies * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadFileDependencies * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadFileDependencies * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *Item )(
            IZcadFileDependencies * This,
             VARIANT Index,
             IZcadFileDependency **pItem);

         HRESULT ( STDMETHODCALLTYPE *get__NewEnum )(
            IZcadFileDependencies * This,
             LPUNKNOWN *pVal);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadFileDependencies * This,
             LPDISPATCH *pAppObj);

         HRESULT ( STDMETHODCALLTYPE *get_Count )(
            IZcadFileDependencies * This,
             long *pVal);

         HRESULT ( STDMETHODCALLTYPE *CreateEntry )(
            IZcadFileDependencies * This,
             BSTR feature,
             BSTR fullFileName,
             VARIANT_BOOL affectsGraphics,
             VARIANT_BOOL noIncrement,
             long *index);

         HRESULT ( STDMETHODCALLTYPE *IndexOf )(
            IZcadFileDependencies * This,
             BSTR feature,
             BSTR fullFileName,
             long *index);

         HRESULT ( STDMETHODCALLTYPE *RemoveEntry )(
            IZcadFileDependencies * This,
             long index,
             VARIANT_BOOL forceRemove);

         HRESULT ( STDMETHODCALLTYPE *UpdateEntry )(
            IZcadFileDependencies * This,
             long index);

        END_INTERFACE
    } IZcadFileDependenciesVtbl;

    interface IZcadFileDependencies
    {
        CONST_VTBL struct IZcadFileDependenciesVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadFileDependencies_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadFileDependencies_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadFileDependencies_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadFileDependencies_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadFileDependencies_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadFileDependencies_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadFileDependencies_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadFileDependencies_Item(This,Index,pItem)	\
    ((This)->lpVtbl -> Item(This,Index,pItem))

#define IZcadFileDependencies_get__NewEnum(This,pVal)	\
    ((This)->lpVtbl -> get__NewEnum(This,pVal))

#define IZcadFileDependencies_get_Application(This,pAppObj)	\
    ((This)->lpVtbl -> get_Application(This,pAppObj))

#define IZcadFileDependencies_get_Count(This,pVal)	\
    ((This)->lpVtbl -> get_Count(This,pVal))

#define IZcadFileDependencies_CreateEntry(This,feature,fullFileName,affectsGraphics,noIncrement,index)	\
    ((This)->lpVtbl -> CreateEntry(This,feature,fullFileName,affectsGraphics,noIncrement,index))

#define IZcadFileDependencies_IndexOf(This,feature,fullFileName,index)	\
    ((This)->lpVtbl -> IndexOf(This,feature,fullFileName,index))

#define IZcadFileDependencies_RemoveEntry(This,index,forceRemove)	\
    ((This)->lpVtbl -> RemoveEntry(This,index,forceRemove))

#define IZcadFileDependencies_UpdateEntry(This,index)	\
    ((This)->lpVtbl -> UpdateEntry(This,index))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadFileDependencies,0xEC92315B,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC92315B-5A17-11E7-B72E-BC5FF42AC839")
ZcadFileDependencies;
#endif

#ifndef __IZcadSummaryInfo_INTERFACE_DEFINED__
#define __IZcadSummaryInfo_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadSummaryInfo,0xEC922FF0,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC922FF0-5A17-11E7-B72E-BC5FF42AC839")
    IZcadSummaryInfo : public IDispatch
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Author(
             BSTR *pAuthor) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Author(
             BSTR author) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Comments(
             BSTR *pComments) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Comments(
             BSTR author) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_HyperlinkBase(
             BSTR *pHyperlinkBase) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_HyperlinkBase(
             BSTR hyperlinkBase) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Keywords(
             BSTR *pKeywords) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Keywords(
             BSTR keywords) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LastSavedBy(
             BSTR *pLastSavedBy) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LastSavedBy(
             BSTR lastSavedBy) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_RevisionNumber(
             BSTR *pRevisionNumber) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_RevisionNumber(
             BSTR revisionNumber) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Subject(
             BSTR *pSubject) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Subject(
             BSTR subject) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Title(
             BSTR *pTitle) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Title(
             BSTR title) = 0;

        virtual  HRESULT STDMETHODCALLTYPE NumCustomInfo(
             int *index) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCustomByIndex(
             int index,
             BSTR *pKey,
             BSTR *pValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE GetCustomByKey(
             BSTR key,
             BSTR *pValue) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetCustomByIndex(
             int index,
             BSTR key,
             BSTR value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SetCustomByKey(
             BSTR key,
             BSTR value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE AddCustomInfo(
             BSTR key,
             BSTR value) = 0;

        virtual  HRESULT STDMETHODCALLTYPE RemoveCustomByIndex(
             int index) = 0;

        virtual  HRESULT STDMETHODCALLTYPE RemoveCustomByKey(
             BSTR key) = 0;

    };

#else

    typedef struct IZcadSummaryInfoVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadSummaryInfo * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadSummaryInfo * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadSummaryInfo * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadSummaryInfo * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadSummaryInfo * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadSummaryInfo * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadSummaryInfo * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Author )(
            IZcadSummaryInfo * This,
             BSTR *pAuthor);

         HRESULT ( STDMETHODCALLTYPE *put_Author )(
            IZcadSummaryInfo * This,
             BSTR author);

         HRESULT ( STDMETHODCALLTYPE *get_Comments )(
            IZcadSummaryInfo * This,
             BSTR *pComments);

         HRESULT ( STDMETHODCALLTYPE *put_Comments )(
            IZcadSummaryInfo * This,
             BSTR author);

         HRESULT ( STDMETHODCALLTYPE *get_HyperlinkBase )(
            IZcadSummaryInfo * This,
             BSTR *pHyperlinkBase);

         HRESULT ( STDMETHODCALLTYPE *put_HyperlinkBase )(
            IZcadSummaryInfo * This,
             BSTR hyperlinkBase);

         HRESULT ( STDMETHODCALLTYPE *get_Keywords )(
            IZcadSummaryInfo * This,
             BSTR *pKeywords);

         HRESULT ( STDMETHODCALLTYPE *put_Keywords )(
            IZcadSummaryInfo * This,
             BSTR keywords);

         HRESULT ( STDMETHODCALLTYPE *get_LastSavedBy )(
            IZcadSummaryInfo * This,
             BSTR *pLastSavedBy);

         HRESULT ( STDMETHODCALLTYPE *put_LastSavedBy )(
            IZcadSummaryInfo * This,
             BSTR lastSavedBy);

         HRESULT ( STDMETHODCALLTYPE *get_RevisionNumber )(
            IZcadSummaryInfo * This,
             BSTR *pRevisionNumber);

         HRESULT ( STDMETHODCALLTYPE *put_RevisionNumber )(
            IZcadSummaryInfo * This,
             BSTR revisionNumber);

         HRESULT ( STDMETHODCALLTYPE *get_Subject )(
            IZcadSummaryInfo * This,
             BSTR *pSubject);

         HRESULT ( STDMETHODCALLTYPE *put_Subject )(
            IZcadSummaryInfo * This,
             BSTR subject);

         HRESULT ( STDMETHODCALLTYPE *get_Title )(
            IZcadSummaryInfo * This,
             BSTR *pTitle);

         HRESULT ( STDMETHODCALLTYPE *put_Title )(
            IZcadSummaryInfo * This,
             BSTR title);

         HRESULT ( STDMETHODCALLTYPE *NumCustomInfo )(
            IZcadSummaryInfo * This,
             int *index);

         HRESULT ( STDMETHODCALLTYPE *GetCustomByIndex )(
            IZcadSummaryInfo * This,
             int index,
             BSTR *pKey,
             BSTR *pValue);

         HRESULT ( STDMETHODCALLTYPE *GetCustomByKey )(
            IZcadSummaryInfo * This,
             BSTR key,
             BSTR *pValue);

         HRESULT ( STDMETHODCALLTYPE *SetCustomByIndex )(
            IZcadSummaryInfo * This,
             int index,
             BSTR key,
             BSTR value);

         HRESULT ( STDMETHODCALLTYPE *SetCustomByKey )(
            IZcadSummaryInfo * This,
             BSTR key,
             BSTR value);

         HRESULT ( STDMETHODCALLTYPE *AddCustomInfo )(
            IZcadSummaryInfo * This,
             BSTR key,
             BSTR value);

         HRESULT ( STDMETHODCALLTYPE *RemoveCustomByIndex )(
            IZcadSummaryInfo * This,
             int index);

         HRESULT ( STDMETHODCALLTYPE *RemoveCustomByKey )(
            IZcadSummaryInfo * This,
             BSTR key);

        END_INTERFACE
    } IZcadSummaryInfoVtbl;

    interface IZcadSummaryInfo
    {
        CONST_VTBL struct IZcadSummaryInfoVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadSummaryInfo_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadSummaryInfo_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadSummaryInfo_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadSummaryInfo_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadSummaryInfo_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadSummaryInfo_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadSummaryInfo_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadSummaryInfo_get_Author(This,pAuthor)	\
    ((This)->lpVtbl -> get_Author(This,pAuthor))

#define IZcadSummaryInfo_put_Author(This,author)	\
    ((This)->lpVtbl -> put_Author(This,author))

#define IZcadSummaryInfo_get_Comments(This,pComments)	\
    ((This)->lpVtbl -> get_Comments(This,pComments))

#define IZcadSummaryInfo_put_Comments(This,author)	\
    ((This)->lpVtbl -> put_Comments(This,author))

#define IZcadSummaryInfo_get_HyperlinkBase(This,pHyperlinkBase)	\
    ((This)->lpVtbl -> get_HyperlinkBase(This,pHyperlinkBase))

#define IZcadSummaryInfo_put_HyperlinkBase(This,hyperlinkBase)	\
    ((This)->lpVtbl -> put_HyperlinkBase(This,hyperlinkBase))

#define IZcadSummaryInfo_get_Keywords(This,pKeywords)	\
    ((This)->lpVtbl -> get_Keywords(This,pKeywords))

#define IZcadSummaryInfo_put_Keywords(This,keywords)	\
    ((This)->lpVtbl -> put_Keywords(This,keywords))

#define IZcadSummaryInfo_get_LastSavedBy(This,pLastSavedBy)	\
    ((This)->lpVtbl -> get_LastSavedBy(This,pLastSavedBy))

#define IZcadSummaryInfo_put_LastSavedBy(This,lastSavedBy)	\
    ((This)->lpVtbl -> put_LastSavedBy(This,lastSavedBy))

#define IZcadSummaryInfo_get_RevisionNumber(This,pRevisionNumber)	\
    ((This)->lpVtbl -> get_RevisionNumber(This,pRevisionNumber))

#define IZcadSummaryInfo_put_RevisionNumber(This,revisionNumber)	\
    ((This)->lpVtbl -> put_RevisionNumber(This,revisionNumber))

#define IZcadSummaryInfo_get_Subject(This,pSubject)	\
    ((This)->lpVtbl -> get_Subject(This,pSubject))

#define IZcadSummaryInfo_put_Subject(This,subject)	\
    ((This)->lpVtbl -> put_Subject(This,subject))

#define IZcadSummaryInfo_get_Title(This,pTitle)	\
    ((This)->lpVtbl -> get_Title(This,pTitle))

#define IZcadSummaryInfo_put_Title(This,title)	\
    ((This)->lpVtbl -> put_Title(This,title))

#define IZcadSummaryInfo_NumCustomInfo(This,index)	\
    ((This)->lpVtbl -> NumCustomInfo(This,index))

#define IZcadSummaryInfo_GetCustomByIndex(This,index,pKey,pValue)	\
    ((This)->lpVtbl -> GetCustomByIndex(This,index,pKey,pValue))

#define IZcadSummaryInfo_GetCustomByKey(This,key,pValue)	\
    ((This)->lpVtbl -> GetCustomByKey(This,key,pValue))

#define IZcadSummaryInfo_SetCustomByIndex(This,index,key,value)	\
    ((This)->lpVtbl -> SetCustomByIndex(This,index,key,value))

#define IZcadSummaryInfo_SetCustomByKey(This,key,value)	\
    ((This)->lpVtbl -> SetCustomByKey(This,key,value))

#define IZcadSummaryInfo_AddCustomInfo(This,key,value)	\
    ((This)->lpVtbl -> AddCustomInfo(This,key,value))

#define IZcadSummaryInfo_RemoveCustomByIndex(This,index)	\
    ((This)->lpVtbl -> RemoveCustomByIndex(This,index))

#define IZcadSummaryInfo_RemoveCustomByKey(This,key)	\
    ((This)->lpVtbl -> RemoveCustomByKey(This,key))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadSummaryInfo,0xEC9230E6,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9230E6-5A17-11E7-B72E-BC5FF42AC839")
ZcadSummaryInfo;
#endif

#ifndef __IZcadDatabasePreferences_INTERFACE_DEFINED__
#define __IZcadDatabasePreferences_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadDatabasePreferences,0xEC923099,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923099-5A17-11E7-B72E-BC5FF42AC839")
    IZcadDatabasePreferences : public IDispatch
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Application(
             LPDISPATCH *pAppObj) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SolidFill(
             VARIANT_BOOL *Fill) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SolidFill(
             VARIANT_BOOL Fill) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_XRefEdit(
             VARIANT_BOOL *Edit) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_XRefEdit(
             VARIANT_BOOL Edit) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_XRefLayerVisibility(
             VARIANT_BOOL *XRefLayerVis) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_XRefLayerVisibility(
             VARIANT_BOOL XRefLayerVis) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_OLELaunch(
             VARIANT_BOOL *Launch) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_OLELaunch(
             VARIANT_BOOL Launch) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_AllowLongSymbolNames(
             VARIANT_BOOL *LongNames) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_AllowLongSymbolNames(
             VARIANT_BOOL LongNames) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ObjectSortBySelection(
             VARIANT_BOOL *Sort) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ObjectSortBySelection(
             VARIANT_BOOL Sort) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ObjectSortBySnap(
             VARIANT_BOOL *Sort) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ObjectSortBySnap(
             VARIANT_BOOL Sort) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ObjectSortByRedraws(
             VARIANT_BOOL *Sort) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ObjectSortByRedraws(
             VARIANT_BOOL Sort) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ObjectSortByRegens(
             VARIANT_BOOL *Sort) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ObjectSortByRegens(
             VARIANT_BOOL Sort) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ObjectSortByPlotting(
             VARIANT_BOOL *Sort) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ObjectSortByPlotting(
             VARIANT_BOOL Sort) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ObjectSortByPSOutput(
             VARIANT_BOOL *Sort) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ObjectSortByPSOutput(
             VARIANT_BOOL Sort) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ContourLinesPerSurface(
             long path) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ContourLinesPerSurface(
             long *path) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_DisplaySilhouette(
             VARIANT_BOOL path) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_DisplaySilhouette(
             VARIANT_BOOL *path) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_MaxActiveViewports(
             long path) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_MaxActiveViewports(
             long *path) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_RenderSmoothness(
             double path) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_RenderSmoothness(
             double *path) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SegmentPerPolyline(
             long path) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SegmentPerPolyline(
             long *path) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TextFrameDisplay(
             VARIANT_BOOL path) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TextFrameDisplay(
             VARIANT_BOOL *path) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LineWeight(
             ZcLineWeight path) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LineWeight(
             ZcLineWeight *path) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_LineWeightDisplay(
             VARIANT_BOOL path) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_LineWeightDisplay(
             VARIANT_BOOL *path) = 0;

    };

#else

    typedef struct IZcadDatabasePreferencesVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadDatabasePreferences * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadDatabasePreferences * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadDatabasePreferences * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadDatabasePreferences * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadDatabasePreferences * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadDatabasePreferences * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadDatabasePreferences * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZcadDatabasePreferences * This,
             LPDISPATCH *pAppObj);

         HRESULT ( STDMETHODCALLTYPE *get_SolidFill )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL *Fill);

         HRESULT ( STDMETHODCALLTYPE *put_SolidFill )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL Fill);

         HRESULT ( STDMETHODCALLTYPE *get_XRefEdit )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL *Edit);

         HRESULT ( STDMETHODCALLTYPE *put_XRefEdit )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL Edit);

         HRESULT ( STDMETHODCALLTYPE *get_XRefLayerVisibility )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL *XRefLayerVis);

         HRESULT ( STDMETHODCALLTYPE *put_XRefLayerVisibility )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL XRefLayerVis);

         HRESULT ( STDMETHODCALLTYPE *get_OLELaunch )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL *Launch);

         HRESULT ( STDMETHODCALLTYPE *put_OLELaunch )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL Launch);

         HRESULT ( STDMETHODCALLTYPE *get_AllowLongSymbolNames )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL *LongNames);

         HRESULT ( STDMETHODCALLTYPE *put_AllowLongSymbolNames )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL LongNames);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectSortBySelection )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL *Sort);

         HRESULT ( STDMETHODCALLTYPE *put_ObjectSortBySelection )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL Sort);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectSortBySnap )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL *Sort);

         HRESULT ( STDMETHODCALLTYPE *put_ObjectSortBySnap )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL Sort);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectSortByRedraws )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL *Sort);

         HRESULT ( STDMETHODCALLTYPE *put_ObjectSortByRedraws )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL Sort);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectSortByRegens )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL *Sort);

         HRESULT ( STDMETHODCALLTYPE *put_ObjectSortByRegens )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL Sort);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectSortByPlotting )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL *Sort);

         HRESULT ( STDMETHODCALLTYPE *put_ObjectSortByPlotting )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL Sort);

         HRESULT ( STDMETHODCALLTYPE *get_ObjectSortByPSOutput )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL *Sort);

         HRESULT ( STDMETHODCALLTYPE *put_ObjectSortByPSOutput )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL Sort);

         HRESULT ( STDMETHODCALLTYPE *put_ContourLinesPerSurface )(
            IZcadDatabasePreferences * This,
             long path);

         HRESULT ( STDMETHODCALLTYPE *get_ContourLinesPerSurface )(
            IZcadDatabasePreferences * This,
             long *path);

         HRESULT ( STDMETHODCALLTYPE *put_DisplaySilhouette )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL path);

         HRESULT ( STDMETHODCALLTYPE *get_DisplaySilhouette )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL *path);

         HRESULT ( STDMETHODCALLTYPE *put_MaxActiveViewports )(
            IZcadDatabasePreferences * This,
             long path);

         HRESULT ( STDMETHODCALLTYPE *get_MaxActiveViewports )(
            IZcadDatabasePreferences * This,
             long *path);

         HRESULT ( STDMETHODCALLTYPE *put_RenderSmoothness )(
            IZcadDatabasePreferences * This,
             double path);

         HRESULT ( STDMETHODCALLTYPE *get_RenderSmoothness )(
            IZcadDatabasePreferences * This,
             double *path);

         HRESULT ( STDMETHODCALLTYPE *put_SegmentPerPolyline )(
            IZcadDatabasePreferences * This,
             long path);

         HRESULT ( STDMETHODCALLTYPE *get_SegmentPerPolyline )(
            IZcadDatabasePreferences * This,
             long *path);

         HRESULT ( STDMETHODCALLTYPE *put_TextFrameDisplay )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL path);

         HRESULT ( STDMETHODCALLTYPE *get_TextFrameDisplay )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL *path);

         HRESULT ( STDMETHODCALLTYPE *put_LineWeight )(
            IZcadDatabasePreferences * This,
             ZcLineWeight path);

         HRESULT ( STDMETHODCALLTYPE *get_LineWeight )(
            IZcadDatabasePreferences * This,
             ZcLineWeight *path);

         HRESULT ( STDMETHODCALLTYPE *put_LineWeightDisplay )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL path);

         HRESULT ( STDMETHODCALLTYPE *get_LineWeightDisplay )(
            IZcadDatabasePreferences * This,
             VARIANT_BOOL *path);

        END_INTERFACE
    } IZcadDatabasePreferencesVtbl;

    interface IZcadDatabasePreferences
    {
        CONST_VTBL struct IZcadDatabasePreferencesVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadDatabasePreferences_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadDatabasePreferences_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadDatabasePreferences_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadDatabasePreferences_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadDatabasePreferences_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadDatabasePreferences_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadDatabasePreferences_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadDatabasePreferences_get_Application(This,pAppObj)	\
    ((This)->lpVtbl -> get_Application(This,pAppObj))

#define IZcadDatabasePreferences_get_SolidFill(This,Fill)	\
    ((This)->lpVtbl -> get_SolidFill(This,Fill))

#define IZcadDatabasePreferences_put_SolidFill(This,Fill)	\
    ((This)->lpVtbl -> put_SolidFill(This,Fill))

#define IZcadDatabasePreferences_get_XRefEdit(This,Edit)	\
    ((This)->lpVtbl -> get_XRefEdit(This,Edit))

#define IZcadDatabasePreferences_put_XRefEdit(This,Edit)	\
    ((This)->lpVtbl -> put_XRefEdit(This,Edit))

#define IZcadDatabasePreferences_get_XRefLayerVisibility(This,XRefLayerVis)	\
    ((This)->lpVtbl -> get_XRefLayerVisibility(This,XRefLayerVis))

#define IZcadDatabasePreferences_put_XRefLayerVisibility(This,XRefLayerVis)	\
    ((This)->lpVtbl -> put_XRefLayerVisibility(This,XRefLayerVis))

#define IZcadDatabasePreferences_get_OLELaunch(This,Launch)	\
    ((This)->lpVtbl -> get_OLELaunch(This,Launch))

#define IZcadDatabasePreferences_put_OLELaunch(This,Launch)	\
    ((This)->lpVtbl -> put_OLELaunch(This,Launch))

#define IZcadDatabasePreferences_get_AllowLongSymbolNames(This,LongNames)	\
    ((This)->lpVtbl -> get_AllowLongSymbolNames(This,LongNames))

#define IZcadDatabasePreferences_put_AllowLongSymbolNames(This,LongNames)	\
    ((This)->lpVtbl -> put_AllowLongSymbolNames(This,LongNames))

#define IZcadDatabasePreferences_get_ObjectSortBySelection(This,Sort)	\
    ((This)->lpVtbl -> get_ObjectSortBySelection(This,Sort))

#define IZcadDatabasePreferences_put_ObjectSortBySelection(This,Sort)	\
    ((This)->lpVtbl -> put_ObjectSortBySelection(This,Sort))

#define IZcadDatabasePreferences_get_ObjectSortBySnap(This,Sort)	\
    ((This)->lpVtbl -> get_ObjectSortBySnap(This,Sort))

#define IZcadDatabasePreferences_put_ObjectSortBySnap(This,Sort)	\
    ((This)->lpVtbl -> put_ObjectSortBySnap(This,Sort))

#define IZcadDatabasePreferences_get_ObjectSortByRedraws(This,Sort)	\
    ((This)->lpVtbl -> get_ObjectSortByRedraws(This,Sort))

#define IZcadDatabasePreferences_put_ObjectSortByRedraws(This,Sort)	\
    ((This)->lpVtbl -> put_ObjectSortByRedraws(This,Sort))

#define IZcadDatabasePreferences_get_ObjectSortByRegens(This,Sort)	\
    ((This)->lpVtbl -> get_ObjectSortByRegens(This,Sort))

#define IZcadDatabasePreferences_put_ObjectSortByRegens(This,Sort)	\
    ((This)->lpVtbl -> put_ObjectSortByRegens(This,Sort))

#define IZcadDatabasePreferences_get_ObjectSortByPlotting(This,Sort)	\
    ((This)->lpVtbl -> get_ObjectSortByPlotting(This,Sort))

#define IZcadDatabasePreferences_put_ObjectSortByPlotting(This,Sort)	\
    ((This)->lpVtbl -> put_ObjectSortByPlotting(This,Sort))

#define IZcadDatabasePreferences_get_ObjectSortByPSOutput(This,Sort)	\
    ((This)->lpVtbl -> get_ObjectSortByPSOutput(This,Sort))

#define IZcadDatabasePreferences_put_ObjectSortByPSOutput(This,Sort)	\
    ((This)->lpVtbl -> put_ObjectSortByPSOutput(This,Sort))

#define IZcadDatabasePreferences_put_ContourLinesPerSurface(This,path)	\
    ((This)->lpVtbl -> put_ContourLinesPerSurface(This,path))

#define IZcadDatabasePreferences_get_ContourLinesPerSurface(This,path)	\
    ((This)->lpVtbl -> get_ContourLinesPerSurface(This,path))

#define IZcadDatabasePreferences_put_DisplaySilhouette(This,path)	\
    ((This)->lpVtbl -> put_DisplaySilhouette(This,path))

#define IZcadDatabasePreferences_get_DisplaySilhouette(This,path)	\
    ((This)->lpVtbl -> get_DisplaySilhouette(This,path))

#define IZcadDatabasePreferences_put_MaxActiveViewports(This,path)	\
    ((This)->lpVtbl -> put_MaxActiveViewports(This,path))

#define IZcadDatabasePreferences_get_MaxActiveViewports(This,path)	\
    ((This)->lpVtbl -> get_MaxActiveViewports(This,path))

#define IZcadDatabasePreferences_put_RenderSmoothness(This,path)	\
    ((This)->lpVtbl -> put_RenderSmoothness(This,path))

#define IZcadDatabasePreferences_get_RenderSmoothness(This,path)	\
    ((This)->lpVtbl -> get_RenderSmoothness(This,path))

#define IZcadDatabasePreferences_put_SegmentPerPolyline(This,path)	\
    ((This)->lpVtbl -> put_SegmentPerPolyline(This,path))

#define IZcadDatabasePreferences_get_SegmentPerPolyline(This,path)	\
    ((This)->lpVtbl -> get_SegmentPerPolyline(This,path))

#define IZcadDatabasePreferences_put_TextFrameDisplay(This,path)	\
    ((This)->lpVtbl -> put_TextFrameDisplay(This,path))

#define IZcadDatabasePreferences_get_TextFrameDisplay(This,path)	\
    ((This)->lpVtbl -> get_TextFrameDisplay(This,path))

#define IZcadDatabasePreferences_put_LineWeight(This,path)	\
    ((This)->lpVtbl -> put_LineWeight(This,path))

#define IZcadDatabasePreferences_get_LineWeight(This,path)	\
    ((This)->lpVtbl -> get_LineWeight(This,path))

#define IZcadDatabasePreferences_put_LineWeightDisplay(This,path)	\
    ((This)->lpVtbl -> put_LineWeightDisplay(This,path))

#define IZcadDatabasePreferences_get_LineWeightDisplay(This,path)	\
    ((This)->lpVtbl -> get_LineWeightDisplay(This,path))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadDatabasePreferences,0xEC9231F0,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC9231F0-5A17-11E7-B72E-BC5FF42AC839")
ZcadDatabasePreferences;
#endif

DEFINE_GUID(CLSID_ZcadDatabase,0xEC92317A,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC92317A-5A17-11E7-B72E-BC5FF42AC839")
ZcadDatabase;
#endif

#ifndef __IZcadSecurityParams_INTERFACE_DEFINED__
#define __IZcadSecurityParams_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadSecurityParams,0xEC923193,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC923193-5A17-11E7-B72E-BC5FF42AC839")
    IZcadSecurityParams : public IDispatch
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE put_Action(
             long Operations) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Action(
             long *pOperations) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Password(
             BSTR Secret) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Password(
             BSTR *pSecret) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ProviderType(
             long ProvType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ProviderType(
             long *pProvType) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_ProviderName(
             BSTR ProvName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_ProviderName(
             BSTR *pProvName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Algorithm(
             long AlgId) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Algorithm(
             long *pAlgId) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_KeyLength(
             long KeyLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_KeyLength(
             long *pKeyLen) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Subject(
             BSTR CertSubject) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Subject(
             BSTR *pCertSubject) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Issuer(
             BSTR CertIssuer) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Issuer(
             BSTR *pCertIssuer) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_SerialNumber(
             BSTR SerialNum) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_SerialNumber(
             BSTR *pSerialNum) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Comment(
             BSTR Text) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Comment(
             BSTR *pText) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_TimeServer(
             BSTR TimeServerName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_TimeServer(
             BSTR *pTimeServerName) = 0;

    };

#else

    typedef struct IZcadSecurityParamsVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadSecurityParams * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadSecurityParams * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadSecurityParams * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadSecurityParams * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadSecurityParams * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadSecurityParams * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadSecurityParams * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *put_Action )(
            IZcadSecurityParams * This,
             long Operations);

         HRESULT ( STDMETHODCALLTYPE *get_Action )(
            IZcadSecurityParams * This,
             long *pOperations);

         HRESULT ( STDMETHODCALLTYPE *put_Password )(
            IZcadSecurityParams * This,
             BSTR Secret);

         HRESULT ( STDMETHODCALLTYPE *get_Password )(
            IZcadSecurityParams * This,
             BSTR *pSecret);

         HRESULT ( STDMETHODCALLTYPE *put_ProviderType )(
            IZcadSecurityParams * This,
             long ProvType);

         HRESULT ( STDMETHODCALLTYPE *get_ProviderType )(
            IZcadSecurityParams * This,
             long *pProvType);

         HRESULT ( STDMETHODCALLTYPE *put_ProviderName )(
            IZcadSecurityParams * This,
             BSTR ProvName);

         HRESULT ( STDMETHODCALLTYPE *get_ProviderName )(
            IZcadSecurityParams * This,
             BSTR *pProvName);

         HRESULT ( STDMETHODCALLTYPE *put_Algorithm )(
            IZcadSecurityParams * This,
             long AlgId);

         HRESULT ( STDMETHODCALLTYPE *get_Algorithm )(
            IZcadSecurityParams * This,
             long *pAlgId);

         HRESULT ( STDMETHODCALLTYPE *put_KeyLength )(
            IZcadSecurityParams * This,
             long KeyLen);

         HRESULT ( STDMETHODCALLTYPE *get_KeyLength )(
            IZcadSecurityParams * This,
             long *pKeyLen);

         HRESULT ( STDMETHODCALLTYPE *put_Subject )(
            IZcadSecurityParams * This,
             BSTR CertSubject);

         HRESULT ( STDMETHODCALLTYPE *get_Subject )(
            IZcadSecurityParams * This,
             BSTR *pCertSubject);

         HRESULT ( STDMETHODCALLTYPE *put_Issuer )(
            IZcadSecurityParams * This,
             BSTR CertIssuer);

         HRESULT ( STDMETHODCALLTYPE *get_Issuer )(
            IZcadSecurityParams * This,
             BSTR *pCertIssuer);

         HRESULT ( STDMETHODCALLTYPE *put_SerialNumber )(
            IZcadSecurityParams * This,
             BSTR SerialNum);

         HRESULT ( STDMETHODCALLTYPE *get_SerialNumber )(
            IZcadSecurityParams * This,
             BSTR *pSerialNum);

         HRESULT ( STDMETHODCALLTYPE *put_Comment )(
            IZcadSecurityParams * This,
             BSTR Text);

         HRESULT ( STDMETHODCALLTYPE *get_Comment )(
            IZcadSecurityParams * This,
             BSTR *pText);

         HRESULT ( STDMETHODCALLTYPE *put_TimeServer )(
            IZcadSecurityParams * This,
             BSTR TimeServerName);

         HRESULT ( STDMETHODCALLTYPE *get_TimeServer )(
            IZcadSecurityParams * This,
             BSTR *pTimeServerName);

        END_INTERFACE
    } IZcadSecurityParamsVtbl;

    interface IZcadSecurityParams
    {
        CONST_VTBL struct IZcadSecurityParamsVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadSecurityParams_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadSecurityParams_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadSecurityParams_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadSecurityParams_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadSecurityParams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadSecurityParams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadSecurityParams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadSecurityParams_put_Action(This,Operations)	\
    ((This)->lpVtbl -> put_Action(This,Operations))

#define IZcadSecurityParams_get_Action(This,pOperations)	\
    ((This)->lpVtbl -> get_Action(This,pOperations))

#define IZcadSecurityParams_put_Password(This,Secret)	\
    ((This)->lpVtbl -> put_Password(This,Secret))

#define IZcadSecurityParams_get_Password(This,pSecret)	\
    ((This)->lpVtbl -> get_Password(This,pSecret))

#define IZcadSecurityParams_put_ProviderType(This,ProvType)	\
    ((This)->lpVtbl -> put_ProviderType(This,ProvType))

#define IZcadSecurityParams_get_ProviderType(This,pProvType)	\
    ((This)->lpVtbl -> get_ProviderType(This,pProvType))

#define IZcadSecurityParams_put_ProviderName(This,ProvName)	\
    ((This)->lpVtbl -> put_ProviderName(This,ProvName))

#define IZcadSecurityParams_get_ProviderName(This,pProvName)	\
    ((This)->lpVtbl -> get_ProviderName(This,pProvName))

#define IZcadSecurityParams_put_Algorithm(This,AlgId)	\
    ((This)->lpVtbl -> put_Algorithm(This,AlgId))

#define IZcadSecurityParams_get_Algorithm(This,pAlgId)	\
    ((This)->lpVtbl -> get_Algorithm(This,pAlgId))

#define IZcadSecurityParams_put_KeyLength(This,KeyLen)	\
    ((This)->lpVtbl -> put_KeyLength(This,KeyLen))

#define IZcadSecurityParams_get_KeyLength(This,pKeyLen)	\
    ((This)->lpVtbl -> get_KeyLength(This,pKeyLen))

#define IZcadSecurityParams_put_Subject(This,CertSubject)	\
    ((This)->lpVtbl -> put_Subject(This,CertSubject))

#define IZcadSecurityParams_get_Subject(This,pCertSubject)	\
    ((This)->lpVtbl -> get_Subject(This,pCertSubject))

#define IZcadSecurityParams_put_Issuer(This,CertIssuer)	\
    ((This)->lpVtbl -> put_Issuer(This,CertIssuer))

#define IZcadSecurityParams_get_Issuer(This,pCertIssuer)	\
    ((This)->lpVtbl -> get_Issuer(This,pCertIssuer))

#define IZcadSecurityParams_put_SerialNumber(This,SerialNum)	\
    ((This)->lpVtbl -> put_SerialNumber(This,SerialNum))

#define IZcadSecurityParams_get_SerialNumber(This,pSerialNum)	\
    ((This)->lpVtbl -> get_SerialNumber(This,pSerialNum))

#define IZcadSecurityParams_put_Comment(This,Text)	\
    ((This)->lpVtbl -> put_Comment(This,Text))

#define IZcadSecurityParams_get_Comment(This,pText)	\
    ((This)->lpVtbl -> get_Comment(This,pText))

#define IZcadSecurityParams_put_TimeServer(This,TimeServerName)	\
    ((This)->lpVtbl -> put_TimeServer(This,TimeServerName))

#define IZcadSecurityParams_get_TimeServer(This,pTimeServerName)	\
    ((This)->lpVtbl -> get_TimeServer(This,pTimeServerName))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadSecurityParams,0xEC922FF4,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC922FF4-5A17-11E7-B72E-BC5FF42AC839")
ZcadSecurityParams;
#endif

#ifndef __IZcadLayerStateManager_INTERFACE_DEFINED__
#define __IZcadLayerStateManager_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZcadLayerStateManager,0xEC9230F6,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("EC9230F6-5A17-11E7-B72E-BC5FF42AC839")
    IZcadLayerStateManager : public IDispatch
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE SetDatabase(
             IZcadDatabase *iHostDb) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Mask(
             BSTR bsName,
             ZcLayerStateMask eMask) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Mask(
             BSTR bsName,
             ZcLayerStateMask *eMask) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Save(
             BSTR bsName,
             ZcLayerStateMask eMask) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Restore(
             BSTR bsName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Delete(
             BSTR bsName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Rename(
             BSTR bsName,
             BSTR bsNewName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Import(
             BSTR bsFilename) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Export(
             BSTR bsName,
             BSTR bsFilename) = 0;

    };

#else

    typedef struct IZcadLayerStateManagerVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZcadLayerStateManager * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZcadLayerStateManager * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZcadLayerStateManager * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZcadLayerStateManager * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZcadLayerStateManager * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZcadLayerStateManager * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZcadLayerStateManager * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *SetDatabase )(
            IZcadLayerStateManager * This,
             IZcadDatabase *iHostDb);

         HRESULT ( STDMETHODCALLTYPE *put_Mask )(
            IZcadLayerStateManager * This,
             BSTR bsName,
             ZcLayerStateMask eMask);

         HRESULT ( STDMETHODCALLTYPE *get_Mask )(
            IZcadLayerStateManager * This,
             BSTR bsName,
             ZcLayerStateMask *eMask);

         HRESULT ( STDMETHODCALLTYPE *Save )(
            IZcadLayerStateManager * This,
             BSTR bsName,
             ZcLayerStateMask eMask);

         HRESULT ( STDMETHODCALLTYPE *Restore )(
            IZcadLayerStateManager * This,
             BSTR bsName);

         HRESULT ( STDMETHODCALLTYPE *Delete )(
            IZcadLayerStateManager * This,
             BSTR bsName);

         HRESULT ( STDMETHODCALLTYPE *Rename )(
            IZcadLayerStateManager * This,
             BSTR bsName,
             BSTR bsNewName);

         HRESULT ( STDMETHODCALLTYPE *Import )(
            IZcadLayerStateManager * This,
             BSTR bsFilename);

         HRESULT ( STDMETHODCALLTYPE *Export )(
            IZcadLayerStateManager * This,
             BSTR bsName,
             BSTR bsFilename);

        END_INTERFACE
    } IZcadLayerStateManagerVtbl;

    interface IZcadLayerStateManager
    {
        CONST_VTBL struct IZcadLayerStateManagerVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZcadLayerStateManager_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZcadLayerStateManager_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZcadLayerStateManager_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZcadLayerStateManager_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZcadLayerStateManager_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZcadLayerStateManager_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZcadLayerStateManager_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZcadLayerStateManager_SetDatabase(This,iHostDb)	\
    ((This)->lpVtbl -> SetDatabase(This,iHostDb))

#define IZcadLayerStateManager_put_Mask(This,bsName,eMask)	\
    ((This)->lpVtbl -> put_Mask(This,bsName,eMask))

#define IZcadLayerStateManager_get_Mask(This,bsName,eMask)	\
    ((This)->lpVtbl -> get_Mask(This,bsName,eMask))

#define IZcadLayerStateManager_Save(This,bsName,eMask)	\
    ((This)->lpVtbl -> Save(This,bsName,eMask))

#define IZcadLayerStateManager_Restore(This,bsName)	\
    ((This)->lpVtbl -> Restore(This,bsName))

#define IZcadLayerStateManager_Delete(This,bsName)	\
    ((This)->lpVtbl -> Delete(This,bsName))

#define IZcadLayerStateManager_Rename(This,bsName,bsNewName)	\
    ((This)->lpVtbl -> Rename(This,bsName,bsNewName))

#define IZcadLayerStateManager_Import(This,bsFilename)	\
    ((This)->lpVtbl -> Import(This,bsFilename))

#define IZcadLayerStateManager_Export(This,bsName,bsFilename)	\
    ((This)->lpVtbl -> Export(This,bsName,bsFilename))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZcadLayerStateManager,0xEC92312F,0x5A17,0x11E7,0xB7,0x2E,0xBC,0x5F,0xF4,0x2A,0xC8,0x39);

#ifdef __cplusplus

class DECLSPEC_UUID("EC92312F-5A17-11E7-B72E-BC5FF42AC839")
ZcadLayerStateManager;
#endif

#ifndef __IZxDbDocumentEvents_INTERFACE_DEFINED__
#define __IZxDbDocumentEvents_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZxDbDocumentEvents,0x49C74794,0x57FD,0x4CAF,0xB7,0xC6,0xCC,0x4F,0x33,0x34,0xC7,0x21);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("49C74794-57FD-4CAF-B7C6-CC4F3334C721")
    IZxDbDocumentEvents : public IUnknown
    {
    public:
    };

#else

    typedef struct IZxDbDocumentEventsVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZxDbDocumentEvents * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZxDbDocumentEvents * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZxDbDocumentEvents * This);

        END_INTERFACE
    } IZxDbDocumentEventsVtbl;

    interface IZxDbDocumentEvents
    {
        CONST_VTBL struct IZxDbDocumentEventsVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZxDbDocumentEvents_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZxDbDocumentEvents_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZxDbDocumentEvents_Release(This)	\
    ((This)->lpVtbl -> Release(This))


#endif
#endif


#endif

#ifndef __IZxDbDocument_INTERFACE_DEFINED__
#define __IZxDbDocument_INTERFACE_DEFINED__

DEFINE_GUID(IID_IZxDbDocument,0x30FDAC07,0x01CB,0x4245,0x9A,0x81,0x6E,0xAE,0x0E,0x8D,0x49,0x8E);

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("30FDAC07-01CB-4245-9A81-6EAE0E8D498E")
    IZxDbDocument : public IZcadDatabase
    {
    public:
        virtual  HRESULT STDMETHODCALLTYPE get_Name(
             BSTR *pVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE put_Name(
             BSTR newVal) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Open(
             BSTR FileName,
             VARIANT Password) = 0;

        virtual  HRESULT STDMETHODCALLTYPE Save( void) = 0;

        virtual  HRESULT STDMETHODCALLTYPE SaveAs(
             BSTR FileName,
             VARIANT vSecurityParams) = 0;

        virtual  HRESULT STDMETHODCALLTYPE DxfIn(
             BSTR FileName,
             VARIANT LogFileName) = 0;

        virtual  HRESULT STDMETHODCALLTYPE DxfOut(
             BSTR FileName,
             VARIANT Precision,
             VARIANT SaveThumbnailImage) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Application(
             LPDISPATCH *pAppObj) = 0;

        virtual  HRESULT STDMETHODCALLTYPE get_Database(
             IZcadDatabase **pDatabase) = 0;

    };

#else

    typedef struct IZxDbDocumentVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            IZxDbDocument * This,
             REFIID riid,
             void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            IZxDbDocument * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            IZxDbDocument * This);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )(
            IZxDbDocument * This,
             UINT *pctinfo);

        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )(
            IZxDbDocument * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);

        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )(
            IZxDbDocument * This,
             REFIID riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);

         HRESULT ( STDMETHODCALLTYPE *Invoke )(
            IZxDbDocument * This,
             DISPID dispIdMember,
             REFIID riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);

         HRESULT ( STDMETHODCALLTYPE *get_ModelSpace )(
            IZxDbDocument * This,
             IZcadModelSpace **pMSpace);

         HRESULT ( STDMETHODCALLTYPE *get_PaperSpace )(
            IZxDbDocument * This,
             IZcadPaperSpace **pPSpace);

         HRESULT ( STDMETHODCALLTYPE *get_Blocks )(
            IZxDbDocument * This,
             IZcadBlocks **pBlocks);

         HRESULT ( STDMETHODCALLTYPE *CopyObjects )(
            IZxDbDocument * This,
             VARIANT Objects,
             VARIANT Owner,
             VARIANT *IdPairs,
             VARIANT *pNewObjects);

         HRESULT ( STDMETHODCALLTYPE *get_Groups )(
            IZxDbDocument * This,
             IZcadGroups **pGroups);

         HRESULT ( STDMETHODCALLTYPE *get_DimStyles )(
            IZxDbDocument * This,
             IZcadDimStyles **pDimStyles);

         HRESULT ( STDMETHODCALLTYPE *get_Layers )(
            IZxDbDocument * This,
             IZcadLayers **pLayers);

         HRESULT ( STDMETHODCALLTYPE *get_Linetypes )(
            IZxDbDocument * This,
             IZcadLineTypes **pLinetypes);

         HRESULT ( STDMETHODCALLTYPE *get_Dictionaries )(
            IZxDbDocument * This,
             IZcadDictionaries **pDictionaries);

         HRESULT ( STDMETHODCALLTYPE *get_RegisteredApplications )(
            IZxDbDocument * This,
             IZcadRegisteredApplications **pRegApps);

         HRESULT ( STDMETHODCALLTYPE *get_TextStyles )(
            IZxDbDocument * This,
             IZcadTextStyles **pTextStyles);

         HRESULT ( STDMETHODCALLTYPE *get_UserCoordinateSystems )(
            IZxDbDocument * This,
             IZcadUCSs **pUCSs);

         HRESULT ( STDMETHODCALLTYPE *get_Views )(
            IZxDbDocument * This,
             IZcadViews **pViews);

         HRESULT ( STDMETHODCALLTYPE *get_Viewports )(
            IZxDbDocument * This,
             IZcadViewports **pViewports);

         HRESULT ( STDMETHODCALLTYPE *get_ElevationModelSpace )(
            IZxDbDocument * This,
             double *elevation);

         HRESULT ( STDMETHODCALLTYPE *put_ElevationModelSpace )(
            IZxDbDocument * This,
             double elevation);

         HRESULT ( STDMETHODCALLTYPE *get_ElevationPaperSpace )(
            IZxDbDocument * This,
             double *elevation);

         HRESULT ( STDMETHODCALLTYPE *put_ElevationPaperSpace )(
            IZxDbDocument * This,
             double elevation);

         HRESULT ( STDMETHODCALLTYPE *get_Limits )(
            IZxDbDocument * This,
             VARIANT *limits);

         HRESULT ( STDMETHODCALLTYPE *put_Limits )(
            IZxDbDocument * This,
             VARIANT limits);

         HRESULT ( STDMETHODCALLTYPE *HandleToObject )(
            IZxDbDocument * This,
             BSTR Handle,
             IDispatch **pObj);

         HRESULT ( STDMETHODCALLTYPE *ObjectIdToObject )(
            IZxDbDocument * This,
             LONG_PTR ObjectID,
             IDispatch **pObj);

         HRESULT ( STDMETHODCALLTYPE *get_Layouts )(
            IZxDbDocument * This,
             IZcadLayouts **pLayouts);

         HRESULT ( STDMETHODCALLTYPE *get_PlotConfigurations )(
            IZxDbDocument * This,
             IZcadPlotConfigurations **pPlotConfigs);

         HRESULT ( STDMETHODCALLTYPE *get_Preferences )(
            IZxDbDocument * This,
             IZcadDatabasePreferences **pPref);

         HRESULT ( STDMETHODCALLTYPE *get_FileDependencies )(
            IZxDbDocument * This,
             IZcadFileDependencies **pFDM);

         HRESULT ( STDMETHODCALLTYPE *get_SummaryInfo )(
            IZxDbDocument * This,
             IZcadSummaryInfo **pSummaryInfo);

         HRESULT ( STDMETHODCALLTYPE *get_SectionManager )(
            IZxDbDocument * This,
             IZcadSectionManager **pSecMgr);

         HRESULT ( STDMETHODCALLTYPE *get_Materials )(
            IZxDbDocument * This,
             IZcadMaterials **pMaterials);

         HRESULT ( STDMETHODCALLTYPE *get_Name )(
            IZxDbDocument * This,
             BSTR *pVal);

         HRESULT ( STDMETHODCALLTYPE *put_Name )(
            IZxDbDocument * This,
             BSTR newVal);

         HRESULT ( STDMETHODCALLTYPE *Open )(
            IZxDbDocument * This,
             BSTR FileName,
             VARIANT Password);

         HRESULT ( STDMETHODCALLTYPE *Save )(
            IZxDbDocument * This);

         HRESULT ( STDMETHODCALLTYPE *SaveAs )(
            IZxDbDocument * This,
             BSTR FileName,
             VARIANT vSecurityParams);

         HRESULT ( STDMETHODCALLTYPE *DxfIn )(
            IZxDbDocument * This,
             BSTR FileName,
             VARIANT LogFileName);

         HRESULT ( STDMETHODCALLTYPE *DxfOut )(
            IZxDbDocument * This,
             BSTR FileName,
             VARIANT Precision,
             VARIANT SaveThumbnailImage);

         HRESULT ( STDMETHODCALLTYPE *get_Application )(
            IZxDbDocument * This,
             LPDISPATCH *pAppObj);

         HRESULT ( STDMETHODCALLTYPE *get_Database )(
            IZxDbDocument * This,
             IZcadDatabase **pDatabase);

        END_INTERFACE
    } IZxDbDocumentVtbl;

    interface IZxDbDocument
    {
        CONST_VTBL struct IZxDbDocumentVtbl *lpVtbl;
    };

#ifdef COBJMACROS

#define IZxDbDocument_QueryInterface(This,riid,ppvObject)	\
    ((This)->lpVtbl -> QueryInterface(This,riid,ppvObject))

#define IZxDbDocument_AddRef(This)	\
    ((This)->lpVtbl -> AddRef(This))

#define IZxDbDocument_Release(This)	\
    (This)->lpVtbl -> Release(This)

#define IZxDbDocument_GetTypeInfoCount(This,pctinfo)	\
    ((This)->lpVtbl -> GetTypeInfoCount(This,pctinfo))

#define IZxDbDocument_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ((This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo))

#define IZxDbDocument_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ((This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId))

#define IZxDbDocument_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ((This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr))


#define IZxDbDocument_get_ModelSpace(This,pMSpace)	\
    ((This)->lpVtbl -> get_ModelSpace(This,pMSpace))

#define IZxDbDocument_get_PaperSpace(This,pPSpace)	\
    ((This)->lpVtbl -> get_PaperSpace(This,pPSpace))

#define IZxDbDocument_get_Blocks(This,pBlocks)	\
    ((This)->lpVtbl -> get_Blocks(This,pBlocks))

#define IZxDbDocument_CopyObjects(This,Objects,Owner,IdPairs,pNewObjects)	\
    ((This)->lpVtbl -> CopyObjects(This,Objects,Owner,IdPairs,pNewObjects))

#define IZxDbDocument_get_Groups(This,pGroups)	\
    ((This)->lpVtbl -> get_Groups(This,pGroups))

#define IZxDbDocument_get_DimStyles(This,pDimStyles)	\
    ((This)->lpVtbl -> get_DimStyles(This,pDimStyles))

#define IZxDbDocument_get_Layers(This,pLayers)	\
    ((This)->lpVtbl -> get_Layers(This,pLayers))

#define IZxDbDocument_get_Linetypes(This,pLinetypes)	\
    ((This)->lpVtbl -> get_Linetypes(This,pLinetypes))

#define IZxDbDocument_get_Dictionaries(This,pDictionaries)	\
    ((This)->lpVtbl -> get_Dictionaries(This,pDictionaries))

#define IZxDbDocument_get_RegisteredApplications(This,pRegApps)	\
    ((This)->lpVtbl -> get_RegisteredApplications(This,pRegApps))

#define IZxDbDocument_get_TextStyles(This,pTextStyles)	\
    ((This)->lpVtbl -> get_TextStyles(This,pTextStyles))

#define IZxDbDocument_get_UserCoordinateSystems(This,pUCSs)	\
    ((This)->lpVtbl -> get_UserCoordinateSystems(This,pUCSs))

#define IZxDbDocument_get_Views(This,pViews)	\
    ((This)->lpVtbl -> get_Views(This,pViews))

#define IZxDbDocument_get_Viewports(This,pViewports)	\
    ((This)->lpVtbl -> get_Viewports(This,pViewports))

#define IZxDbDocument_get_ElevationModelSpace(This,elevation)	\
    ((This)->lpVtbl -> get_ElevationModelSpace(This,elevation))

#define IZxDbDocument_put_ElevationModelSpace(This,elevation)	\
    ((This)->lpVtbl -> put_ElevationModelSpace(This,elevation))

#define IZxDbDocument_get_ElevationPaperSpace(This,elevation)	\
    ((This)->lpVtbl -> get_ElevationPaperSpace(This,elevation))

#define IZxDbDocument_put_ElevationPaperSpace(This,elevation)	\
    ((This)->lpVtbl -> put_ElevationPaperSpace(This,elevation))

#define IZxDbDocument_get_Limits(This,limits)	\
    ((This)->lpVtbl -> get_Limits(This,limits))

#define IZxDbDocument_put_Limits(This,limits)	\
    ((This)->lpVtbl -> put_Limits(This,limits))

#define IZxDbDocument_HandleToObject(This,Handle,pObj)	\
    ((This)->lpVtbl -> HandleToObject(This,Handle,pObj))

#define IZxDbDocument_ObjectIdToObject(This,ObjectID,pObj)	\
    ((This)->lpVtbl -> ObjectIdToObject(This,ObjectID,pObj))

#define IZxDbDocument_get_Layouts(This,pLayouts)	\
    ((This)->lpVtbl -> get_Layouts(This,pLayouts))

#define IZxDbDocument_get_PlotConfigurations(This,pPlotConfigs)	\
    ((This)->lpVtbl -> get_PlotConfigurations(This,pPlotConfigs))

#define IZxDbDocument_get_Preferences(This,pPref)	\
    ((This)->lpVtbl -> get_Preferences(This,pPref))

#define IZxDbDocument_get_FileDependencies(This,pFDM)	\
    ((This)->lpVtbl -> get_FileDependencies(This,pFDM))

#define IZxDbDocument_get_SummaryInfo(This,pSummaryInfo)	\
    ((This)->lpVtbl -> get_SummaryInfo(This,pSummaryInfo))

#define IZxDbDocument_get_SectionManager(This,pSecMgr)	\
    ((This)->lpVtbl -> get_SectionManager(This,pSecMgr))

#define IZxDbDocument_get_Materials(This,pMaterials)	\
    ((This)->lpVtbl -> get_Materials(This,pMaterials))


#define IZxDbDocument_get_Name(This,pVal)	\
    ((This)->lpVtbl -> get_Name(This,pVal))

#define IZxDbDocument_put_Name(This,newVal)	\
    ((This)->lpVtbl -> put_Name(This,newVal))

#define IZxDbDocument_Open(This,FileName,Password)	\
    ((This)->lpVtbl -> Open(This,FileName,Password))

#define IZxDbDocument_Save(This)	\
    ((This)->lpVtbl -> Save(This))

#define IZxDbDocument_SaveAs(This,FileName,vSecurityParams)	\
    ((This)->lpVtbl -> SaveAs(This,FileName,vSecurityParams))

#define IZxDbDocument_DxfIn(This,FileName,LogFileName)	\
    ((This)->lpVtbl -> DxfIn(This,FileName,LogFileName))

#define IZxDbDocument_DxfOut(This,FileName,Precision,SaveThumbnailImage)	\
    ((This)->lpVtbl -> DxfOut(This,FileName,Precision,SaveThumbnailImage))

#define IZxDbDocument_get_Application(This,pAppObj)	\
    ((This)->lpVtbl -> get_Application(This,pAppObj))

#define IZxDbDocument_get_Database(This,pDatabase)	\
    ((This)->lpVtbl -> get_Database(This,pDatabase))

#endif
#endif


#endif

DEFINE_GUID(CLSID_ZxDbDocument,0x6EAC27C5,0x6411,0x46E5,0x82,0xDE,0x94,0x18,0xE5,0x91,0xAF,0x7D);

#ifdef __cplusplus

class DECLSPEC_UUID("6EAC27C5-6411-46E5-82DE-9418E591AF7D")
ZxDbDocument;
#endif
#endif

#ifdef __cplusplus
}
#endif

#endif



